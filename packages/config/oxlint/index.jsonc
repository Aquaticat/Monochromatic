{
  "$schema": "../../../node_modules/oxlint/configuration_schema.json",
  "categories": {
    "correctness": "error",
    "suspicious": "warn",
    "pedantic": "warn",
    "style": "warn",
  },
  "env": {
    "browser": true,
  },
  "plugins": [
    "unicorn",
    "typescript",
    "oxc",
    "import",

    // Using TSDoc, not JSDoc, but it should support TSDoc anyway. Investigate.
    // Update: Seems like oxlint doesn't support TSDoc. Disabling, enabled in Eslint.
    //    "jsdoc",

    "promise",
    "node",
    "react",
    "vitest",
  ],
  "rules": {
    //region correctness

    // import/default, import/named, import/namespace aren't enabled because TypeScript already checks for those.
    "import/default": "off",
    "import/named": "off",
    "import/namespace": "off",
    "import/group-exports": "off",

    // Anonymous default exports work great!
    "import/no-anonymous-default-export": "off",
    "typescript/triple-slash-reference": "off",

    //endregion correctness

    //region Restriction

    "eslint/no-iterator": "error",

    // logtape logs aren't unused expressions.
    "eslint/no-unused-expressions": ["error", { "allowTaggedTemplates": true }],

    "eslint/no-void": "error",
    "import/no-commonjs": "error",
    "import/unambiguous": "error",
    "promise/spec-only": "error",
    "typescript/explicit-function-return-type": "error",
    "unicorn/no-document-cookie": "error",
    "eslint/default-case": "error",
    "eslint/no-empty": "error",
    "eslint/no-empty-function": "error",
    "eslint/no-eq-null": "error",
    "eslint/no-proto": "error",
    "eslint/no-regex-spaces": "error",

    "eslint/no-var": "error",
    "eslint/unicode-bom": "error",
    "import/no-amd": "error",
    "import/no-cycle": "error",
    "import/no-webpack-loader-syntax": "error",
    "jsdoc/check-access": "error",
    "jsdoc/empty-tags": "error",
    "oxc/bad-bitwise-operator": "error",
    "oxc/no-const-enum": "error",
    "typescript/no-dynamic-delete": "error",
    "typescript/no-empty-object-type": "error",
    "typescript/no-import-type-side-effects": "error",
    "typescript/no-namespace": "error",
    "typescript/no-non-null-asserted-nullish-coalescing": "error",
    "typescript/no-var-requires": "error",
    "typescript/prefer-literal-enum-member": "error",
    "unicorn/no-abusive-eslint-disable": "error",
    "unicorn/no-length-as-slice-end": "error",
    "unicorn/no-magic-array-flat-depth": "error",
    "unicorn/prefer-modern-math-apis": "error",
    "unicorn/prefer-node-protocol": "error",
    /* TODO: Need observation for this one.
             The intention is to ban the original global number variables
             because they have different behavior with new number properties,
             and then replace the global number variables with aliases of new number properties. */
    "unicorn/prefer-number-properties": "error",
    //endregion Restriction

    //region perf

    "eslint/no-await-in-loop": "warn",
    "eslint/no-accumulating-spread": "warn",
    "eslint-plugin-unicorn/prefer-set-has": "warn",
    //endregion perf

    //region suspicious

    //endregion suspicious

    //region pedantic - Pedantic rules that are also flacky aren't needed.

    // unicorn/no-negated-condition isn't enabled because early fail is the practice
    "unicorn/no-negated-condition": "off",
    /* unicorn/no-object-as-default-parameter isn't enabled
       because sometimes obj destructuring just can't. */
    "unicorn/no-object-as-default-parameter": "off",
    // Sometimes the type-checking if-statement isn't for checking type.
    "unicorn/prefer-type-error": "off",
    "import/max-dependencies": "off",
    "eslint/max-lines": "off",
    "eslint/max-params": "off",
    "eslint/max-depth": "off",
    "eslint/max-lines-per-function": "off",
    "eslint/max-nested-callbacks": "off",
    "eslint/max-class-per-file": "off",
    // Nested ternaries work great!
    "eslint/no-nested-ternary": "off",
    // Conflicts with TypeScript function overloading.
    "eslint/no-redeclare": "off",
    // Doesn't support eslint parameter allow when intersecting.
    "typescript/ban-types": "off",
    // Sometimes a generic Function type is necessary.
    // Use `(...args: any) => any` instead.
    "typescript/no-unsafe-function-type": "error",
    //endregion pedantic

    //region style

    // Sometimes `import { a, type B } from 'module'` is needed.
    "import/consistent-type-specifier-style": "off",

    // Good traces are desired.
    "eslint/func-names": ["warn", "as-needed"],

    // TypeScript function overloads work better with function declarations.
    "eslint/func-style": "off",
    // Avoid for in loops. Use for of loops instead.
    "eslint/guard-for-in": "error",
    "eslint/no-continue": "off",
    // oxlint now supports ignoring specific values!
    "eslint/no-magic-numbers": [
      "warn",
      {
        "ignore": [1, -1, 0, 2, -2],
        "enforceConst": true,
        "detectObjects": false,
        "ignoreEnums": true,
        "ignoreNumericLiteralTypes": true,
        "ignoreTypeIndexes": true,
        "ignoreReadonlyClassProperties": true,
        "ignoreClassFieldInitialValues": true,
        "ignoreDefaultValues": true,
      },
    ],
    "eslint/no-ternary": "off",
    // Sometimes method chaining is more concise.
    "eslint/prefer-spread": "off",
    // Doesn't matter.
    "eslint/sort-imports": "off",
    "eslint/sort-keys": "off",
    // Too many false positives.
    "eslint/yoda": "off",
    // Readable enough.
    "unicorn/no-await-expression-member": "off",
    "typescript/consistent-type-definitions": [
      "error",
      "type",
    ],
    "typescript/consistent-indexed-object-style": [
      "error",
      "record",
    ],
    "typescript/no-inferrable-types": "off",
    "unicorn/catch-error-name": "off",
    "unicorn/filename-case": "off",
    // Some libraries require null.
    "unicorn/no-null": "off",
    // This won't be used exactly. Any errors should be logged anyway.
    "unicorn/prefer-optional-catch-binding": "error",
    // Always assume property/method not on called.
    "unicorn/prefer-reflect-apply": "error",
    // Because JS's default Array join separator isn't an empty string.
    "unicorn/require-array-join-separator": "error",
    //endregion style

    // Linters reporting unused vars aren't wanted.
    // The editor will report them.
    // Those vars are often left as code for syntax highlighting or testing purposes,
    // or they're part of work-in-progress.
    // The bundler will remove them in the final bundle.
    "eslint/no-unused-vars": "off",

    // Sometimes ensuring the value is just false or true is necessary
    "vitest/prefer-to-be-falsy": "off",
    "vitest/prefer-to-be-truthy": "off",
  },
  "ignorePatterns": [
    "dist",
    "node_modules",
    "logs",
    "coverage",
    "bak",
    "**/*.js",
  ],
  "overrides": [
    {
      "files": [
        "**/figma-plugin/**",
      ],
      "globals": {
        "figma": "readonly",
      },
    },
    {
      "files": [
        "**/*.{test,bench}.ts",
      ],
      "rules": {
        // Test files themselves don't require good traces.
        "eslint/func-names": [
          "warn",
          "as-needed",
        ],

        // Sometimes testing a list of numbers is necessary.
        "eslint/no-magic-numbers": "off",
        // Many functions that don't need explicit return types.
        "typescript/explicit-function-return-type": "off",
        // Sometimes testing undefined is necessary.
        "unicorn/no-useless-undefined": "off",
        // Many functions are created as needed.
        "unicorn/consistent-function-scoping": "off",
        // May need to create promises dynamically.
        "promise/avoid-new": "off",
        // May need fake async functions.
        "eslint/require-await": "off",
        // Constructing arrays
        "eslint/no-array-constructor": "off",
        // Allow using Promise keywords
        "promise/prefer-await-to-then": "off",

        // Some test files just have too many TypeScript errors.
        "typescript/ban-ts-comment": ["error", {
          "ts-ignore": "allow-with-description",
          "ts-nocheck": "allow-with-description",
          "ts-expect-error": "allow-with-description",
        }],
      },
    },
  ],
}
