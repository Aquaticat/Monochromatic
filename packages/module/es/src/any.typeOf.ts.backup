/**
 * Enhanced typeof function that provides more specific type detection than JavaScript's built-in typeof operator.
 * This function distinguishes between various object types, null, undefined, NaN, and primitive types,
 * providing more granular type information for runtime type checking and debugging.
 *
 * @param obj - Value to determine type for
 * @returns String literal representing specific type of input value
 * @example
 * ```ts
 * typeOf(null); // 'null'
 * typeOf(undefined); // 'undefined'
 * typeOf(NaN); // 'NaN'
 * typeOf(42); // 'number'
 * typeOf(true); // 'boolean'
 * typeOf(BigInt(123)); // 'bigint'
 * typeOf(Symbol('test')); // 'symbol'
 * typeOf('hello'); // 'string'
 * typeOf([1, 2, 3]); // 'array'
 * typeOf(new Date()); // 'date'
 * typeOf(new Set()); // 'set'
 * typeOf(new Map()); // 'map'
 * typeOf({}); // 'object'
 * ```
 */
export function typeOf(
  obj: any,
):
  | 'null'
  | 'undefined'
  | 'NaN'
  | 'number'
  | 'boolean'
  | 'bigint'
  | 'symbol'
  | 'string'
  | 'array'
  | 'date'
  | 'set'
  | 'map'
  | 'object'
{
  switch (true) {
    case obj === null:
      return 'null';

    case obj === undefined: {
      return 'undefined';
    }

    case typeof obj === 'number' && Number.isNaN(obj): {
      return 'NaN';
    }

    case typeof obj === 'number': {
      return 'number';
    }

    case typeof obj === 'boolean': {
      return 'boolean';
    }

    case typeof obj === 'bigint': {
      return 'bigint';
    }

    case typeof obj === 'symbol': {
      return 'symbol';
    }

    case typeof obj === 'string': {
      return 'string';
    }

    case Array.isArray(obj): {
      return 'array';
    }

    case obj instanceof Date: {
      return 'date';
    }

    case obj instanceof Set: {
      return 'set';
    }

    case obj instanceof Map: {
      return 'map';
    }

    case typeof obj === 'object' && obj !== null && obj.constructor === Object: {
      return 'object';
    }

    case typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === null: {
      return 'object';
    }

    default: {
      // Avoid primitive conversion issues by using typeof and JSON.stringify only
      const objType = typeof obj;
      let objStringified: string;
      try {
        objStringified = JSON.stringify(obj);
      } catch {
        objStringified = '[object Object]';
      }
      throw new TypeError(
        `Unrecognized obj with type "${objType}" and value ${objStringified}`,
      );
    }
  }
}
