import type { Promisable } from 'type-fest';
import type { NotPromise } from './promise.type.ts';
export declare function pipedAsync<T_0>(input: T_0): Promise<T_0>;
export declare function pipedAsync<T_0, T_1>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>): Promise<T_1>;
export declare function pipedAsync<T_0, T_1, T_2>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>): Promise<T_2>;
export declare function pipedAsync<T_0, T_1, T_2, T_3>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>): Promise<T_3>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>): Promise<T_4>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>): Promise<T_5>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>): Promise<T_6>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>, fn7: (input6: T_6) => Promisable<T_7>): Promise<T_7>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>, fn7: (input6: T_6) => Promisable<T_7>, fn8: (input7: T_7) => Promisable<T_8>): Promise<T_8>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8, T_9>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>, fn7: (input6: T_6) => Promisable<T_7>, fn8: (input7: T_7) => Promisable<T_8>, fn9: (input8: T_8) => Promisable<T_9>): Promise<T_9>;
export declare function piped<T_0>(input: T_0): T_0;
export declare function piped<T_0, T_1>(input: T_0, fn1: (input0: T_0) => T_1): T_1;
export declare function piped<T_0, T_1, T_2>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2): T_2;
export declare function piped<T_0, T_1, T_2, T_3>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3): T_3;
export declare function piped<T_0, T_1, T_2, T_3, T_4>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4): T_4;
export declare function piped<T_0, T_1, T_2, T_3, T_4, T_5>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5): T_5;
export declare function piped<T_0, T_1, T_2, T_3, T_4, T_5, T_6>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6): T_6;
export declare function piped<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6, fn7: (input6: T_6) => T_7): T_7;
export declare function piped<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6, fn7: (input6: T_6) => T_7, fn8: (input7: T_7) => T_8): T_8;
export declare function piped<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8, T_9>(input: T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6, fn7: (input6: T_6) => T_7, fn8: (input7: T_7) => T_8, fn9: (input8: T_8) => T_9): T_9;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => any>(fn0: T_fn0): T_fn0;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): (...inputs: T_inputs) => ReturnType<T_fn1>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): (...inputs: T_inputs) => Promise<ReturnType<T_fn1>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn1>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn1>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): (...inputs: T_inputs) => ReturnType<T_fn2>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): (...inputs: T_inputs) => Promise<ReturnType<T_fn2>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): (...inputs: T_inputs) => Promise<ReturnType<T_fn2>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): (...inputs: T_inputs) => Promise<ReturnType<T_fn2>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => ReturnType<T_fn3>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): (...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): Promise<(...inputs: T_inputs) => ReturnType<T_fn1>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn1>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn1>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn1>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): Promise<(...inputs: T_inputs) => ReturnType<T_fn2>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn2>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn2>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn2>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn2>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => ReturnType<T_fn3>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => NotPromise>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<ReturnType<T_fn3>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => NotPromise, T_fn3 extends (input: ReturnType<T_fn2>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => NotPromise, T_fn2 extends (input: ReturnType<T_fn1>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => NotPromise, T_fn1 extends (input: ReturnType<T_fn0>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => Promise<any>, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => Promise<any>, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => Promise<any>, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => Promise<any>>(fn0: T_fn0, fn1: T_fn1, fn2: T_fn2, fn3: T_fn3): Promise<(...inputs: T_inputs) => Promise<Awaited<ReturnType<T_fn3>>>>;
export declare function pipeAsync<T_inputs extends any[], T_fn0 extends (...inputs: T_inputs) => any, T_fn1 extends (input: Awaited<ReturnType<T_fn0>>) => any, T_fn2 extends (input: Awaited<ReturnType<T_fn1>>) => any, T_fn3 extends (input: Awaited<ReturnType<T_fn2>>) => any, T_fn4 extends (input: Awaited<ReturnType<T_fn3>>) => any, T_fn5 extends (input: Awaited<ReturnType<T_fn4>>) => any, T_fn6 extends (input: Awaited<ReturnType<T_fn5>>) => any, T_fn7 extends (input: Awaited<ReturnType<T_fn6>>) => any, T_fn8 extends (input: Awaited<ReturnType<T_fn7>>) => any, T_fn9 extends (input: Awaited<ReturnType<T_fn8>>) => any>(fn0: T_fn0, fn1?: T_fn1, fn2?: T_fn2, fn3?: T_fn3, fn4?: T_fn4, fn5?: T_fn5, fn6?: T_fn6, fn7?: T_fn7, fn8?: T_fn8, fn9?: T_fn9): Promise<(...inputs: T_inputs) => Promise<T_fn0 | Awaited<ReturnType<T_fn1>> | Awaited<ReturnType<T_fn2>> | Awaited<ReturnType<T_fn3>> | Awaited<ReturnType<T_fn4>> | Awaited<ReturnType<T_fn5>> | Awaited<ReturnType<T_fn6>> | Awaited<ReturnType<T_fn7>> | Awaited<ReturnType<T_fn8>> | Awaited<ReturnType<T_fn9>>>>;
export declare function pipe<T_inputs extends any[], T_0>(fn0: (...inputs: T_inputs) => T_0): (...inputs: T_inputs) => T_0;
export declare function pipe<T_inputs extends any[], T_0, T_1>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1): (...inputs: T_inputs) => T_1;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2): (...inputs: T_inputs) => T_2;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2, T_3>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3): (...inputs: T_inputs) => T_3;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2, T_3, T_4>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4): (...inputs: T_inputs) => T_4;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2, T_3, T_4, T_5>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5): (...inputs: T_inputs) => T_5;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2, T_3, T_4, T_5, T_6>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6): (...inputs: T_inputs) => T_6;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6, fn7: (input6: T_6) => T_7): (...inputs: T_inputs) => T_7;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6, fn7: (input6: T_6) => T_7, fn8: (input7: T_7) => T_8): (...inputs: T_inputs) => T_8;
export declare function pipe<T_inputs extends any[], T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8, T_9>(fn0: (...inputs: T_inputs) => T_0, fn1: (input0: T_0) => T_1, fn2: (input1: T_1) => T_2, fn3: (input2: T_2) => T_3, fn4: (input3: T_3) => T_4, fn5: (input4: T_4) => T_5, fn6: (input5: T_5) => T_6, fn7: (input6: T_6) => T_7, fn8: (input7: T_7) => T_8, fn9: (input8: T_8) => T_9): (...inputs: T_inputs) => T_9;
