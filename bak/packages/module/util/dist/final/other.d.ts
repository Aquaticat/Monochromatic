import type { Promisable } from 'type-fest';
export declare function pipedAsync<T_0>(input: T_0): Promise<T_0>;
export declare function pipedAsync<T_0, T_1>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>): Promise<T_1>;
export declare function pipedAsync<T_0, T_1, T_2>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>): Promise<T_2>;
export declare function pipedAsync<T_0, T_1, T_2, T_3>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>): Promise<T_3>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>): Promise<T_4>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>): Promise<T_5>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>): Promise<T_6>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>, fn7: (input6: T_6) => Promisable<T_7>): Promise<T_7>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>, fn7: (input6: T_6) => Promisable<T_7>, fn8: (input7: T_7) => Promisable<T_8>): Promise<T_8>;
export declare function pipedAsync<T_0, T_1, T_2, T_3, T_4, T_5, T_6, T_7, T_8, T_9>(input: T_0, fn1: (input0: T_0) => Promisable<T_1>, fn2: (input1: T_1) => Promisable<T_2>, fn3: (input2: T_2) => Promisable<T_3>, fn4: (input3: T_3) => Promisable<T_4>, fn5: (input4: T_4) => Promisable<T_5>, fn6: (input5: T_5) => Promisable<T_6>, fn7: (input6: T_6) => Promisable<T_7>, fn8: (input7: T_7) => Promisable<T_8>, fn9: (input8: T_8) => Promisable<T_9>): Promise<T_9>;
