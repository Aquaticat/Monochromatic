[{"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\build\\backup-path\\src\\index.ts":"1","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\build\\ensure-dependencies\\src\\index.ts":"2","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\build\\time\\src\\index.ts":"3","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\eslint\\src\\index.ts":"4","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\eslint\\vite.config.ts":"5","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\vite\\src\\index.ts":"6","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\vite\\vite.config.ts":"7","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\backend\\index.ts":"8","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\frontend\\index.ts":"9","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\iframe\\index.ts":"10","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\shared\\message.ts":"11","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.backend.ts":"12","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.frontend.ts":"13","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.iframe.ts":"14","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.constant.ts":"15","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.echo.ts":"16","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.identity.ts":"17","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.test.ts":"18","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.toExport.ts":"19","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.typeOf.ts":"20","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.of.ts":"21","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.of.unit.test.ts":"22","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.type.mapTo.ts":"23","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.type.tuple.ts":"24","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.type.withoutFirst.ts":"25","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.equal.ts":"26","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.equal.unit.test.ts":"27","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.not.ts":"28","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.not.unit.test.ts":"29","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\deprecated.testing.ts":"30","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.equal.ts":"31","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.equal.type.ts":"32","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.equal.unit.test.ts":"33","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.throw.ts":"34","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.throw.unit.test.ts":"35","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.is.ts":"36","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.is.unit.test.ts":"37","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throw.ts":"38","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throw.unit.test.ts":"39","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throws.ts":"40","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throws.unit.test.ts":"41","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.array.0to999.ts":"42","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.generator.0to999.ts":"43","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.index.ts":"44","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.promises.0to999.ts":"45","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.default.ts":"46","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.emptyPath.ts":"47","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.ensurePath.browser.test.ts":"48","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.ensurePath.ts":"49","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.fs.default.ts":"50","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.fs.node.ts":"51","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.node.ts":"52","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.default.ts":"53","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.default.unit.test.ts":"54","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.node.ts":"55","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.shared.ts":"56","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathParse.default.ts":"57","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathParse.default.unit.test.ts":"58","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathParse.node.ts":"59","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.arguments.ts":"60","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.arguments.unit.test.ts":"61","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.booleanfy.ts":"62","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.booleanfy.unit.test.ts":"63","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.curry.ts":"64","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.curry.unit.test.ts":"65","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.ensuring.ts":"66","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.ensuring.unit.test.ts":"67","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.equals.ts":"68","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.equals.unit.test.ts":"69","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.is.ts":"70","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.is.unit.test.ts":"71","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.memoize.ts":"72","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.memoize.unit.test.ts":"73","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.nary.ts":"74","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.nary.unit.test.ts":"75","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.partial.ts":"76","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.partial.unit.test.ts":"77","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.pipe.ts":"78","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.pipe.unit.test.ts":"79","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.thunk.ts":"80","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.thunk.unit.test.ts":"81","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.tryCatch.ts":"82","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.tryCatch.unit.test.ts":"83","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\index.ts":"84","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.at.ts":"85","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.at.unit.test.ts":"86","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.chunks.ts":"87","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.chunks.unit.test.ts":"88","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.entries.ts":"89","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.entries.unit.test.ts":"90","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.every.ts":"91","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.every.unit.test.ts":"92","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.everyFail.ts":"93","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.filter.ts":"94","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.filter.unit.test.ts":"95","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.is.ts":"96","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.is.unit.test.ts":"97","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.map.ts":"98","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.map.unit.test.ts":"99","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.merge.ts":"100","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.none.ts":"101","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.none.unit.test.ts":"102","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.noneFail.ts":"103","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.partition.ts":"104","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.partition.unit.test.ts":"105","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.reduce.ts":"106","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.reduce.unit.test.ts":"107","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.some.ts":"108","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.toString.ts":"109","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.trim.ts":"110","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.type.maybe.ts":"111","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterables.intersection.ts":"112","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterables.union.ts":"113","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterables.union.unit.test.ts":"114","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\logtape.default.ts":"115","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\logtape.node.ts":"116","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\logtape.shared.ts":"117","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.add.ts":"118","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.add.unit.test.ts":"119","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.is.ts":"120","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.is.unit.test.ts":"121","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.abs.ts":"122","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.int.ts":"123","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.ints.index.ts":"124","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.ints.ts":"125","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.intsTo10.index.ts":"126","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.intsTo10.ts":"127","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.nan.ts":"128","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.negative.ts":"129","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.awaits.ts":"130","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.awaits.unit.test.ts":"131","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.is.ts":"132","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.is.unit.test.ts":"133","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.type.ts":"134","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.wait.ts":"135","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.wait.unit.test.ts":"136","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promises.some.bench.ts":"137","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promises.some.ts":"138","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promises.some.unit.test.ts":"139","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\result.unwrap.ts":"140","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.capitalize.ts":"141","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.capitalize.unit.test.ts":"142","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.is.ts":"143","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.is.unit.test.ts":"144","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.limitedGetComputedCss.ts":"145","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.limitedGetComputedCss.unit.test.ts":"146","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.singleQuoted.ts":"147","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.singleQuoted.unit.test.ts":"148","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.trim.ts":"149","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.trim.unit.test.ts":"150","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.type.ts":"151","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.concat.ts":"152","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.concat.unit.test.ts":"153","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.join.ts":"154","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.join.unit.test.ts":"155","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\testLogger.index.ts":"156","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\vite.config.ts":"157","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\astro.config.ts":"158","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\Header.astro":"159","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\Post.astro":"160","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\Posts.astro":"161","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\PrettyDate.astro":"162","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\content.config.ts":"163","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\index.ts":"164","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\layouts\\Html.astro":"165","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\layouts\\_Head.astro":"166","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\index.astro":"167","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[lang]\\rss.xml.ts":"168","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[lang]\\[name].astro":"169","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[lang].astro":"170","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[name].astro":"171","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\temp.ts":"172","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.constant.unit.test.ts":"173","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.echo.unit.test.ts":"174","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.identity.unit.test.ts":"175","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.toExport.unit.test.ts":"176","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.typeOf.unit.test.ts":"177","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.when.ts":"178","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.when.unit.test.ts":"179","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\dom.redirectingTo.browser.test.ts":"180","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\dom.redirectingTo.ts":"181","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\dom.setCssFromParam.ts":"182","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.emptyPath.node.unit.test.ts":"183","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.fs.node.unit.test.ts":"184","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.ignoreExtraArgs.ts":"185","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.everyFail.unit.test.ts":"186","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.noneFail.unit.test.ts":"187","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.bunCompile.ts":"188","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.command.ts":"189","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.installVale.ts":"190","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.pnpmInstall.ts":"191","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.preparePlaywright.ts":"192","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.valeSync.ts":"193","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\result.unwrap.unit.test.ts":"194","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\vitest.browser.config.ts":"195","C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\vitest.unit.config.ts":"196"},{"size":605,"mtime":1746414384740,"results":"197","hashOfConfig":"198"},{"size":605,"mtime":1746414384740,"results":"199","hashOfConfig":"198"},{"size":39,"mtime":1746411844429,"results":"200","hashOfConfig":"198"},{"size":8920,"mtime":1750163041073,"results":"201","hashOfConfig":"198"},{"size":331,"mtime":1749811491899,"results":"202","hashOfConfig":"198"},{"size":18601,"mtime":1750052957896,"results":"203","hashOfConfig":"198"},{"size":315,"mtime":1746987834792,"results":"204","hashOfConfig":"198"},{"size":10100,"mtime":1749940309611,"results":"205","hashOfConfig":"198"},{"size":1481,"mtime":1749940111970,"results":"206","hashOfConfig":"198"},{"size":11086,"mtime":1749942484464,"results":"207","hashOfConfig":"198"},{"size":1274,"mtime":1746317615709,"results":"208","hashOfConfig":"198"},{"size":348,"mtime":1746986244631,"results":"209","hashOfConfig":"198"},{"size":350,"mtime":1746986244637,"results":"210","hashOfConfig":"198"},{"size":346,"mtime":1746986244626,"results":"211","hashOfConfig":"198"},{"size":1154,"mtime":1749971719228,"results":"212","hashOfConfig":"198"},{"size":803,"mtime":1749973675129,"results":"213","hashOfConfig":"198"},{"size":831,"mtime":1749971701174,"results":"214","hashOfConfig":"198"},{"size":8175,"mtime":1748893666865,"results":"215","hashOfConfig":"216"},{"size":4152,"mtime":1750043245324,"results":"217","hashOfConfig":"198"},{"size":2971,"mtime":1750032457524,"results":"218","hashOfConfig":"198"},{"size":3038,"mtime":1749973807896,"results":"219","hashOfConfig":"198"},{"size":2060,"mtime":1750098203641,"results":"220","hashOfConfig":"216"},{"size":1297,"mtime":1750010793921,"results":"221","hashOfConfig":"198"},{"size":1924,"mtime":1750010812534,"results":"222","hashOfConfig":"198"},{"size":11006,"mtime":1750010919879,"results":"223","hashOfConfig":"198"},{"size":19485,"mtime":1750046357988,"results":"224","hashOfConfig":"198"},{"size":13155,"mtime":1750045852836,"results":"225","hashOfConfig":"216"},{"size":923,"mtime":1750009832278,"results":"226","hashOfConfig":"198"},{"size":1246,"mtime":1747276141101,"results":"227","hashOfConfig":"216"},{"size":10762,"mtime":1749942832058,"results":"228","hashOfConfig":"198"},{"size":13760,"mtime":1750010188304,"results":"229","hashOfConfig":"198"},{"size":8165,"mtime":1750011473844,"results":"230","hashOfConfig":"198"},{"size":5841,"mtime":1748825715937,"results":"231","hashOfConfig":"216"},{"size":13138,"mtime":1750046824774,"results":"232","hashOfConfig":"198"},{"size":7028,"mtime":1750046596611,"results":"233","hashOfConfig":"216"},{"size":1316,"mtime":1750011268607,"results":"234","hashOfConfig":"198"},{"size":1927,"mtime":1747961326369,"results":"235","hashOfConfig":"216"},{"size":10436,"mtime":1750047359459,"results":"236","hashOfConfig":"198"},{"size":7661,"mtime":1750047144955,"results":"237","hashOfConfig":"216"},{"size":3298,"mtime":1750011593626,"results":"238","hashOfConfig":"198"},{"size":3800,"mtime":1747253744009,"results":"239","hashOfConfig":"216"},{"size":9165,"mtime":1750042968053,"results":"240","hashOfConfig":"198"},{"size":13163,"mtime":1750042973601,"results":"241","hashOfConfig":"198"},{"size":8699,"mtime":1750042979271,"results":"242","hashOfConfig":"198"},{"size":5688,"mtime":1750042984323,"results":"243","hashOfConfig":"198"},{"size":121,"mtime":1747948865448,"results":"244","hashOfConfig":"198"},{"size":2284,"mtime":1750049501836,"results":"245","hashOfConfig":"198"},{"size":1374,"mtime":1750013812574,"results":"246","hashOfConfig":"216"},{"size":3191,"mtime":1748026710434,"results":"247","hashOfConfig":"198"},{"size":7250,"mtime":1749944192459,"results":"248","hashOfConfig":"198"},{"size":893,"mtime":1747943789966,"results":"249","hashOfConfig":"198"},{"size":112,"mtime":1747948865433,"results":"250","hashOfConfig":"198"},{"size":1480,"mtime":1747944158777,"results":"251","hashOfConfig":"198"},{"size":2024,"mtime":1747944119442,"results":"252","hashOfConfig":"216"},{"size":46,"mtime":1747603195445,"results":"253","hashOfConfig":"198"},{"size":270,"mtime":1747944035799,"results":"254","hashOfConfig":"198"},{"size":931,"mtime":1747614180864,"results":"255","hashOfConfig":"198"},{"size":643,"mtime":1747613870050,"results":"256","hashOfConfig":"216"},{"size":48,"mtime":1747613571049,"results":"257","hashOfConfig":"198"},{"size":2738,"mtime":1749973730181,"results":"258","hashOfConfig":"198"},{"size":3755,"mtime":1747276207239,"results":"259","hashOfConfig":"216"},{"size":3484,"mtime":1749974030645,"results":"260","hashOfConfig":"198"},{"size":3606,"mtime":1747276237733,"results":"261","hashOfConfig":"216"},{"size":19362,"mtime":1749971603526,"results":"262","hashOfConfig":"198"},{"size":6407,"mtime":1747276237728,"results":"263","hashOfConfig":"216"},{"size":6575,"mtime":1750009522539,"results":"264","hashOfConfig":"198"},{"size":4435,"mtime":1749813200843,"results":"265","hashOfConfig":"216"},{"size":3729,"mtime":1750009309547,"results":"266","hashOfConfig":"198"},{"size":3775,"mtime":1747276286442,"results":"267","hashOfConfig":"216"},{"size":3419,"mtime":1750009025868,"results":"268","hashOfConfig":"198"},{"size":4201,"mtime":1750032066416,"results":"269","hashOfConfig":"216"},{"size":2171,"mtime":1750008855451,"results":"270","hashOfConfig":"198"},{"size":2559,"mtime":1747800653169,"results":"271","hashOfConfig":"216"},{"size":4729,"mtime":1750004471269,"results":"272","hashOfConfig":"198"},{"size":8238,"mtime":1748823668353,"results":"273","hashOfConfig":"216"},{"size":8563,"mtime":1750008732164,"results":"274","hashOfConfig":"198"},{"size":4007,"mtime":1748794975183,"results":"275","hashOfConfig":"216"},{"size":54539,"mtime":1750008575473,"results":"276","hashOfConfig":"198"},{"size":6341,"mtime":1747275683522,"results":"277","hashOfConfig":"216"},{"size":1357,"mtime":1749975088048,"results":"278","hashOfConfig":"198"},{"size":2291,"mtime":1749944292235,"results":"279","hashOfConfig":"216"},{"size":627,"mtime":1748898153370,"results":"280","hashOfConfig":"198"},{"size":2982,"mtime":1748883465145,"results":"281","hashOfConfig":"216"},{"size":3051,"mtime":1750040317537,"results":"282","hashOfConfig":"198"},{"size":9374,"mtime":1750004522720,"results":"283","hashOfConfig":"198"},{"size":5150,"mtime":1748904071683,"results":"284","hashOfConfig":"216"},{"size":14068,"mtime":1750004654969,"results":"285","hashOfConfig":"198"},{"size":5670,"mtime":1748745171244,"results":"286","hashOfConfig":"216"},{"size":6840,"mtime":1750004742571,"results":"287","hashOfConfig":"198"},{"size":3613,"mtime":1748735607386,"results":"288","hashOfConfig":"216"},{"size":8498,"mtime":1750004010451,"results":"289","hashOfConfig":"198"},{"size":7920,"mtime":1750039645512,"results":"290","hashOfConfig":"216"},{"size":6887,"mtime":1750010234931,"results":"291","hashOfConfig":"198"},{"size":13941,"mtime":1750004300680,"results":"292","hashOfConfig":"198"},{"size":4358,"mtime":1748735468680,"results":"293","hashOfConfig":"216"},{"size":21656,"mtime":1750010328233,"results":"294","hashOfConfig":"198"},{"size":11963,"mtime":1748904402404,"results":"295","hashOfConfig":"216"},{"size":15984,"mtime":1750010257206,"results":"296","hashOfConfig":"198"},{"size":6241,"mtime":1750039141335,"results":"297","hashOfConfig":"216"},{"size":1529,"mtime":1749944545411,"results":"298","hashOfConfig":"198"},{"size":6021,"mtime":1750010245611,"results":"299","hashOfConfig":"198"},{"size":3112,"mtime":1748734788307,"results":"300","hashOfConfig":"216"},{"size":6130,"mtime":1750010269596,"results":"301","hashOfConfig":"198"},{"size":4322,"mtime":1749953278208,"results":"302","hashOfConfig":"198"},{"size":3771,"mtime":1748735100022,"results":"303","hashOfConfig":"216"},{"size":10024,"mtime":1749953149044,"results":"304","hashOfConfig":"198"},{"size":5020,"mtime":1748734920290,"results":"305","hashOfConfig":"216"},{"size":3217,"mtime":1750004395189,"results":"306","hashOfConfig":"198"},{"size":6777,"mtime":1749973290759,"results":"307","hashOfConfig":"198"},{"size":3196,"mtime":1750010338113,"results":"308","hashOfConfig":"198"},{"size":648,"mtime":1748813610175,"results":"309","hashOfConfig":"198"},{"size":15303,"mtime":1749972922527,"results":"310","hashOfConfig":"198"},{"size":21332,"mtime":1749972879635,"results":"311","hashOfConfig":"198"},{"size":8739,"mtime":1748889436554,"results":"312","hashOfConfig":"216"},{"size":5375,"mtime":1749974704370,"results":"313","hashOfConfig":"198"},{"size":3745,"mtime":1750002449760,"results":"314","hashOfConfig":"198"},{"size":9161,"mtime":1750002189267,"results":"315","hashOfConfig":"198"},{"size":16955,"mtime":1750001587546,"results":"316","hashOfConfig":"198"},{"size":3129,"mtime":1748824797897,"results":"317","hashOfConfig":"216"},{"size":31186,"mtime":1749974383023,"results":"318","hashOfConfig":"198"},{"size":13825,"mtime":1747517986223,"results":"319","hashOfConfig":"216"},{"size":841,"mtime":1750002686838,"results":"320","hashOfConfig":"198"},{"size":6726,"mtime":1750001053894,"results":"321","hashOfConfig":"198"},{"size":1813,"mtime":1748898153371,"results":"322","hashOfConfig":"198"},{"size":35117,"mtime":1750002734600,"results":"323","hashOfConfig":"198"},{"size":941,"mtime":1724958205911,"results":"324","hashOfConfig":"198"},{"size":4652,"mtime":1750002841460,"results":"325","hashOfConfig":"198"},{"size":844,"mtime":1750002854529,"results":"326","hashOfConfig":"198"},{"size":1996,"mtime":1750010496043,"results":"327","hashOfConfig":"198"},{"size":2668,"mtime":1749973216927,"results":"328","hashOfConfig":"198"},{"size":2065,"mtime":1748733751758,"results":"329","hashOfConfig":"216"},{"size":1149,"mtime":1750010358740,"results":"330","hashOfConfig":"198"},{"size":2015,"mtime":1749945430204,"results":"331","hashOfConfig":"216"},{"size":8136,"mtime":1750010447795,"results":"332","hashOfConfig":"198"},{"size":1112,"mtime":1749971735452,"results":"333","hashOfConfig":"198"},{"size":1245,"mtime":1747959126693,"results":"334","hashOfConfig":"216"},{"size":1926,"mtime":1748898153371,"results":"335","hashOfConfig":"216"},{"size":2629,"mtime":1750001400746,"results":"336","hashOfConfig":"198"},{"size":6425,"mtime":1748734536643,"results":"337","hashOfConfig":"216"},{"size":1556,"mtime":1750025216772,"results":"338","hashOfConfig":"198"},{"size":3119,"mtime":1749973243238,"results":"339","hashOfConfig":"198"},{"size":2074,"mtime":1748826776078,"results":"340","hashOfConfig":"216"},{"size":15560,"mtime":1749999212347,"results":"341","hashOfConfig":"198"},{"size":3357,"mtime":1747518212782,"results":"342","hashOfConfig":"216"},{"size":21774,"mtime":1750010616909,"results":"343","hashOfConfig":"198"},{"size":18636,"mtime":1750031796610,"results":"344","hashOfConfig":"216"},{"size":3798,"mtime":1750010585448,"results":"345","hashOfConfig":"198"},{"size":1446,"mtime":1748040691675,"results":"346","hashOfConfig":"216"},{"size":2288,"mtime":1749953511596,"results":"347","hashOfConfig":"198"},{"size":2272,"mtime":1747518060882,"results":"348","hashOfConfig":"216"},{"size":12462,"mtime":1750003835479,"results":"349","hashOfConfig":"198"},{"size":10087,"mtime":1749972791575,"results":"350","hashOfConfig":"198"},{"size":6506,"mtime":1748826719987,"results":"351","hashOfConfig":"216"},{"size":4741,"mtime":1749973045819,"results":"352","hashOfConfig":"198"},{"size":2103,"mtime":1747254063713,"results":"353","hashOfConfig":"216"},{"size":299,"mtime":1747961022329,"results":"354","hashOfConfig":"198"},{"size":331,"mtime":1746990026470,"results":"355","hashOfConfig":"198"},{"size":4505,"mtime":1744836830251,"results":"356","hashOfConfig":"198"},{"size":4237,"mtime":1744756818360,"results":"357","hashOfConfig":"358"},{"size":2114,"mtime":1738532197449,"results":"359","hashOfConfig":"358"},{"size":586,"mtime":1738531369698,"results":"360","hashOfConfig":"358"},{"size":229,"mtime":1737300802534,"results":"361","hashOfConfig":"358"},{"size":971,"mtime":1749945762229,"results":"362","hashOfConfig":"198"},{"size":2781,"mtime":1744837058177,"results":"363","hashOfConfig":"198"},{"size":481,"mtime":1738503428897,"results":"364","hashOfConfig":"358"},{"size":527,"mtime":1748904979407,"results":"365","hashOfConfig":"358"},{"size":539,"mtime":1750165652262,"results":"366","hashOfConfig":"367"},{"size":1099,"mtime":1738534434214,"results":"368","hashOfConfig":"198"},{"size":919,"mtime":1738503196019,"results":"369","hashOfConfig":"358"},{"size":630,"mtime":1738533346337,"results":"370","hashOfConfig":"358"},{"size":565,"mtime":1738502776225,"results":"371","hashOfConfig":"358"},{"size":2607,"mtime":1744836881654,"results":"372","hashOfConfig":"198"},{"size":1658,"mtime":1750023882371,"results":"373","hashOfConfig":"216"},{"size":2144,"mtime":1750023889245,"results":"374","hashOfConfig":"216"},{"size":3513,"mtime":1750025408245,"results":"375","hashOfConfig":"216"},{"size":13023,"mtime":1750043195539,"results":"376","hashOfConfig":"216"},{"size":5752,"mtime":1750024044141,"results":"377","hashOfConfig":"216"},{"size":2654,"mtime":1749941841900,"results":"378","hashOfConfig":"198"},{"size":8380,"mtime":1750040130386,"results":"379","hashOfConfig":"216"},{"size":0,"mtime":1750040507457,"results":"380","hashOfConfig":"216"},{"size":1739,"mtime":1750009905855,"results":"381","hashOfConfig":"198"},{"size":1870,"mtime":1750009847148,"results":"382","hashOfConfig":"198"},{"size":7818,"mtime":1750050012933,"results":"383","hashOfConfig":"216"},{"size":2633,"mtime":1750035913877,"results":"384","hashOfConfig":"216"},{"size":2456,"mtime":1749944271892,"results":"385","hashOfConfig":"198"},{"size":7241,"mtime":1750037190888,"results":"386","hashOfConfig":"216"},{"size":8962,"mtime":1750039070778,"results":"387","hashOfConfig":"216"},{"size":5386,"mtime":1750106837161,"results":"388","hashOfConfig":"198"},{"size":3058,"mtime":1750162162617,"results":"389","hashOfConfig":"198"},{"size":2085,"mtime":1750056414874,"results":"390","hashOfConfig":"198"},{"size":2474,"mtime":1750054599331,"results":"391","hashOfConfig":"198"},{"size":1583,"mtime":1750056093119,"results":"392","hashOfConfig":"198"},{"size":2010,"mtime":1750055501925,"results":"393","hashOfConfig":"198"},{"size":8074,"mtime":1750025152097,"results":"394","hashOfConfig":"216"},{"size":369,"mtime":1750023419138,"results":"395","hashOfConfig":"198"},{"size":363,"mtime":1750022956011,"results":"396","hashOfConfig":"198"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},"1bgrt8d",{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","suppressedMessages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","suppressedMessages":"411","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"412","messages":"413","suppressedMessages":"414","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","suppressedMessages":"420","errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":null},{"filePath":"421","messages":"422","suppressedMessages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","suppressedMessages":"426","errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":11,"fixableWarningCount":1,"source":null},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","suppressedMessages":"432","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"436","messages":"437","suppressedMessages":"438","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"439","messages":"440","suppressedMessages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"442","messages":"443","suppressedMessages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"448","messages":"449","suppressedMessages":"450","errorCount":1,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":34,"source":null},"1uozi0g",{"filePath":"451","messages":"452","suppressedMessages":"453","errorCount":13,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":12,"fixableWarningCount":2,"source":null},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":1,"source":null},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"463","messages":"464","suppressedMessages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"466","messages":"467","suppressedMessages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"469","messages":"470","suppressedMessages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":20,"source":null},{"filePath":"472","messages":"473","suppressedMessages":"474","errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"475","messages":"476","suppressedMessages":"477","errorCount":1,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":15,"source":null},{"filePath":"478","messages":"479","suppressedMessages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"481","messages":"482","suppressedMessages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"484","messages":"485","suppressedMessages":"486","errorCount":5,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"487","messages":"488","suppressedMessages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":44,"source":null},{"filePath":"490","messages":"491","suppressedMessages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":24,"source":null},{"filePath":"493","messages":"494","suppressedMessages":"495","errorCount":33,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":33,"fixableWarningCount":0,"source":null},{"filePath":"496","messages":"497","suppressedMessages":"498","errorCount":9,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":25,"source":null},{"filePath":"499","messages":"500","suppressedMessages":"501","errorCount":3,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":8,"source":null},{"filePath":"502","messages":"503","suppressedMessages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"505","messages":"506","suppressedMessages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","suppressedMessages":"510","errorCount":4,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":1,"fixableWarningCount":24,"source":null},{"filePath":"511","messages":"512","suppressedMessages":"513","errorCount":6,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":36,"source":null},{"filePath":"514","messages":"515","suppressedMessages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"517","messages":"518","suppressedMessages":"519","errorCount":10,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":23,"source":null},{"filePath":"520","messages":"521","suppressedMessages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"523","messages":"524","suppressedMessages":"525","errorCount":8,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":6,"fixableWarningCount":18,"source":null},{"filePath":"526","messages":"527","suppressedMessages":"528","errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":3,"fixableWarningCount":6,"source":null},{"filePath":"529","messages":"530","suppressedMessages":"531","errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":2,"fixableWarningCount":2,"source":null},{"filePath":"532","messages":"533","suppressedMessages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","suppressedMessages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"538","messages":"539","suppressedMessages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":8,"source":null},{"filePath":"541","messages":"542","suppressedMessages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"544","messages":"545","suppressedMessages":"546","errorCount":7,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":6,"fixableWarningCount":11,"source":null},{"filePath":"547","messages":"548","suppressedMessages":"549","errorCount":33,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":32,"fixableWarningCount":1,"source":null},{"filePath":"550","messages":"551","suppressedMessages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","suppressedMessages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"556","messages":"557","suppressedMessages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"559","messages":"560","suppressedMessages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"562","messages":"563","suppressedMessages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"565","messages":"566","suppressedMessages":"567","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":1,"source":null},{"filePath":"568","messages":"569","suppressedMessages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"571","messages":"572","suppressedMessages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","suppressedMessages":"576","errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":4,"source":null},{"filePath":"577","messages":"578","suppressedMessages":"579","errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"580","messages":"581","suppressedMessages":"582","errorCount":9,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":8,"fixableWarningCount":4,"source":null},{"filePath":"583","messages":"584","suppressedMessages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":8,"source":null},{"filePath":"586","messages":"587","suppressedMessages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"589","messages":"590","suppressedMessages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":13,"source":null},{"filePath":"592","messages":"593","suppressedMessages":"594","errorCount":45,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":30,"fixableWarningCount":12,"source":null},{"filePath":"595","messages":"596","suppressedMessages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","suppressedMessages":"600","errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"601","messages":"602","suppressedMessages":"603","errorCount":3,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":20,"source":null},{"filePath":"604","messages":"605","suppressedMessages":"606","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"607","messages":"608","suppressedMessages":"609","errorCount":5,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":38,"source":null},{"filePath":"610","messages":"611","suppressedMessages":"612","errorCount":10,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":9,"fixableWarningCount":3,"source":null},{"filePath":"613","messages":"614","suppressedMessages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"616","messages":"617","suppressedMessages":"618","errorCount":21,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":17,"fixableWarningCount":3,"source":null},{"filePath":"619","messages":"620","suppressedMessages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":21,"source":null},{"filePath":"622","messages":"623","suppressedMessages":"624","errorCount":10,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":12,"source":null},{"filePath":"625","messages":"626","suppressedMessages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":34,"source":null},{"filePath":"628","messages":"629","suppressedMessages":"630","errorCount":109,"fatalErrorCount":0,"warningCount":95,"fixableErrorCount":0,"fixableWarningCount":90,"source":null},{"filePath":"631","messages":"632","suppressedMessages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":36,"source":null},{"filePath":"634","messages":"635","suppressedMessages":"636","errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":2,"source":null},{"filePath":"637","messages":"638","suppressedMessages":"639","errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":7,"source":null},{"filePath":"640","messages":"641","suppressedMessages":"642","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"643","messages":"644","suppressedMessages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"646","messages":"647","suppressedMessages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"649","messages":"650","suppressedMessages":"651","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"652","messages":"653","suppressedMessages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":28,"source":null},{"filePath":"655","messages":"656","suppressedMessages":"657","errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":1,"fixableWarningCount":9,"source":null},{"filePath":"658","messages":"659","suppressedMessages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"661","messages":"662","suppressedMessages":"663","errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":2,"fixableWarningCount":6,"source":null},{"filePath":"664","messages":"665","suppressedMessages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"667","messages":"668","suppressedMessages":"669","errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":4,"source":null},{"filePath":"670","messages":"671","suppressedMessages":"672","errorCount":1,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":30,"source":null},{"filePath":"673","messages":"674","suppressedMessages":"675","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"676","messages":"677","suppressedMessages":"678","errorCount":25,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":24,"fixableWarningCount":16,"source":null},{"filePath":"679","messages":"680","suppressedMessages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":34,"source":null},{"filePath":"682","messages":"683","suppressedMessages":"684","errorCount":5,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":39,"source":null},{"filePath":"685","messages":"686","suppressedMessages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":21,"source":null},{"filePath":"688","messages":"689","suppressedMessages":"690","errorCount":4,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":2,"fixableWarningCount":24,"source":null},{"filePath":"691","messages":"692","suppressedMessages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":50,"fixableErrorCount":0,"fixableWarningCount":50,"source":null},{"filePath":"694","messages":"695","suppressedMessages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"697","messages":"698","suppressedMessages":"699","errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":2,"fixableWarningCount":5,"source":null},{"filePath":"700","messages":"701","suppressedMessages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":19,"source":null},{"filePath":"703","messages":"704","suppressedMessages":"705","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"706","messages":"707","suppressedMessages":"708","errorCount":13,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":11,"fixableWarningCount":4,"source":null},{"filePath":"709","messages":"710","suppressedMessages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"712","messages":"713","suppressedMessages":"714","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"715","messages":"716","suppressedMessages":"717","errorCount":2,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":16,"source":null},{"filePath":"718","messages":"719","suppressedMessages":"720","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"721","messages":"722","suppressedMessages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"724","messages":"725","suppressedMessages":"726","errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":2,"fixableWarningCount":2,"source":null},{"filePath":"727","messages":"728","suppressedMessages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"730","messages":"731","suppressedMessages":"732","errorCount":90,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":90,"fixableWarningCount":6,"source":null},{"filePath":"733","messages":"734","suppressedMessages":"735","errorCount":180,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":180,"fixableWarningCount":8,"source":null},{"filePath":"736","messages":"737","suppressedMessages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":58,"fixableErrorCount":0,"fixableWarningCount":58,"source":null},{"filePath":"739","messages":"740","suppressedMessages":"741","errorCount":14,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":10,"fixableWarningCount":3,"source":null},{"filePath":"742","messages":"743","suppressedMessages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"745","messages":"746","suppressedMessages":"747","errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":2,"fixableWarningCount":6,"source":null},{"filePath":"748","messages":"749","suppressedMessages":"750","errorCount":5,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":2,"fixableWarningCount":24,"source":null},{"filePath":"751","messages":"752","suppressedMessages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":14,"source":null},{"filePath":"754","messages":"755","suppressedMessages":"756","errorCount":6,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":53,"source":null},{"filePath":"757","messages":"758","suppressedMessages":"759","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"760","messages":"761","suppressedMessages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"763","messages":"764","suppressedMessages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":14,"source":null},{"filePath":"766","messages":"767","suppressedMessages":"768","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"769","messages":"770","suppressedMessages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"772","messages":"773","suppressedMessages":"774","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"775","messages":"776","suppressedMessages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":null},{"filePath":"778","messages":"779","suppressedMessages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"781","messages":"782","suppressedMessages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"784","messages":"785","suppressedMessages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"787","messages":"788","suppressedMessages":"789","errorCount":1,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":14,"source":null},{"filePath":"790","messages":"791","suppressedMessages":"792","errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"793","messages":"794","suppressedMessages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":null},{"filePath":"796","messages":"797","suppressedMessages":"798","errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":null},{"filePath":"799","messages":"800","suppressedMessages":"801","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"802","messages":"803","suppressedMessages":"804","errorCount":1,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":null},{"filePath":"805","messages":"806","suppressedMessages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"808","messages":"809","suppressedMessages":"810","errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"811","messages":"812","suppressedMessages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":25,"source":null},{"filePath":"814","messages":"815","suppressedMessages":"816","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":2,"source":null},{"filePath":"817","messages":"818","suppressedMessages":"819","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":2,"source":null},{"filePath":"820","messages":"821","suppressedMessages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","suppressedMessages":"825","errorCount":5,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":22,"source":null},{"filePath":"826","messages":"827","suppressedMessages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","suppressedMessages":"831","errorCount":22,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":16,"fixableWarningCount":13,"source":null},{"filePath":"832","messages":"833","suppressedMessages":"834","errorCount":1,"fatalErrorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":64,"source":null},{"filePath":"835","messages":"836","suppressedMessages":"837","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":8,"source":null},{"filePath":"838","messages":"839","suppressedMessages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"841","messages":"842","suppressedMessages":"843","errorCount":5,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":4,"source":null},{"filePath":"844","messages":"845","suppressedMessages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"847","messages":"848","suppressedMessages":"849","errorCount":2,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":25,"source":null},{"filePath":"850","messages":"851","suppressedMessages":"852","errorCount":14,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":10,"source":null},{"filePath":"853","messages":"854","suppressedMessages":"855","errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"856","messages":"857","suppressedMessages":"858","errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":2,"fixableWarningCount":4,"source":null},{"filePath":"859","messages":"860","suppressedMessages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":14,"source":null},{"filePath":"862","messages":"863","suppressedMessages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"865","messages":"866","suppressedMessages":"867","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"868","messages":"869","suppressedMessages":"870","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"871","messages":"872","suppressedMessages":"873","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1b531gx",{"filePath":"874","messages":"875","suppressedMessages":"876","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"877","messages":"878","suppressedMessages":"879","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"880","messages":"881","suppressedMessages":"882","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"883","messages":"884","suppressedMessages":"885","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"886","messages":"887","suppressedMessages":"888","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"889","messages":"890","suppressedMessages":"891","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"892","messages":"893","suppressedMessages":"894","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"895","messages":"896","suppressedMessages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9syckb",{"filePath":"898","messages":"899","suppressedMessages":"900","errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"901","messages":"902","suppressedMessages":"903","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"904","messages":"905","suppressedMessages":"906","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"907","messages":"908","suppressedMessages":"909","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"910","messages":"911","suppressedMessages":"912","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"913","messages":"914","suppressedMessages":"915","errorCount":1,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":21,"source":null},{"filePath":"916","messages":"917","suppressedMessages":"918","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":18,"source":null},{"filePath":"919","messages":"920","suppressedMessages":"921","errorCount":4,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":null},{"filePath":"922","messages":"923","suppressedMessages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":55,"fixableErrorCount":0,"fixableWarningCount":55,"source":null},{"filePath":"925","messages":"926","suppressedMessages":"927","errorCount":1,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":15,"source":null},{"filePath":"928","messages":"929","suppressedMessages":"930","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"931","messages":"932","suppressedMessages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":null},{"filePath":"934","messages":"935","suppressedMessages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"937","messages":"938","suppressedMessages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"940","messages":"941","suppressedMessages":"942","errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":1,"fixableWarningCount":1,"source":null},{"filePath":"943","messages":"944","suppressedMessages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":62,"fixableErrorCount":0,"fixableWarningCount":62,"source":null},{"filePath":"946","messages":"947","suppressedMessages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"949","messages":"950","suppressedMessages":"951","errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":5,"fixableWarningCount":2,"source":null},{"filePath":"952","messages":"953","suppressedMessages":"954","errorCount":1,"fatalErrorCount":0,"warningCount":47,"fixableErrorCount":1,"fixableWarningCount":45,"source":null},{"filePath":"955","messages":"956","suppressedMessages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":55,"fixableErrorCount":0,"fixableWarningCount":55,"source":null},{"filePath":"958","messages":"959","suppressedMessages":"960","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"961","messages":"962","suppressedMessages":"963","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":null},{"filePath":"964","messages":"965","suppressedMessages":"966","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"967","messages":"968","suppressedMessages":"969","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"970","messages":"971","suppressedMessages":"972","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"973","messages":"974","suppressedMessages":"975","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":null},{"filePath":"976","messages":"977","suppressedMessages":"978","errorCount":3,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":39,"source":null},{"filePath":"979","messages":"980","suppressedMessages":"981","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},{"filePath":"982","messages":"983","suppressedMessages":"984","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":null},"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\build\\backup-path\\src\\index.ts",["985","986"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\build\\ensure-dependencies\\src\\index.ts",["987","988"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\build\\time\\src\\index.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\eslint\\src\\index.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\eslint\\vite.config.ts",["989"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\vite\\src\\index.ts",["990","991","992","993","994","995","996"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\config\\vite\\vite.config.ts",["997"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\backend\\index.ts",["998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\frontend\\index.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\iframe\\index.ts",["1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\shared\\message.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.backend.ts",["1033"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.frontend.ts",["1034"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.iframe.ts",["1035"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.constant.ts",["1036","1037"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.echo.ts",["1038","1039","1040"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.identity.ts",["1041","1042"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.test.ts",["1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.toExport.ts",["1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.typeOf.ts",["1094","1095","1096","1097","1098","1099"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.of.ts",["1100","1101","1102","1103","1104"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.of.unit.test.ts",["1105","1106","1107","1108"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.type.mapTo.ts",["1109","1110","1111","1112"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.type.tuple.ts",["1113","1114"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\array.type.withoutFirst.ts",["1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.equal.ts",["1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.equal.unit.test.ts",["1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.not.ts",["1163","1164"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\boolean.not.unit.test.ts",["1165"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\deprecated.testing.ts",["1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.equal.ts",["1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.equal.type.ts",["1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.equal.unit.test.ts",["1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.throw.ts",["1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.assert.throw.unit.test.ts",["1312","1313","1314","1315","1316","1317","1318","1319","1320","1321","1322"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.is.ts",["1323","1324"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.is.unit.test.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throw.ts",["1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349","1350","1351","1352"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throw.unit.test.ts",["1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throws.ts",["1395"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\error.throws.unit.test.ts",["1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.array.0to999.ts",["1429","1430"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.generator.0to999.ts",["1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.index.ts",["1457","1458","1459","1460","1461","1462","1463","1464","1465"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fixture.promises.0to999.ts",["1466","1467","1468","1469"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.default.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.emptyPath.ts",["1470","1471","1472","1473"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.ensurePath.browser.test.ts",["1474","1475","1476","1477","1478","1479","1480","1481"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.ensurePath.ts",["1482","1483","1484"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.fs.default.ts",["1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499","1500","1501","1502"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.fs.node.ts",["1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.node.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.default.ts",["1537"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.default.unit.test.ts",["1538"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.node.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathJoin.shared.ts",["1539","1540"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathParse.default.ts",["1541","1542","1543"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathParse.default.unit.test.ts",["1544"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.pathParse.node.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.arguments.ts",["1545","1546","1547","1548","1549","1550","1551","1552"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.arguments.unit.test.ts",["1553","1554","1555","1556"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.booleanfy.ts",["1557","1558","1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.booleanfy.unit.test.ts",["1570","1571","1572","1573","1574","1575","1576","1577"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.curry.ts",["1578","1579","1580"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.curry.unit.test.ts",["1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.ensuring.ts",["1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615","1616","1617","1618","1619","1620","1621","1622","1623","1624","1625","1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.ensuring.unit.test.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.equals.ts",["1656","1657","1658","1659","1660","1661","1662","1663"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.equals.unit.test.ts",["1664","1665","1666","1667","1668","1669","1670","1671","1672","1673","1674","1675","1676","1677","1678","1679","1680","1681","1682","1683","1684","1685","1686"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.is.ts",["1687","1688","1689","1690","1691","1692","1693"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.is.unit.test.ts",["1694","1695","1696","1697","1698","1699","1700","1701","1702","1703","1704","1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716","1717","1718","1719","1720","1721","1722","1723","1724","1725","1726","1727","1728","1729","1730","1731","1732","1733","1734","1735","1736"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.memoize.ts",["1737","1738","1739","1740","1741","1742","1743","1744","1745","1746","1747","1748","1749"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.memoize.unit.test.ts",["1750","1751","1752","1753","1754","1755","1756","1757"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.nary.ts",["1758","1759","1760","1761","1762","1763","1764","1765","1766","1767","1768","1769","1770","1771","1772","1773","1774","1775","1776","1777","1778","1779","1780","1781"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.nary.unit.test.ts",["1782","1783","1784","1785","1786","1787","1788","1789","1790","1791","1792","1793","1794","1795","1796","1797","1798","1799","1800","1801","1802"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.partial.ts",["1803","1804","1805","1806","1807","1808","1809","1810","1811","1812","1813","1814","1815","1816","1817","1818","1819","1820","1821","1822","1823","1824","1825"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.partial.unit.test.ts",["1826","1827","1828","1829","1830","1831","1832","1833","1834","1835","1836","1837","1838","1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849","1850","1851","1852","1853","1854","1855","1856","1857","1858","1859"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.pipe.ts",["1860","1861","1862","1863","1864","1865","1866","1867","1868","1869","1870","1871","1872","1873","1874","1875","1876","1877","1878","1879","1880","1881","1882","1883","1884","1885","1886","1887","1888","1889","1890","1891","1892","1893","1894","1895","1896","1897","1898","1899","1900","1901","1902","1903","1904","1905","1906","1907","1908","1909","1910","1911","1912","1913","1914","1915","1916","1917","1918","1919","1920","1921","1922","1923","1924","1925","1926","1927","1928","1929","1930","1931","1932","1933","1934","1935","1936","1937","1938","1939","1940","1941","1942","1943","1944","1945","1946","1947","1948","1949","1950","1951","1952","1953","1954","1955","1956","1957","1958","1959","1960","1961","1962","1963","1964","1965","1966","1967","1968","1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036","2037","2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061","2062","2063"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.pipe.unit.test.ts",["2064","2065","2066","2067","2068","2069","2070","2071","2072","2073","2074","2075","2076","2077","2078","2079","2080","2081","2082","2083","2084","2085","2086","2087","2088","2089","2090","2091","2092","2093","2094","2095","2096","2097","2098","2099"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.thunk.ts",["2100","2101","2102","2103","2104","2105"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.thunk.unit.test.ts",["2106","2107","2108","2109","2110","2111","2112","2113","2114","2115"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.tryCatch.ts",["2116","2117","2118"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.tryCatch.unit.test.ts",["2119","2120","2121","2122","2123","2124","2125","2126","2127","2128","2129","2130","2131","2132","2133","2134"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\index.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.at.ts",["2135","2136","2137","2138","2139","2140","2141"],["2142","2143","2144","2145","2146"],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.at.unit.test.ts",["2147","2148","2149","2150","2151","2152","2153","2154","2155","2156","2157","2158","2159","2160","2161","2162","2163","2164","2165","2166","2167","2168","2169","2170","2171","2172","2173","2174"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.chunks.ts",["2175","2176","2177","2178","2179","2180","2181","2182","2183","2184"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.chunks.unit.test.ts",["2185","2186","2187","2188"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.entries.ts",["2189","2190","2191","2192","2193","2194","2195","2196"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.entries.unit.test.ts",["2197","2198","2199","2200"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.every.ts",["2201","2202","2203","2204","2205","2206","2207"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.every.unit.test.ts",["2208","2209","2210","2211","2212","2213","2214","2215","2216","2217","2218","2219","2220","2221","2222","2223","2224","2225","2226","2227","2228","2229","2230","2231","2232","2233","2234","2235","2236","2237","2238"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.everyFail.ts",["2239","2240","2241","2242","2243"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.filter.ts",["2244","2245","2246","2247","2248","2249","2250","2251","2252","2253","2254","2255","2256","2257","2258","2259","2260","2261","2262","2263","2264","2265","2266","2267","2268","2269","2270","2271","2272","2273","2274","2275","2276","2277","2278","2279","2280","2281","2282","2283","2284","2285","2286","2287","2288"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.filter.unit.test.ts",["2289","2290","2291","2292","2293","2294","2295","2296","2297","2298","2299","2300","2301","2302","2303","2304","2305","2306","2307","2308","2309","2310","2311","2312","2313","2314","2315","2316","2317","2318","2319","2320","2321","2322"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.is.ts",["2323","2324","2325","2326","2327","2328","2329","2330","2331","2332","2333","2334","2335","2336","2337","2338","2339","2340","2341","2342","2343","2344","2345","2346","2347","2348","2349","2350","2351","2352","2353","2354","2355","2356","2357","2358","2359","2360","2361","2362","2363","2364","2365","2366"],["2367","2368"],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.is.unit.test.ts",["2369","2370","2371","2372","2373","2374","2375","2376","2377","2378","2379","2380","2381","2382","2383","2384","2385","2386","2387","2388","2389","2390"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.map.ts",["2391","2392","2393","2394","2395","2396","2397","2398","2399","2400","2401","2402","2403","2404","2405","2406","2407","2408","2409","2410","2411","2412","2413","2414","2415","2416","2417","2418"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.map.unit.test.ts",["2419","2420","2421","2422","2423","2424","2425","2426","2427","2428","2429","2430","2431","2432","2433","2434","2435","2436","2437","2438","2439","2440","2441","2442","2443","2444","2445","2446","2447","2448","2449","2450","2451","2452","2453","2454","2455","2456","2457","2458","2459","2460","2461","2462","2463","2464","2465","2466","2467","2468"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.merge.ts",["2469","2470"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.none.ts",["2471","2472","2473","2474","2475","2476","2477","2478"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.none.unit.test.ts",["2479","2480","2481","2482","2483","2484","2485","2486","2487","2488","2489","2490","2491","2492","2493","2494","2495","2496","2497"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.noneFail.ts",["2498","2499","2500","2501","2502"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.partition.ts",["2503","2504","2505","2506","2507","2508","2509","2510","2511","2512","2513","2514","2515","2516","2517","2518","2519"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.partition.unit.test.ts",["2520"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.reduce.ts",["2521","2522","2523","2524","2525","2526","2527"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.reduce.unit.test.ts",["2528","2529","2530","2531","2532","2533","2534","2535","2536","2537","2538","2539","2540","2541","2542","2543","2544","2545"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.some.ts",["2546","2547","2548","2549","2550"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.toString.ts",["2551","2552","2553","2554"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.trim.ts",["2555","2556","2557","2558","2559","2560"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.type.maybe.ts",["2561"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterables.intersection.ts",["2562","2563","2564","2565","2566","2567","2568","2569","2570","2571","2572","2573","2574","2575","2576","2577","2578","2579","2580","2581","2582","2583","2584","2585","2586","2587","2588","2589","2590","2591","2592","2593","2594","2595","2596","2597","2598","2599","2600","2601","2602","2603","2604","2605","2606","2607","2608","2609","2610","2611","2612","2613","2614","2615","2616","2617","2618","2619","2620","2621","2622","2623","2624","2625","2626","2627","2628","2629","2630","2631","2632","2633","2634","2635","2636","2637","2638","2639","2640","2641","2642","2643","2644","2645","2646","2647","2648","2649","2650","2651","2652","2653","2654","2655","2656","2657"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterables.union.ts",["2658","2659","2660","2661","2662","2663","2664","2665","2666","2667","2668","2669","2670","2671","2672","2673","2674","2675","2676","2677","2678","2679","2680","2681","2682","2683","2684","2685","2686","2687","2688","2689","2690","2691","2692","2693","2694","2695","2696","2697","2698","2699","2700","2701","2702","2703","2704","2705","2706","2707","2708","2709","2710","2711","2712","2713","2714","2715","2716","2717","2718","2719","2720","2721","2722","2723","2724","2725","2726","2727","2728","2729","2730","2731","2732","2733","2734","2735","2736","2737","2738","2739","2740","2741","2742","2743","2744","2745","2746","2747","2748","2749","2750","2751","2752","2753","2754","2755","2756","2757","2758","2759","2760","2761","2762","2763","2764","2765","2766","2767","2768","2769","2770","2771","2772","2773","2774","2775","2776","2777","2778","2779","2780","2781","2782","2783","2784","2785","2786","2787","2788","2789","2790","2791","2792","2793","2794","2795","2796","2797","2798","2799","2800","2801","2802","2803","2804","2805","2806","2807","2808","2809","2810","2811","2812","2813","2814","2815","2816","2817","2818","2819","2820","2821","2822","2823","2824","2825","2826","2827","2828","2829","2830","2831","2832","2833","2834","2835","2836","2837","2838","2839","2840","2841","2842","2843","2844","2845"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterables.union.unit.test.ts",["2846","2847","2848","2849","2850","2851","2852","2853","2854","2855","2856","2857","2858","2859","2860","2861","2862","2863","2864","2865","2866","2867","2868","2869","2870","2871","2872","2873","2874","2875","2876","2877","2878","2879","2880","2881","2882","2883","2884","2885","2886","2887","2888","2889","2890","2891","2892","2893","2894","2895","2896","2897","2898","2899","2900","2901","2902","2903"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\logtape.default.ts",["2904","2905","2906","2907","2908","2909","2910","2911","2912","2913","2914","2915","2916","2917","2918","2919","2920"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\logtape.node.ts",["2921","2922","2923","2924"],["2925"],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\logtape.shared.ts",["2926","2927","2928","2929","2930","2931","2932","2933"],["2934","2935"],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.add.ts",["2936","2937","2938","2939","2940","2941","2942","2943","2944","2945","2946","2947","2948","2949","2950","2951","2952","2953","2954","2955","2956","2957","2958","2959","2960","2961","2962","2963","2964"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.add.unit.test.ts",["2965","2966","2967","2968","2969","2970","2971","2972","2973","2974","2975","2976","2977","2978"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.is.ts",["2979","2980","2981","2982","2983","2984","2985","2986","2987","2988","2989","2990","2991","2992","2993","2994","2995","2996","2997","2998","2999","3000","3001","3002","3003","3004","3005","3006","3007","3008","3009","3010","3011","3012","3013","3014","3015","3016","3017","3018","3019","3020","3021","3022","3023","3024","3025","3026","3027","3028","3029","3030","3031","3032","3033","3034","3035","3036","3037"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.is.unit.test.ts",["3038","3039","3040"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.abs.ts",["3041","3042"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.int.ts",["3043","3044","3045","3046","3047","3048","3049","3050","3051","3052","3053","3054","3055","3056"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.ints.index.ts",["3057","3058"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.ints.ts",["3059","3060"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.intsTo10.index.ts",["3061"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.intsTo10.ts",["3062","3063","3064","3065","3066","3067","3068"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.nan.ts",["3069"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\numeric.type.negative.ts",["3070","3071"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.awaits.ts",["3072","3073"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.awaits.unit.test.ts",["3074","3075","3076","3077","3078","3079","3080","3081","3082","3083","3084","3085","3086","3087","3088"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.is.ts",["3089","3090","3091","3092"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.is.unit.test.ts",["3093","3094","3095","3096","3097","3098","3099"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.type.ts",["3100","3101","3102","3103","3104","3105","3106","3107"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.wait.ts",["3108","3109"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promise.wait.unit.test.ts",["3110","3111","3112","3113","3114","3115","3116","3117","3118","3119","3120"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promises.some.bench.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promises.some.ts",["3121","3122","3123","3124"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\promises.some.unit.test.ts",["3125","3126","3127","3128","3129","3130","3131","3132","3133","3134","3135","3136","3137","3138","3139","3140","3141","3142","3143","3144","3145","3146","3147","3148","3149","3150","3151","3152"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\result.unwrap.ts",["3153","3154","3155"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.capitalize.ts",["3156","3157","3158"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.capitalize.unit.test.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.is.ts",["3159","3160","3161","3162","3163","3164","3165","3166","3167","3168","3169","3170","3171","3172","3173","3174","3175","3176","3177","3178","3179","3180","3181","3182","3183","3184","3185"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.is.unit.test.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.limitedGetComputedCss.ts",["3186","3187","3188","3189","3190","3191","3192","3193","3194","3195","3196","3197","3198","3199","3200","3201","3202","3203","3204","3205","3206","3207","3208","3209","3210","3211","3212","3213","3214","3215","3216","3217","3218","3219","3220"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.limitedGetComputedCss.unit.test.ts",["3221","3222","3223","3224","3225","3226","3227","3228","3229","3230","3231","3232","3233","3234","3235","3236","3237","3238","3239","3240","3241","3242","3243","3244","3245","3246","3247","3248","3249","3250","3251","3252","3253","3254","3255","3256","3257","3258","3259","3260","3261","3262","3263","3264","3265","3266","3267","3268","3269","3270","3271","3272","3273","3274","3275","3276","3277","3278","3279","3280","3281","3282","3283","3284","3285"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.singleQuoted.ts",["3286","3287","3288","3289","3290","3291","3292","3293"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.singleQuoted.unit.test.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.trim.ts",["3294","3295","3296","3297","3298","3299","3300","3301","3302"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.trim.unit.test.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\string.type.ts",["3303","3304","3305","3306","3307","3308","3309","3310","3311","3312","3313","3314","3315","3316","3317","3318","3319","3320","3321","3322","3323","3324","3325","3326","3327","3328","3329"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.concat.ts",["3330","3331","3332","3333","3334","3335","3336","3337","3338","3339","3340","3341","3342","3343","3344","3345","3346","3347","3348","3349","3350","3351","3352","3353","3354","3355"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.concat.unit.test.ts",["3356","3357","3358","3359","3360","3361","3362","3363","3364"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.join.ts",["3365","3366","3367","3368","3369","3370"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\strings.join.unit.test.ts",["3371","3372","3373","3374","3375","3376","3377","3378","3379","3380","3381","3382","3383","3384"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\testLogger.index.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\vite.config.ts",["3385","3386"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\astro.config.ts",["3387","3388","3389","3390","3391","3392"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\Header.astro",["3393"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\Post.astro",["3394"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\Posts.astro",["3395"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\components\\PrettyDate.astro",["3396"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\content.config.ts",["3397"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\index.ts",["3398"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\layouts\\Html.astro",["3399"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\layouts\\_Head.astro",["3400"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\index.astro",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[lang]\\rss.xml.ts",["3401","3402","3403","3404","3405","3406","3407","3408","3409","3410","3411"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[lang]\\[name].astro",["3412"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[lang].astro",["3413"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\pages\\[name].astro",["3414"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src\\temp.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.constant.unit.test.ts",["3415","3416","3417","3418","3419","3420","3421","3422","3423","3424","3425","3426","3427","3428","3429","3430","3431","3432","3433","3434","3435","3436"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.echo.unit.test.ts",["3437","3438","3439","3440","3441","3442","3443","3444","3445","3446","3447","3448","3449","3450","3451","3452","3453","3454"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.identity.unit.test.ts",["3455","3456","3457","3458","3459","3460","3461","3462","3463","3464","3465","3466","3467","3468"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.toExport.unit.test.ts",["3469","3470","3471","3472","3473","3474","3475","3476","3477","3478","3479","3480","3481","3482","3483","3484","3485","3486","3487","3488","3489","3490","3491","3492","3493","3494","3495","3496","3497","3498","3499","3500","3501","3502","3503","3504","3505","3506","3507","3508","3509","3510","3511","3512","3513","3514","3515","3516","3517","3518","3519","3520","3521","3522","3523"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.typeOf.unit.test.ts",["3524","3525","3526","3527","3528","3529","3530","3531","3532","3533","3534","3535","3536","3537","3538","3539"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.when.ts",["3540","3541","3542","3543","3544"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\any.when.unit.test.ts",["3545","3546","3547","3548","3549","3550","3551","3552","3553","3554"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\dom.redirectingTo.browser.test.ts",[],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\dom.redirectingTo.ts",["3555","3556"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\dom.setCssFromParam.ts",["3557","3558","3559","3560","3561"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.emptyPath.node.unit.test.ts",["3562","3563","3564","3565","3566","3567","3568","3569","3570","3571","3572","3573","3574","3575","3576","3577","3578","3579","3580","3581","3582","3583","3584","3585","3586","3587","3588","3589","3590","3591","3592","3593","3594","3595","3596","3597","3598","3599","3600","3601","3602","3603","3604","3605","3606","3607","3608","3609","3610","3611","3612","3613","3614","3615","3616","3617","3618","3619","3620","3621","3622","3623"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\fs.fs.node.unit.test.ts",["3624"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\function.ignoreExtraArgs.ts",["3625","3626","3627","3628","3629","3630","3631","3632","3633","3634"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.everyFail.unit.test.ts",["3635","3636","3637","3638","3639","3640","3641","3642","3643","3644","3645","3646","3647","3648","3649","3650","3651","3652","3653","3654","3655","3656","3657","3658","3659","3660","3661","3662","3663","3664","3665","3666","3667","3668","3669","3670","3671","3672","3673","3674","3675","3676","3677","3678","3679","3680","3681","3682"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\iterable.noneFail.unit.test.ts",["3683","3684","3685","3686","3687","3688","3689","3690","3691","3692","3693","3694","3695","3696","3697","3698","3699","3700","3701","3702","3703","3704","3705","3706","3707","3708","3709","3710","3711","3712","3713","3714","3715","3716","3717","3718","3719","3720","3721","3722","3723","3724","3725","3726","3727","3728","3729","3730","3731","3732","3733","3734","3735","3736","3737"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.bunCompile.ts",["3738","3739"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.command.ts",["3740","3741","3742","3743"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.installVale.ts",["3744","3745","3746","3747"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.pnpmInstall.ts",["3748","3749","3750","3751","3752","3753","3754","3755","3756","3757"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.preparePlaywright.ts",["3758","3759","3760","3761","3762","3763","3764","3765"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\moon.valeSync.ts",["3766","3767","3768","3769","3770"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src\\result.unwrap.unit.test.ts",["3771","3772","3773","3774","3775","3776","3777","3778","3779","3780","3781","3782","3783","3784","3785","3786","3787","3788","3789","3790","3791","3792","3793","3794","3795","3796","3797","3798","3799","3800","3801","3802","3803","3804","3805","3806","3807","3808","3809","3810","3811","3812"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\vitest.browser.config.ts",["3813"],[],"C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\vitest.unit.config.ts",["3814"],[],{"ruleId":"3815","severity":2,"message":"3816","line":11,"column":49,"nodeType":"3817","messageId":"3818","endLine":11,"endColumn":56,"fix":"3819"},{"ruleId":"3815","severity":2,"message":"3820","line":11,"column":57,"nodeType":"3817","messageId":"3818","endLine":11,"endColumn":60,"fix":"3821"},{"ruleId":"3815","severity":2,"message":"3816","line":11,"column":49,"nodeType":"3817","messageId":"3818","endLine":11,"endColumn":56,"fix":"3822"},{"ruleId":"3815","severity":2,"message":"3820","line":11,"column":57,"nodeType":"3817","messageId":"3818","endLine":11,"endColumn":60,"fix":"3823"},{"ruleId":"3824","severity":2,"message":"3825","line":7,"column":19,"nodeType":"3826","messageId":"3827","endLine":7,"endColumn":58,"fix":"3828"},{"ruleId":"3829","severity":1,"message":"3830","line":298,"column":1,"nodeType":"3831","endLine":310,"endColumn":4,"fix":"3832"},{"ruleId":"3833","severity":1,"message":"3834","line":298,"column":1,"nodeType":"3831","endLine":310,"endColumn":4},{"ruleId":"3835","severity":1,"message":"3836","line":299,"column":1,"nodeType":"3831","endLine":299,"endColumn":1,"fix":"3837"},{"ruleId":"3838","severity":1,"message":"3839","line":357,"column":17,"nodeType":"3840","messageId":"3841","endLine":358,"endColumn":1,"fix":"3842"},{"ruleId":"3843","severity":2,"message":"3844","line":367,"column":31,"nodeType":"3817","messageId":"3845","endLine":367,"endColumn":35},{"ruleId":"3829","severity":1,"message":"3830","line":389,"column":1,"nodeType":"3831","endLine":389,"endColumn":7,"fix":"3846"},{"ruleId":"3833","severity":1,"message":"3834","line":389,"column":1,"nodeType":"3831","endLine":389,"endColumn":7},{"ruleId":"3824","severity":2,"message":"3825","line":7,"column":19,"nodeType":"3826","messageId":"3827","endLine":7,"endColumn":58,"fix":"3847"},{"ruleId":"3848","severity":2,"message":"3849","line":16,"column":8,"nodeType":"3850","messageId":"3851","endLine":16,"endColumn":53},{"ruleId":"3852","severity":2,"message":"3853","line":62,"column":48,"nodeType":"3817","messageId":"3854","endLine":62,"endColumn":60},{"ruleId":"3855","severity":2,"message":"3856","line":62,"column":74,"nodeType":"3817","messageId":"3857","endLine":62,"endColumn":79},{"ruleId":"3852","severity":2,"message":"3858","line":62,"column":74,"nodeType":"3817","messageId":"3854","endLine":62,"endColumn":79},{"ruleId":"3859","severity":2,"message":"3860","line":91,"column":43,"nodeType":"3861","messageId":"3862","endLine":91,"endColumn":64,"suggestions":"3863"},{"ruleId":"3859","severity":2,"message":"3860","line":102,"column":51,"nodeType":"3861","messageId":"3862","endLine":102,"endColumn":72,"suggestions":"3864"},{"ruleId":"3859","severity":2,"message":"3860","line":117,"column":18,"nodeType":"3861","messageId":"3862","endLine":117,"endColumn":31,"suggestions":"3865"},{"ruleId":"3859","severity":2,"message":"3860","line":149,"column":18,"nodeType":"3861","messageId":"3862","endLine":149,"endColumn":40,"suggestions":"3866"},{"ruleId":"3859","severity":2,"message":"3860","line":162,"column":12,"nodeType":"3861","messageId":"3862","endLine":162,"endColumn":30,"suggestions":"3867"},{"ruleId":"3868","severity":2,"message":"3869","line":185,"column":5,"nodeType":"3817","messageId":"3870","endLine":185,"endColumn":65,"fix":"3871"},{"ruleId":"3868","severity":2,"message":"3872","line":186,"column":5,"nodeType":"3817","messageId":"3870","endLine":186,"endColumn":30,"fix":"3873"},{"ruleId":"3868","severity":2,"message":"3874","line":187,"column":5,"nodeType":"3817","messageId":"3870","endLine":187,"endColumn":28,"fix":"3875"},{"ruleId":"3868","severity":2,"message":"3876","line":188,"column":5,"nodeType":"3817","messageId":"3870","endLine":188,"endColumn":32,"fix":"3877"},{"ruleId":"3868","severity":2,"message":"3878","line":189,"column":5,"nodeType":"3817","messageId":"3870","endLine":189,"endColumn":28,"fix":"3879"},{"ruleId":"3815","severity":2,"message":"3880","line":212,"column":27,"nodeType":"3817","messageId":"3818","endLine":212,"endColumn":43,"fix":"3881"},{"ruleId":"3815","severity":2,"message":"3882","line":233,"column":7,"nodeType":"3817","messageId":"3818","endLine":233,"endColumn":30,"fix":"3883"},{"ruleId":"3815","severity":2,"message":"3884","line":241,"column":24,"nodeType":"3817","messageId":"3818","endLine":241,"endColumn":45,"fix":"3885"},{"ruleId":"3843","severity":2,"message":"3886","line":327,"column":17,"nodeType":"3817","messageId":"3845","endLine":327,"endColumn":23},{"ruleId":"3887","severity":2,"message":"3888","line":335,"column":3,"nodeType":"3889","messageId":"3890","endLine":335,"endColumn":10,"suggestions":"3891"},{"ruleId":"3815","severity":2,"message":"3892","line":16,"column":7,"nodeType":"3817","messageId":"3818","endLine":16,"endColumn":17,"fix":"3893"},{"ruleId":"3815","severity":2,"message":"3884","line":18,"column":3,"nodeType":"3817","messageId":"3818","endLine":18,"endColumn":24,"fix":"3894"},{"ruleId":"3895","severity":2,"message":"3896","line":44,"column":27,"nodeType":"3817","messageId":"3897","endLine":44,"endColumn":33,"fix":"3898"},{"ruleId":"3895","severity":2,"message":"3896","line":87,"column":27,"nodeType":"3817","messageId":"3897","endLine":87,"endColumn":33,"fix":"3899"},{"ruleId":"3895","severity":2,"message":"3896","line":121,"column":27,"nodeType":"3817","messageId":"3897","endLine":121,"endColumn":33,"fix":"3900"},{"ruleId":null,"message":"3901","line":133,"column":7,"severity":1,"nodeType":null,"fix":"3902"},{"ruleId":"3895","severity":2,"message":"3896","line":155,"column":27,"nodeType":"3817","messageId":"3897","endLine":155,"endColumn":33,"fix":"3903"},{"ruleId":"3895","severity":2,"message":"3896","line":202,"column":27,"nodeType":"3817","messageId":"3897","endLine":202,"endColumn":33,"fix":"3904"},{"ruleId":"3815","severity":2,"message":"3905","line":248,"column":7,"nodeType":"3817","messageId":"3818","endLine":248,"endColumn":29,"fix":"3906"},{"ruleId":"3815","severity":2,"message":"3884","line":253,"column":9,"nodeType":"3817","messageId":"3818","endLine":253,"endColumn":15,"fix":"3907"},{"ruleId":"3815","severity":2,"message":"3908","line":311,"column":12,"nodeType":"3817","messageId":"3818","endLine":311,"endColumn":13,"fix":"3909"},{"ruleId":"3910","severity":2,"message":"3911","line":355,"column":51,"nodeType":"3861","messageId":"3912","endLine":355,"endColumn":65},{"ruleId":"3843","severity":2,"message":"3913","line":355,"column":62,"nodeType":"3817","messageId":"3845","endLine":355,"endColumn":65},{"ruleId":"3815","severity":2,"message":"3908","line":366,"column":12,"nodeType":"3817","messageId":"3818","endLine":366,"endColumn":13,"fix":"3914"},{"ruleId":"3910","severity":2,"message":"3915","line":377,"column":21,"nodeType":"3861","messageId":"3912","endLine":377,"endColumn":31},{"ruleId":"3916","severity":2,"message":"3917","line":379,"column":36,"nodeType":"3817","messageId":"3918","endLine":379,"endColumn":50},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"3919"},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"3920"},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"3921"},{"ruleId":"3922","severity":1,"message":"3923","line":7,"column":1,"nodeType":"3831","endLine":7,"endColumn":1,"fix":"3924"},{"ruleId":"3922","severity":1,"message":"3925","line":11,"column":1,"nodeType":"3831","endLine":11,"endColumn":1,"fix":"3926"},{"ruleId":"3927","severity":1,"message":"3928","line":1,"column":1,"nodeType":"3831","endLine":23,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"3929"},{"ruleId":"3922","severity":1,"message":"3925","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"3930"},{"ruleId":"3922","severity":1,"message":"3923","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"3931"},{"ruleId":"3922","severity":1,"message":"3925","line":10,"column":1,"nodeType":"3831","endLine":10,"endColumn":1,"fix":"3932"},{"ruleId":"3933","severity":1,"message":"3934","line":23,"column":28,"nodeType":"3817","messageId":"3935","endLine":23,"endColumn":32,"fix":"3936"},{"ruleId":"3937","severity":2,"message":"3938","line":24,"column":12,"nodeType":"3826","messageId":"3939","endLine":24,"endColumn":31},{"ruleId":"3933","severity":1,"message":"3940","line":24,"column":33,"nodeType":"3817","messageId":"3941","endLine":24,"endColumn":37,"fix":"3942"},{"ruleId":"3943","severity":1,"message":"3944","line":29,"column":5,"nodeType":"3889","messageId":"3945","endLine":29,"endColumn":37,"fix":"3946"},{"ruleId":"3947","severity":1,"message":"3944","line":29,"column":5,"nodeType":"3889","messageId":"3945","endLine":29,"endColumn":37,"fix":"3948"},{"ruleId":"3943","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":37,"fix":"3949"},{"ruleId":"3947","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":37,"fix":"3950"},{"ruleId":"3943","severity":1,"message":"3944","line":41,"column":5,"nodeType":"3889","messageId":"3945","endLine":41,"endColumn":40,"fix":"3951"},{"ruleId":"3947","severity":1,"message":"3944","line":41,"column":5,"nodeType":"3889","messageId":"3945","endLine":41,"endColumn":40,"fix":"3952"},{"ruleId":"3933","severity":1,"message":"3934","line":52,"column":22,"nodeType":"3817","messageId":"3935","endLine":52,"endColumn":26,"fix":"3953"},{"ruleId":"3943","severity":1,"message":"3944","line":58,"column":5,"nodeType":"3889","messageId":"3945","endLine":58,"endColumn":28,"fix":"3954"},{"ruleId":"3947","severity":1,"message":"3944","line":58,"column":5,"nodeType":"3889","messageId":"3945","endLine":58,"endColumn":28,"fix":"3955"},{"ruleId":"3943","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":28,"fix":"3956"},{"ruleId":"3947","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":28,"fix":"3957"},{"ruleId":"3933","severity":1,"message":"3934","line":84,"column":34,"nodeType":"3817","messageId":"3935","endLine":84,"endColumn":38,"fix":"3958"},{"ruleId":"3943","severity":1,"message":"3944","line":108,"column":7,"nodeType":"3889","messageId":"3945","endLine":108,"endColumn":39,"fix":"3959"},{"ruleId":"3947","severity":1,"message":"3944","line":108,"column":7,"nodeType":"3889","messageId":"3945","endLine":108,"endColumn":39,"fix":"3960"},{"ruleId":"3943","severity":1,"message":"3944","line":181,"column":5,"nodeType":"3961","messageId":"3945","endLine":185,"endColumn":7,"fix":"3962"},{"ruleId":"3947","severity":1,"message":"3944","line":181,"column":5,"nodeType":"3961","messageId":"3945","endLine":185,"endColumn":7,"fix":"3963"},{"ruleId":"3943","severity":1,"message":"3944","line":186,"column":5,"nodeType":"3889","messageId":"3945","endLine":186,"endColumn":56,"fix":"3964"},{"ruleId":"3947","severity":1,"message":"3944","line":186,"column":5,"nodeType":"3889","messageId":"3945","endLine":186,"endColumn":56,"fix":"3965"},{"ruleId":"3943","severity":1,"message":"3944","line":230,"column":5,"nodeType":"3889","messageId":"3945","endLine":230,"endColumn":70,"fix":"3966"},{"ruleId":"3947","severity":1,"message":"3944","line":230,"column":5,"nodeType":"3889","messageId":"3945","endLine":230,"endColumn":70,"fix":"3967"},{"ruleId":"3943","severity":1,"message":"3944","line":254,"column":5,"nodeType":"3889","messageId":"3945","endLine":256,"endColumn":7,"fix":"3968"},{"ruleId":"3947","severity":1,"message":"3944","line":254,"column":5,"nodeType":"3889","messageId":"3945","endLine":256,"endColumn":7,"fix":"3969"},{"ruleId":"3943","severity":1,"message":"3944","line":261,"column":5,"nodeType":"3889","messageId":"3945","endLine":263,"endColumn":7,"fix":"3970"},{"ruleId":"3947","severity":1,"message":"3944","line":261,"column":5,"nodeType":"3889","messageId":"3945","endLine":263,"endColumn":7,"fix":"3971"},{"ruleId":"3943","severity":1,"message":"3944","line":269,"column":5,"nodeType":"3889","messageId":"3945","endLine":269,"endColumn":70,"fix":"3972"},{"ruleId":"3947","severity":1,"message":"3944","line":269,"column":5,"nodeType":"3889","messageId":"3945","endLine":269,"endColumn":70,"fix":"3973"},{"ruleId":"3943","severity":1,"message":"3944","line":275,"column":5,"nodeType":"3889","messageId":"3945","endLine":275,"endColumn":57,"fix":"3974"},{"ruleId":"3947","severity":1,"message":"3944","line":275,"column":5,"nodeType":"3889","messageId":"3945","endLine":275,"endColumn":57,"fix":"3975"},{"ruleId":"3943","severity":1,"message":"3944","line":286,"column":5,"nodeType":"3889","messageId":"3945","endLine":286,"endColumn":42,"fix":"3976"},{"ruleId":"3947","severity":1,"message":"3944","line":286,"column":5,"nodeType":"3889","messageId":"3945","endLine":286,"endColumn":42,"fix":"3977"},{"ruleId":"3978","severity":1,"message":"3979","line":293,"column":48,"nodeType":"3980","messageId":"3981","endLine":293,"endColumn":58},{"ruleId":"3943","severity":1,"message":"3944","line":295,"column":5,"nodeType":"3889","messageId":"3945","endLine":298,"endColumn":23,"fix":"3982"},{"ruleId":"3947","severity":1,"message":"3944","line":295,"column":5,"nodeType":"3889","messageId":"3945","endLine":298,"endColumn":23,"fix":"3983"},{"ruleId":"3922","severity":1,"message":"3923","line":19,"column":1,"nodeType":"3831","endLine":19,"endColumn":1,"fix":"3984"},{"ruleId":"3922","severity":1,"message":"3925","line":25,"column":1,"nodeType":"3831","endLine":25,"endColumn":1,"fix":"3985"},{"ruleId":"3815","severity":2,"message":"3986","line":45,"column":26,"nodeType":"3817","messageId":"3818","endLine":45,"endColumn":34,"fix":"3987"},{"ruleId":"3815","severity":2,"message":"3988","line":46,"column":9,"nodeType":"3817","messageId":"3818","endLine":46,"endColumn":16,"fix":"3989"},{"ruleId":"3815","severity":2,"message":"3990","line":51,"column":11,"nodeType":"3817","messageId":"3818","endLine":51,"endColumn":27,"fix":"3991"},{"ruleId":"3815","severity":2,"message":"3992","line":54,"column":15,"nodeType":"3817","messageId":"3818","endLine":54,"endColumn":22,"fix":"3993"},{"ruleId":"3815","severity":2,"message":"3994","line":58,"column":15,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":24,"fix":"3995"},{"ruleId":"3815","severity":2,"message":"3996","line":62,"column":15,"nodeType":"3817","messageId":"3818","endLine":62,"endColumn":24,"fix":"3997"},{"ruleId":"3815","severity":2,"message":"3998","line":66,"column":15,"nodeType":"3817","messageId":"3818","endLine":66,"endColumn":22,"fix":"3999"},{"ruleId":"3815","severity":2,"message":"4000","line":74,"column":13,"nodeType":"3817","messageId":"3818","endLine":74,"endColumn":19,"fix":"4001"},{"ruleId":"4002","severity":2,"message":"4003","line":75,"column":56,"nodeType":"3817","messageId":"4004","endLine":75,"endColumn":64,"suggestions":"4005"},{"ruleId":"3815","severity":2,"message":"4006","line":78,"column":13,"nodeType":"3817","messageId":"3818","endLine":78,"endColumn":19,"fix":"4007"},{"ruleId":"3815","severity":2,"message":"4008","line":88,"column":13,"nodeType":"3817","messageId":"3818","endLine":88,"endColumn":21,"fix":"4009"},{"ruleId":"3815","severity":2,"message":"3908","line":91,"column":39,"nodeType":"3817","messageId":"3818","endLine":91,"endColumn":45,"fix":"4010"},{"ruleId":"3815","severity":2,"message":"4011","line":98,"column":13,"nodeType":"3817","messageId":"3818","endLine":98,"endColumn":22,"fix":"4012"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"4013"},{"ruleId":"3815","severity":2,"message":"3986","line":26,"column":3,"nodeType":"3817","messageId":"3818","endLine":26,"endColumn":11,"fix":"4014"},{"ruleId":"4015","severity":2,"message":"4016","line":62,"column":11,"nodeType":"4017","messageId":"4018","endLine":62,"endColumn":49},{"ruleId":"3843","severity":2,"message":"4019","line":72,"column":17,"nodeType":"3817","messageId":"3845","endLine":72,"endColumn":28},{"ruleId":"3815","severity":2,"message":"3988","line":85,"column":9,"nodeType":"3817","messageId":"3818","endLine":85,"endColumn":16,"fix":"4020"},{"ruleId":"3815","severity":2,"message":"4021","line":86,"column":7,"nodeType":"3817","messageId":"3818","endLine":86,"endColumn":29,"fix":"4022"},{"ruleId":"3922","severity":1,"message":"3923","line":5,"column":1,"nodeType":"3831","endLine":5,"endColumn":1,"fix":"4023"},{"ruleId":"3922","severity":1,"message":"3925","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"4024"},{"ruleId":"3927","severity":1,"message":"3928","line":41,"column":1,"nodeType":"3831","endLine":83,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":45,"column":1,"nodeType":"3831","endLine":45,"endColumn":1,"fix":"4025"},{"ruleId":"3922","severity":1,"message":"3925","line":49,"column":1,"nodeType":"3831","endLine":49,"endColumn":1,"fix":"4026"},{"ruleId":"3943","severity":1,"message":"3944","line":33,"column":5,"nodeType":"3889","messageId":"3945","endLine":33,"endColumn":33,"fix":"4027"},{"ruleId":"3947","severity":1,"message":"3944","line":33,"column":5,"nodeType":"3889","messageId":"3945","endLine":33,"endColumn":33,"fix":"4028"},{"ruleId":"3943","severity":1,"message":"3944","line":59,"column":5,"nodeType":"3889","messageId":"3945","endLine":59,"endColumn":46,"fix":"4029"},{"ruleId":"3947","severity":1,"message":"3944","line":59,"column":5,"nodeType":"3889","messageId":"3945","endLine":59,"endColumn":46,"fix":"4030"},{"ruleId":"3922","severity":1,"message":"3923","line":5,"column":1,"nodeType":"3831","endLine":5,"endColumn":1,"fix":"4031"},{"ruleId":"3922","severity":1,"message":"3925","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"4032"},{"ruleId":"3922","severity":1,"message":"3923","line":24,"column":1,"nodeType":"3831","endLine":24,"endColumn":1,"fix":"4033"},{"ruleId":"3922","severity":1,"message":"3925","line":28,"column":1,"nodeType":"3831","endLine":28,"endColumn":1,"fix":"4034"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"4035"},{"ruleId":"3922","severity":1,"message":"3925","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"4036"},{"ruleId":"3922","severity":1,"message":"3923","line":3,"column":1,"nodeType":"3831","endLine":3,"endColumn":1,"fix":"4037"},{"ruleId":"3922","severity":1,"message":"3925","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"4038"},{"ruleId":"3922","severity":1,"message":"3923","line":23,"column":1,"nodeType":"3831","endLine":23,"endColumn":1,"fix":"4039"},{"ruleId":"3922","severity":1,"message":"3925","line":26,"column":1,"nodeType":"3831","endLine":26,"endColumn":1,"fix":"4040"},{"ruleId":"3922","severity":1,"message":"3923","line":43,"column":1,"nodeType":"3831","endLine":43,"endColumn":1,"fix":"4041"},{"ruleId":"3922","severity":1,"message":"3925","line":46,"column":1,"nodeType":"3831","endLine":46,"endColumn":1,"fix":"4042"},{"ruleId":"3922","severity":1,"message":"3923","line":65,"column":1,"nodeType":"3831","endLine":65,"endColumn":1,"fix":"4043"},{"ruleId":"3922","severity":1,"message":"3925","line":68,"column":1,"nodeType":"3831","endLine":68,"endColumn":1,"fix":"4044"},{"ruleId":"3922","severity":1,"message":"3923","line":88,"column":1,"nodeType":"3831","endLine":88,"endColumn":1,"fix":"4045"},{"ruleId":"3922","severity":1,"message":"3925","line":91,"column":1,"nodeType":"3831","endLine":91,"endColumn":1,"fix":"4046"},{"ruleId":"3922","severity":1,"message":"3923","line":112,"column":1,"nodeType":"3831","endLine":112,"endColumn":1,"fix":"4047"},{"ruleId":"3922","severity":1,"message":"3925","line":115,"column":1,"nodeType":"3831","endLine":115,"endColumn":1,"fix":"4048"},{"ruleId":"3922","severity":1,"message":"3923","line":137,"column":1,"nodeType":"3831","endLine":137,"endColumn":1,"fix":"4049"},{"ruleId":"3922","severity":1,"message":"3925","line":140,"column":1,"nodeType":"3831","endLine":140,"endColumn":1,"fix":"4050"},{"ruleId":"3922","severity":1,"message":"3923","line":163,"column":1,"nodeType":"3831","endLine":163,"endColumn":1,"fix":"4051"},{"ruleId":"3922","severity":1,"message":"3925","line":166,"column":1,"nodeType":"3831","endLine":166,"endColumn":1,"fix":"4052"},{"ruleId":"3922","severity":1,"message":"3923","line":190,"column":1,"nodeType":"3831","endLine":190,"endColumn":1,"fix":"4053"},{"ruleId":"3922","severity":1,"message":"3925","line":193,"column":1,"nodeType":"3831","endLine":193,"endColumn":1,"fix":"4054"},{"ruleId":"3922","severity":1,"message":"3923","line":218,"column":1,"nodeType":"3831","endLine":218,"endColumn":1,"fix":"4055"},{"ruleId":"3922","severity":1,"message":"3925","line":221,"column":1,"nodeType":"3831","endLine":221,"endColumn":1,"fix":"4056"},{"ruleId":"3922","severity":1,"message":"3923","line":32,"column":1,"nodeType":"3831","endLine":32,"endColumn":1,"fix":"4057"},{"ruleId":"3922","severity":1,"message":"3925","line":36,"column":1,"nodeType":"3831","endLine":36,"endColumn":1,"fix":"4058"},{"ruleId":"3922","severity":1,"message":"3923","line":108,"column":1,"nodeType":"3831","endLine":108,"endColumn":1,"fix":"4059"},{"ruleId":"3922","severity":1,"message":"3925","line":113,"column":1,"nodeType":"3831","endLine":113,"endColumn":1,"fix":"4060"},{"ruleId":"4061","severity":2,"message":"4062","line":343,"column":14,"nodeType":"3861","messageId":"4063","endLine":343,"endColumn":23},{"ruleId":"3843","severity":2,"message":"4064","line":343,"column":16,"nodeType":"3817","messageId":"3845","endLine":343,"endColumn":23},{"ruleId":"4061","severity":2,"message":"4062","line":343,"column":30,"nodeType":"3861","messageId":"4063","endLine":343,"endColumn":39},{"ruleId":"3843","severity":2,"message":"4064","line":343,"column":32,"nodeType":"3817","messageId":"3845","endLine":343,"endColumn":39},{"ruleId":"4065","severity":2,"message":"4066","line":367,"column":21,"nodeType":"3861","messageId":"4067","endLine":367,"endColumn":23,"suggestions":"4068"},{"ruleId":"4065","severity":2,"message":"4066","line":367,"column":31,"nodeType":"3861","messageId":"4067","endLine":367,"endColumn":33,"suggestions":"4069"},{"ruleId":"3922","severity":1,"message":"3923","line":487,"column":1,"nodeType":"3831","endLine":487,"endColumn":1,"fix":"4070"},{"ruleId":"3922","severity":1,"message":"3925","line":492,"column":1,"nodeType":"3831","endLine":492,"endColumn":1,"fix":"4071"},{"ruleId":"3943","severity":1,"message":"3944","line":73,"column":5,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":42,"fix":"4072"},{"ruleId":"3947","severity":1,"message":"3944","line":73,"column":5,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":42,"fix":"4073"},{"ruleId":"3838","severity":1,"message":"3839","line":184,"column":5,"nodeType":"3840","messageId":"3841","endLine":185,"endColumn":1,"fix":"4074"},{"ruleId":"3943","severity":1,"message":"3944","line":187,"column":5,"nodeType":"3889","messageId":"3945","endLine":187,"endColumn":70,"fix":"4075"},{"ruleId":"3947","severity":1,"message":"3944","line":187,"column":5,"nodeType":"3889","messageId":"3945","endLine":187,"endColumn":70,"fix":"4076"},{"ruleId":"3838","severity":1,"message":"3839","line":204,"column":5,"nodeType":"3840","messageId":"3841","endLine":205,"endColumn":1,"fix":"4077"},{"ruleId":"3838","severity":1,"message":"3839","line":208,"column":5,"nodeType":"3840","messageId":"3841","endLine":209,"endColumn":1,"fix":"4078"},{"ruleId":"3838","severity":1,"message":"3839","line":212,"column":5,"nodeType":"3840","messageId":"3841","endLine":213,"endColumn":1,"fix":"4079"},{"ruleId":"3838","severity":1,"message":"3839","line":279,"column":5,"nodeType":"3840","messageId":"3841","endLine":280,"endColumn":1,"fix":"4080"},{"ruleId":"3943","severity":1,"message":"3944","line":282,"column":5,"nodeType":"3889","messageId":"3945","endLine":282,"endColumn":43,"fix":"4081"},{"ruleId":"3947","severity":1,"message":"3944","line":282,"column":5,"nodeType":"3889","messageId":"3945","endLine":282,"endColumn":43,"fix":"4082"},{"ruleId":"4015","severity":2,"message":"4016","line":321,"column":11,"nodeType":"4017","messageId":"4018","endLine":321,"endColumn":41},{"ruleId":"4083","severity":1,"message":"4084","line":345,"column":10,"nodeType":"3850","messageId":"4085","endLine":345,"endColumn":22,"fix":"4086"},{"ruleId":"3838","severity":1,"message":"3839","line":383,"column":5,"nodeType":"3840","messageId":"3841","endLine":384,"endColumn":1,"fix":"4087"},{"ruleId":"3838","severity":1,"message":"3839","line":389,"column":5,"nodeType":"3840","messageId":"3841","endLine":390,"endColumn":1,"fix":"4088"},{"ruleId":"3838","severity":1,"message":"3839","line":395,"column":5,"nodeType":"3840","messageId":"3841","endLine":396,"endColumn":1,"fix":"4089"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"4090"},{"ruleId":"3922","severity":1,"message":"3925","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"4091"},{"ruleId":"4083","severity":1,"message":"4084","line":14,"column":10,"nodeType":"3850","messageId":"4085","endLine":14,"endColumn":22,"fix":"4092"},{"ruleId":"4093","severity":1,"message":"4094","line":2,"column":1,"nodeType":"3831","endLine":11,"endColumn":41,"fix":"4095"},{"ruleId":"3835","severity":1,"message":"3836","line":3,"column":1,"nodeType":"3831","endLine":3,"endColumn":1,"fix":"4096"},{"ruleId":"3922","severity":1,"message":"3925","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"4097"},{"ruleId":"3848","severity":2,"message":"4098","line":14,"column":33,"nodeType":"3850","messageId":"3851","endLine":14,"endColumn":44},{"ruleId":"4093","severity":1,"message":"4094","line":61,"column":1,"nodeType":"3831","endLine":62,"endColumn":4,"fix":"4099"},{"ruleId":"3838","severity":1,"message":"3839","line":85,"column":35,"nodeType":"3840","messageId":"3841","endLine":86,"endColumn":1,"fix":"4100"},{"ruleId":"3838","severity":1,"message":"3839","line":162,"column":35,"nodeType":"3840","messageId":"3841","endLine":163,"endColumn":1,"fix":"4101"},{"ruleId":"4065","severity":2,"message":"4102","line":221,"column":13,"nodeType":"4103","messageId":"4104","endLine":221,"endColumn":33},{"ruleId":"3815","severity":2,"message":"4105","line":249,"column":16,"nodeType":"3817","messageId":"4106","endLine":249,"endColumn":17},{"ruleId":"3852","severity":2,"message":"4107","line":268,"column":103,"nodeType":"3817","messageId":"3854","endLine":268,"endColumn":109},{"ruleId":"4065","severity":2,"message":"4102","line":272,"column":9,"nodeType":"4103","messageId":"4104","endLine":272,"endColumn":29},{"ruleId":"3922","severity":1,"message":"3923","line":12,"column":1,"nodeType":"3831","endLine":12,"endColumn":1,"fix":"4108"},{"ruleId":"3922","severity":1,"message":"3925","line":17,"column":1,"nodeType":"3831","endLine":17,"endColumn":1,"fix":"4109"},{"ruleId":"3922","severity":1,"message":"3923","line":34,"column":1,"nodeType":"3831","endLine":34,"endColumn":1,"fix":"4110"},{"ruleId":"3922","severity":1,"message":"3925","line":38,"column":1,"nodeType":"3831","endLine":38,"endColumn":1,"fix":"4111"},{"ruleId":"3922","severity":1,"message":"3923","line":55,"column":1,"nodeType":"3831","endLine":55,"endColumn":1,"fix":"4112"},{"ruleId":"3922","severity":1,"message":"3925","line":59,"column":1,"nodeType":"3831","endLine":59,"endColumn":1,"fix":"4113"},{"ruleId":"3922","severity":1,"message":"3923","line":76,"column":1,"nodeType":"3831","endLine":76,"endColumn":1,"fix":"4114"},{"ruleId":"3922","severity":1,"message":"3925","line":80,"column":1,"nodeType":"3831","endLine":80,"endColumn":1,"fix":"4115"},{"ruleId":"3922","severity":1,"message":"3923","line":97,"column":1,"nodeType":"3831","endLine":97,"endColumn":1,"fix":"4116"},{"ruleId":"3922","severity":1,"message":"3925","line":101,"column":1,"nodeType":"3831","endLine":101,"endColumn":1,"fix":"4117"},{"ruleId":"3922","severity":1,"message":"3923","line":118,"column":1,"nodeType":"3831","endLine":118,"endColumn":1,"fix":"4118"},{"ruleId":"3922","severity":1,"message":"3925","line":122,"column":1,"nodeType":"3831","endLine":122,"endColumn":1,"fix":"4119"},{"ruleId":"3922","severity":1,"message":"3923","line":139,"column":1,"nodeType":"3831","endLine":139,"endColumn":1,"fix":"4120"},{"ruleId":"3922","severity":1,"message":"3925","line":143,"column":1,"nodeType":"3831","endLine":143,"endColumn":1,"fix":"4121"},{"ruleId":"3922","severity":1,"message":"3923","line":160,"column":1,"nodeType":"3831","endLine":160,"endColumn":1,"fix":"4122"},{"ruleId":"3922","severity":1,"message":"3925","line":164,"column":1,"nodeType":"3831","endLine":164,"endColumn":1,"fix":"4123"},{"ruleId":"3922","severity":1,"message":"3923","line":181,"column":1,"nodeType":"3831","endLine":181,"endColumn":1,"fix":"4124"},{"ruleId":"3922","severity":1,"message":"3925","line":185,"column":1,"nodeType":"3831","endLine":185,"endColumn":1,"fix":"4125"},{"ruleId":"3922","severity":1,"message":"3923","line":202,"column":1,"nodeType":"3831","endLine":202,"endColumn":1,"fix":"4126"},{"ruleId":"3922","severity":1,"message":"3925","line":206,"column":1,"nodeType":"3831","endLine":206,"endColumn":1,"fix":"4127"},{"ruleId":"3922","severity":1,"message":"3923","line":223,"column":1,"nodeType":"3831","endLine":223,"endColumn":1,"fix":"4128"},{"ruleId":"3922","severity":1,"message":"3925","line":227,"column":1,"nodeType":"3831","endLine":227,"endColumn":1,"fix":"4129"},{"ruleId":"3922","severity":1,"message":"3923","line":245,"column":1,"nodeType":"3831","endLine":245,"endColumn":1,"fix":"4130"},{"ruleId":"3922","severity":1,"message":"3925","line":250,"column":1,"nodeType":"3831","endLine":250,"endColumn":1,"fix":"4131"},{"ruleId":"3922","severity":1,"message":"3923","line":268,"column":1,"nodeType":"3831","endLine":268,"endColumn":1,"fix":"4132"},{"ruleId":"3922","severity":1,"message":"3925","line":272,"column":1,"nodeType":"3831","endLine":272,"endColumn":1,"fix":"4133"},{"ruleId":"3922","severity":1,"message":"3923","line":287,"column":1,"nodeType":"3831","endLine":287,"endColumn":1,"fix":"4134"},{"ruleId":"3922","severity":1,"message":"3925","line":291,"column":1,"nodeType":"3831","endLine":291,"endColumn":1,"fix":"4135"},{"ruleId":"3922","severity":1,"message":"3923","line":306,"column":1,"nodeType":"3831","endLine":306,"endColumn":1,"fix":"4136"},{"ruleId":"3922","severity":1,"message":"3925","line":310,"column":1,"nodeType":"3831","endLine":310,"endColumn":1,"fix":"4137"},{"ruleId":"3922","severity":1,"message":"3923","line":325,"column":1,"nodeType":"3831","endLine":325,"endColumn":1,"fix":"4138"},{"ruleId":"3922","severity":1,"message":"3925","line":329,"column":1,"nodeType":"3831","endLine":329,"endColumn":1,"fix":"4139"},{"ruleId":"3922","severity":1,"message":"3923","line":344,"column":1,"nodeType":"3831","endLine":344,"endColumn":1,"fix":"4140"},{"ruleId":"3922","severity":1,"message":"3925","line":348,"column":1,"nodeType":"3831","endLine":348,"endColumn":1,"fix":"4141"},{"ruleId":"3922","severity":1,"message":"3923","line":363,"column":1,"nodeType":"3831","endLine":363,"endColumn":1,"fix":"4142"},{"ruleId":"3922","severity":1,"message":"3925","line":367,"column":1,"nodeType":"3831","endLine":367,"endColumn":1,"fix":"4143"},{"ruleId":"3922","severity":1,"message":"3923","line":382,"column":1,"nodeType":"3831","endLine":382,"endColumn":1,"fix":"4144"},{"ruleId":"3922","severity":1,"message":"3925","line":386,"column":1,"nodeType":"3831","endLine":386,"endColumn":1,"fix":"4145"},{"ruleId":"3922","severity":1,"message":"3923","line":401,"column":1,"nodeType":"3831","endLine":401,"endColumn":1,"fix":"4146"},{"ruleId":"3922","severity":1,"message":"3925","line":405,"column":1,"nodeType":"3831","endLine":405,"endColumn":1,"fix":"4147"},{"ruleId":"3922","severity":1,"message":"3923","line":420,"column":1,"nodeType":"3831","endLine":420,"endColumn":1,"fix":"4148"},{"ruleId":"3922","severity":1,"message":"3925","line":424,"column":1,"nodeType":"3831","endLine":424,"endColumn":1,"fix":"4149"},{"ruleId":"3922","severity":1,"message":"3923","line":439,"column":1,"nodeType":"3831","endLine":439,"endColumn":1,"fix":"4150"},{"ruleId":"3922","severity":1,"message":"3925","line":443,"column":1,"nodeType":"3831","endLine":443,"endColumn":1,"fix":"4151"},{"ruleId":"3922","severity":1,"message":"3923","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"4152"},{"ruleId":"3922","severity":1,"message":"3925","line":11,"column":1,"nodeType":"3831","endLine":11,"endColumn":1,"fix":"4153"},{"ruleId":"3922","severity":1,"message":"3923","line":27,"column":1,"nodeType":"3831","endLine":27,"endColumn":1,"fix":"4154"},{"ruleId":"3922","severity":1,"message":"3925","line":31,"column":1,"nodeType":"3831","endLine":31,"endColumn":1,"fix":"4155"},{"ruleId":"3922","severity":1,"message":"3923","line":44,"column":1,"nodeType":"3831","endLine":44,"endColumn":1,"fix":"4156"},{"ruleId":"3922","severity":1,"message":"3925","line":48,"column":1,"nodeType":"3831","endLine":48,"endColumn":1,"fix":"4157"},{"ruleId":"3922","severity":1,"message":"3923","line":61,"column":1,"nodeType":"3831","endLine":61,"endColumn":1,"fix":"4158"},{"ruleId":"3922","severity":1,"message":"3925","line":65,"column":1,"nodeType":"3831","endLine":65,"endColumn":1,"fix":"4159"},{"ruleId":"3922","severity":1,"message":"3923","line":78,"column":1,"nodeType":"3831","endLine":78,"endColumn":1,"fix":"4160"},{"ruleId":"3922","severity":1,"message":"3925","line":82,"column":1,"nodeType":"3831","endLine":82,"endColumn":1,"fix":"4161"},{"ruleId":"3922","severity":1,"message":"3923","line":95,"column":1,"nodeType":"3831","endLine":95,"endColumn":1,"fix":"4162"},{"ruleId":"3922","severity":1,"message":"3925","line":99,"column":1,"nodeType":"3831","endLine":99,"endColumn":1,"fix":"4163"},{"ruleId":"3922","severity":1,"message":"3923","line":114,"column":1,"nodeType":"3831","endLine":114,"endColumn":1,"fix":"4164"},{"ruleId":"3922","severity":1,"message":"3925","line":118,"column":1,"nodeType":"3831","endLine":118,"endColumn":1,"fix":"4165"},{"ruleId":"3922","severity":1,"message":"3923","line":131,"column":1,"nodeType":"3831","endLine":131,"endColumn":1,"fix":"4166"},{"ruleId":"3922","severity":1,"message":"3925","line":135,"column":1,"nodeType":"3831","endLine":135,"endColumn":1,"fix":"4167"},{"ruleId":"3922","severity":1,"message":"3923","line":148,"column":1,"nodeType":"3831","endLine":148,"endColumn":1,"fix":"4168"},{"ruleId":"3922","severity":1,"message":"3925","line":152,"column":1,"nodeType":"3831","endLine":152,"endColumn":1,"fix":"4169"},{"ruleId":"3922","severity":1,"message":"3923","line":164,"column":1,"nodeType":"3831","endLine":164,"endColumn":1,"fix":"4170"},{"ruleId":"3922","severity":1,"message":"3925","line":168,"column":1,"nodeType":"3831","endLine":168,"endColumn":1,"fix":"4171"},{"ruleId":"3922","severity":1,"message":"3923","line":181,"column":1,"nodeType":"3831","endLine":181,"endColumn":1,"fix":"4172"},{"ruleId":"3922","severity":1,"message":"3925","line":185,"column":1,"nodeType":"3831","endLine":185,"endColumn":1,"fix":"4173"},{"ruleId":"3922","severity":1,"message":"3923","line":199,"column":1,"nodeType":"3831","endLine":199,"endColumn":1,"fix":"4174"},{"ruleId":"3922","severity":1,"message":"3925","line":204,"column":1,"nodeType":"3831","endLine":204,"endColumn":1,"fix":"4175"},{"ruleId":"3937","severity":2,"message":"4176","line":37,"column":18,"nodeType":"3826","messageId":"4177","endLine":37,"endColumn":32,"fix":"4178"},{"ruleId":"3937","severity":2,"message":"4176","line":38,"column":18,"nodeType":"3826","messageId":"4177","endLine":38,"endColumn":40,"fix":"4179"},{"ruleId":"3937","severity":2,"message":"4176","line":39,"column":18,"nodeType":"3826","messageId":"4177","endLine":39,"endColumn":36,"fix":"4180"},{"ruleId":"3937","severity":2,"message":"4176","line":41,"column":18,"nodeType":"3826","messageId":"4177","endLine":41,"endColumn":32,"fix":"4181"},{"ruleId":"3937","severity":2,"message":"4176","line":42,"column":18,"nodeType":"3826","messageId":"4177","endLine":42,"endColumn":41,"fix":"4182"},{"ruleId":"3937","severity":2,"message":"4176","line":46,"column":18,"nodeType":"3826","messageId":"4177","endLine":46,"endColumn":34,"fix":"4183"},{"ruleId":"3937","severity":2,"message":"4176","line":47,"column":18,"nodeType":"3826","messageId":"4177","endLine":47,"endColumn":35,"fix":"4184"},{"ruleId":"3937","severity":2,"message":"4176","line":51,"column":18,"nodeType":"3826","messageId":"4177","endLine":51,"endColumn":36,"fix":"4185"},{"ruleId":"3937","severity":2,"message":"4176","line":52,"column":18,"nodeType":"3826","messageId":"4177","endLine":52,"endColumn":35,"fix":"4186"},{"ruleId":"3937","severity":2,"message":"4176","line":56,"column":18,"nodeType":"3826","messageId":"4177","endLine":56,"endColumn":44,"fix":"4187"},{"ruleId":"3937","severity":2,"message":"4176","line":57,"column":18,"nodeType":"3826","messageId":"4177","endLine":57,"endColumn":39,"fix":"4188"},{"ruleId":"3937","severity":2,"message":"4176","line":58,"column":18,"nodeType":"3826","messageId":"4177","endLine":58,"endColumn":36,"fix":"4189"},{"ruleId":"3937","severity":2,"message":"4176","line":62,"column":18,"nodeType":"3826","messageId":"4177","endLine":62,"endColumn":34,"fix":"4190"},{"ruleId":"3937","severity":2,"message":"4176","line":63,"column":18,"nodeType":"3826","messageId":"4177","endLine":63,"endColumn":39,"fix":"4191"},{"ruleId":"3937","severity":2,"message":"4176","line":64,"column":18,"nodeType":"3826","messageId":"4177","endLine":64,"endColumn":31,"fix":"4192"},{"ruleId":"3937","severity":2,"message":"4176","line":68,"column":18,"nodeType":"3826","messageId":"4177","endLine":68,"endColumn":38,"fix":"4193"},{"ruleId":"3937","severity":2,"message":"4176","line":69,"column":18,"nodeType":"3826","messageId":"4177","endLine":69,"endColumn":42,"fix":"4194"},{"ruleId":"3937","severity":2,"message":"4176","line":70,"column":18,"nodeType":"3826","messageId":"4177","endLine":70,"endColumn":38,"fix":"4195"},{"ruleId":"3937","severity":2,"message":"4176","line":74,"column":18,"nodeType":"3826","messageId":"4177","endLine":74,"endColumn":39,"fix":"4196"},{"ruleId":"3937","severity":2,"message":"4176","line":75,"column":18,"nodeType":"3826","messageId":"4177","endLine":75,"endColumn":45,"fix":"4197"},{"ruleId":"3937","severity":2,"message":"4176","line":76,"column":18,"nodeType":"3826","messageId":"4177","endLine":76,"endColumn":39,"fix":"4198"},{"ruleId":"3937","severity":2,"message":"4176","line":80,"column":18,"nodeType":"3826","messageId":"4177","endLine":80,"endColumn":28,"fix":"4199"},{"ruleId":"3937","severity":2,"message":"4176","line":81,"column":18,"nodeType":"3826","messageId":"4177","endLine":81,"endColumn":28,"fix":"4200"},{"ruleId":"3937","severity":2,"message":"4176","line":82,"column":18,"nodeType":"3826","messageId":"4177","endLine":82,"endColumn":30,"fix":"4201"},{"ruleId":"3937","severity":2,"message":"4176","line":86,"column":18,"nodeType":"3826","messageId":"4177","endLine":86,"endColumn":28,"fix":"4202"},{"ruleId":"3937","severity":2,"message":"4176","line":87,"column":18,"nodeType":"3826","messageId":"4177","endLine":87,"endColumn":28,"fix":"4203"},{"ruleId":"3937","severity":2,"message":"4176","line":88,"column":18,"nodeType":"3826","messageId":"4177","endLine":88,"endColumn":30,"fix":"4204"},{"ruleId":"3937","severity":2,"message":"4176","line":92,"column":18,"nodeType":"3826","messageId":"4177","endLine":92,"endColumn":39,"fix":"4205"},{"ruleId":"3937","severity":2,"message":"4176","line":93,"column":18,"nodeType":"3826","messageId":"4177","endLine":93,"endColumn":30,"fix":"4206"},{"ruleId":"3937","severity":2,"message":"4176","line":94,"column":18,"nodeType":"3826","messageId":"4177","endLine":94,"endColumn":34,"fix":"4207"},{"ruleId":"3937","severity":2,"message":"4176","line":98,"column":18,"nodeType":"3826","messageId":"4177","endLine":98,"endColumn":37,"fix":"4208"},{"ruleId":"3937","severity":2,"message":"4176","line":99,"column":18,"nodeType":"3826","messageId":"4177","endLine":99,"endColumn":36,"fix":"4209"},{"ruleId":"3937","severity":2,"message":"4176","line":100,"column":18,"nodeType":"3826","messageId":"4177","endLine":100,"endColumn":39,"fix":"4210"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"4211"},{"ruleId":"3922","severity":1,"message":"3923","line":40,"column":1,"nodeType":"3831","endLine":40,"endColumn":1,"fix":"4212"},{"ruleId":"3922","severity":1,"message":"3925","line":49,"column":1,"nodeType":"3831","endLine":49,"endColumn":1,"fix":"4213"},{"ruleId":"3852","severity":2,"message":"4214","line":96,"column":77,"nodeType":"3817","messageId":"3854","endLine":96,"endColumn":82},{"ruleId":"3843","severity":2,"message":"4215","line":110,"column":38,"nodeType":"3817","messageId":"3845","endLine":110,"endColumn":42},{"ruleId":"3843","severity":2,"message":"4216","line":114,"column":35,"nodeType":"3817","messageId":"3845","endLine":114,"endColumn":42},{"ruleId":"3852","severity":2,"message":"4217","line":118,"column":25,"nodeType":"3817","messageId":"3854","endLine":118,"endColumn":27},{"ruleId":"3922","severity":1,"message":"3923","line":125,"column":1,"nodeType":"3831","endLine":125,"endColumn":1,"fix":"4218"},{"ruleId":"3922","severity":1,"message":"3925","line":134,"column":1,"nodeType":"3831","endLine":134,"endColumn":1,"fix":"4219"},{"ruleId":"3852","severity":2,"message":"4220","line":181,"column":77,"nodeType":"3817","messageId":"3854","endLine":181,"endColumn":82},{"ruleId":"3843","severity":2,"message":"4215","line":195,"column":38,"nodeType":"3817","messageId":"3845","endLine":195,"endColumn":42},{"ruleId":"3843","severity":2,"message":"4216","line":198,"column":35,"nodeType":"3817","messageId":"3845","endLine":198,"endColumn":42},{"ruleId":"3852","severity":2,"message":"4217","line":202,"column":25,"nodeType":"3817","messageId":"3854","endLine":202,"endColumn":27},{"ruleId":"3922","severity":1,"message":"3923","line":207,"column":1,"nodeType":"3831","endLine":207,"endColumn":1,"fix":"4221"},{"ruleId":"3922","severity":1,"message":"3925","line":211,"column":1,"nodeType":"3831","endLine":211,"endColumn":1,"fix":"4222"},{"ruleId":"3922","severity":1,"message":"3923","line":227,"column":1,"nodeType":"3831","endLine":227,"endColumn":1,"fix":"4223"},{"ruleId":"3922","severity":1,"message":"3925","line":231,"column":1,"nodeType":"3831","endLine":231,"endColumn":1,"fix":"4224"},{"ruleId":"3922","severity":1,"message":"3923","line":247,"column":1,"nodeType":"3831","endLine":247,"endColumn":1,"fix":"4225"},{"ruleId":"3922","severity":1,"message":"3925","line":251,"column":1,"nodeType":"3831","endLine":251,"endColumn":1,"fix":"4226"},{"ruleId":"3922","severity":1,"message":"3923","line":267,"column":1,"nodeType":"3831","endLine":267,"endColumn":1,"fix":"4227"},{"ruleId":"3922","severity":1,"message":"3925","line":271,"column":1,"nodeType":"3831","endLine":271,"endColumn":1,"fix":"4228"},{"ruleId":"3922","severity":1,"message":"3923","line":287,"column":1,"nodeType":"3831","endLine":287,"endColumn":1,"fix":"4229"},{"ruleId":"3922","severity":1,"message":"3925","line":291,"column":1,"nodeType":"3831","endLine":291,"endColumn":1,"fix":"4230"},{"ruleId":"3922","severity":1,"message":"3923","line":307,"column":1,"nodeType":"3831","endLine":307,"endColumn":1,"fix":"4231"},{"ruleId":"3922","severity":1,"message":"3925","line":311,"column":1,"nodeType":"3831","endLine":311,"endColumn":1,"fix":"4232"},{"ruleId":"3922","severity":1,"message":"3923","line":325,"column":1,"nodeType":"3831","endLine":325,"endColumn":1,"fix":"4233"},{"ruleId":"3922","severity":1,"message":"3925","line":329,"column":1,"nodeType":"3831","endLine":329,"endColumn":1,"fix":"4234"},{"ruleId":"3922","severity":1,"message":"3923","line":345,"column":1,"nodeType":"3831","endLine":345,"endColumn":1,"fix":"4235"},{"ruleId":"3922","severity":1,"message":"3925","line":349,"column":1,"nodeType":"3831","endLine":349,"endColumn":1,"fix":"4236"},{"ruleId":"3922","severity":1,"message":"3923","line":365,"column":1,"nodeType":"3831","endLine":365,"endColumn":1,"fix":"4237"},{"ruleId":"3922","severity":1,"message":"3925","line":369,"column":1,"nodeType":"3831","endLine":369,"endColumn":1,"fix":"4238"},{"ruleId":"3922","severity":1,"message":"3923","line":385,"column":1,"nodeType":"3831","endLine":385,"endColumn":1,"fix":"4239"},{"ruleId":"3922","severity":1,"message":"3925","line":389,"column":1,"nodeType":"3831","endLine":389,"endColumn":1,"fix":"4240"},{"ruleId":"4083","severity":1,"message":"4084","line":25,"column":10,"nodeType":"3850","messageId":"4085","endLine":25,"endColumn":23,"fix":"4241"},{"ruleId":"3943","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":72,"endColumn":18,"fix":"4242"},{"ruleId":"3947","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":72,"endColumn":18,"fix":"4243"},{"ruleId":"4244","severity":2,"message":"4245","line":98,"column":15,"nodeType":"3850","messageId":"4246","endLine":98,"endColumn":36},{"ruleId":"4083","severity":1,"message":"4084","line":115,"column":10,"nodeType":"3850","messageId":"4085","endLine":115,"endColumn":28,"fix":"4247"},{"ruleId":"4244","severity":2,"message":"4245","line":160,"column":15,"nodeType":"3850","messageId":"4246","endLine":160,"endColumn":36},{"ruleId":"3943","severity":1,"message":"3944","line":179,"column":5,"nodeType":"3889","messageId":"3945","endLine":185,"endColumn":24,"fix":"4248"},{"ruleId":"3947","severity":1,"message":"3944","line":179,"column":5,"nodeType":"3889","messageId":"3945","endLine":185,"endColumn":24,"fix":"4249"},{"ruleId":"3943","severity":1,"message":"3944","line":286,"column":5,"nodeType":"3889","messageId":"3945","endLine":292,"endColumn":18,"fix":"4250"},{"ruleId":"3947","severity":1,"message":"3944","line":286,"column":5,"nodeType":"3889","messageId":"3945","endLine":292,"endColumn":18,"fix":"4251"},{"ruleId":"3910","severity":2,"message":"4252","line":297,"column":19,"nodeType":"4253","messageId":"3912","endLine":297,"endColumn":28},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"4254"},{"ruleId":"3922","severity":1,"message":"3925","line":12,"column":1,"nodeType":"3831","endLine":12,"endColumn":1,"fix":"4255"},{"ruleId":"3848","severity":2,"message":"4098","line":5,"column":8,"nodeType":"3850","messageId":"3851","endLine":5,"endColumn":19},{"ruleId":"3848","severity":2,"message":"4256","line":6,"column":42,"nodeType":"3850","messageId":"3851","endLine":6,"endColumn":69},{"ruleId":"3922","severity":1,"message":"3923","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"4257"},{"ruleId":"3922","severity":1,"message":"3925","line":18,"column":1,"nodeType":"3831","endLine":18,"endColumn":1,"fix":"4258"},{"ruleId":"3922","severity":1,"message":"3923","line":37,"column":1,"nodeType":"3831","endLine":37,"endColumn":1,"fix":"4259"},{"ruleId":"3922","severity":1,"message":"3925","line":42,"column":1,"nodeType":"3831","endLine":42,"endColumn":1,"fix":"4260"},{"ruleId":"3922","severity":1,"message":"3923","line":61,"column":1,"nodeType":"3831","endLine":61,"endColumn":1,"fix":"4261"},{"ruleId":"3922","severity":1,"message":"3925","line":66,"column":1,"nodeType":"3831","endLine":66,"endColumn":1,"fix":"4262"},{"ruleId":"3922","severity":1,"message":"3923","line":91,"column":1,"nodeType":"3831","endLine":91,"endColumn":1,"fix":"4263"},{"ruleId":"3922","severity":1,"message":"3925","line":96,"column":1,"nodeType":"3831","endLine":96,"endColumn":1,"fix":"4264"},{"ruleId":"3922","severity":1,"message":"3923","line":115,"column":1,"nodeType":"3831","endLine":115,"endColumn":1,"fix":"4265"},{"ruleId":"3922","severity":1,"message":"3925","line":120,"column":1,"nodeType":"3831","endLine":120,"endColumn":1,"fix":"4266"},{"ruleId":"3922","severity":1,"message":"3923","line":139,"column":1,"nodeType":"3831","endLine":139,"endColumn":1,"fix":"4267"},{"ruleId":"3922","severity":1,"message":"3925","line":144,"column":1,"nodeType":"3831","endLine":144,"endColumn":1,"fix":"4268"},{"ruleId":"3815","severity":2,"message":"4269","line":152,"column":17,"nodeType":"3817","messageId":"3818","endLine":152,"endColumn":30},{"ruleId":"3815","severity":2,"message":"4270","line":153,"column":3,"nodeType":"3817","messageId":"3818","endLine":153,"endColumn":20,"fix":"4271"},{"ruleId":"3922","severity":1,"message":"3923","line":163,"column":1,"nodeType":"3831","endLine":163,"endColumn":1,"fix":"4272"},{"ruleId":"3922","severity":1,"message":"3925","line":168,"column":1,"nodeType":"3831","endLine":168,"endColumn":1,"fix":"4273"},{"ruleId":"3922","severity":1,"message":"3923","line":207,"column":1,"nodeType":"3831","endLine":207,"endColumn":1,"fix":"4274"},{"ruleId":"3922","severity":1,"message":"3925","line":212,"column":1,"nodeType":"3831","endLine":212,"endColumn":1,"fix":"4275"},{"ruleId":"3922","severity":1,"message":"3923","line":232,"column":1,"nodeType":"3831","endLine":232,"endColumn":1,"fix":"4276"},{"ruleId":"3922","severity":1,"message":"3925","line":237,"column":1,"nodeType":"3831","endLine":237,"endColumn":1,"fix":"4277"},{"ruleId":"3922","severity":1,"message":"3923","line":265,"column":1,"nodeType":"3831","endLine":265,"endColumn":1,"fix":"4278"},{"ruleId":"3922","severity":1,"message":"3925","line":270,"column":1,"nodeType":"3831","endLine":270,"endColumn":1,"fix":"4279"},{"ruleId":"3922","severity":1,"message":"3923","line":289,"column":1,"nodeType":"3831","endLine":289,"endColumn":1,"fix":"4280"},{"ruleId":"3922","severity":1,"message":"3925","line":294,"column":1,"nodeType":"3831","endLine":294,"endColumn":1,"fix":"4281"},{"ruleId":"3922","severity":1,"message":"3923","line":313,"column":1,"nodeType":"3831","endLine":313,"endColumn":1,"fix":"4282"},{"ruleId":"3922","severity":1,"message":"3925","line":318,"column":1,"nodeType":"3831","endLine":318,"endColumn":1,"fix":"4283"},{"ruleId":"4083","severity":1,"message":"4084","line":25,"column":10,"nodeType":"3850","messageId":"4085","endLine":25,"endColumn":29,"fix":"4284"},{"ruleId":"3943","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3961","messageId":"3945","endLine":38,"endColumn":26,"fix":"4285"},{"ruleId":"3947","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3961","messageId":"3945","endLine":38,"endColumn":26,"fix":"4286"},{"ruleId":"3943","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":46,"fix":"4287"},{"ruleId":"3947","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":46,"fix":"4288"},{"ruleId":"4083","severity":1,"message":"4084","line":43,"column":10,"nodeType":"3850","messageId":"4085","endLine":43,"endColumn":31,"fix":"4289"},{"ruleId":"3933","severity":1,"message":"3934","line":49,"column":39,"nodeType":"3817","messageId":"3935","endLine":49,"endColumn":43,"fix":"4290"},{"ruleId":"4083","severity":1,"message":"4084","line":56,"column":10,"nodeType":"3850","messageId":"4085","endLine":56,"endColumn":26,"fix":"4291"},{"ruleId":"3937","severity":2,"message":"3938","line":62,"column":12,"nodeType":"3826","messageId":"3939","endLine":62,"endColumn":37},{"ruleId":"3933","severity":1,"message":"3940","line":62,"column":39,"nodeType":"3817","messageId":"3941","endLine":62,"endColumn":43,"fix":"4292"},{"ruleId":"4083","severity":1,"message":"4084","line":69,"column":10,"nodeType":"3850","messageId":"4085","endLine":69,"endColumn":27,"fix":"4293"},{"ruleId":"4083","severity":1,"message":"4084","line":87,"column":10,"nodeType":"3850","messageId":"4085","endLine":87,"endColumn":27,"fix":"4294"},{"ruleId":"3933","severity":1,"message":"3934","line":93,"column":35,"nodeType":"3817","messageId":"3935","endLine":93,"endColumn":39,"fix":"4295"},{"ruleId":"3937","severity":2,"message":"3938","line":94,"column":12,"nodeType":"3826","messageId":"3939","endLine":94,"endColumn":38},{"ruleId":"3933","severity":1,"message":"3940","line":94,"column":40,"nodeType":"3817","messageId":"3941","endLine":94,"endColumn":44,"fix":"4296"},{"ruleId":"4083","severity":1,"message":"4084","line":101,"column":10,"nodeType":"3850","messageId":"4085","endLine":101,"endColumn":25,"fix":"4297"},{"ruleId":"3933","severity":1,"message":"3934","line":111,"column":33,"nodeType":"3817","messageId":"3935","endLine":111,"endColumn":37,"fix":"4298"},{"ruleId":"3937","severity":2,"message":"3938","line":112,"column":12,"nodeType":"3826","messageId":"3939","endLine":112,"endColumn":36},{"ruleId":"3933","severity":1,"message":"3940","line":112,"column":38,"nodeType":"3817","messageId":"3941","endLine":112,"endColumn":42,"fix":"4299"},{"ruleId":"4083","severity":1,"message":"4084","line":122,"column":10,"nodeType":"3850","messageId":"4085","endLine":122,"endColumn":26,"fix":"4300"},{"ruleId":"3933","severity":1,"message":"3934","line":129,"column":34,"nodeType":"3817","messageId":"3935","endLine":129,"endColumn":38,"fix":"4301"},{"ruleId":"3937","severity":2,"message":"3938","line":130,"column":12,"nodeType":"3826","messageId":"3939","endLine":130,"endColumn":37},{"ruleId":"3933","severity":1,"message":"3940","line":130,"column":39,"nodeType":"3817","messageId":"3941","endLine":130,"endColumn":43,"fix":"4302"},{"ruleId":"4083","severity":1,"message":"4084","line":139,"column":10,"nodeType":"3850","messageId":"4085","endLine":139,"endColumn":28,"fix":"4303"},{"ruleId":"3933","severity":1,"message":"3934","line":157,"column":36,"nodeType":"3817","messageId":"3935","endLine":157,"endColumn":40,"fix":"4304"},{"ruleId":"3933","severity":1,"message":"3940","line":158,"column":41,"nodeType":"3817","messageId":"3941","endLine":158,"endColumn":45,"fix":"4305"},{"ruleId":"4083","severity":1,"message":"4084","line":165,"column":10,"nodeType":"3850","messageId":"4085","endLine":165,"endColumn":27,"fix":"4306"},{"ruleId":"4083","severity":1,"message":"4084","line":185,"column":10,"nodeType":"3850","messageId":"4085","endLine":185,"endColumn":27,"fix":"4307"},{"ruleId":"3933","severity":1,"message":"3934","line":192,"column":35,"nodeType":"3817","messageId":"3935","endLine":192,"endColumn":39,"fix":"4308"},{"ruleId":"3937","severity":2,"message":"3938","line":193,"column":12,"nodeType":"3826","messageId":"3939","endLine":193,"endColumn":38},{"ruleId":"3933","severity":1,"message":"3940","line":193,"column":40,"nodeType":"3817","messageId":"3941","endLine":193,"endColumn":44,"fix":"4309"},{"ruleId":"4083","severity":1,"message":"4084","line":202,"column":10,"nodeType":"3850","messageId":"4085","endLine":202,"endColumn":28,"fix":"4310"},{"ruleId":"3933","severity":1,"message":"3934","line":209,"column":36,"nodeType":"3817","messageId":"3935","endLine":209,"endColumn":40,"fix":"4311"},{"ruleId":"3937","severity":2,"message":"3938","line":210,"column":12,"nodeType":"3826","messageId":"3939","endLine":210,"endColumn":39},{"ruleId":"3933","severity":1,"message":"3940","line":210,"column":41,"nodeType":"3817","messageId":"3941","endLine":210,"endColumn":45,"fix":"4312"},{"ruleId":"4083","severity":1,"message":"4084","line":219,"column":10,"nodeType":"3850","messageId":"4085","endLine":219,"endColumn":32,"fix":"4313"},{"ruleId":"3943","severity":1,"message":"3944","line":229,"column":5,"nodeType":"3961","messageId":"3945","endLine":229,"endColumn":36,"fix":"4314"},{"ruleId":"3947","severity":1,"message":"3944","line":229,"column":5,"nodeType":"3961","messageId":"3945","endLine":229,"endColumn":36,"fix":"4315"},{"ruleId":"3943","severity":1,"message":"3944","line":230,"column":5,"nodeType":"3889","messageId":"3945","endLine":230,"endColumn":49,"fix":"4316"},{"ruleId":"3947","severity":1,"message":"3944","line":230,"column":5,"nodeType":"3889","messageId":"3945","endLine":230,"endColumn":49,"fix":"4317"},{"ruleId":"3943","severity":1,"message":"3944","line":235,"column":5,"nodeType":"3889","messageId":"3945","endLine":235,"endColumn":56,"fix":"4318"},{"ruleId":"3947","severity":1,"message":"3944","line":235,"column":5,"nodeType":"3889","messageId":"3945","endLine":235,"endColumn":56,"fix":"4319"},{"ruleId":"3922","severity":1,"message":"3923","line":15,"column":1,"nodeType":"3831","endLine":15,"endColumn":1,"fix":"4320"},{"ruleId":"4083","severity":1,"message":"4084","line":14,"column":10,"nodeType":"3850","messageId":"4085","endLine":14,"endColumn":18,"fix":"4321"},{"ruleId":"3943","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":48,"fix":"4322"},{"ruleId":"3947","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":48,"fix":"4323"},{"ruleId":"3943","severity":1,"message":"3944","line":18,"column":5,"nodeType":"4324","messageId":"3945","endLine":22,"endColumn":6,"fix":"4325"},{"ruleId":"3947","severity":1,"message":"3944","line":18,"column":5,"nodeType":"4324","messageId":"3945","endLine":22,"endColumn":6,"fix":"4326"},{"ruleId":"3943","severity":1,"message":"3944","line":27,"column":5,"nodeType":"4324","messageId":"3945","endLine":32,"endColumn":6,"fix":"4327"},{"ruleId":"3947","severity":1,"message":"3944","line":27,"column":5,"nodeType":"4324","messageId":"3945","endLine":32,"endColumn":6,"fix":"4328"},{"ruleId":"3843","severity":2,"message":"4216","line":31,"column":16,"nodeType":"3817","messageId":"3845","endLine":31,"endColumn":23},{"ruleId":"3943","severity":1,"message":"3944","line":37,"column":5,"nodeType":"4324","messageId":"3945","endLine":42,"endColumn":6,"fix":"4329"},{"ruleId":"3947","severity":1,"message":"3944","line":37,"column":5,"nodeType":"4324","messageId":"3945","endLine":42,"endColumn":6,"fix":"4330"},{"ruleId":"3843","severity":2,"message":"4216","line":41,"column":16,"nodeType":"3817","messageId":"3845","endLine":41,"endColumn":23},{"ruleId":"3943","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":47,"endColumn":75,"fix":"4331"},{"ruleId":"3947","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":47,"endColumn":75,"fix":"4332"},{"ruleId":"3943","severity":1,"message":"3944","line":48,"column":5,"nodeType":"4324","messageId":"3945","endLine":54,"endColumn":6,"fix":"4333"},{"ruleId":"3947","severity":1,"message":"3944","line":48,"column":5,"nodeType":"4324","messageId":"3945","endLine":54,"endColumn":6,"fix":"4334"},{"ruleId":"3843","severity":2,"message":"4216","line":52,"column":16,"nodeType":"3817","messageId":"3845","endLine":52,"endColumn":23},{"ruleId":"3843","severity":2,"message":"4335","line":53,"column":16,"nodeType":"3817","messageId":"3845","endLine":53,"endColumn":21},{"ruleId":"3943","severity":1,"message":"3944","line":68,"column":7,"nodeType":"4324","messageId":"3945","endLine":73,"endColumn":8,"fix":"4336"},{"ruleId":"3947","severity":1,"message":"3944","line":68,"column":7,"nodeType":"4324","messageId":"3945","endLine":73,"endColumn":8,"fix":"4337"},{"ruleId":"3843","severity":2,"message":"4216","line":72,"column":18,"nodeType":"3817","messageId":"3845","endLine":72,"endColumn":25},{"ruleId":"3943","severity":1,"message":"3944","line":91,"column":7,"nodeType":"4324","messageId":"3945","endLine":97,"endColumn":8,"fix":"4338"},{"ruleId":"3947","severity":1,"message":"3944","line":91,"column":7,"nodeType":"4324","messageId":"3945","endLine":97,"endColumn":8,"fix":"4339"},{"ruleId":"3843","severity":2,"message":"4216","line":95,"column":18,"nodeType":"3817","messageId":"3845","endLine":95,"endColumn":25},{"ruleId":"3843","severity":2,"message":"4335","line":96,"column":18,"nodeType":"3817","messageId":"3845","endLine":96,"endColumn":23},{"ruleId":"3943","severity":1,"message":"3944","line":103,"column":5,"nodeType":"4324","messageId":"3945","endLine":108,"endColumn":6,"fix":"4340"},{"ruleId":"3947","severity":1,"message":"3944","line":103,"column":5,"nodeType":"4324","messageId":"3945","endLine":108,"endColumn":6,"fix":"4341"},{"ruleId":"3843","severity":2,"message":"4216","line":107,"column":16,"nodeType":"3817","messageId":"3845","endLine":107,"endColumn":23},{"ruleId":"3943","severity":1,"message":"3944","line":113,"column":5,"nodeType":"3889","messageId":"3945","endLine":114,"endColumn":23,"fix":"4342"},{"ruleId":"3947","severity":1,"message":"3944","line":113,"column":5,"nodeType":"3889","messageId":"3945","endLine":114,"endColumn":23,"fix":"4343"},{"ruleId":"3943","severity":1,"message":"3944","line":115,"column":5,"nodeType":"4324","messageId":"3945","endLine":121,"endColumn":6,"fix":"4344"},{"ruleId":"3947","severity":1,"message":"3944","line":115,"column":5,"nodeType":"4324","messageId":"3945","endLine":121,"endColumn":6,"fix":"4345"},{"ruleId":"3843","severity":2,"message":"4216","line":119,"column":16,"nodeType":"3817","messageId":"3845","endLine":119,"endColumn":23},{"ruleId":"3843","severity":2,"message":"4335","line":120,"column":16,"nodeType":"3817","messageId":"3845","endLine":120,"endColumn":21},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"4346"},{"ruleId":"3922","severity":1,"message":"3925","line":11,"column":1,"nodeType":"3831","endLine":11,"endColumn":1,"fix":"4347"},{"ruleId":"3922","severity":1,"message":"3923","line":10,"column":1,"nodeType":"3831","endLine":10,"endColumn":1,"fix":"4348"},{"ruleId":"3922","severity":1,"message":"3925","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"4349"},{"ruleId":"3838","severity":1,"message":"3839","line":53,"column":35,"nodeType":"3840","messageId":"3841","endLine":54,"endColumn":1,"fix":"4350"},{"ruleId":"3815","severity":2,"message":"3908","line":54,"column":12,"nodeType":"3817","messageId":"3818","endLine":54,"endColumn":13,"fix":"4351"},{"ruleId":"3922","severity":1,"message":"3923","line":65,"column":1,"nodeType":"3831","endLine":65,"endColumn":1,"fix":"4352"},{"ruleId":"3922","severity":1,"message":"3925","line":69,"column":1,"nodeType":"3831","endLine":69,"endColumn":1,"fix":"4353"},{"ruleId":"3838","severity":1,"message":"3839","line":106,"column":35,"nodeType":"3840","messageId":"3841","endLine":107,"endColumn":1,"fix":"4354"},{"ruleId":"3815","severity":2,"message":"3908","line":107,"column":12,"nodeType":"3817","messageId":"3818","endLine":107,"endColumn":13,"fix":"4355"},{"ruleId":"3922","severity":1,"message":"3923","line":119,"column":1,"nodeType":"3831","endLine":119,"endColumn":1,"fix":"4356"},{"ruleId":"3922","severity":1,"message":"3925","line":122,"column":1,"nodeType":"3831","endLine":122,"endColumn":1,"fix":"4357"},{"ruleId":"3838","severity":1,"message":"3839","line":169,"column":35,"nodeType":"3840","messageId":"3841","endLine":170,"endColumn":1,"fix":"4358"},{"ruleId":"4359","severity":2,"message":"4360","line":169,"column":35,"nodeType":"3840","messageId":"4361","endLine":169,"endColumn":65,"suggestions":"4362"},{"ruleId":"3815","severity":2,"message":"3908","line":172,"column":12,"nodeType":"3817","messageId":"3818","endLine":172,"endColumn":13,"fix":"4363"},{"ruleId":"3922","severity":1,"message":"3923","line":183,"column":1,"nodeType":"3831","endLine":183,"endColumn":1,"fix":"4364"},{"ruleId":"3922","severity":1,"message":"3925","line":187,"column":1,"nodeType":"3831","endLine":187,"endColumn":1,"fix":"4365"},{"ruleId":"3838","severity":1,"message":"3839","line":228,"column":35,"nodeType":"3840","messageId":"3841","endLine":229,"endColumn":1,"fix":"4366"},{"ruleId":"4359","severity":2,"message":"4367","line":228,"column":35,"nodeType":"3840","messageId":"4361","endLine":228,"endColumn":70,"suggestions":"4368"},{"ruleId":"3815","severity":2,"message":"3908","line":231,"column":12,"nodeType":"3817","messageId":"3818","endLine":231,"endColumn":13,"fix":"4369"},{"ruleId":"3922","severity":1,"message":"3923","line":244,"column":1,"nodeType":"3831","endLine":244,"endColumn":1,"fix":"4370"},{"ruleId":"3922","severity":1,"message":"3925","line":247,"column":1,"nodeType":"3831","endLine":247,"endColumn":1,"fix":"4371"},{"ruleId":"3838","severity":1,"message":"3839","line":319,"column":35,"nodeType":"3840","messageId":"3841","endLine":320,"endColumn":1,"fix":"4372"},{"ruleId":"3815","severity":2,"message":"3908","line":322,"column":12,"nodeType":"3817","messageId":"3818","endLine":322,"endColumn":13,"fix":"4373"},{"ruleId":"3922","severity":1,"message":"3923","line":335,"column":1,"nodeType":"3831","endLine":335,"endColumn":1,"fix":"4374"},{"ruleId":"3922","severity":1,"message":"3925","line":339,"column":1,"nodeType":"3831","endLine":339,"endColumn":1,"fix":"4375"},{"ruleId":"3838","severity":1,"message":"3839","line":417,"column":35,"nodeType":"3840","messageId":"3841","endLine":418,"endColumn":1,"fix":"4376"},{"ruleId":"3815","severity":2,"message":"3908","line":420,"column":12,"nodeType":"3817","messageId":"3818","endLine":420,"endColumn":13,"fix":"4377"},{"ruleId":"3922","severity":1,"message":"3923","line":17,"column":1,"nodeType":"3831","endLine":17,"endColumn":1,"fix":"4378"},{"ruleId":"3922","severity":1,"message":"3925","line":20,"column":1,"nodeType":"3831","endLine":20,"endColumn":1,"fix":"4379"},{"ruleId":"3922","severity":1,"message":"3923","line":83,"column":1,"nodeType":"3831","endLine":83,"endColumn":1,"fix":"4380"},{"ruleId":"3922","severity":1,"message":"3925","line":87,"column":1,"nodeType":"3831","endLine":87,"endColumn":1,"fix":"4381"},{"ruleId":"3815","severity":2,"message":"3908","line":125,"column":44,"nodeType":"3817","messageId":"3818","endLine":125,"endColumn":45,"fix":"4382"},{"ruleId":"3922","severity":1,"message":"3923","line":137,"column":1,"nodeType":"3831","endLine":137,"endColumn":1,"fix":"4383"},{"ruleId":"3922","severity":1,"message":"3925","line":141,"column":1,"nodeType":"3831","endLine":141,"endColumn":1,"fix":"4384"},{"ruleId":"3815","severity":2,"message":"3908","line":223,"column":9,"nodeType":"3817","messageId":"3818","endLine":223,"endColumn":10,"fix":"4385"},{"ruleId":"3937","severity":2,"message":"4176","line":223,"column":65,"nodeType":"3826","messageId":"4177","endLine":223,"endColumn":75,"fix":"4386"},{"ruleId":"3922","severity":1,"message":"3923","line":19,"column":1,"nodeType":"3831","endLine":19,"endColumn":1,"fix":"4387"},{"ruleId":"3922","severity":1,"message":"3925","line":22,"column":1,"nodeType":"3831","endLine":22,"endColumn":1,"fix":"4388"},{"ruleId":"3815","severity":2,"message":"3908","line":162,"column":7,"nodeType":"3817","messageId":"3818","endLine":162,"endColumn":8,"fix":"4389"},{"ruleId":"3937","severity":2,"message":"4176","line":162,"column":55,"nodeType":"3826","messageId":"4177","endLine":162,"endColumn":65,"fix":"4390"},{"ruleId":"3838","severity":1,"message":"3839","line":20,"column":8,"nodeType":"3840","messageId":"3841","endLine":21,"endColumn":1,"fix":"4391"},{"ruleId":"3838","severity":1,"message":"3839","line":35,"column":8,"nodeType":"3840","messageId":"3841","endLine":36,"endColumn":1,"fix":"4392"},{"ruleId":"3838","severity":1,"message":"3839","line":49,"column":8,"nodeType":"3840","messageId":"3841","endLine":50,"endColumn":1,"fix":"4393"},{"ruleId":"3838","severity":1,"message":"3839","line":58,"column":8,"nodeType":"3840","messageId":"3841","endLine":59,"endColumn":1,"fix":"4394"},{"ruleId":"3943","severity":1,"message":"3944","line":31,"column":7,"nodeType":"3889","messageId":"3945","endLine":31,"endColumn":41,"fix":"4395"},{"ruleId":"3947","severity":1,"message":"3944","line":31,"column":7,"nodeType":"3889","messageId":"3945","endLine":31,"endColumn":41,"fix":"4396"},{"ruleId":"3943","severity":1,"message":"3944","line":36,"column":7,"nodeType":"3889","messageId":"3945","endLine":36,"endColumn":40,"fix":"4397"},{"ruleId":"3947","severity":1,"message":"3944","line":36,"column":7,"nodeType":"3889","messageId":"3945","endLine":36,"endColumn":40,"fix":"4398"},{"ruleId":"3943","severity":1,"message":"3944","line":43,"column":7,"nodeType":"3889","messageId":"3945","endLine":43,"endColumn":40,"fix":"4399"},{"ruleId":"3947","severity":1,"message":"3944","line":43,"column":7,"nodeType":"3889","messageId":"3945","endLine":43,"endColumn":40,"fix":"4400"},{"ruleId":"3943","severity":1,"message":"3944","line":50,"column":7,"nodeType":"3889","messageId":"3945","endLine":50,"endColumn":41,"fix":"4401"},{"ruleId":"3947","severity":1,"message":"3944","line":50,"column":7,"nodeType":"3889","messageId":"3945","endLine":50,"endColumn":41,"fix":"4402"},{"ruleId":"3838","severity":1,"message":"3839","line":17,"column":8,"nodeType":"3840","messageId":"3841","endLine":18,"endColumn":1,"fix":"4403"},{"ruleId":"3838","severity":1,"message":"3839","line":29,"column":8,"nodeType":"3840","messageId":"3841","endLine":30,"endColumn":1,"fix":"4404"},{"ruleId":"3838","severity":1,"message":"3839","line":60,"column":8,"nodeType":"3840","messageId":"3841","endLine":61,"endColumn":1,"fix":"4405"},{"ruleId":"3838","severity":1,"message":"3839","line":94,"column":1,"nodeType":"3840","messageId":"3841","endLine":95,"endColumn":1,"fix":"4406"},{"ruleId":"3838","severity":1,"message":"3839","line":101,"column":1,"nodeType":"3840","messageId":"3841","endLine":102,"endColumn":1,"fix":"4407"},{"ruleId":"3838","severity":1,"message":"3839","line":161,"column":1,"nodeType":"3840","messageId":"3841","endLine":162,"endColumn":1,"fix":"4408"},{"ruleId":"3838","severity":1,"message":"3839","line":172,"column":1,"nodeType":"3840","messageId":"3841","endLine":173,"endColumn":1,"fix":"4409"},{"ruleId":"3838","severity":1,"message":"3839","line":183,"column":1,"nodeType":"3840","messageId":"3841","endLine":184,"endColumn":1,"fix":"4410"},{"ruleId":"3838","severity":1,"message":"3839","line":193,"column":1,"nodeType":"3840","messageId":"3841","endLine":194,"endColumn":1,"fix":"4411"},{"ruleId":"3838","severity":1,"message":"3839","line":199,"column":1,"nodeType":"3840","messageId":"3841","endLine":200,"endColumn":1,"fix":"4412"},{"ruleId":"3815","severity":2,"message":"4413","line":200,"column":3,"nodeType":"3817","messageId":"3818","endLine":200,"endColumn":14,"fix":"4414"},{"ruleId":"3815","severity":2,"message":"4415","line":201,"column":3,"nodeType":"3817","messageId":"3818","endLine":201,"endColumn":15,"fix":"4416"},{"ruleId":"3815","severity":2,"message":"4417","line":204,"column":9,"nodeType":"3817","messageId":"3818","endLine":204,"endColumn":15,"fix":"4418"},{"ruleId":"3815","severity":2,"message":"4419","line":205,"column":9,"nodeType":"3817","messageId":"3818","endLine":205,"endColumn":16,"fix":"4420"},{"ruleId":"3838","severity":1,"message":"3839","line":213,"column":1,"nodeType":"3840","messageId":"3841","endLine":214,"endColumn":1,"fix":"4421"},{"ruleId":"3838","severity":1,"message":"3839","line":222,"column":1,"nodeType":"3840","messageId":"3841","endLine":223,"endColumn":1,"fix":"4422"},{"ruleId":"3838","severity":1,"message":"3839","line":238,"column":1,"nodeType":"3840","messageId":"3841","endLine":239,"endColumn":1,"fix":"4423"},{"ruleId":"3838","severity":1,"message":"3839","line":243,"column":1,"nodeType":"3840","messageId":"3841","endLine":244,"endColumn":1,"fix":"4424"},{"ruleId":"3815","severity":2,"message":"4105","line":249,"column":12,"nodeType":"3817","messageId":"4106","endLine":249,"endColumn":13},{"ruleId":"4425","severity":2,"message":"4426","line":260,"column":3,"nodeType":"4427","messageId":"4428","endLine":260,"endColumn":13,"fix":"4429"},{"ruleId":"4425","severity":2,"message":"4430","line":263,"column":3,"nodeType":"4427","messageId":"4428","endLine":263,"endColumn":7,"fix":"4431"},{"ruleId":"4432","severity":2,"message":"4433","line":12,"column":3,"nodeType":"4434","messageId":"4435","endLine":12,"endColumn":7},{"ruleId":"3838","severity":1,"message":"3839","line":38,"column":1,"nodeType":"3840","messageId":"3841","endLine":39,"endColumn":1,"fix":"4436"},{"ruleId":"4425","severity":2,"message":"4437","line":43,"column":3,"nodeType":"4427","messageId":"4428","endLine":43,"endColumn":9,"fix":"4438"},{"ruleId":"4425","severity":2,"message":"4439","line":44,"column":3,"nodeType":"4427","messageId":"4428","endLine":44,"endColumn":13,"fix":"4440"},{"ruleId":"4425","severity":2,"message":"4441","line":45,"column":3,"nodeType":"4427","messageId":"4428","endLine":45,"endColumn":8,"fix":"4442"},{"ruleId":"4425","severity":2,"message":"4443","line":46,"column":3,"nodeType":"4427","messageId":"4428","endLine":46,"endColumn":8,"fix":"4444"},{"ruleId":"4425","severity":2,"message":"4445","line":47,"column":3,"nodeType":"4427","messageId":"4428","endLine":47,"endColumn":11,"fix":"4446"},{"ruleId":"4425","severity":2,"message":"4447","line":48,"column":3,"nodeType":"4427","messageId":"4428","endLine":48,"endColumn":5,"fix":"4448"},{"ruleId":"4425","severity":2,"message":"4449","line":49,"column":3,"nodeType":"4427","messageId":"4428","endLine":49,"endColumn":14,"fix":"4450"},{"ruleId":"4425","severity":2,"message":"4451","line":50,"column":3,"nodeType":"4427","messageId":"4428","endLine":50,"endColumn":15,"fix":"4452"},{"ruleId":"4425","severity":2,"message":"4453","line":51,"column":3,"nodeType":"4427","messageId":"4428","endLine":51,"endColumn":7,"fix":"4454"},{"ruleId":"4425","severity":2,"message":"4455","line":52,"column":3,"nodeType":"4427","messageId":"4428","endLine":52,"endColumn":9,"fix":"4456"},{"ruleId":"4425","severity":2,"message":"4457","line":53,"column":3,"nodeType":"4427","messageId":"4428","endLine":53,"endColumn":7,"fix":"4458"},{"ruleId":"4425","severity":2,"message":"4459","line":54,"column":3,"nodeType":"4427","messageId":"4428","endLine":54,"endColumn":8,"fix":"4460"},{"ruleId":"4425","severity":2,"message":"4461","line":55,"column":3,"nodeType":"4427","messageId":"4428","endLine":55,"endColumn":10,"fix":"4462"},{"ruleId":"4425","severity":2,"message":"4463","line":56,"column":3,"nodeType":"4427","messageId":"4428","endLine":56,"endColumn":8,"fix":"4464"},{"ruleId":"4425","severity":2,"message":"4465","line":57,"column":3,"nodeType":"4427","messageId":"4428","endLine":57,"endColumn":10,"fix":"4466"},{"ruleId":"4425","severity":2,"message":"4467","line":58,"column":3,"nodeType":"4427","messageId":"4428","endLine":58,"endColumn":7,"fix":"4468"},{"ruleId":"4425","severity":2,"message":"4469","line":59,"column":3,"nodeType":"4427","messageId":"4428","endLine":59,"endColumn":10,"fix":"4470"},{"ruleId":"4425","severity":2,"message":"4471","line":60,"column":3,"nodeType":"4427","messageId":"4428","endLine":60,"endColumn":10,"fix":"4472"},{"ruleId":"4425","severity":2,"message":"4473","line":61,"column":3,"nodeType":"4427","messageId":"4428","endLine":61,"endColumn":11,"fix":"4474"},{"ruleId":"4425","severity":2,"message":"4475","line":62,"column":3,"nodeType":"4427","messageId":"4428","endLine":62,"endColumn":11,"fix":"4476"},{"ruleId":"4425","severity":2,"message":"4477","line":64,"column":3,"nodeType":"4427","messageId":"4428","endLine":64,"endColumn":11,"fix":"4478"},{"ruleId":"4425","severity":2,"message":"4479","line":65,"column":3,"nodeType":"4427","messageId":"4428","endLine":65,"endColumn":9,"fix":"4480"},{"ruleId":"4425","severity":2,"message":"4481","line":66,"column":3,"nodeType":"4427","messageId":"4428","endLine":66,"endColumn":5,"fix":"4482"},{"ruleId":"4425","severity":2,"message":"4483","line":67,"column":3,"nodeType":"4427","messageId":"4428","endLine":67,"endColumn":8,"fix":"4484"},{"ruleId":"4425","severity":2,"message":"4485","line":68,"column":3,"nodeType":"4427","messageId":"4428","endLine":68,"endColumn":7,"fix":"4486"},{"ruleId":"4425","severity":2,"message":"4487","line":69,"column":3,"nodeType":"4427","messageId":"4428","endLine":69,"endColumn":9,"fix":"4488"},{"ruleId":"4425","severity":2,"message":"4489","line":70,"column":3,"nodeType":"4427","messageId":"4428","endLine":70,"endColumn":10,"fix":"4490"},{"ruleId":"4425","severity":2,"message":"4491","line":71,"column":3,"nodeType":"4427","messageId":"4428","endLine":71,"endColumn":11,"fix":"4492"},{"ruleId":"4425","severity":2,"message":"4493","line":72,"column":3,"nodeType":"4427","messageId":"4428","endLine":72,"endColumn":9,"fix":"4494"},{"ruleId":"4425","severity":2,"message":"4495","line":73,"column":3,"nodeType":"4427","messageId":"4428","endLine":73,"endColumn":9,"fix":"4496"},{"ruleId":"4425","severity":2,"message":"4497","line":74,"column":3,"nodeType":"4427","messageId":"4428","endLine":74,"endColumn":8,"fix":"4498"},{"ruleId":"4425","severity":2,"message":"4499","line":75,"column":3,"nodeType":"4427","messageId":"4428","endLine":75,"endColumn":12,"fix":"4500"},{"ruleId":"3838","severity":1,"message":"3839","line":29,"column":8,"nodeType":"3840","messageId":"3841","endLine":30,"endColumn":1,"fix":"4501"},{"ruleId":"4502","severity":1,"message":"4503","line":13,"column":3,"nodeType":"3889","messageId":"4504","endLine":77,"endColumn":6},{"ruleId":"3838","severity":1,"message":"3839","line":1,"column":8,"nodeType":"3840","messageId":"3841","endLine":2,"endColumn":1,"fix":"4505"},{"ruleId":"3838","severity":1,"message":"3839","line":5,"column":8,"nodeType":"3840","messageId":"3841","endLine":6,"endColumn":1,"fix":"4506"},{"ruleId":"3838","severity":1,"message":"3839","line":3,"column":8,"nodeType":"3840","messageId":"3841","endLine":4,"endColumn":1,"fix":"4507"},{"ruleId":"3815","severity":2,"message":"4508","line":24,"column":9,"nodeType":"3817","messageId":"3818","endLine":24,"endColumn":15,"fix":"4509"},{"ruleId":"3815","severity":2,"message":"4510","line":27,"column":9,"nodeType":"3817","messageId":"3818","endLine":27,"endColumn":12,"fix":"4511"},{"ruleId":"4502","severity":1,"message":"4503","line":12,"column":3,"nodeType":"3889","messageId":"4504","endLine":24,"endColumn":6},{"ruleId":"3922","severity":1,"message":"3923","line":5,"column":1,"nodeType":"3831","endLine":5,"endColumn":1,"fix":"4512"},{"ruleId":"3922","severity":1,"message":"3925","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"4513"},{"ruleId":"3815","severity":2,"message":"4514","line":32,"column":54,"nodeType":"3817","messageId":"3818","endLine":32,"endColumn":58,"fix":"4515"},{"ruleId":"4516","severity":2,"message":"4517","line":36,"column":5,"nodeType":"4518","messageId":"4519","endLine":36,"endColumn":34},{"ruleId":"3922","severity":1,"message":"3923","line":44,"column":1,"nodeType":"3831","endLine":44,"endColumn":1,"fix":"4520"},{"ruleId":"3922","severity":1,"message":"3925","line":48,"column":1,"nodeType":"3831","endLine":48,"endColumn":1,"fix":"4521"},{"ruleId":"3815","severity":2,"message":"4522","line":75,"column":51,"nodeType":"3817","messageId":"3818","endLine":75,"endColumn":61,"fix":"4523"},{"ruleId":"4516","severity":2,"message":"4517","line":79,"column":5,"nodeType":"4518","messageId":"4519","endLine":79,"endColumn":31},{"ruleId":"4083","severity":1,"message":"4084","line":15,"column":10,"nodeType":"3850","messageId":"4085","endLine":15,"endColumn":27,"fix":"4524"},{"ruleId":"3887","severity":2,"message":"3888","line":71,"column":5,"nodeType":"3889","messageId":"3890","endLine":71,"endColumn":64,"suggestions":"4525"},{"ruleId":"4083","severity":1,"message":"4084","line":75,"column":10,"nodeType":"3850","messageId":"4085","endLine":75,"endColumn":27,"fix":"4526"},{"ruleId":"3887","severity":2,"message":"3888","line":131,"column":5,"nodeType":"3889","messageId":"3890","endLine":131,"endColumn":71,"suggestions":"4527"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"4528"},{"ruleId":"3922","severity":1,"message":"3925","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"4529"},{"ruleId":"3815","severity":2,"message":"4530","line":37,"column":27,"nodeType":"3817","messageId":"3818","endLine":37,"endColumn":31,"fix":"4531"},{"ruleId":"3815","severity":2,"message":"4514","line":38,"column":11,"nodeType":"3817","messageId":"3818","endLine":38,"endColumn":15,"fix":"4532"},{"ruleId":"3815","severity":2,"message":"4514","line":39,"column":8,"nodeType":"3817","messageId":"3818","endLine":39,"endColumn":12,"fix":"4533"},{"ruleId":"3815","severity":2,"message":"4514","line":40,"column":34,"nodeType":"3817","messageId":"3818","endLine":40,"endColumn":38,"fix":"4534"},{"ruleId":"3922","severity":1,"message":"3923","line":49,"column":1,"nodeType":"3831","endLine":49,"endColumn":1,"fix":"4535"},{"ruleId":"3922","severity":1,"message":"3925","line":53,"column":1,"nodeType":"3831","endLine":53,"endColumn":1,"fix":"4536"},{"ruleId":"3815","severity":2,"message":"4530","line":81,"column":32,"nodeType":"3817","messageId":"3818","endLine":81,"endColumn":36,"fix":"4537"},{"ruleId":"3815","severity":2,"message":"4514","line":82,"column":11,"nodeType":"3817","messageId":"3818","endLine":82,"endColumn":15,"fix":"4538"},{"ruleId":"3815","severity":2,"message":"4514","line":83,"column":8,"nodeType":"3817","messageId":"3818","endLine":83,"endColumn":12,"fix":"4539"},{"ruleId":"3815","severity":2,"message":"4514","line":84,"column":40,"nodeType":"3817","messageId":"3818","endLine":84,"endColumn":44,"fix":"4540"},{"ruleId":"4083","severity":1,"message":"4084","line":15,"column":10,"nodeType":"3850","messageId":"4085","endLine":15,"endColumn":21,"fix":"4541"},{"ruleId":"3943","severity":1,"message":"3944","line":56,"column":5,"nodeType":"3889","messageId":"3945","endLine":56,"endColumn":29,"fix":"4542"},{"ruleId":"3947","severity":1,"message":"3944","line":56,"column":5,"nodeType":"3889","messageId":"3945","endLine":56,"endColumn":29,"fix":"4543"},{"ruleId":"4083","severity":1,"message":"4084","line":60,"column":10,"nodeType":"3850","messageId":"4085","endLine":60,"endColumn":26,"fix":"4544"},{"ruleId":"3943","severity":1,"message":"3944","line":105,"column":5,"nodeType":"3889","messageId":"3945","endLine":105,"endColumn":36,"fix":"4545"},{"ruleId":"3947","severity":1,"message":"3944","line":105,"column":5,"nodeType":"3889","messageId":"3945","endLine":105,"endColumn":36,"fix":"4546"},{"ruleId":"3943","severity":1,"message":"3944","line":112,"column":5,"nodeType":"3889","messageId":"3945","endLine":112,"endColumn":42,"fix":"4547"},{"ruleId":"3947","severity":1,"message":"3944","line":112,"column":5,"nodeType":"3889","messageId":"3945","endLine":112,"endColumn":42,"fix":"4548"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"4549"},{"ruleId":"3922","severity":1,"message":"3925","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"4550"},{"ruleId":"3838","severity":1,"message":"3839","line":155,"column":8,"nodeType":"3840","messageId":"3841","endLine":156,"endColumn":1,"fix":"4551"},{"ruleId":"4083","severity":1,"message":"4084","line":14,"column":10,"nodeType":"3850","messageId":"4085","endLine":14,"endColumn":17,"fix":"4552"},{"ruleId":"3943","severity":1,"message":"3944","line":60,"column":7,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":33,"fix":"4553"},{"ruleId":"3947","severity":1,"message":"3944","line":60,"column":7,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":33,"fix":"4554"},{"ruleId":"3943","severity":1,"message":"3944","line":73,"column":7,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":51,"fix":"4555"},{"ruleId":"3947","severity":1,"message":"3944","line":73,"column":7,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":51,"fix":"4556"},{"ruleId":"3943","severity":1,"message":"3944","line":88,"column":7,"nodeType":"3889","messageId":"3945","endLine":88,"endColumn":39,"fix":"4557"},{"ruleId":"3947","severity":1,"message":"3944","line":88,"column":7,"nodeType":"3889","messageId":"3945","endLine":88,"endColumn":39,"fix":"4558"},{"ruleId":"3943","severity":1,"message":"3944","line":103,"column":7,"nodeType":"3889","messageId":"3945","endLine":103,"endColumn":41,"fix":"4559"},{"ruleId":"3947","severity":1,"message":"3944","line":103,"column":7,"nodeType":"3889","messageId":"3945","endLine":103,"endColumn":41,"fix":"4560"},{"ruleId":"3943","severity":1,"message":"3944","line":197,"column":7,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":47,"fix":"4561"},{"ruleId":"3947","severity":1,"message":"3944","line":197,"column":7,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":47,"fix":"4562"},{"ruleId":"3943","severity":1,"message":"3944","line":212,"column":7,"nodeType":"3889","messageId":"3945","endLine":212,"endColumn":67,"fix":"4563"},{"ruleId":"3947","severity":1,"message":"3944","line":212,"column":7,"nodeType":"3889","messageId":"3945","endLine":212,"endColumn":67,"fix":"4564"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":7,"column":1,"nodeType":"3831","endLine":7,"endColumn":1,"fix":"4565"},{"ruleId":"3815","severity":2,"message":"4514","line":20,"column":52,"nodeType":"3817","messageId":"3818","endLine":20,"endColumn":56,"fix":"4566"},{"ruleId":"3815","severity":2,"message":"4514","line":23,"column":8,"nodeType":"3817","messageId":"3818","endLine":23,"endColumn":12,"fix":"4567"},{"ruleId":"3815","severity":2,"message":"4514","line":24,"column":36,"nodeType":"3817","messageId":"3818","endLine":24,"endColumn":40,"fix":"4568"},{"ruleId":"4015","severity":2,"message":"4016","line":25,"column":11,"nodeType":"4017","messageId":"4018","endLine":25,"endColumn":31},{"ruleId":"4516","severity":2,"message":"4517","line":29,"column":5,"nodeType":"4518","messageId":"4519","endLine":29,"endColumn":19},{"ruleId":"3829","severity":1,"message":"4569","line":33,"column":1,"nodeType":"3831","endLine":35,"endColumn":4,"fix":"4570"},{"ruleId":"3829","severity":1,"message":"4571","line":33,"column":1,"nodeType":"3831","endLine":35,"endColumn":4,"fix":"4572"},{"ruleId":"3833","severity":1,"message":"3834","line":33,"column":1,"nodeType":"3831","endLine":35,"endColumn":4},{"ruleId":"3815","severity":2,"message":"4514","line":37,"column":23,"nodeType":"3817","messageId":"3818","endLine":37,"endColumn":27,"fix":"4573"},{"ruleId":"3815","severity":2,"message":"4514","line":41,"column":8,"nodeType":"3817","messageId":"3818","endLine":41,"endColumn":12,"fix":"4574"},{"ruleId":"3815","severity":2,"message":"4514","line":43,"column":8,"nodeType":"3817","messageId":"3818","endLine":43,"endColumn":12,"fix":"4575"},{"ruleId":"4015","severity":2,"message":"4016","line":45,"column":11,"nodeType":"4017","messageId":"4018","endLine":45,"endColumn":37},{"ruleId":"4516","severity":2,"message":"4517","line":49,"column":5,"nodeType":"4518","messageId":"4519","endLine":49,"endColumn":19},{"ruleId":"3922","severity":1,"message":"3923","line":54,"column":1,"nodeType":"3831","endLine":54,"endColumn":1,"fix":"4576"},{"ruleId":"3815","severity":2,"message":"4514","line":67,"column":51,"nodeType":"3817","messageId":"3818","endLine":67,"endColumn":55,"fix":"4577"},{"ruleId":"3815","severity":2,"message":"4514","line":70,"column":8,"nodeType":"3817","messageId":"3818","endLine":70,"endColumn":12,"fix":"4578"},{"ruleId":"3815","severity":2,"message":"4514","line":71,"column":35,"nodeType":"3817","messageId":"3818","endLine":71,"endColumn":39,"fix":"4579"},{"ruleId":"4015","severity":2,"message":"4016","line":72,"column":11,"nodeType":"4017","messageId":"4018","endLine":72,"endColumn":31},{"ruleId":"4516","severity":2,"message":"4517","line":76,"column":5,"nodeType":"4518","messageId":"4519","endLine":76,"endColumn":19},{"ruleId":"3829","severity":1,"message":"4569","line":80,"column":1,"nodeType":"3831","endLine":82,"endColumn":4,"fix":"4580"},{"ruleId":"3829","severity":1,"message":"4571","line":80,"column":1,"nodeType":"3831","endLine":82,"endColumn":4,"fix":"4581"},{"ruleId":"3833","severity":1,"message":"3834","line":80,"column":1,"nodeType":"3831","endLine":82,"endColumn":4},{"ruleId":"3815","severity":2,"message":"4514","line":84,"column":23,"nodeType":"3817","messageId":"3818","endLine":84,"endColumn":27,"fix":"4582"},{"ruleId":"3815","severity":2,"message":"4514","line":88,"column":8,"nodeType":"3817","messageId":"3818","endLine":88,"endColumn":12,"fix":"4583"},{"ruleId":"3815","severity":2,"message":"4514","line":90,"column":8,"nodeType":"3817","messageId":"3818","endLine":90,"endColumn":12,"fix":"4584"},{"ruleId":"4015","severity":2,"message":"4016","line":92,"column":11,"nodeType":"4017","messageId":"4018","endLine":92,"endColumn":37},{"ruleId":"4516","severity":2,"message":"4517","line":96,"column":5,"nodeType":"4518","messageId":"4519","endLine":96,"endColumn":19},{"ruleId":"3922","severity":1,"message":"3923","line":101,"column":1,"nodeType":"3831","endLine":101,"endColumn":1,"fix":"4585"},{"ruleId":"3815","severity":2,"message":"4514","line":116,"column":57,"nodeType":"3817","messageId":"3818","endLine":116,"endColumn":61,"fix":"4586"},{"ruleId":"3815","severity":2,"message":"4514","line":118,"column":8,"nodeType":"3817","messageId":"3818","endLine":118,"endColumn":12,"fix":"4587"},{"ruleId":"3815","severity":2,"message":"4514","line":119,"column":27,"nodeType":"3817","messageId":"3818","endLine":119,"endColumn":31,"fix":"4588"},{"ruleId":"4516","severity":2,"message":"4517","line":121,"column":7,"nodeType":"4518","messageId":"4519","endLine":121,"endColumn":26},{"ruleId":"3829","severity":1,"message":"4569","line":128,"column":1,"nodeType":"3831","endLine":130,"endColumn":4,"fix":"4589"},{"ruleId":"3833","severity":1,"message":"3834","line":128,"column":1,"nodeType":"3831","endLine":130,"endColumn":4},{"ruleId":"3815","severity":2,"message":"4514","line":132,"column":23,"nodeType":"3817","messageId":"3818","endLine":132,"endColumn":27,"fix":"4590"},{"ruleId":"3815","severity":2,"message":"4514","line":133,"column":15,"nodeType":"3817","messageId":"3818","endLine":133,"endColumn":19,"fix":"4591"},{"ruleId":"3815","severity":2,"message":"4514","line":134,"column":33,"nodeType":"3817","messageId":"3818","endLine":134,"endColumn":37,"fix":"4592"},{"ruleId":"4516","severity":2,"message":"4517","line":136,"column":7,"nodeType":"4518","messageId":"4519","endLine":136,"endColumn":32},{"ruleId":"3922","severity":1,"message":"3923","line":144,"column":1,"nodeType":"3831","endLine":144,"endColumn":1,"fix":"4593"},{"ruleId":"3815","severity":2,"message":"4514","line":158,"column":58,"nodeType":"3817","messageId":"3818","endLine":158,"endColumn":62,"fix":"4594"},{"ruleId":"3815","severity":2,"message":"4514","line":160,"column":8,"nodeType":"3817","messageId":"3818","endLine":160,"endColumn":12,"fix":"4595"},{"ruleId":"3815","severity":2,"message":"4514","line":161,"column":27,"nodeType":"3817","messageId":"3818","endLine":161,"endColumn":31,"fix":"4596"},{"ruleId":"4516","severity":2,"message":"4517","line":163,"column":7,"nodeType":"4518","messageId":"4519","endLine":163,"endColumn":26},{"ruleId":"3829","severity":1,"message":"4569","line":170,"column":1,"nodeType":"3831","endLine":172,"endColumn":4,"fix":"4597"},{"ruleId":"3833","severity":1,"message":"3834","line":170,"column":1,"nodeType":"3831","endLine":172,"endColumn":4},{"ruleId":"3815","severity":2,"message":"4514","line":174,"column":23,"nodeType":"3817","messageId":"3818","endLine":174,"endColumn":27,"fix":"4598"},{"ruleId":"3815","severity":2,"message":"4514","line":175,"column":15,"nodeType":"3817","messageId":"3818","endLine":175,"endColumn":19,"fix":"4599"},{"ruleId":"3815","severity":2,"message":"4514","line":176,"column":33,"nodeType":"3817","messageId":"3818","endLine":176,"endColumn":37,"fix":"4600"},{"ruleId":"4516","severity":2,"message":"4517","line":178,"column":7,"nodeType":"4518","messageId":"4519","endLine":178,"endColumn":32},{"ruleId":"3922","severity":1,"message":"3923","line":186,"column":1,"nodeType":"3831","endLine":186,"endColumn":1,"fix":"4601"},{"ruleId":"3815","severity":2,"message":"4514","line":200,"column":57,"nodeType":"3817","messageId":"3818","endLine":200,"endColumn":61,"fix":"4602"},{"ruleId":"3815","severity":2,"message":"4514","line":202,"column":8,"nodeType":"3817","messageId":"3818","endLine":202,"endColumn":12,"fix":"4603"},{"ruleId":"3815","severity":2,"message":"4514","line":203,"column":27,"nodeType":"3817","messageId":"3818","endLine":203,"endColumn":31,"fix":"4604"},{"ruleId":"4516","severity":2,"message":"4517","line":205,"column":7,"nodeType":"4518","messageId":"4519","endLine":205,"endColumn":26},{"ruleId":"3829","severity":1,"message":"4569","line":212,"column":1,"nodeType":"3831","endLine":214,"endColumn":4,"fix":"4605"},{"ruleId":"3833","severity":1,"message":"3834","line":212,"column":1,"nodeType":"3831","endLine":214,"endColumn":4},{"ruleId":"3815","severity":2,"message":"4514","line":216,"column":23,"nodeType":"3817","messageId":"3818","endLine":216,"endColumn":27,"fix":"4606"},{"ruleId":"3815","severity":2,"message":"4514","line":217,"column":15,"nodeType":"3817","messageId":"3818","endLine":217,"endColumn":19,"fix":"4607"},{"ruleId":"3815","severity":2,"message":"4514","line":218,"column":33,"nodeType":"3817","messageId":"3818","endLine":218,"endColumn":37,"fix":"4608"},{"ruleId":"4516","severity":2,"message":"4517","line":220,"column":7,"nodeType":"4518","messageId":"4519","endLine":220,"endColumn":32},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"4609"},{"ruleId":"3922","severity":1,"message":"3923","line":36,"column":1,"nodeType":"3831","endLine":36,"endColumn":1,"fix":"4610"},{"ruleId":"3922","severity":1,"message":"3923","line":60,"column":1,"nodeType":"3831","endLine":60,"endColumn":1,"fix":"4611"},{"ruleId":"3852","severity":2,"message":"4612","line":88,"column":30,"nodeType":"3817","messageId":"3854","endLine":88,"endColumn":35},{"ruleId":"3852","severity":2,"message":"4613","line":88,"column":54,"nodeType":"3817","messageId":"3854","endLine":88,"endColumn":61},{"ruleId":"3922","severity":1,"message":"3923","line":94,"column":1,"nodeType":"3831","endLine":94,"endColumn":1,"fix":"4614"},{"ruleId":"3852","severity":2,"message":"4612","line":122,"column":30,"nodeType":"3817","messageId":"3854","endLine":122,"endColumn":35},{"ruleId":"3852","severity":2,"message":"4613","line":122,"column":54,"nodeType":"3817","messageId":"3854","endLine":122,"endColumn":61},{"ruleId":"4083","severity":1,"message":"4084","line":19,"column":10,"nodeType":"3850","messageId":"4085","endLine":19,"endColumn":18,"fix":"4615"},{"ruleId":"3943","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":45,"fix":"4616"},{"ruleId":"3947","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":45,"fix":"4617"},{"ruleId":"4083","severity":1,"message":"4084","line":48,"column":10,"nodeType":"3850","messageId":"4085","endLine":48,"endColumn":23,"fix":"4618"},{"ruleId":"3943","severity":1,"message":"3944","line":51,"column":5,"nodeType":"3889","messageId":"3945","endLine":51,"endColumn":45,"fix":"4619"},{"ruleId":"3947","severity":1,"message":"3944","line":51,"column":5,"nodeType":"3889","messageId":"3945","endLine":51,"endColumn":45,"fix":"4620"},{"ruleId":"4083","severity":1,"message":"4084","line":75,"column":10,"nodeType":"3850","messageId":"4085","endLine":75,"endColumn":25,"fix":"4621"},{"ruleId":"3943","severity":1,"message":"3944","line":78,"column":5,"nodeType":"3889","messageId":"3945","endLine":78,"endColumn":37,"fix":"4622"},{"ruleId":"3947","severity":1,"message":"3944","line":78,"column":5,"nodeType":"3889","messageId":"3945","endLine":78,"endColumn":37,"fix":"4623"},{"ruleId":"3943","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3889","messageId":"3945","endLine":83,"endColumn":50,"fix":"4624"},{"ruleId":"3947","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3889","messageId":"3945","endLine":83,"endColumn":50,"fix":"4625"},{"ruleId":"3943","severity":1,"message":"3944","line":93,"column":5,"nodeType":"3889","messageId":"3945","endLine":93,"endColumn":47,"fix":"4626"},{"ruleId":"3947","severity":1,"message":"3944","line":93,"column":5,"nodeType":"3889","messageId":"3945","endLine":93,"endColumn":47,"fix":"4627"},{"ruleId":"4083","severity":1,"message":"4084","line":104,"column":10,"nodeType":"3850","messageId":"4085","endLine":104,"endColumn":30,"fix":"4628"},{"ruleId":"3943","severity":1,"message":"3944","line":107,"column":5,"nodeType":"3889","messageId":"3945","endLine":107,"endColumn":43,"fix":"4629"},{"ruleId":"3947","severity":1,"message":"3944","line":107,"column":5,"nodeType":"3889","messageId":"3945","endLine":107,"endColumn":43,"fix":"4630"},{"ruleId":"3943","severity":1,"message":"3944","line":112,"column":5,"nodeType":"3889","messageId":"3945","endLine":112,"endColumn":52,"fix":"4631"},{"ruleId":"3947","severity":1,"message":"3944","line":112,"column":5,"nodeType":"3889","messageId":"3945","endLine":112,"endColumn":52,"fix":"4632"},{"ruleId":"3887","severity":2,"message":"3888","line":112,"column":5,"nodeType":"3889","messageId":"3890","endLine":112,"endColumn":52,"suggestions":"4633"},{"ruleId":"3887","severity":2,"message":"3888","line":113,"column":5,"nodeType":"3889","messageId":"3890","endLine":113,"endColumn":73,"suggestions":"4634"},{"ruleId":"3943","severity":1,"message":"3944","line":122,"column":5,"nodeType":"3889","messageId":"3945","endLine":122,"endColumn":53,"fix":"4635"},{"ruleId":"3947","severity":1,"message":"3944","line":122,"column":5,"nodeType":"3889","messageId":"3945","endLine":122,"endColumn":53,"fix":"4636"},{"ruleId":"3887","severity":2,"message":"3888","line":127,"column":7,"nodeType":"3889","messageId":"3890","endLine":127,"endColumn":63,"suggestions":"4637"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":7,"column":1,"nodeType":"3831","endLine":7,"endColumn":1,"fix":"4638"},{"ruleId":"3922","severity":1,"message":"3925","line":10,"column":1,"nodeType":"3831","endLine":10,"endColumn":1,"fix":"4639"},{"ruleId":"3922","severity":1,"message":"3923","line":47,"column":1,"nodeType":"3831","endLine":47,"endColumn":1,"fix":"4640"},{"ruleId":"3922","severity":1,"message":"3925","line":50,"column":1,"nodeType":"3831","endLine":50,"endColumn":1,"fix":"4641"},{"ruleId":"3922","severity":1,"message":"3923","line":88,"column":1,"nodeType":"3831","endLine":88,"endColumn":1,"fix":"4642"},{"ruleId":"3922","severity":1,"message":"3923","line":107,"column":1,"nodeType":"3831","endLine":107,"endColumn":1,"fix":"4643"},{"ruleId":"4083","severity":1,"message":"4084","line":17,"column":10,"nodeType":"3850","messageId":"4085","endLine":17,"endColumn":27,"fix":"4644"},{"ruleId":"3943","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":49,"fix":"4645"},{"ruleId":"3947","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":49,"fix":"4646"},{"ruleId":"3943","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":49,"fix":"4647"},{"ruleId":"3947","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":49,"fix":"4648"},{"ruleId":"3943","severity":1,"message":"3944","line":30,"column":5,"nodeType":"3889","messageId":"3945","endLine":30,"endColumn":52,"fix":"4649"},{"ruleId":"3947","severity":1,"message":"3944","line":30,"column":5,"nodeType":"3889","messageId":"3945","endLine":30,"endColumn":52,"fix":"4650"},{"ruleId":"3943","severity":1,"message":"3944","line":35,"column":5,"nodeType":"3889","messageId":"3945","endLine":35,"endColumn":59,"fix":"4651"},{"ruleId":"3947","severity":1,"message":"3944","line":35,"column":5,"nodeType":"3889","messageId":"3945","endLine":35,"endColumn":59,"fix":"4652"},{"ruleId":"4083","severity":1,"message":"4084","line":39,"column":10,"nodeType":"3850","messageId":"4085","endLine":39,"endColumn":26,"fix":"4653"},{"ruleId":"3943","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":47,"fix":"4654"},{"ruleId":"3947","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":47,"fix":"4655"},{"ruleId":"3943","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":47,"endColumn":50,"fix":"4656"},{"ruleId":"3947","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":47,"endColumn":50,"fix":"4657"},{"ruleId":"3943","severity":1,"message":"3944","line":52,"column":5,"nodeType":"3889","messageId":"3945","endLine":52,"endColumn":49,"fix":"4658"},{"ruleId":"3947","severity":1,"message":"3944","line":52,"column":5,"nodeType":"3889","messageId":"3945","endLine":52,"endColumn":49,"fix":"4659"},{"ruleId":"3943","severity":1,"message":"3944","line":57,"column":5,"nodeType":"3889","messageId":"3945","endLine":57,"endColumn":57,"fix":"4660"},{"ruleId":"3947","severity":1,"message":"3944","line":57,"column":5,"nodeType":"3889","messageId":"3945","endLine":57,"endColumn":57,"fix":"4661"},{"ruleId":"3943","severity":1,"message":"3944","line":70,"column":7,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":51,"fix":"4662"},{"ruleId":"3947","severity":1,"message":"3944","line":70,"column":7,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":51,"fix":"4663"},{"ruleId":"3943","severity":1,"message":"3944","line":74,"column":7,"nodeType":"3889","messageId":"3945","endLine":74,"endColumn":44,"fix":"4664"},{"ruleId":"3947","severity":1,"message":"3944","line":74,"column":7,"nodeType":"3889","messageId":"3945","endLine":74,"endColumn":44,"fix":"4665"},{"ruleId":"3943","severity":1,"message":"3944","line":86,"column":7,"nodeType":"3889","messageId":"3945","endLine":86,"endColumn":44,"fix":"4666"},{"ruleId":"3947","severity":1,"message":"3944","line":86,"column":7,"nodeType":"3889","messageId":"3945","endLine":86,"endColumn":44,"fix":"4667"},{"ruleId":"3943","severity":1,"message":"3944","line":90,"column":7,"nodeType":"3889","messageId":"3945","endLine":90,"endColumn":51,"fix":"4668"},{"ruleId":"3947","severity":1,"message":"3944","line":90,"column":7,"nodeType":"3889","messageId":"3945","endLine":90,"endColumn":51,"fix":"4669"},{"ruleId":"4083","severity":1,"message":"4084","line":95,"column":10,"nodeType":"3850","messageId":"4085","endLine":95,"endColumn":25,"fix":"4670"},{"ruleId":"3937","severity":2,"message":"3938","line":97,"column":20,"nodeType":"3826","messageId":"3939","endLine":97,"endColumn":35},{"ruleId":"3943","severity":1,"message":"3944","line":98,"column":5,"nodeType":"3889","messageId":"3945","endLine":98,"endColumn":36,"fix":"4671"},{"ruleId":"3947","severity":1,"message":"3944","line":98,"column":5,"nodeType":"3889","messageId":"3945","endLine":98,"endColumn":36,"fix":"4672"},{"ruleId":null,"message":"4673","line":113,"column":7,"severity":1,"nodeType":null,"fix":"4674"},{"ruleId":"4061","severity":2,"message":"4062","line":114,"column":8,"nodeType":"4253","messageId":"4063","endLine":114,"endColumn":28},{"ruleId":"4083","severity":1,"message":"4084","line":121,"column":10,"nodeType":"3850","messageId":"4085","endLine":121,"endColumn":30,"fix":"4675"},{"ruleId":"3937","severity":2,"message":"3938","line":123,"column":20,"nodeType":"4676","messageId":"3939","endLine":123,"endColumn":46},{"ruleId":"3943","severity":1,"message":"3944","line":124,"column":5,"nodeType":"3889","messageId":"3945","endLine":124,"endColumn":36,"fix":"4677"},{"ruleId":"3947","severity":1,"message":"3944","line":124,"column":5,"nodeType":"3889","messageId":"3945","endLine":124,"endColumn":36,"fix":"4678"},{"ruleId":"3943","severity":1,"message":"3944","line":129,"column":5,"nodeType":"3889","messageId":"3945","endLine":129,"endColumn":44,"fix":"4679"},{"ruleId":"3947","severity":1,"message":"3944","line":129,"column":5,"nodeType":"3889","messageId":"3945","endLine":129,"endColumn":44,"fix":"4680"},{"ruleId":null,"message":"4673","line":143,"column":5,"severity":1,"nodeType":null,"fix":"4681"},{"ruleId":"4015","severity":2,"message":"4016","line":144,"column":11,"nodeType":"4017","messageId":"4018","endLine":148,"endColumn":7},{"ruleId":"4061","severity":2,"message":"4062","line":144,"column":27,"nodeType":"4253","messageId":"4063","endLine":144,"endColumn":52},{"ruleId":"3943","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":36,"fix":"4682"},{"ruleId":"3947","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":36,"fix":"4683"},{"ruleId":"3922","severity":1,"message":"3923","line":2,"column":1,"nodeType":"3831","endLine":2,"endColumn":1,"fix":"4684"},{"ruleId":"3815","severity":2,"message":"4685","line":9,"column":17,"nodeType":"3817","messageId":"3818","endLine":9,"endColumn":32},{"ruleId":"3815","severity":2,"message":"4686","line":10,"column":3,"nodeType":"3817","messageId":"3818","endLine":10,"endColumn":28,"fix":"4687"},{"ruleId":"3815","severity":2,"message":"4688","line":11,"column":3,"nodeType":"3817","messageId":"3818","endLine":11,"endColumn":28,"fix":"4689"},{"ruleId":"4690","severity":2,"message":"4691","line":16,"column":3,"nodeType":null,"messageId":"4692","endLine":16,"endColumn":41,"fix":"4693"},{"ruleId":"3815","severity":2,"message":"3908","line":16,"column":12,"nodeType":"3817","messageId":"3818","endLine":16,"endColumn":13,"fix":"4694"},{"ruleId":"3922","severity":1,"message":"3923","line":25,"column":1,"nodeType":"3831","endLine":25,"endColumn":1,"fix":"4695"},{"ruleId":"3922","severity":1,"message":"3925","line":28,"column":1,"nodeType":"3831","endLine":28,"endColumn":1,"fix":"4696"},{"ruleId":"3815","severity":2,"message":"4530","line":56,"column":31,"nodeType":"3817","messageId":"3818","endLine":56,"endColumn":35,"fix":"4697"},{"ruleId":"3815","severity":2,"message":"4514","line":57,"column":11,"nodeType":"3817","messageId":"3818","endLine":57,"endColumn":15,"fix":"4698"},{"ruleId":"3815","severity":2,"message":"4514","line":58,"column":8,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":12,"fix":"4699"},{"ruleId":"3815","severity":2,"message":"4700","line":59,"column":7,"nodeType":"3817","messageId":"3818","endLine":59,"endColumn":33,"fix":"4701"},{"ruleId":"3815","severity":2,"message":"4514","line":62,"column":31,"nodeType":"3817","messageId":"3818","endLine":62,"endColumn":35,"fix":"4702"},{"ruleId":"4703","severity":1,"message":"4704","line":11,"column":19,"nodeType":"3817","messageId":"4705","endLine":11,"endColumn":21},{"ruleId":"4703","severity":1,"message":"4704","line":20,"column":19,"nodeType":"3817","messageId":"4705","endLine":20,"endColumn":21},{"ruleId":"4703","severity":1,"message":"4704","line":29,"column":19,"nodeType":"3817","messageId":"4705","endLine":29,"endColumn":21},{"ruleId":"4703","severity":1,"message":"4704","line":39,"column":19,"nodeType":"3817","messageId":"4705","endLine":39,"endColumn":21},{"ruleId":"4703","severity":1,"message":"4704","line":48,"column":19,"nodeType":"3817","messageId":"4705","endLine":48,"endColumn":21},{"ruleId":"4703","severity":1,"message":"4704","line":57,"column":19,"nodeType":"3817","messageId":"4705","endLine":57,"endColumn":21},{"ruleId":"4703","severity":1,"message":"4704","line":66,"column":19,"nodeType":"3817","messageId":"4705","endLine":66,"endColumn":21},{"ruleId":"4703","severity":1,"message":"4704","line":76,"column":19,"nodeType":"3817","messageId":"4705","endLine":76,"endColumn":21},{"ruleId":"3815","severity":2,"message":"4706","line":4,"column":13,"nodeType":"3817","messageId":"3818","endLine":4,"endColumn":39},{"ruleId":"3815","severity":2,"message":"4514","line":4,"column":54,"nodeType":"3817","messageId":"3818","endLine":4,"endColumn":65,"fix":"4707"},{"ruleId":"3815","severity":2,"message":"4708","line":6,"column":51,"nodeType":"3817","messageId":"3818","endLine":6,"endColumn":58,"fix":"4709"},{"ruleId":"3922","severity":1,"message":"3923","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"4710"},{"ruleId":"3815","severity":2,"message":"4514","line":36,"column":23,"nodeType":"3817","messageId":"3818","endLine":36,"endColumn":27,"fix":"4711"},{"ruleId":"3815","severity":2,"message":"4712","line":39,"column":5,"nodeType":"3817","messageId":"3818","endLine":39,"endColumn":29,"fix":"4713"},{"ruleId":"3815","severity":2,"message":"4712","line":40,"column":29,"nodeType":"3817","messageId":"3818","endLine":40,"endColumn":35,"fix":"4714"},{"ruleId":"4516","severity":2,"message":"4517","line":41,"column":5,"nodeType":"4518","messageId":"4519","endLine":41,"endColumn":23},{"ruleId":"3922","severity":1,"message":"3923","line":48,"column":1,"nodeType":"3831","endLine":48,"endColumn":1,"fix":"4715"},{"ruleId":"3815","severity":2,"message":"4514","line":73,"column":23,"nodeType":"3817","messageId":"3818","endLine":73,"endColumn":27,"fix":"4716"},{"ruleId":"3815","severity":2,"message":"4712","line":76,"column":5,"nodeType":"3817","messageId":"3818","endLine":76,"endColumn":29,"fix":"4717"},{"ruleId":"3815","severity":2,"message":"4718","line":76,"column":31,"nodeType":"3817","messageId":"3818","endLine":76,"endColumn":55,"fix":"4719"},{"ruleId":"3815","severity":2,"message":"4712","line":77,"column":30,"nodeType":"3817","messageId":"3818","endLine":77,"endColumn":36,"fix":"4720"},{"ruleId":"3815","severity":2,"message":"4718","line":77,"column":38,"nodeType":"3817","messageId":"3818","endLine":77,"endColumn":44,"fix":"4721"},{"ruleId":"4516","severity":2,"message":"4517","line":78,"column":5,"nodeType":"4518","messageId":"4519","endLine":78,"endColumn":31},{"ruleId":"3922","severity":1,"message":"3923","line":85,"column":1,"nodeType":"3831","endLine":85,"endColumn":1,"fix":"4722"},{"ruleId":"3815","severity":2,"message":"4514","line":112,"column":23,"nodeType":"3817","messageId":"3818","endLine":112,"endColumn":27,"fix":"4723"},{"ruleId":"3815","severity":2,"message":"4712","line":115,"column":5,"nodeType":"3817","messageId":"3818","endLine":115,"endColumn":29,"fix":"4724"},{"ruleId":"3815","severity":2,"message":"4718","line":115,"column":31,"nodeType":"3817","messageId":"3818","endLine":115,"endColumn":55,"fix":"4725"},{"ruleId":"3815","severity":2,"message":"4726","line":116,"column":3,"nodeType":"3817","messageId":"3818","endLine":116,"endColumn":27,"fix":"4727"},{"ruleId":"3815","severity":2,"message":"4712","line":118,"column":31,"nodeType":"3817","messageId":"3818","endLine":118,"endColumn":37,"fix":"4728"},{"ruleId":"3815","severity":2,"message":"4718","line":118,"column":39,"nodeType":"3817","messageId":"3818","endLine":118,"endColumn":45,"fix":"4729"},{"ruleId":"3815","severity":2,"message":"4726","line":118,"column":47,"nodeType":"3817","messageId":"3818","endLine":118,"endColumn":53,"fix":"4730"},{"ruleId":"4516","severity":2,"message":"4517","line":119,"column":5,"nodeType":"4518","messageId":"4519","endLine":119,"endColumn":39},{"ruleId":"4083","severity":1,"message":"4084","line":16,"column":10,"nodeType":"3850","messageId":"4085","endLine":16,"endColumn":17,"fix":"4731"},{"ruleId":"4083","severity":1,"message":"4084","line":49,"column":10,"nodeType":"3850","messageId":"4085","endLine":49,"endColumn":18,"fix":"4732"},{"ruleId":"4083","severity":1,"message":"4084","line":82,"column":10,"nodeType":"3850","messageId":"4085","endLine":82,"endColumn":19,"fix":"4733"},{"ruleId":"3943","severity":1,"message":"3944","line":125,"column":5,"nodeType":"3889","messageId":"3945","endLine":125,"endColumn":37,"fix":"4734"},{"ruleId":"3947","severity":1,"message":"3944","line":125,"column":5,"nodeType":"3889","messageId":"3945","endLine":125,"endColumn":37,"fix":"4735"},{"ruleId":"3943","severity":1,"message":"3944","line":128,"column":5,"nodeType":"3889","messageId":"3945","endLine":128,"endColumn":43,"fix":"4736"},{"ruleId":"3947","severity":1,"message":"3944","line":128,"column":5,"nodeType":"3889","messageId":"3945","endLine":128,"endColumn":43,"fix":"4737"},{"ruleId":"3943","severity":1,"message":"3944","line":136,"column":5,"nodeType":"3889","messageId":"3945","endLine":136,"endColumn":40,"fix":"4738"},{"ruleId":"3947","severity":1,"message":"3944","line":136,"column":5,"nodeType":"3889","messageId":"3945","endLine":136,"endColumn":40,"fix":"4739"},{"ruleId":"3943","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":37,"fix":"4740"},{"ruleId":"3947","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":37,"fix":"4741"},{"ruleId":"3943","severity":1,"message":"3944","line":152,"column":5,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":44,"fix":"4742"},{"ruleId":"3947","severity":1,"message":"3944","line":152,"column":5,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":44,"fix":"4743"},{"ruleId":"3943","severity":1,"message":"3944","line":160,"column":5,"nodeType":"3889","messageId":"3945","endLine":160,"endColumn":40,"fix":"4744"},{"ruleId":"3947","severity":1,"message":"3944","line":160,"column":5,"nodeType":"3889","messageId":"3945","endLine":160,"endColumn":40,"fix":"4745"},{"ruleId":"3943","severity":1,"message":"3944","line":185,"column":5,"nodeType":"3889","messageId":"3945","endLine":185,"endColumn":37,"fix":"4746"},{"ruleId":"3947","severity":1,"message":"3944","line":185,"column":5,"nodeType":"3889","messageId":"3945","endLine":185,"endColumn":37,"fix":"4747"},{"ruleId":"3943","severity":1,"message":"3944","line":188,"column":5,"nodeType":"3889","messageId":"3945","endLine":188,"endColumn":44,"fix":"4748"},{"ruleId":"3947","severity":1,"message":"3944","line":188,"column":5,"nodeType":"3889","messageId":"3945","endLine":188,"endColumn":44,"fix":"4749"},{"ruleId":"3943","severity":1,"message":"3944","line":197,"column":5,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":50,"fix":"4750"},{"ruleId":"3947","severity":1,"message":"3944","line":197,"column":5,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":50,"fix":"4751"},{"ruleId":"3922","severity":1,"message":"3923","line":20,"column":1,"nodeType":"3831","endLine":20,"endColumn":1,"fix":"4752"},{"ruleId":"3829","severity":1,"message":"4569","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4753"},{"ruleId":"3829","severity":1,"message":"4754","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4755"},{"ruleId":"3829","severity":1,"message":"4756","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4757"},{"ruleId":"3829","severity":1,"message":"4758","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4759"},{"ruleId":"3829","severity":1,"message":"4760","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4761"},{"ruleId":"3829","severity":1,"message":"4762","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4763"},{"ruleId":"3829","severity":1,"message":"4764","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4765"},{"ruleId":"3829","severity":1,"message":"4766","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4767"},{"ruleId":"3829","severity":1,"message":"4768","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4769"},{"ruleId":"3829","severity":1,"message":"4770","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4771"},{"ruleId":"3829","severity":1,"message":"4772","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17,"fix":"4773"},{"ruleId":"3833","severity":1,"message":"3834","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":17},{"ruleId":"4516","severity":2,"message":"4517","line":171,"column":7,"nodeType":"4518","messageId":"4519","endLine":171,"endColumn":47},{"ruleId":"4516","severity":2,"message":"4517","line":179,"column":7,"nodeType":"4518","messageId":"4519","endLine":179,"endColumn":61},{"ruleId":"4516","severity":2,"message":"4517","line":187,"column":7,"nodeType":"4518","messageId":"4519","endLine":187,"endColumn":75},{"ruleId":"4516","severity":2,"message":"4517","line":195,"column":7,"nodeType":"4518","messageId":"4519","endLine":201,"endColumn":9},{"ruleId":"4516","severity":2,"message":"4517","line":209,"column":7,"nodeType":"4518","messageId":"4519","endLine":216,"endColumn":9},{"ruleId":"4516","severity":2,"message":"4517","line":224,"column":7,"nodeType":"4518","messageId":"4519","endLine":232,"endColumn":9},{"ruleId":"4516","severity":2,"message":"4517","line":240,"column":7,"nodeType":"4518","messageId":"4519","endLine":249,"endColumn":9},{"ruleId":"4516","severity":2,"message":"4517","line":257,"column":7,"nodeType":"4518","messageId":"4519","endLine":267,"endColumn":9},{"ruleId":"4516","severity":2,"message":"4517","line":275,"column":7,"nodeType":"4518","messageId":"4519","endLine":286,"endColumn":9},{"ruleId":"4516","severity":2,"message":"4517","line":293,"column":5,"nodeType":"4518","messageId":"4519","endLine":305,"endColumn":7},{"ruleId":"3943","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":36,"fix":"4774"},{"ruleId":"3947","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":36,"fix":"4775"},{"ruleId":"3943","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":31,"fix":"4776"},{"ruleId":"3947","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":31,"fix":"4777"},{"ruleId":"3943","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":36,"fix":"4778"},{"ruleId":"3947","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":36,"fix":"4779"},{"ruleId":"3943","severity":1,"message":"3944","line":35,"column":5,"nodeType":"3889","messageId":"3945","endLine":35,"endColumn":35,"fix":"4780"},{"ruleId":"3947","severity":1,"message":"3944","line":35,"column":5,"nodeType":"3889","messageId":"3945","endLine":35,"endColumn":35,"fix":"4781"},{"ruleId":"3943","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":38,"fix":"4782"},{"ruleId":"3947","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":38,"fix":"4783"},{"ruleId":"3943","severity":1,"message":"3944","line":41,"column":5,"nodeType":"3889","messageId":"3945","endLine":41,"endColumn":42,"fix":"4784"},{"ruleId":"3947","severity":1,"message":"3944","line":41,"column":5,"nodeType":"3889","messageId":"3945","endLine":41,"endColumn":42,"fix":"4785"},{"ruleId":"3943","severity":1,"message":"3944","line":48,"column":5,"nodeType":"3889","messageId":"3945","endLine":48,"endColumn":91,"fix":"4786"},{"ruleId":"3947","severity":1,"message":"3944","line":48,"column":5,"nodeType":"3889","messageId":"3945","endLine":48,"endColumn":91,"fix":"4787"},{"ruleId":"3943","severity":1,"message":"3944","line":55,"column":5,"nodeType":"3889","messageId":"3945","endLine":55,"endColumn":82,"fix":"4788"},{"ruleId":"3947","severity":1,"message":"3944","line":55,"column":5,"nodeType":"3889","messageId":"3945","endLine":55,"endColumn":82,"fix":"4789"},{"ruleId":"3943","severity":1,"message":"3944","line":63,"column":5,"nodeType":"3889","messageId":"3945","endLine":63,"endColumn":45,"fix":"4790"},{"ruleId":"3947","severity":1,"message":"3944","line":63,"column":5,"nodeType":"3889","messageId":"3945","endLine":63,"endColumn":45,"fix":"4791"},{"ruleId":"3943","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":64,"fix":"4792"},{"ruleId":"3947","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":64,"fix":"4793"},{"ruleId":"3943","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":40,"fix":"4794"},{"ruleId":"3947","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":40,"fix":"4795"},{"ruleId":"3943","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":85,"endColumn":48,"fix":"4796"},{"ruleId":"3947","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":85,"endColumn":48,"fix":"4797"},{"ruleId":"3943","severity":1,"message":"3944","line":93,"column":5,"nodeType":"3889","messageId":"3945","endLine":93,"endColumn":39,"fix":"4798"},{"ruleId":"3947","severity":1,"message":"3944","line":93,"column":5,"nodeType":"3889","messageId":"3945","endLine":93,"endColumn":39,"fix":"4799"},{"ruleId":"3943","severity":1,"message":"3944","line":96,"column":5,"nodeType":"3889","messageId":"3945","endLine":96,"endColumn":35,"fix":"4800"},{"ruleId":"3947","severity":1,"message":"3944","line":96,"column":5,"nodeType":"3889","messageId":"3945","endLine":96,"endColumn":35,"fix":"4801"},{"ruleId":"3943","severity":1,"message":"3944","line":113,"column":5,"nodeType":"3889","messageId":"3945","endLine":113,"endColumn":53,"fix":"4802"},{"ruleId":"3947","severity":1,"message":"3944","line":113,"column":5,"nodeType":"3889","messageId":"3945","endLine":113,"endColumn":53,"fix":"4803"},{"ruleId":"3943","severity":1,"message":"3944","line":121,"column":5,"nodeType":"3889","messageId":"3945","endLine":121,"endColumn":66,"fix":"4804"},{"ruleId":"3947","severity":1,"message":"3944","line":121,"column":5,"nodeType":"3889","messageId":"3945","endLine":121,"endColumn":66,"fix":"4805"},{"ruleId":"3943","severity":1,"message":"3944","line":124,"column":5,"nodeType":"3889","messageId":"3945","endLine":124,"endColumn":61,"fix":"4806"},{"ruleId":"3947","severity":1,"message":"3944","line":124,"column":5,"nodeType":"3889","messageId":"3945","endLine":124,"endColumn":61,"fix":"4807"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":10,"column":1,"nodeType":"3831","endLine":10,"endColumn":1,"fix":"4808"},{"ruleId":"3922","severity":1,"message":"3923","line":23,"column":1,"nodeType":"3831","endLine":23,"endColumn":1,"fix":"4809"},{"ruleId":"3922","severity":1,"message":"3923","line":39,"column":1,"nodeType":"3831","endLine":39,"endColumn":1,"fix":"4810"},{"ruleId":"3922","severity":1,"message":"3923","line":57,"column":1,"nodeType":"3831","endLine":57,"endColumn":1,"fix":"4811"},{"ruleId":"3922","severity":1,"message":"3923","line":77,"column":1,"nodeType":"3831","endLine":77,"endColumn":1,"fix":"4812"},{"ruleId":"3922","severity":1,"message":"3923","line":95,"column":1,"nodeType":"3831","endLine":95,"endColumn":1,"fix":"4813"},{"ruleId":"3922","severity":1,"message":"3923","line":115,"column":1,"nodeType":"3831","endLine":115,"endColumn":1,"fix":"4814"},{"ruleId":"3922","severity":1,"message":"3923","line":137,"column":1,"nodeType":"3831","endLine":137,"endColumn":1,"fix":"4815"},{"ruleId":"3922","severity":1,"message":"3923","line":161,"column":1,"nodeType":"3831","endLine":161,"endColumn":1,"fix":"4816"},{"ruleId":"3922","severity":1,"message":"3923","line":187,"column":1,"nodeType":"3831","endLine":187,"endColumn":1,"fix":"4817"},{"ruleId":"3829","severity":1,"message":"4818","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4819"},{"ruleId":"3829","severity":1,"message":"4820","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4821"},{"ruleId":"3829","severity":1,"message":"4822","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4823"},{"ruleId":"3829","severity":1,"message":"4824","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4825"},{"ruleId":"3829","severity":1,"message":"4826","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4827"},{"ruleId":"3829","severity":1,"message":"4828","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4829"},{"ruleId":"3829","severity":1,"message":"4830","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4831"},{"ruleId":"3829","severity":1,"message":"4832","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4833"},{"ruleId":"3829","severity":1,"message":"4834","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4835"},{"ruleId":"3829","severity":1,"message":"4836","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4,"fix":"4837"},{"ruleId":"3833","severity":1,"message":"3834","line":217,"column":1,"nodeType":"3831","endLine":220,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":274,"column":1,"nodeType":"3831","endLine":274,"endColumn":1,"fix":"4838"},{"ruleId":"3922","severity":1,"message":"3923","line":287,"column":1,"nodeType":"3831","endLine":287,"endColumn":1,"fix":"4839"},{"ruleId":"3922","severity":1,"message":"3923","line":302,"column":1,"nodeType":"3831","endLine":302,"endColumn":1,"fix":"4840"},{"ruleId":"3922","severity":1,"message":"3923","line":319,"column":1,"nodeType":"3831","endLine":319,"endColumn":1,"fix":"4841"},{"ruleId":"3922","severity":1,"message":"3923","line":338,"column":1,"nodeType":"3831","endLine":338,"endColumn":1,"fix":"4842"},{"ruleId":"3922","severity":1,"message":"3923","line":355,"column":1,"nodeType":"3831","endLine":355,"endColumn":1,"fix":"4843"},{"ruleId":"3922","severity":1,"message":"3923","line":374,"column":1,"nodeType":"3831","endLine":374,"endColumn":1,"fix":"4844"},{"ruleId":"3922","severity":1,"message":"3923","line":395,"column":1,"nodeType":"3831","endLine":395,"endColumn":1,"fix":"4845"},{"ruleId":"3922","severity":1,"message":"3923","line":418,"column":1,"nodeType":"3831","endLine":418,"endColumn":1,"fix":"4846"},{"ruleId":"3922","severity":1,"message":"3923","line":443,"column":1,"nodeType":"3831","endLine":443,"endColumn":1,"fix":"4847"},{"ruleId":"3829","severity":1,"message":"4818","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4848"},{"ruleId":"3829","severity":1,"message":"4820","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4849"},{"ruleId":"3829","severity":1,"message":"4822","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4850"},{"ruleId":"3829","severity":1,"message":"4824","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4851"},{"ruleId":"3829","severity":1,"message":"4826","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4852"},{"ruleId":"3829","severity":1,"message":"4828","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4853"},{"ruleId":"3829","severity":1,"message":"4830","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4854"},{"ruleId":"3829","severity":1,"message":"4832","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4855"},{"ruleId":"3829","severity":1,"message":"4834","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4856"},{"ruleId":"3829","severity":1,"message":"4836","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4,"fix":"4857"},{"ruleId":"3833","severity":1,"message":"3834","line":469,"column":1,"nodeType":"3831","endLine":472,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":815,"column":1,"nodeType":"3831","endLine":815,"endColumn":1,"fix":"4858"},{"ruleId":"3922","severity":1,"message":"3923","line":830,"column":1,"nodeType":"3831","endLine":830,"endColumn":1,"fix":"4859"},{"ruleId":"3922","severity":1,"message":"3923","line":850,"column":1,"nodeType":"3831","endLine":850,"endColumn":1,"fix":"4860"},{"ruleId":"3922","severity":1,"message":"3923","line":873,"column":1,"nodeType":"3831","endLine":873,"endColumn":1,"fix":"4861"},{"ruleId":"3922","severity":1,"message":"3923","line":889,"column":1,"nodeType":"3831","endLine":889,"endColumn":1,"fix":"4862"},{"ruleId":"3922","severity":1,"message":"3923","line":907,"column":1,"nodeType":"3831","endLine":907,"endColumn":1,"fix":"4863"},{"ruleId":"3922","severity":1,"message":"3923","line":927,"column":1,"nodeType":"3831","endLine":927,"endColumn":1,"fix":"4864"},{"ruleId":"3922","severity":1,"message":"3923","line":949,"column":1,"nodeType":"3831","endLine":949,"endColumn":1,"fix":"4865"},{"ruleId":"3922","severity":1,"message":"3923","line":974,"column":1,"nodeType":"3831","endLine":974,"endColumn":1,"fix":"4866"},{"ruleId":"3922","severity":1,"message":"3923","line":1001,"column":1,"nodeType":"3831","endLine":1001,"endColumn":1,"fix":"4867"},{"ruleId":"3829","severity":1,"message":"4868","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4869"},{"ruleId":"3829","severity":1,"message":"4820","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4870"},{"ruleId":"3829","severity":1,"message":"4822","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4871"},{"ruleId":"3829","severity":1,"message":"4824","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4872"},{"ruleId":"3829","severity":1,"message":"4826","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4873"},{"ruleId":"3829","severity":1,"message":"4828","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4874"},{"ruleId":"3829","severity":1,"message":"4830","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4875"},{"ruleId":"3829","severity":1,"message":"4832","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4876"},{"ruleId":"3829","severity":1,"message":"4834","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4877"},{"ruleId":"3829","severity":1,"message":"4836","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4,"fix":"4878"},{"ruleId":"3833","severity":1,"message":"3834","line":1028,"column":1,"nodeType":"3831","endLine":1031,"endColumn":4},{"ruleId":"3829","severity":1,"message":"4868","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4879"},{"ruleId":"3829","severity":1,"message":"4820","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4880"},{"ruleId":"3829","severity":1,"message":"4822","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4881"},{"ruleId":"3829","severity":1,"message":"4824","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4882"},{"ruleId":"3829","severity":1,"message":"4826","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4883"},{"ruleId":"3829","severity":1,"message":"4828","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4884"},{"ruleId":"3829","severity":1,"message":"4830","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4885"},{"ruleId":"3829","severity":1,"message":"4832","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4886"},{"ruleId":"3829","severity":1,"message":"4834","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4887"},{"ruleId":"3829","severity":1,"message":"4836","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4,"fix":"4888"},{"ruleId":"3833","severity":1,"message":"3834","line":1061,"column":1,"nodeType":"3831","endLine":1064,"endColumn":4},{"ruleId":"4516","severity":2,"message":"4517","line":1114,"column":9,"nodeType":"4518","messageId":"4519","endLine":1114,"endColumn":36},{"ruleId":"3910","severity":2,"message":"4889","line":1114,"column":20,"nodeType":"3826","messageId":"3912","endLine":1114,"endColumn":34},{"ruleId":"4516","severity":2,"message":"4517","line":1120,"column":7,"nodeType":"4518","messageId":"4519","endLine":1120,"endColumn":46},{"ruleId":"3910","severity":2,"message":"4889","line":1120,"column":24,"nodeType":"4676","messageId":"3912","endLine":1120,"endColumn":44},{"ruleId":"4516","severity":2,"message":"4517","line":1127,"column":9,"nodeType":"4518","messageId":"4519","endLine":1127,"endColumn":41},{"ruleId":"3910","severity":2,"message":"4890","line":1127,"column":20,"nodeType":"3826","messageId":"3912","endLine":1127,"endColumn":39},{"ruleId":"3910","severity":2,"message":"4889","line":1127,"column":24,"nodeType":"3826","messageId":"3912","endLine":1127,"endColumn":38},{"ruleId":"4516","severity":2,"message":"4517","line":1133,"column":7,"nodeType":"4518","messageId":"4519","endLine":1133,"endColumn":57},{"ruleId":"3910","severity":2,"message":"4890","line":1133,"column":24,"nodeType":"4676","messageId":"3912","endLine":1133,"endColumn":55},{"ruleId":"3910","severity":2,"message":"4889","line":1133,"column":34,"nodeType":"4676","messageId":"3912","endLine":1133,"endColumn":54},{"ruleId":"4516","severity":2,"message":"4517","line":1145,"column":9,"nodeType":"4518","messageId":"4519","endLine":1145,"endColumn":46},{"ruleId":"3910","severity":2,"message":"4891","line":1145,"column":20,"nodeType":"3826","messageId":"3912","endLine":1145,"endColumn":44},{"ruleId":"3910","severity":2,"message":"4890","line":1145,"column":24,"nodeType":"3826","messageId":"3912","endLine":1145,"endColumn":43},{"ruleId":"3910","severity":2,"message":"4889","line":1145,"column":28,"nodeType":"3826","messageId":"3912","endLine":1145,"endColumn":42},{"ruleId":"4516","severity":2,"message":"4517","line":1151,"column":7,"nodeType":"4518","messageId":"4519","endLine":1151,"endColumn":68},{"ruleId":"3910","severity":2,"message":"4891","line":1151,"column":24,"nodeType":"4676","messageId":"3912","endLine":1151,"endColumn":66},{"ruleId":"3910","severity":2,"message":"4890","line":1151,"column":34,"nodeType":"4676","messageId":"3912","endLine":1151,"endColumn":65},{"ruleId":"3910","severity":2,"message":"4889","line":1151,"column":44,"nodeType":"4676","messageId":"3912","endLine":1151,"endColumn":64},{"ruleId":"4516","severity":2,"message":"4517","line":1164,"column":9,"nodeType":"4518","messageId":"4519","endLine":1164,"endColumn":51},{"ruleId":"3910","severity":2,"message":"4892","line":1164,"column":20,"nodeType":"3826","messageId":"3912","endLine":1164,"endColumn":49},{"ruleId":"3910","severity":2,"message":"4891","line":1164,"column":24,"nodeType":"3826","messageId":"3912","endLine":1164,"endColumn":48},{"ruleId":"3910","severity":2,"message":"4890","line":1164,"column":28,"nodeType":"3826","messageId":"3912","endLine":1164,"endColumn":47},{"ruleId":"3910","severity":2,"message":"4889","line":1164,"column":32,"nodeType":"3826","messageId":"3912","endLine":1164,"endColumn":46},{"ruleId":"4516","severity":2,"message":"4517","line":1170,"column":7,"nodeType":"4518","messageId":"4519","endLine":1170,"endColumn":79},{"ruleId":"3910","severity":2,"message":"4892","line":1170,"column":24,"nodeType":"4676","messageId":"3912","endLine":1170,"endColumn":77},{"ruleId":"3910","severity":2,"message":"4891","line":1170,"column":34,"nodeType":"4676","messageId":"3912","endLine":1170,"endColumn":76},{"ruleId":"3910","severity":2,"message":"4890","line":1170,"column":44,"nodeType":"4676","messageId":"3912","endLine":1170,"endColumn":75},{"ruleId":"3910","severity":2,"message":"4889","line":1170,"column":54,"nodeType":"4676","messageId":"3912","endLine":1170,"endColumn":74},{"ruleId":"4516","severity":2,"message":"4517","line":1184,"column":9,"nodeType":"4518","messageId":"4519","endLine":1184,"endColumn":56},{"ruleId":"3910","severity":2,"message":"4893","line":1184,"column":20,"nodeType":"3826","messageId":"3912","endLine":1184,"endColumn":54},{"ruleId":"3910","severity":2,"message":"4892","line":1184,"column":24,"nodeType":"3826","messageId":"3912","endLine":1184,"endColumn":53},{"ruleId":"3910","severity":2,"message":"4891","line":1184,"column":28,"nodeType":"3826","messageId":"3912","endLine":1184,"endColumn":52},{"ruleId":"3910","severity":2,"message":"4890","line":1184,"column":32,"nodeType":"3826","messageId":"3912","endLine":1184,"endColumn":51},{"ruleId":"3910","severity":2,"message":"4889","line":1184,"column":36,"nodeType":"3826","messageId":"3912","endLine":1184,"endColumn":50},{"ruleId":"4516","severity":2,"message":"4517","line":1190,"column":7,"nodeType":"4518","messageId":"4519","endLine":1190,"endColumn":90},{"ruleId":"3910","severity":2,"message":"4893","line":1190,"column":24,"nodeType":"4676","messageId":"3912","endLine":1190,"endColumn":88},{"ruleId":"3910","severity":2,"message":"4892","line":1190,"column":34,"nodeType":"4676","messageId":"3912","endLine":1190,"endColumn":87},{"ruleId":"3910","severity":2,"message":"4891","line":1190,"column":44,"nodeType":"4676","messageId":"3912","endLine":1190,"endColumn":86},{"ruleId":"3910","severity":2,"message":"4890","line":1190,"column":54,"nodeType":"4676","messageId":"3912","endLine":1190,"endColumn":85},{"ruleId":"3910","severity":2,"message":"4889","line":1190,"column":64,"nodeType":"4676","messageId":"3912","endLine":1190,"endColumn":84},{"ruleId":"4516","severity":2,"message":"4517","line":1205,"column":9,"nodeType":"4518","messageId":"4519","endLine":1205,"endColumn":61},{"ruleId":"3910","severity":2,"message":"4894","line":1205,"column":20,"nodeType":"3826","messageId":"3912","endLine":1205,"endColumn":59},{"ruleId":"3910","severity":2,"message":"4893","line":1205,"column":24,"nodeType":"3826","messageId":"3912","endLine":1205,"endColumn":58},{"ruleId":"3910","severity":2,"message":"4892","line":1205,"column":28,"nodeType":"3826","messageId":"3912","endLine":1205,"endColumn":57},{"ruleId":"3910","severity":2,"message":"4891","line":1205,"column":32,"nodeType":"3826","messageId":"3912","endLine":1205,"endColumn":56},{"ruleId":"3910","severity":2,"message":"4890","line":1205,"column":36,"nodeType":"3826","messageId":"3912","endLine":1205,"endColumn":55},{"ruleId":"3910","severity":2,"message":"4889","line":1205,"column":40,"nodeType":"3826","messageId":"3912","endLine":1205,"endColumn":54},{"ruleId":"4516","severity":2,"message":"4517","line":1211,"column":7,"nodeType":"4518","messageId":"4519","endLine":1213,"endColumn":9},{"ruleId":"3910","severity":2,"message":"4894","line":1212,"column":9,"nodeType":"4676","messageId":"3912","endLine":1212,"endColumn":84},{"ruleId":"3910","severity":2,"message":"4893","line":1212,"column":19,"nodeType":"4676","messageId":"3912","endLine":1212,"endColumn":83},{"ruleId":"3910","severity":2,"message":"4892","line":1212,"column":29,"nodeType":"4676","messageId":"3912","endLine":1212,"endColumn":82},{"ruleId":"3910","severity":2,"message":"4891","line":1212,"column":39,"nodeType":"4676","messageId":"3912","endLine":1212,"endColumn":81},{"ruleId":"3910","severity":2,"message":"4890","line":1212,"column":49,"nodeType":"4676","messageId":"3912","endLine":1212,"endColumn":80},{"ruleId":"3910","severity":2,"message":"4889","line":1212,"column":59,"nodeType":"4676","messageId":"3912","endLine":1212,"endColumn":79},{"ruleId":"4516","severity":2,"message":"4517","line":1229,"column":9,"nodeType":"4518","messageId":"4519","endLine":1229,"endColumn":66},{"ruleId":"3910","severity":2,"message":"4895","line":1229,"column":20,"nodeType":"3826","messageId":"3912","endLine":1229,"endColumn":64},{"ruleId":"3910","severity":2,"message":"4894","line":1229,"column":24,"nodeType":"3826","messageId":"3912","endLine":1229,"endColumn":63},{"ruleId":"3910","severity":2,"message":"4893","line":1229,"column":28,"nodeType":"3826","messageId":"3912","endLine":1229,"endColumn":62},{"ruleId":"3910","severity":2,"message":"4892","line":1229,"column":32,"nodeType":"3826","messageId":"3912","endLine":1229,"endColumn":61},{"ruleId":"3910","severity":2,"message":"4891","line":1229,"column":36,"nodeType":"3826","messageId":"3912","endLine":1229,"endColumn":60},{"ruleId":"3910","severity":2,"message":"4890","line":1229,"column":40,"nodeType":"3826","messageId":"3912","endLine":1229,"endColumn":59},{"ruleId":"3910","severity":2,"message":"4889","line":1229,"column":44,"nodeType":"3826","messageId":"3912","endLine":1229,"endColumn":58},{"ruleId":"4516","severity":2,"message":"4517","line":1235,"column":7,"nodeType":"4518","messageId":"4519","endLine":1239,"endColumn":9},{"ruleId":"3910","severity":2,"message":"4895","line":1236,"column":9,"nodeType":"4676","messageId":"3912","endLine":1238,"endColumn":10},{"ruleId":"3910","severity":2,"message":"4894","line":1237,"column":11,"nodeType":"4676","messageId":"3912","endLine":1237,"endColumn":86},{"ruleId":"3910","severity":2,"message":"4893","line":1237,"column":21,"nodeType":"4676","messageId":"3912","endLine":1237,"endColumn":85},{"ruleId":"3910","severity":2,"message":"4892","line":1237,"column":31,"nodeType":"4676","messageId":"3912","endLine":1237,"endColumn":84},{"ruleId":"3910","severity":2,"message":"4891","line":1237,"column":41,"nodeType":"4676","messageId":"3912","endLine":1237,"endColumn":83},{"ruleId":"3910","severity":2,"message":"4890","line":1237,"column":51,"nodeType":"4676","messageId":"3912","endLine":1237,"endColumn":82},{"ruleId":"3910","severity":2,"message":"4889","line":1237,"column":61,"nodeType":"4676","messageId":"3912","endLine":1237,"endColumn":81},{"ruleId":"4516","severity":2,"message":"4517","line":1256,"column":9,"nodeType":"4518","messageId":"4519","endLine":1256,"endColumn":71},{"ruleId":"3910","severity":2,"message":"4896","line":1256,"column":20,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":69},{"ruleId":"3910","severity":2,"message":"4895","line":1256,"column":24,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":68},{"ruleId":"3910","severity":2,"message":"4894","line":1256,"column":28,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":67},{"ruleId":"3910","severity":2,"message":"4893","line":1256,"column":32,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":66},{"ruleId":"3910","severity":2,"message":"4892","line":1256,"column":36,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":65},{"ruleId":"3910","severity":2,"message":"4891","line":1256,"column":40,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":64},{"ruleId":"3910","severity":2,"message":"4890","line":1256,"column":44,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":63},{"ruleId":"3910","severity":2,"message":"4889","line":1256,"column":48,"nodeType":"3826","messageId":"3912","endLine":1256,"endColumn":62},{"ruleId":"4516","severity":2,"message":"4517","line":1262,"column":7,"nodeType":"4518","messageId":"4519","endLine":1278,"endColumn":9},{"ruleId":"3910","severity":2,"message":"4896","line":1263,"column":9,"nodeType":"4676","messageId":"3912","endLine":1277,"endColumn":10},{"ruleId":"3910","severity":2,"message":"4895","line":1264,"column":11,"nodeType":"4676","messageId":"3912","endLine":1276,"endColumn":12},{"ruleId":"3910","severity":2,"message":"4894","line":1265,"column":13,"nodeType":"4676","messageId":"3912","endLine":1275,"endColumn":14},{"ruleId":"3910","severity":2,"message":"4893","line":1266,"column":15,"nodeType":"4676","messageId":"3912","endLine":1274,"endColumn":16},{"ruleId":"3910","severity":2,"message":"4892","line":1267,"column":17,"nodeType":"4676","messageId":"3912","endLine":1273,"endColumn":18},{"ruleId":"3910","severity":2,"message":"4891","line":1268,"column":19,"nodeType":"4676","messageId":"3912","endLine":1272,"endColumn":20},{"ruleId":"3910","severity":2,"message":"4890","line":1269,"column":21,"nodeType":"4676","messageId":"3912","endLine":1271,"endColumn":22},{"ruleId":"3910","severity":2,"message":"4889","line":1270,"column":23,"nodeType":"4676","messageId":"3912","endLine":1270,"endColumn":43},{"ruleId":"4516","severity":2,"message":"4517","line":1295,"column":7,"nodeType":"4518","messageId":"4519","endLine":1295,"endColumn":74},{"ruleId":"3910","severity":2,"message":"4897","line":1295,"column":18,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":72},{"ruleId":"3910","severity":2,"message":"4896","line":1295,"column":22,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":71},{"ruleId":"3910","severity":2,"message":"4895","line":1295,"column":26,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":70},{"ruleId":"3910","severity":2,"message":"4894","line":1295,"column":30,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":69},{"ruleId":"3910","severity":2,"message":"4893","line":1295,"column":34,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":68},{"ruleId":"3910","severity":2,"message":"4892","line":1295,"column":38,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":67},{"ruleId":"3910","severity":2,"message":"4891","line":1295,"column":42,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":66},{"ruleId":"3910","severity":2,"message":"4890","line":1295,"column":46,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":65},{"ruleId":"3910","severity":2,"message":"4889","line":1295,"column":50,"nodeType":"3826","messageId":"3912","endLine":1295,"endColumn":64},{"ruleId":"4516","severity":2,"message":"4517","line":1301,"column":5,"nodeType":"4518","messageId":"4519","endLine":1319,"endColumn":7},{"ruleId":"3910","severity":2,"message":"4897","line":1302,"column":7,"nodeType":"4676","messageId":"3912","endLine":1318,"endColumn":8},{"ruleId":"3910","severity":2,"message":"4896","line":1303,"column":9,"nodeType":"4676","messageId":"3912","endLine":1317,"endColumn":10},{"ruleId":"3910","severity":2,"message":"4895","line":1304,"column":11,"nodeType":"4676","messageId":"3912","endLine":1316,"endColumn":12},{"ruleId":"3910","severity":2,"message":"4894","line":1305,"column":13,"nodeType":"4676","messageId":"3912","endLine":1315,"endColumn":14},{"ruleId":"3910","severity":2,"message":"4893","line":1306,"column":15,"nodeType":"4676","messageId":"3912","endLine":1314,"endColumn":16},{"ruleId":"3910","severity":2,"message":"4892","line":1307,"column":17,"nodeType":"4676","messageId":"3912","endLine":1313,"endColumn":18},{"ruleId":"3910","severity":2,"message":"4891","line":1308,"column":19,"nodeType":"4676","messageId":"3912","endLine":1312,"endColumn":20},{"ruleId":"3910","severity":2,"message":"4890","line":1309,"column":21,"nodeType":"4676","messageId":"3912","endLine":1311,"endColumn":22},{"ruleId":"3910","severity":2,"message":"4889","line":1310,"column":23,"nodeType":"4676","messageId":"3912","endLine":1310,"endColumn":43},{"ruleId":"3922","severity":1,"message":"3923","line":1325,"column":1,"nodeType":"3831","endLine":1325,"endColumn":1,"fix":"4898"},{"ruleId":"3922","severity":1,"message":"3923","line":1340,"column":1,"nodeType":"3831","endLine":1340,"endColumn":1,"fix":"4899"},{"ruleId":"3922","severity":1,"message":"3923","line":1360,"column":1,"nodeType":"3831","endLine":1360,"endColumn":1,"fix":"4900"},{"ruleId":"3922","severity":1,"message":"3923","line":1383,"column":1,"nodeType":"3831","endLine":1383,"endColumn":1,"fix":"4901"},{"ruleId":"3922","severity":1,"message":"3923","line":1399,"column":1,"nodeType":"3831","endLine":1399,"endColumn":1,"fix":"4902"},{"ruleId":"3922","severity":1,"message":"3923","line":1417,"column":1,"nodeType":"3831","endLine":1417,"endColumn":1,"fix":"4903"},{"ruleId":"3922","severity":1,"message":"3923","line":1437,"column":1,"nodeType":"3831","endLine":1437,"endColumn":1,"fix":"4904"},{"ruleId":"3922","severity":1,"message":"3923","line":1459,"column":1,"nodeType":"3831","endLine":1459,"endColumn":1,"fix":"4905"},{"ruleId":"3922","severity":1,"message":"3923","line":1483,"column":1,"nodeType":"3831","endLine":1483,"endColumn":1,"fix":"4906"},{"ruleId":"3922","severity":1,"message":"3923","line":1510,"column":1,"nodeType":"3831","endLine":1510,"endColumn":1,"fix":"4907"},{"ruleId":"3829","severity":1,"message":"4868","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4908"},{"ruleId":"3829","severity":1,"message":"4820","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4909"},{"ruleId":"3829","severity":1,"message":"4822","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4910"},{"ruleId":"3829","severity":1,"message":"4824","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4911"},{"ruleId":"3829","severity":1,"message":"4826","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4912"},{"ruleId":"3829","severity":1,"message":"4828","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4913"},{"ruleId":"3829","severity":1,"message":"4830","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4914"},{"ruleId":"3829","severity":1,"message":"4832","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4915"},{"ruleId":"3829","severity":1,"message":"4834","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4916"},{"ruleId":"3829","severity":1,"message":"4836","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4,"fix":"4917"},{"ruleId":"3833","severity":1,"message":"3834","line":1537,"column":1,"nodeType":"3831","endLine":1540,"endColumn":4},{"ruleId":"4083","severity":1,"message":"4084","line":17,"column":10,"nodeType":"3850","messageId":"4085","endLine":17,"endColumn":17,"fix":"4918"},{"ruleId":"3943","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":38,"fix":"4919"},{"ruleId":"3947","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":38,"fix":"4920"},{"ruleId":"4083","severity":1,"message":"4084","line":60,"column":10,"nodeType":"3850","messageId":"4085","endLine":60,"endColumn":22,"fix":"4921"},{"ruleId":"3943","severity":1,"message":"3944","line":68,"column":5,"nodeType":"3889","messageId":"3945","endLine":68,"endColumn":54,"fix":"4922"},{"ruleId":"3947","severity":1,"message":"3944","line":68,"column":5,"nodeType":"3889","messageId":"3945","endLine":68,"endColumn":54,"fix":"4923"},{"ruleId":"4083","severity":1,"message":"4084","line":103,"column":10,"nodeType":"3850","messageId":"4085","endLine":103,"endColumn":21,"fix":"4924"},{"ruleId":"3943","severity":1,"message":"3944","line":107,"column":5,"nodeType":"3889","messageId":"3945","endLine":107,"endColumn":28,"fix":"4925"},{"ruleId":"3947","severity":1,"message":"3944","line":107,"column":5,"nodeType":"3889","messageId":"3945","endLine":107,"endColumn":28,"fix":"4926"},{"ruleId":"3943","severity":1,"message":"3944","line":117,"column":5,"nodeType":"3889","messageId":"3945","endLine":117,"endColumn":46,"fix":"4927"},{"ruleId":"3947","severity":1,"message":"3944","line":117,"column":5,"nodeType":"3889","messageId":"3945","endLine":117,"endColumn":46,"fix":"4928"},{"ruleId":"3943","severity":1,"message":"3944","line":126,"column":5,"nodeType":"3889","messageId":"3945","endLine":126,"endColumn":46,"fix":"4929"},{"ruleId":"3947","severity":1,"message":"3944","line":126,"column":5,"nodeType":"3889","messageId":"3945","endLine":126,"endColumn":46,"fix":"4930"},{"ruleId":"3943","severity":1,"message":"3944","line":127,"column":5,"nodeType":"3961","messageId":"3945","endLine":127,"endColumn":41,"fix":"4931"},{"ruleId":"3947","severity":1,"message":"3944","line":127,"column":5,"nodeType":"3961","messageId":"3945","endLine":127,"endColumn":41,"fix":"4932"},{"ruleId":"3943","severity":1,"message":"3944","line":128,"column":5,"nodeType":"3889","messageId":"3945","endLine":128,"endColumn":28,"fix":"4933"},{"ruleId":"3947","severity":1,"message":"3944","line":128,"column":5,"nodeType":"3889","messageId":"3945","endLine":128,"endColumn":28,"fix":"4934"},{"ruleId":"3943","severity":1,"message":"3944","line":137,"column":5,"nodeType":"3889","messageId":"3945","endLine":137,"endColumn":46,"fix":"4935"},{"ruleId":"3947","severity":1,"message":"3944","line":137,"column":5,"nodeType":"3889","messageId":"3945","endLine":137,"endColumn":46,"fix":"4936"},{"ruleId":"3943","severity":1,"message":"3944","line":138,"column":5,"nodeType":"3961","messageId":"3945","endLine":138,"endColumn":41,"fix":"4937"},{"ruleId":"3947","severity":1,"message":"3944","line":138,"column":5,"nodeType":"3961","messageId":"3945","endLine":138,"endColumn":41,"fix":"4938"},{"ruleId":"3943","severity":1,"message":"3944","line":139,"column":5,"nodeType":"3889","messageId":"3945","endLine":139,"endColumn":30,"fix":"4939"},{"ruleId":"3947","severity":1,"message":"3944","line":139,"column":5,"nodeType":"3889","messageId":"3945","endLine":139,"endColumn":30,"fix":"4940"},{"ruleId":"3943","severity":1,"message":"3944","line":147,"column":5,"nodeType":"3889","messageId":"3945","endLine":147,"endColumn":49,"fix":"4941"},{"ruleId":"3947","severity":1,"message":"3944","line":147,"column":5,"nodeType":"3889","messageId":"3945","endLine":147,"endColumn":49,"fix":"4942"},{"ruleId":"3943","severity":1,"message":"3944","line":157,"column":5,"nodeType":"3889","messageId":"3945","endLine":157,"endColumn":28,"fix":"4943"},{"ruleId":"3947","severity":1,"message":"3944","line":157,"column":5,"nodeType":"3889","messageId":"3945","endLine":157,"endColumn":28,"fix":"4944"},{"ruleId":"4083","severity":1,"message":"4084","line":161,"column":10,"nodeType":"3850","messageId":"4085","endLine":161,"endColumn":16,"fix":"4945"},{"ruleId":"3943","severity":1,"message":"3944","line":165,"column":5,"nodeType":"3889","messageId":"3945","endLine":165,"endColumn":43,"fix":"4946"},{"ruleId":"3947","severity":1,"message":"3944","line":165,"column":5,"nodeType":"3889","messageId":"3945","endLine":165,"endColumn":43,"fix":"4947"},{"ruleId":"3943","severity":1,"message":"3944","line":175,"column":5,"nodeType":"3889","messageId":"3945","endLine":175,"endColumn":46,"fix":"4948"},{"ruleId":"3947","severity":1,"message":"3944","line":175,"column":5,"nodeType":"3889","messageId":"3945","endLine":175,"endColumn":46,"fix":"4949"},{"ruleId":"3943","severity":1,"message":"3944","line":184,"column":5,"nodeType":"3889","messageId":"3945","endLine":184,"endColumn":49,"fix":"4950"},{"ruleId":"3947","severity":1,"message":"3944","line":184,"column":5,"nodeType":"3889","messageId":"3945","endLine":184,"endColumn":49,"fix":"4951"},{"ruleId":"3943","severity":1,"message":"3944","line":194,"column":5,"nodeType":"3889","messageId":"3945","endLine":194,"endColumn":28,"fix":"4952"},{"ruleId":"3947","severity":1,"message":"3944","line":194,"column":5,"nodeType":"3889","messageId":"3945","endLine":194,"endColumn":28,"fix":"4953"},{"ruleId":"3922","severity":1,"message":"3923","line":7,"column":1,"nodeType":"3831","endLine":7,"endColumn":1,"fix":"4954"},{"ruleId":"3922","severity":1,"message":"3925","line":11,"column":1,"nodeType":"3831","endLine":11,"endColumn":1,"fix":"4955"},{"ruleId":"3815","severity":2,"message":"4530","line":36,"column":23,"nodeType":"3817","messageId":"3818","endLine":36,"endColumn":27,"fix":"4956"},{"ruleId":"3815","severity":2,"message":"4514","line":37,"column":11,"nodeType":"3817","messageId":"3818","endLine":37,"endColumn":15,"fix":"4957"},{"ruleId":"3815","severity":2,"message":"4514","line":38,"column":8,"nodeType":"3817","messageId":"3818","endLine":38,"endColumn":12,"fix":"4958"},{"ruleId":"3815","severity":2,"message":"4514","line":39,"column":30,"nodeType":"3817","messageId":"3818","endLine":39,"endColumn":34,"fix":"4959"},{"ruleId":"4083","severity":1,"message":"4084","line":15,"column":10,"nodeType":"3850","messageId":"4085","endLine":15,"endColumn":17,"fix":"4960"},{"ruleId":"4703","severity":1,"message":"4704","line":17,"column":23,"nodeType":"3817","messageId":"4705","endLine":17,"endColumn":25},{"ruleId":"3943","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":45,"fix":"4961"},{"ruleId":"3947","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":45,"fix":"4962"},{"ruleId":"3943","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":41,"fix":"4963"},{"ruleId":"3947","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":41,"fix":"4964"},{"ruleId":"4703","severity":1,"message":"4704","line":76,"column":27,"nodeType":"3817","messageId":"4705","endLine":76,"endColumn":29},{"ruleId":"3937","severity":2,"message":"3938","line":83,"column":20,"nodeType":"3826","messageId":"3939","endLine":83,"endColumn":35},{"ruleId":"3943","severity":1,"message":"3944","line":84,"column":5,"nodeType":"3889","messageId":"3945","endLine":84,"endColumn":53,"fix":"4965"},{"ruleId":"3947","severity":1,"message":"3944","line":84,"column":5,"nodeType":"3889","messageId":"3945","endLine":84,"endColumn":53,"fix":"4966"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3838","severity":1,"message":"3839","line":3,"column":8,"nodeType":"3840","messageId":"3841","endLine":4,"endColumn":1,"fix":"4967"},{"ruleId":"3838","severity":1,"message":"3839","line":18,"column":8,"nodeType":"3840","messageId":"3841","endLine":19,"endColumn":1,"fix":"4968"},{"ruleId":"3943","severity":1,"message":"3944","line":15,"column":5,"nodeType":"3889","messageId":"3945","endLine":15,"endColumn":36,"fix":"4969"},{"ruleId":"3947","severity":1,"message":"3944","line":15,"column":5,"nodeType":"3889","messageId":"3945","endLine":15,"endColumn":36,"fix":"4970"},{"ruleId":"4703","severity":1,"message":"4704","line":20,"column":22,"nodeType":"3817","messageId":"4705","endLine":20,"endColumn":24},{"ruleId":"4703","severity":1,"message":"4704","line":27,"column":24,"nodeType":"3817","messageId":"4705","endLine":27,"endColumn":26},{"ruleId":"4703","severity":1,"message":"4704","line":38,"column":22,"nodeType":"3817","messageId":"4705","endLine":38,"endColumn":24},{"ruleId":"4703","severity":1,"message":"4704","line":41,"column":24,"nodeType":"3817","messageId":"4705","endLine":41,"endColumn":26},{"ruleId":"4703","severity":1,"message":"4704","line":50,"column":22,"nodeType":"3817","messageId":"4705","endLine":50,"endColumn":24},{"ruleId":"4703","severity":1,"message":"4704","line":53,"column":24,"nodeType":"3817","messageId":"4705","endLine":53,"endColumn":26},{"ruleId":"3943","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":36,"fix":"4971"},{"ruleId":"3947","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":36,"fix":"4972"},{"ruleId":"4703","severity":1,"message":"4704","line":69,"column":22,"nodeType":"3817","messageId":"4705","endLine":69,"endColumn":24},{"ruleId":"4703","severity":1,"message":"4704","line":76,"column":24,"nodeType":"3817","messageId":"4705","endLine":76,"endColumn":26},{"ruleId":"4703","severity":1,"message":"4704","line":87,"column":22,"nodeType":"3817","messageId":"4705","endLine":87,"endColumn":24},{"ruleId":"4703","severity":1,"message":"4704","line":90,"column":24,"nodeType":"3817","messageId":"4705","endLine":90,"endColumn":26},{"ruleId":"4703","severity":1,"message":"4704","line":99,"column":22,"nodeType":"3817","messageId":"4705","endLine":99,"endColumn":24},{"ruleId":"4703","severity":1,"message":"4704","line":102,"column":24,"nodeType":"3817","messageId":"4705","endLine":102,"endColumn":26},{"ruleId":"3848","severity":2,"message":"4098","line":3,"column":34,"nodeType":"3850","messageId":"3851","endLine":3,"endColumn":45},{"ruleId":"3922","severity":1,"message":"3923","line":19,"column":1,"nodeType":"3831","endLine":19,"endColumn":1,"fix":"4973"},{"ruleId":"3922","severity":1,"message":"3925","line":24,"column":1,"nodeType":"3831","endLine":24,"endColumn":1,"fix":"4974"},{"ruleId":"3838","severity":1,"message":"3839","line":100,"column":8,"nodeType":"3840","messageId":"3841","endLine":101,"endColumn":1,"fix":"4975"},{"ruleId":"3922","severity":1,"message":"3923","line":134,"column":1,"nodeType":"3831","endLine":134,"endColumn":1,"fix":"4976"},{"ruleId":"3922","severity":1,"message":"3925","line":139,"column":1,"nodeType":"3831","endLine":139,"endColumn":1,"fix":"4977"},{"ruleId":"3838","severity":1,"message":"3839","line":207,"column":8,"nodeType":"3840","messageId":"3841","endLine":208,"endColumn":1,"fix":"4978"},{"ruleId":"4516","severity":2,"message":"4517","line":112,"column":5,"nodeType":"4518","messageId":"4519","endLine":112,"endColumn":31,"suppressions":"4979"},{"ruleId":"4516","severity":2,"message":"4980","line":119,"column":7,"nodeType":"4518","messageId":"4981","endLine":119,"endColumn":30,"suppressions":"4982"},{"ruleId":"4516","severity":2,"message":"4980","line":125,"column":3,"nodeType":"4518","messageId":"4981","endLine":125,"endColumn":34,"suppressions":"4983"},{"ruleId":"4516","severity":2,"message":"4517","line":218,"column":5,"nodeType":"4518","messageId":"4519","endLine":218,"endColumn":31,"suppressions":"4984"},{"ruleId":"4985","severity":2,"message":"4986","line":224,"column":46,"nodeType":"4253","messageId":"4987","endLine":226,"endColumn":6,"fix":"4988","suppressions":"4989"},{"ruleId":"3943","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":42,"fix":"4990"},{"ruleId":"3947","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":42,"fix":"4991"},{"ruleId":"3943","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":43,"fix":"4992"},{"ruleId":"3947","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":43,"fix":"4993"},{"ruleId":"3943","severity":1,"message":"3944","line":32,"column":5,"nodeType":"3889","messageId":"3945","endLine":32,"endColumn":50,"fix":"4994"},{"ruleId":"3947","severity":1,"message":"3944","line":32,"column":5,"nodeType":"3889","messageId":"3945","endLine":32,"endColumn":50,"fix":"4995"},{"ruleId":"3943","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":51,"fix":"4996"},{"ruleId":"3947","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":51,"fix":"4997"},{"ruleId":"3943","severity":1,"message":"3944","line":44,"column":5,"nodeType":"3889","messageId":"3945","endLine":44,"endColumn":50,"fix":"4998"},{"ruleId":"3947","severity":1,"message":"3944","line":44,"column":5,"nodeType":"3889","messageId":"3945","endLine":44,"endColumn":50,"fix":"4999"},{"ruleId":"3943","severity":1,"message":"3944","line":50,"column":5,"nodeType":"3889","messageId":"3945","endLine":50,"endColumn":41,"fix":"5000"},{"ruleId":"3947","severity":1,"message":"3944","line":50,"column":5,"nodeType":"3889","messageId":"3945","endLine":50,"endColumn":41,"fix":"5001"},{"ruleId":"3943","severity":1,"message":"3944","line":58,"column":5,"nodeType":"3889","messageId":"3945","endLine":58,"endColumn":48,"fix":"5002"},{"ruleId":"3947","severity":1,"message":"3944","line":58,"column":5,"nodeType":"3889","messageId":"3945","endLine":58,"endColumn":48,"fix":"5003"},{"ruleId":"3943","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":42,"fix":"5004"},{"ruleId":"3947","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":42,"fix":"5005"},{"ruleId":"3943","severity":1,"message":"3944","line":88,"column":5,"nodeType":"3889","messageId":"3945","endLine":88,"endColumn":53,"fix":"5006"},{"ruleId":"3947","severity":1,"message":"3944","line":88,"column":5,"nodeType":"3889","messageId":"3945","endLine":88,"endColumn":53,"fix":"5007"},{"ruleId":"3943","severity":1,"message":"3944","line":95,"column":5,"nodeType":"3889","messageId":"3945","endLine":95,"endColumn":54,"fix":"5008"},{"ruleId":"3947","severity":1,"message":"3944","line":95,"column":5,"nodeType":"3889","messageId":"3945","endLine":95,"endColumn":54,"fix":"5009"},{"ruleId":"3943","severity":1,"message":"3944","line":102,"column":5,"nodeType":"3889","messageId":"3945","endLine":102,"endColumn":61,"fix":"5010"},{"ruleId":"3947","severity":1,"message":"3944","line":102,"column":5,"nodeType":"3889","messageId":"3945","endLine":102,"endColumn":61,"fix":"5011"},{"ruleId":"3943","severity":1,"message":"3944","line":108,"column":5,"nodeType":"3889","messageId":"3945","endLine":108,"endColumn":61,"fix":"5012"},{"ruleId":"3947","severity":1,"message":"3944","line":108,"column":5,"nodeType":"3889","messageId":"3945","endLine":108,"endColumn":61,"fix":"5013"},{"ruleId":"3943","severity":1,"message":"3944","line":129,"column":5,"nodeType":"3889","messageId":"3945","endLine":129,"endColumn":52,"fix":"5014"},{"ruleId":"3947","severity":1,"message":"3944","line":129,"column":5,"nodeType":"3889","messageId":"3945","endLine":129,"endColumn":52,"fix":"5015"},{"ruleId":"3943","severity":1,"message":"3944","line":156,"column":5,"nodeType":"3889","messageId":"3945","endLine":156,"endColumn":58,"fix":"5016"},{"ruleId":"3947","severity":1,"message":"3944","line":156,"column":5,"nodeType":"3889","messageId":"3945","endLine":156,"endColumn":58,"fix":"5017"},{"ruleId":"3922","severity":1,"message":"3923","line":16,"column":1,"nodeType":"3831","endLine":16,"endColumn":1,"fix":"5018"},{"ruleId":"3922","severity":1,"message":"3925","line":21,"column":1,"nodeType":"3831","endLine":21,"endColumn":1,"fix":"5019"},{"ruleId":"3838","severity":1,"message":"3839","line":76,"column":8,"nodeType":"3840","messageId":"3841","endLine":77,"endColumn":1,"fix":"5020"},{"ruleId":"3815","severity":2,"message":"3908","line":98,"column":12,"nodeType":"3817","messageId":"3818","endLine":98,"endColumn":13,"fix":"5021"},{"ruleId":"3922","severity":1,"message":"3923","line":109,"column":1,"nodeType":"3831","endLine":109,"endColumn":1,"fix":"5022"},{"ruleId":"3922","severity":1,"message":"3925","line":114,"column":1,"nodeType":"3831","endLine":114,"endColumn":1,"fix":"5023"},{"ruleId":"3838","severity":1,"message":"3839","line":202,"column":8,"nodeType":"3840","messageId":"3841","endLine":203,"endColumn":1,"fix":"5024"},{"ruleId":"3922","severity":1,"message":"3923","line":258,"column":1,"nodeType":"3831","endLine":258,"endColumn":1,"fix":"5025"},{"ruleId":"3922","severity":1,"message":"3925","line":263,"column":1,"nodeType":"3831","endLine":263,"endColumn":1,"fix":"5026"},{"ruleId":"3838","severity":1,"message":"3839","line":361,"column":8,"nodeType":"3840","messageId":"3841","endLine":362,"endColumn":1,"fix":"5027"},{"ruleId":"3943","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":60,"fix":"5028"},{"ruleId":"3947","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":60,"fix":"5029"},{"ruleId":"3978","severity":1,"message":"3979","line":167,"column":54,"nodeType":"3980","messageId":"3981","endLine":167,"endColumn":64},{"ruleId":"3978","severity":1,"message":"3979","line":185,"column":78,"nodeType":"3980","messageId":"3981","endLine":185,"endColumn":88},{"ruleId":"3922","severity":1,"message":"3923","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"5030"},{"ruleId":"3922","severity":1,"message":"3925","line":10,"column":1,"nodeType":"3831","endLine":10,"endColumn":1,"fix":"5031"},{"ruleId":"3838","severity":1,"message":"3839","line":88,"column":35,"nodeType":"3840","messageId":"3841","endLine":89,"endColumn":1,"fix":"5032"},{"ruleId":"3815","severity":2,"message":"3908","line":95,"column":7,"nodeType":"3817","messageId":"3818","endLine":95,"endColumn":8,"fix":"5033"},{"ruleId":"3922","severity":1,"message":"3923","line":106,"column":1,"nodeType":"3831","endLine":106,"endColumn":1,"fix":"5034"},{"ruleId":"3922","severity":1,"message":"3925","line":110,"column":1,"nodeType":"3831","endLine":110,"endColumn":1,"fix":"5035"},{"ruleId":"3838","severity":1,"message":"3839","line":183,"column":35,"nodeType":"3840","messageId":"3841","endLine":184,"endColumn":1,"fix":"5036"},{"ruleId":"3815","severity":2,"message":"3908","line":190,"column":7,"nodeType":"3817","messageId":"3818","endLine":190,"endColumn":8,"fix":"5037"},{"ruleId":"3943","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":32,"fix":"5038"},{"ruleId":"3947","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":32,"fix":"5039"},{"ruleId":"3943","severity":1,"message":"3944","line":70,"column":5,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":73,"fix":"5040"},{"ruleId":"3947","severity":1,"message":"3944","line":70,"column":5,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":73,"fix":"5041"},{"ruleId":"3848","severity":2,"message":"4098","line":3,"column":33,"nodeType":"3850","messageId":"3851","endLine":3,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":26,"column":1,"nodeType":"3831","endLine":26,"endColumn":1,"fix":"5042"},{"ruleId":"3922","severity":1,"message":"3925","line":32,"column":1,"nodeType":"3831","endLine":32,"endColumn":1,"fix":"5043"},{"ruleId":"3815","severity":2,"message":"5044","line":96,"column":9,"nodeType":"3817","messageId":"3818","endLine":96,"endColumn":25,"fix":"5045"},{"ruleId":"3922","severity":1,"message":"3923","line":159,"column":1,"nodeType":"3831","endLine":159,"endColumn":1,"fix":"5046"},{"ruleId":"3922","severity":1,"message":"3925","line":165,"column":1,"nodeType":"3831","endLine":165,"endColumn":1,"fix":"5047"},{"ruleId":"3815","severity":2,"message":"5044","line":224,"column":9,"nodeType":"3817","messageId":"3818","endLine":224,"endColumn":25,"fix":"5048"},{"ruleId":"3943","severity":1,"message":"3944","line":19,"column":5,"nodeType":"3889","messageId":"3945","endLine":19,"endColumn":77,"fix":"5049"},{"ruleId":"3947","severity":1,"message":"3944","line":19,"column":5,"nodeType":"3889","messageId":"3945","endLine":19,"endColumn":77,"fix":"5050"},{"ruleId":"3943","severity":1,"message":"3944","line":24,"column":5,"nodeType":"3889","messageId":"3945","endLine":24,"endColumn":78,"fix":"5051"},{"ruleId":"3947","severity":1,"message":"3944","line":24,"column":5,"nodeType":"3889","messageId":"3945","endLine":24,"endColumn":78,"fix":"5052"},{"ruleId":"3943","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":31,"fix":"5053"},{"ruleId":"3947","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":31,"fix":"5054"},{"ruleId":"3943","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":19,"fix":"5055"},{"ruleId":"3947","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":19,"fix":"5056"},{"ruleId":"3943","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":50,"endColumn":19,"fix":"5057"},{"ruleId":"3947","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":50,"endColumn":19,"fix":"5058"},{"ruleId":"3943","severity":1,"message":"3944","line":55,"column":5,"nodeType":"3889","messageId":"3945","endLine":55,"endColumn":75,"fix":"5059"},{"ruleId":"3947","severity":1,"message":"3944","line":55,"column":5,"nodeType":"3889","messageId":"3945","endLine":55,"endColumn":75,"fix":"5060"},{"ruleId":"3943","severity":1,"message":"3944","line":58,"column":5,"nodeType":"3889","messageId":"3945","endLine":58,"endColumn":80,"fix":"5061"},{"ruleId":"3947","severity":1,"message":"3944","line":58,"column":5,"nodeType":"3889","messageId":"3945","endLine":58,"endColumn":80,"fix":"5062"},{"ruleId":"3943","severity":1,"message":"3944","line":63,"column":5,"nodeType":"3889","messageId":"3945","endLine":63,"endColumn":80,"fix":"5063"},{"ruleId":"3947","severity":1,"message":"3944","line":63,"column":5,"nodeType":"3889","messageId":"3945","endLine":63,"endColumn":80,"fix":"5064"},{"ruleId":"3943","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":85,"fix":"5065"},{"ruleId":"3947","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":85,"fix":"5066"},{"ruleId":"3943","severity":1,"message":"3944","line":71,"column":5,"nodeType":"3889","messageId":"3945","endLine":76,"endColumn":30,"fix":"5067"},{"ruleId":"3947","severity":1,"message":"3944","line":71,"column":5,"nodeType":"3889","messageId":"3945","endLine":76,"endColumn":30,"fix":"5068"},{"ruleId":"3943","severity":1,"message":"3944","line":87,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":7,"fix":"5069"},{"ruleId":"3947","severity":1,"message":"3944","line":87,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":7,"fix":"5070"},{"ruleId":"3943","severity":1,"message":"3944","line":94,"column":5,"nodeType":"3889","messageId":"3945","endLine":98,"endColumn":9,"fix":"5071"},{"ruleId":"3947","severity":1,"message":"3944","line":94,"column":5,"nodeType":"3889","messageId":"3945","endLine":98,"endColumn":9,"fix":"5072"},{"ruleId":"3943","severity":1,"message":"3944","line":103,"column":5,"nodeType":"3889","messageId":"3945","endLine":109,"endColumn":19,"fix":"5073"},{"ruleId":"3947","severity":1,"message":"3944","line":103,"column":5,"nodeType":"3889","messageId":"3945","endLine":109,"endColumn":19,"fix":"5074"},{"ruleId":"3943","severity":1,"message":"3944","line":114,"column":5,"nodeType":"3889","messageId":"3945","endLine":118,"endColumn":19,"fix":"5075"},{"ruleId":"3947","severity":1,"message":"3944","line":114,"column":5,"nodeType":"3889","messageId":"3945","endLine":118,"endColumn":19,"fix":"5076"},{"ruleId":"3943","severity":1,"message":"3944","line":153,"column":5,"nodeType":"3889","messageId":"3945","endLine":157,"endColumn":36,"fix":"5077"},{"ruleId":"3947","severity":1,"message":"3944","line":153,"column":5,"nodeType":"3889","messageId":"3945","endLine":157,"endColumn":36,"fix":"5078"},{"ruleId":"3843","severity":2,"message":"4216","line":259,"column":20,"nodeType":"3817","messageId":"3845","endLine":259,"endColumn":27},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":14,"column":1,"nodeType":"3831","endLine":14,"endColumn":1,"fix":"5079"},{"ruleId":"3922","severity":1,"message":"3925","line":20,"column":1,"nodeType":"3831","endLine":20,"endColumn":1,"fix":"5080"},{"ruleId":"3922","severity":1,"message":"3923","line":98,"column":1,"nodeType":"3831","endLine":98,"endColumn":1,"fix":"5081"},{"ruleId":"3922","severity":1,"message":"3925","line":104,"column":1,"nodeType":"3831","endLine":104,"endColumn":1,"fix":"5082"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"5083"},{"ruleId":"3922","severity":1,"message":"3925","line":15,"column":1,"nodeType":"3831","endLine":15,"endColumn":1,"fix":"5084"},{"ruleId":"3815","severity":2,"message":"5085","line":58,"column":43,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":46,"fix":"5086"},{"ruleId":"3815","severity":2,"message":"3908","line":59,"column":15,"nodeType":"3817","messageId":"3818","endLine":59,"endColumn":21,"fix":"5087"},{"ruleId":"3815","severity":2,"message":"3908","line":64,"column":20,"nodeType":"3817","messageId":"3818","endLine":64,"endColumn":21,"fix":"5088"},{"ruleId":"3922","severity":1,"message":"3923","line":78,"column":1,"nodeType":"3831","endLine":78,"endColumn":1,"fix":"5089"},{"ruleId":"3922","severity":1,"message":"3925","line":84,"column":1,"nodeType":"3831","endLine":84,"endColumn":1,"fix":"5090"},{"ruleId":"3815","severity":2,"message":"5085","line":113,"column":32,"nodeType":"3817","messageId":"3818","endLine":113,"endColumn":35,"fix":"5091"},{"ruleId":"3815","severity":2,"message":"3908","line":114,"column":15,"nodeType":"3817","messageId":"3818","endLine":114,"endColumn":21,"fix":"5092"},{"ruleId":"3815","severity":2,"message":"3908","line":119,"column":14,"nodeType":"3817","messageId":"3818","endLine":119,"endColumn":15,"fix":"5093"},{"ruleId":"3927","severity":1,"message":"3928","line":128,"column":1,"nodeType":"3831","endLine":181,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":133,"column":1,"nodeType":"3831","endLine":133,"endColumn":1,"fix":"5094"},{"ruleId":"3922","severity":1,"message":"3925","line":139,"column":1,"nodeType":"3831","endLine":139,"endColumn":1,"fix":"5095"},{"ruleId":"3815","severity":2,"message":"5085","line":182,"column":47,"nodeType":"3817","messageId":"3818","endLine":182,"endColumn":50,"fix":"5096"},{"ruleId":"3815","severity":2,"message":"3908","line":183,"column":15,"nodeType":"3817","messageId":"3818","endLine":183,"endColumn":21,"fix":"5097"},{"ruleId":"3815","severity":2,"message":"3908","line":186,"column":20,"nodeType":"3817","messageId":"3818","endLine":186,"endColumn":21,"fix":"5098"},{"ruleId":"3927","severity":1,"message":"3928","line":193,"column":1,"nodeType":"3831","endLine":242,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":197,"column":1,"nodeType":"3831","endLine":197,"endColumn":1,"fix":"5099"},{"ruleId":"3922","severity":1,"message":"3925","line":203,"column":1,"nodeType":"3831","endLine":203,"endColumn":1,"fix":"5100"},{"ruleId":"3815","severity":2,"message":"5085","line":243,"column":36,"nodeType":"3817","messageId":"3818","endLine":243,"endColumn":39,"fix":"5101"},{"ruleId":"3815","severity":2,"message":"3908","line":244,"column":15,"nodeType":"3817","messageId":"3818","endLine":244,"endColumn":21,"fix":"5102"},{"ruleId":"3815","severity":2,"message":"3908","line":247,"column":14,"nodeType":"3817","messageId":"3818","endLine":247,"endColumn":15,"fix":"5103"},{"ruleId":"3927","severity":1,"message":"3928","line":254,"column":1,"nodeType":"3831","endLine":310,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":259,"column":1,"nodeType":"3831","endLine":259,"endColumn":1,"fix":"5104"},{"ruleId":"3922","severity":1,"message":"3925","line":265,"column":1,"nodeType":"3831","endLine":265,"endColumn":1,"fix":"5105"},{"ruleId":"3815","severity":2,"message":"5085","line":311,"column":51,"nodeType":"3817","messageId":"3818","endLine":311,"endColumn":54,"fix":"5106"},{"ruleId":"3815","severity":2,"message":"3908","line":312,"column":15,"nodeType":"3817","messageId":"3818","endLine":312,"endColumn":21,"fix":"5107"},{"ruleId":"3815","severity":2,"message":"3908","line":315,"column":20,"nodeType":"3817","messageId":"3818","endLine":315,"endColumn":21,"fix":"5108"},{"ruleId":"3927","severity":1,"message":"3928","line":322,"column":1,"nodeType":"3831","endLine":359,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":326,"column":1,"nodeType":"3831","endLine":326,"endColumn":1,"fix":"5109"},{"ruleId":"3922","severity":1,"message":"3925","line":332,"column":1,"nodeType":"3831","endLine":332,"endColumn":1,"fix":"5110"},{"ruleId":"3815","severity":2,"message":"5085","line":360,"column":40,"nodeType":"3817","messageId":"3818","endLine":360,"endColumn":43,"fix":"5111"},{"ruleId":"3815","severity":2,"message":"3908","line":361,"column":15,"nodeType":"3817","messageId":"3818","endLine":361,"endColumn":21,"fix":"5112"},{"ruleId":"3815","severity":2,"message":"3908","line":364,"column":14,"nodeType":"3817","messageId":"3818","endLine":364,"endColumn":15,"fix":"5113"},{"ruleId":"3922","severity":1,"message":"3923","line":376,"column":1,"nodeType":"3831","endLine":376,"endColumn":1,"fix":"5114"},{"ruleId":"3922","severity":1,"message":"3925","line":382,"column":1,"nodeType":"3831","endLine":382,"endColumn":1,"fix":"5115"},{"ruleId":"3815","severity":2,"message":"5085","line":417,"column":47,"nodeType":"3817","messageId":"3818","endLine":417,"endColumn":50,"fix":"5116"},{"ruleId":"3815","severity":2,"message":"3908","line":418,"column":15,"nodeType":"3817","messageId":"3818","endLine":418,"endColumn":21,"fix":"5117"},{"ruleId":"3815","severity":2,"message":"3908","line":423,"column":20,"nodeType":"3817","messageId":"3818","endLine":423,"endColumn":21,"fix":"5118"},{"ruleId":"3922","severity":1,"message":"3923","line":435,"column":1,"nodeType":"3831","endLine":435,"endColumn":1,"fix":"5119"},{"ruleId":"3922","severity":1,"message":"3925","line":441,"column":1,"nodeType":"3831","endLine":441,"endColumn":1,"fix":"5120"},{"ruleId":"3815","severity":2,"message":"5085","line":464,"column":36,"nodeType":"3817","messageId":"3818","endLine":464,"endColumn":39,"fix":"5121"},{"ruleId":"3815","severity":2,"message":"3908","line":465,"column":15,"nodeType":"3817","messageId":"3818","endLine":465,"endColumn":21,"fix":"5122"},{"ruleId":"3815","severity":2,"message":"3908","line":470,"column":14,"nodeType":"3817","messageId":"3818","endLine":470,"endColumn":15,"fix":"5123"},{"ruleId":"3943","severity":1,"message":"3944","line":21,"column":5,"nodeType":"3889","messageId":"3945","endLine":21,"endColumn":36,"fix":"5124"},{"ruleId":"3947","severity":1,"message":"3944","line":21,"column":5,"nodeType":"3889","messageId":"3945","endLine":21,"endColumn":36,"fix":"5125"},{"ruleId":"3943","severity":1,"message":"3944","line":27,"column":5,"nodeType":"3889","messageId":"3945","endLine":27,"endColumn":32,"fix":"5126"},{"ruleId":"3947","severity":1,"message":"3944","line":27,"column":5,"nodeType":"3889","messageId":"3945","endLine":27,"endColumn":32,"fix":"5127"},{"ruleId":"3943","severity":1,"message":"3944","line":33,"column":5,"nodeType":"3889","messageId":"3945","endLine":33,"endColumn":39,"fix":"5128"},{"ruleId":"3947","severity":1,"message":"3944","line":33,"column":5,"nodeType":"3889","messageId":"3945","endLine":33,"endColumn":39,"fix":"5129"},{"ruleId":"3943","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":32,"fix":"5130"},{"ruleId":"3947","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":32,"fix":"5131"},{"ruleId":"3943","severity":1,"message":"3944","line":46,"column":5,"nodeType":"3889","messageId":"3945","endLine":46,"endColumn":36,"fix":"5132"},{"ruleId":"3947","severity":1,"message":"3944","line":46,"column":5,"nodeType":"3889","messageId":"3945","endLine":46,"endColumn":36,"fix":"5133"},{"ruleId":"3943","severity":1,"message":"3944","line":54,"column":5,"nodeType":"3889","messageId":"3945","endLine":54,"endColumn":36,"fix":"5134"},{"ruleId":"3947","severity":1,"message":"3944","line":54,"column":5,"nodeType":"3889","messageId":"3945","endLine":54,"endColumn":36,"fix":"5135"},{"ruleId":"3943","severity":1,"message":"3944","line":60,"column":5,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":32,"fix":"5136"},{"ruleId":"3947","severity":1,"message":"3944","line":60,"column":5,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":32,"fix":"5137"},{"ruleId":"3943","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":36,"fix":"5138"},{"ruleId":"3947","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":36,"fix":"5139"},{"ruleId":"3943","severity":1,"message":"3944","line":81,"column":5,"nodeType":"3889","messageId":"3945","endLine":81,"endColumn":36,"fix":"5140"},{"ruleId":"3947","severity":1,"message":"3944","line":81,"column":5,"nodeType":"3889","messageId":"3945","endLine":81,"endColumn":36,"fix":"5141"},{"ruleId":"3943","severity":1,"message":"3944","line":89,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":39,"fix":"5142"},{"ruleId":"3947","severity":1,"message":"3944","line":89,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":39,"fix":"5143"},{"ruleId":"3943","severity":1,"message":"3944","line":95,"column":5,"nodeType":"3889","messageId":"3945","endLine":95,"endColumn":32,"fix":"5144"},{"ruleId":"3947","severity":1,"message":"3944","line":95,"column":5,"nodeType":"3889","messageId":"3945","endLine":95,"endColumn":32,"fix":"5145"},{"ruleId":"3943","severity":1,"message":"3944","line":101,"column":5,"nodeType":"3889","messageId":"3945","endLine":101,"endColumn":39,"fix":"5146"},{"ruleId":"3947","severity":1,"message":"3944","line":101,"column":5,"nodeType":"3889","messageId":"3945","endLine":101,"endColumn":39,"fix":"5147"},{"ruleId":"3943","severity":1,"message":"3944","line":107,"column":5,"nodeType":"3889","messageId":"3945","endLine":107,"endColumn":32,"fix":"5148"},{"ruleId":"3947","severity":1,"message":"3944","line":107,"column":5,"nodeType":"3889","messageId":"3945","endLine":107,"endColumn":32,"fix":"5149"},{"ruleId":"3943","severity":1,"message":"3944","line":115,"column":5,"nodeType":"3889","messageId":"3945","endLine":115,"endColumn":39,"fix":"5150"},{"ruleId":"3947","severity":1,"message":"3944","line":115,"column":5,"nodeType":"3889","messageId":"3945","endLine":115,"endColumn":39,"fix":"5151"},{"ruleId":"3943","severity":1,"message":"3944","line":121,"column":5,"nodeType":"3889","messageId":"3945","endLine":121,"endColumn":32,"fix":"5152"},{"ruleId":"3947","severity":1,"message":"3944","line":121,"column":5,"nodeType":"3889","messageId":"3945","endLine":121,"endColumn":32,"fix":"5153"},{"ruleId":"3943","severity":1,"message":"3944","line":127,"column":5,"nodeType":"3889","messageId":"3945","endLine":127,"endColumn":39,"fix":"5154"},{"ruleId":"3947","severity":1,"message":"3944","line":127,"column":5,"nodeType":"3889","messageId":"3945","endLine":127,"endColumn":39,"fix":"5155"},{"ruleId":"3943","severity":1,"message":"3944","line":142,"column":5,"nodeType":"3889","messageId":"3945","endLine":142,"endColumn":39,"fix":"5156"},{"ruleId":"3947","severity":1,"message":"3944","line":142,"column":5,"nodeType":"3889","messageId":"3945","endLine":142,"endColumn":39,"fix":"5157"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":36,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":47},{"ruleId":"3922","severity":1,"message":"3923","line":5,"column":1,"nodeType":"3831","endLine":5,"endColumn":1,"fix":"5158"},{"ruleId":"3922","severity":1,"message":"3925","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"5159"},{"ruleId":"3922","severity":1,"message":"3923","line":25,"column":1,"nodeType":"3831","endLine":25,"endColumn":1,"fix":"5160"},{"ruleId":"3922","severity":1,"message":"3925","line":29,"column":1,"nodeType":"3831","endLine":29,"endColumn":1,"fix":"5161"},{"ruleId":"3843","severity":2,"message":"5162","line":51,"column":25,"nodeType":"3861","messageId":"3845","endLine":51,"endColumn":40},{"ruleId":"3922","severity":1,"message":"3923","line":57,"column":1,"nodeType":"3831","endLine":57,"endColumn":1,"fix":"5163"},{"ruleId":"3922","severity":1,"message":"3925","line":61,"column":1,"nodeType":"3831","endLine":61,"endColumn":1,"fix":"5164"},{"ruleId":"3843","severity":2,"message":"5165","line":88,"column":25,"nodeType":"3861","messageId":"3845","endLine":88,"endColumn":45},{"ruleId":"3922","severity":1,"message":"3923","line":94,"column":1,"nodeType":"3831","endLine":94,"endColumn":1,"fix":"5166"},{"ruleId":"3922","severity":1,"message":"3925","line":98,"column":1,"nodeType":"3831","endLine":98,"endColumn":1,"fix":"5167"},{"ruleId":"3843","severity":2,"message":"5162","line":128,"column":25,"nodeType":"3861","messageId":"3845","endLine":128,"endColumn":40},{"ruleId":"3843","severity":2,"message":"5165","line":129,"column":23,"nodeType":"3861","messageId":"3845","endLine":129,"endColumn":43},{"ruleId":"3922","severity":1,"message":"3923","line":135,"column":1,"nodeType":"3831","endLine":135,"endColumn":1,"fix":"5168"},{"ruleId":"3922","severity":1,"message":"3925","line":139,"column":1,"nodeType":"3831","endLine":139,"endColumn":1,"fix":"5169"},{"ruleId":"3922","severity":1,"message":"3923","line":165,"column":1,"nodeType":"3831","endLine":165,"endColumn":1,"fix":"5170"},{"ruleId":"3922","severity":1,"message":"3925","line":169,"column":1,"nodeType":"3831","endLine":169,"endColumn":1,"fix":"5171"},{"ruleId":"3922","severity":1,"message":"3923","line":196,"column":1,"nodeType":"3831","endLine":196,"endColumn":1,"fix":"5172"},{"ruleId":"3922","severity":1,"message":"3925","line":200,"column":1,"nodeType":"3831","endLine":200,"endColumn":1,"fix":"5173"},{"ruleId":"3922","severity":1,"message":"3923","line":225,"column":1,"nodeType":"3831","endLine":225,"endColumn":1,"fix":"5174"},{"ruleId":"3922","severity":1,"message":"3925","line":229,"column":1,"nodeType":"3831","endLine":229,"endColumn":1,"fix":"5175"},{"ruleId":"3922","severity":1,"message":"3923","line":253,"column":1,"nodeType":"3831","endLine":253,"endColumn":1,"fix":"5176"},{"ruleId":"3922","severity":1,"message":"3925","line":257,"column":1,"nodeType":"3831","endLine":257,"endColumn":1,"fix":"5177"},{"ruleId":"3922","severity":1,"message":"3923","line":284,"column":1,"nodeType":"3831","endLine":284,"endColumn":1,"fix":"5178"},{"ruleId":"3922","severity":1,"message":"3925","line":288,"column":1,"nodeType":"3831","endLine":288,"endColumn":1,"fix":"5179"},{"ruleId":"3922","severity":1,"message":"3923","line":325,"column":1,"nodeType":"3831","endLine":325,"endColumn":1,"fix":"5180"},{"ruleId":"3922","severity":1,"message":"3925","line":329,"column":1,"nodeType":"3831","endLine":329,"endColumn":1,"fix":"5181"},{"ruleId":"3922","severity":1,"message":"3923","line":367,"column":1,"nodeType":"3831","endLine":367,"endColumn":1,"fix":"5182"},{"ruleId":"3922","severity":1,"message":"3925","line":371,"column":1,"nodeType":"3831","endLine":371,"endColumn":1,"fix":"5183"},{"ruleId":"3922","severity":1,"message":"3923","line":398,"column":1,"nodeType":"3831","endLine":398,"endColumn":1,"fix":"5184"},{"ruleId":"3922","severity":1,"message":"3925","line":402,"column":1,"nodeType":"3831","endLine":402,"endColumn":1,"fix":"5185"},{"ruleId":"3922","severity":1,"message":"3923","line":432,"column":1,"nodeType":"3831","endLine":432,"endColumn":1,"fix":"5186"},{"ruleId":"3922","severity":1,"message":"3925","line":436,"column":1,"nodeType":"3831","endLine":436,"endColumn":1,"fix":"5187"},{"ruleId":"3922","severity":1,"message":"3923","line":466,"column":1,"nodeType":"3831","endLine":466,"endColumn":1,"fix":"5188"},{"ruleId":"3922","severity":1,"message":"3925","line":470,"column":1,"nodeType":"3831","endLine":470,"endColumn":1,"fix":"5189"},{"ruleId":"3922","severity":1,"message":"3923","line":504,"column":1,"nodeType":"3831","endLine":504,"endColumn":1,"fix":"5190"},{"ruleId":"3922","severity":1,"message":"3925","line":508,"column":1,"nodeType":"3831","endLine":508,"endColumn":1,"fix":"5191"},{"ruleId":"3922","severity":1,"message":"3923","line":544,"column":1,"nodeType":"3831","endLine":544,"endColumn":1,"fix":"5192"},{"ruleId":"3922","severity":1,"message":"3923","line":569,"column":1,"nodeType":"3831","endLine":569,"endColumn":1,"fix":"5193"},{"ruleId":"3922","severity":1,"message":"3923","line":592,"column":1,"nodeType":"3831","endLine":592,"endColumn":1,"fix":"5194"},{"ruleId":"3922","severity":1,"message":"3923","line":614,"column":1,"nodeType":"3831","endLine":614,"endColumn":1,"fix":"5195"},{"ruleId":"3922","severity":1,"message":"3923","line":638,"column":1,"nodeType":"3831","endLine":638,"endColumn":1,"fix":"5196"},{"ruleId":"3922","severity":1,"message":"3923","line":662,"column":1,"nodeType":"3831","endLine":662,"endColumn":1,"fix":"5197"},{"ruleId":"3922","severity":1,"message":"3925","line":666,"column":1,"nodeType":"3831","endLine":666,"endColumn":1,"fix":"5198"},{"ruleId":"5199","severity":2,"message":"5200","line":494,"column":20,"nodeType":"5201","messageId":"5202","endLine":494,"endColumn":27,"suppressions":"5203"},{"ruleId":"5199","severity":2,"message":"5200","line":534,"column":20,"nodeType":"5201","messageId":"5202","endLine":534,"endColumn":27,"suppressions":"5204"},{"ruleId":"5205","severity":1,"message":"5206","line":88,"column":10,"nodeType":null,"messageId":"5207","endLine":88,"endColumn":17},{"ruleId":"3943","severity":1,"message":"3944","line":140,"column":5,"nodeType":"3889","messageId":"3945","endLine":140,"endColumn":61,"fix":"5208"},{"ruleId":"3947","severity":1,"message":"3944","line":140,"column":5,"nodeType":"3889","messageId":"3945","endLine":140,"endColumn":61,"fix":"5209"},{"ruleId":"3943","severity":1,"message":"3944","line":176,"column":5,"nodeType":"3889","messageId":"3945","endLine":176,"endColumn":66,"fix":"5210"},{"ruleId":"3947","severity":1,"message":"3944","line":176,"column":5,"nodeType":"3889","messageId":"3945","endLine":176,"endColumn":66,"fix":"5211"},{"ruleId":"4083","severity":1,"message":"4084","line":204,"column":10,"nodeType":"3850","messageId":"4085","endLine":204,"endColumn":21,"fix":"5212"},{"ruleId":"3943","severity":1,"message":"3944","line":207,"column":5,"nodeType":"3961","messageId":"3945","endLine":207,"endColumn":20,"fix":"5213"},{"ruleId":"3947","severity":1,"message":"3944","line":207,"column":5,"nodeType":"3961","messageId":"3945","endLine":207,"endColumn":20,"fix":"5214"},{"ruleId":"3943","severity":1,"message":"3944","line":209,"column":5,"nodeType":"3889","messageId":"3945","endLine":209,"endColumn":43,"fix":"5215"},{"ruleId":"3947","severity":1,"message":"3944","line":209,"column":5,"nodeType":"3889","messageId":"3945","endLine":209,"endColumn":43,"fix":"5216"},{"ruleId":"3943","severity":1,"message":"3944","line":241,"column":5,"nodeType":"3961","messageId":"3945","endLine":241,"endColumn":20,"fix":"5217"},{"ruleId":"3947","severity":1,"message":"3944","line":241,"column":5,"nodeType":"3961","messageId":"3945","endLine":241,"endColumn":20,"fix":"5218"},{"ruleId":"3943","severity":1,"message":"3944","line":243,"column":5,"nodeType":"3889","messageId":"3945","endLine":243,"endColumn":43,"fix":"5219"},{"ruleId":"3947","severity":1,"message":"3944","line":243,"column":5,"nodeType":"3889","messageId":"3945","endLine":243,"endColumn":43,"fix":"5220"},{"ruleId":"3943","severity":1,"message":"3944","line":279,"column":5,"nodeType":"3889","messageId":"3945","endLine":279,"endColumn":51,"fix":"5221"},{"ruleId":"3947","severity":1,"message":"3944","line":279,"column":5,"nodeType":"3889","messageId":"3945","endLine":279,"endColumn":51,"fix":"5222"},{"ruleId":"3943","severity":1,"message":"3944","line":286,"column":5,"nodeType":"3889","messageId":"3945","endLine":286,"endColumn":47,"fix":"5223"},{"ruleId":"3947","severity":1,"message":"3944","line":286,"column":5,"nodeType":"3889","messageId":"3945","endLine":286,"endColumn":47,"fix":"5224"},{"ruleId":"3943","severity":1,"message":"3944","line":299,"column":5,"nodeType":"3889","messageId":"3945","endLine":299,"endColumn":41,"fix":"5225"},{"ruleId":"3947","severity":1,"message":"3944","line":299,"column":5,"nodeType":"3889","messageId":"3945","endLine":299,"endColumn":41,"fix":"5226"},{"ruleId":"3943","severity":1,"message":"3944","line":306,"column":5,"nodeType":"3889","messageId":"3945","endLine":306,"endColumn":47,"fix":"5227"},{"ruleId":"3947","severity":1,"message":"3944","line":306,"column":5,"nodeType":"3889","messageId":"3945","endLine":306,"endColumn":47,"fix":"5228"},{"ruleId":"3848","severity":2,"message":"4098","line":5,"column":33,"nodeType":"3850","messageId":"3851","endLine":5,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":14,"column":1,"nodeType":"3831","endLine":14,"endColumn":1,"fix":"5229"},{"ruleId":"3922","severity":1,"message":"3925","line":18,"column":1,"nodeType":"3831","endLine":18,"endColumn":1,"fix":"5230"},{"ruleId":"3922","severity":1,"message":"3923","line":32,"column":1,"nodeType":"3831","endLine":32,"endColumn":1,"fix":"5231"},{"ruleId":"3922","severity":1,"message":"3925","line":36,"column":1,"nodeType":"3831","endLine":36,"endColumn":1,"fix":"5232"},{"ruleId":"3922","severity":1,"message":"3923","line":53,"column":1,"nodeType":"3831","endLine":53,"endColumn":1,"fix":"5233"},{"ruleId":"3922","severity":1,"message":"3925","line":57,"column":1,"nodeType":"3831","endLine":57,"endColumn":1,"fix":"5234"},{"ruleId":"3922","severity":1,"message":"3923","line":78,"column":1,"nodeType":"3831","endLine":78,"endColumn":1,"fix":"5235"},{"ruleId":"3922","severity":1,"message":"3925","line":82,"column":1,"nodeType":"3831","endLine":82,"endColumn":1,"fix":"5236"},{"ruleId":"3922","severity":1,"message":"3923","line":99,"column":1,"nodeType":"3831","endLine":99,"endColumn":1,"fix":"5237"},{"ruleId":"3922","severity":1,"message":"3925","line":103,"column":1,"nodeType":"3831","endLine":103,"endColumn":1,"fix":"5238"},{"ruleId":"3922","severity":1,"message":"3923","line":122,"column":1,"nodeType":"3831","endLine":122,"endColumn":1,"fix":"5239"},{"ruleId":"3922","severity":1,"message":"3925","line":126,"column":1,"nodeType":"3831","endLine":126,"endColumn":1,"fix":"5240"},{"ruleId":"3922","severity":1,"message":"3923","line":142,"column":1,"nodeType":"3831","endLine":142,"endColumn":1,"fix":"5241"},{"ruleId":"3922","severity":1,"message":"3925","line":146,"column":1,"nodeType":"3831","endLine":146,"endColumn":1,"fix":"5242"},{"ruleId":"3922","severity":1,"message":"3923","line":162,"column":1,"nodeType":"3831","endLine":162,"endColumn":1,"fix":"5243"},{"ruleId":"3922","severity":1,"message":"3925","line":167,"column":1,"nodeType":"3831","endLine":167,"endColumn":1,"fix":"5244"},{"ruleId":"3838","severity":1,"message":"3839","line":211,"column":8,"nodeType":"3840","messageId":"3841","endLine":212,"endColumn":1,"fix":"5245"},{"ruleId":"3815","severity":2,"message":"5044","line":216,"column":9,"nodeType":"3817","messageId":"3818","endLine":216,"endColumn":25,"fix":"5246"},{"ruleId":"3922","severity":1,"message":"3923","line":231,"column":1,"nodeType":"3831","endLine":231,"endColumn":1,"fix":"5247"},{"ruleId":"3922","severity":1,"message":"3925","line":236,"column":1,"nodeType":"3831","endLine":236,"endColumn":1,"fix":"5248"},{"ruleId":"3838","severity":1,"message":"3839","line":282,"column":8,"nodeType":"3840","messageId":"3841","endLine":283,"endColumn":1,"fix":"5249"},{"ruleId":"3815","severity":2,"message":"5044","line":288,"column":9,"nodeType":"3817","messageId":"3818","endLine":288,"endColumn":25,"fix":"5250"},{"ruleId":"4002","severity":2,"message":"5251","line":289,"column":18,"nodeType":"3817","messageId":"4004","endLine":289,"endColumn":27,"suggestions":"5252"},{"ruleId":"3922","severity":1,"message":"3923","line":296,"column":1,"nodeType":"3831","endLine":296,"endColumn":1,"fix":"5253"},{"ruleId":"3922","severity":1,"message":"3925","line":301,"column":1,"nodeType":"3831","endLine":301,"endColumn":1,"fix":"5254"},{"ruleId":"3922","severity":1,"message":"3923","line":349,"column":1,"nodeType":"3831","endLine":349,"endColumn":1,"fix":"5255"},{"ruleId":"3922","severity":1,"message":"3925","line":354,"column":1,"nodeType":"3831","endLine":354,"endColumn":1,"fix":"5256"},{"ruleId":"3943","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":39,"fix":"5257"},{"ruleId":"3947","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":39,"fix":"5258"},{"ruleId":"3943","severity":1,"message":"3944","line":32,"column":5,"nodeType":"3889","messageId":"3945","endLine":32,"endColumn":45,"fix":"5259"},{"ruleId":"3947","severity":1,"message":"3944","line":32,"column":5,"nodeType":"3889","messageId":"3945","endLine":32,"endColumn":45,"fix":"5260"},{"ruleId":"3943","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":45,"fix":"5261"},{"ruleId":"3947","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":45,"fix":"5262"},{"ruleId":"3943","severity":1,"message":"3944","line":43,"column":5,"nodeType":"3889","messageId":"3945","endLine":43,"endColumn":39,"fix":"5263"},{"ruleId":"3947","severity":1,"message":"3944","line":43,"column":5,"nodeType":"3889","messageId":"3945","endLine":43,"endColumn":39,"fix":"5264"},{"ruleId":"3943","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":39,"fix":"5265"},{"ruleId":"3947","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":39,"fix":"5266"},{"ruleId":"3943","severity":1,"message":"3944","line":54,"column":5,"nodeType":"3889","messageId":"3945","endLine":54,"endColumn":32,"fix":"5267"},{"ruleId":"3947","severity":1,"message":"3944","line":54,"column":5,"nodeType":"3889","messageId":"3945","endLine":54,"endColumn":32,"fix":"5268"},{"ruleId":"3943","severity":1,"message":"3944","line":61,"column":5,"nodeType":"3889","messageId":"3945","endLine":61,"endColumn":39,"fix":"5269"},{"ruleId":"3947","severity":1,"message":"3944","line":61,"column":5,"nodeType":"3889","messageId":"3945","endLine":61,"endColumn":39,"fix":"5270"},{"ruleId":"3943","severity":1,"message":"3944","line":70,"column":5,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":39,"fix":"5271"},{"ruleId":"3947","severity":1,"message":"3944","line":70,"column":5,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":39,"fix":"5272"},{"ruleId":"3838","severity":1,"message":"3839","line":74,"column":5,"nodeType":"3840","messageId":"3841","endLine":75,"endColumn":1,"fix":"5273"},{"ruleId":"3943","severity":1,"message":"3944","line":81,"column":5,"nodeType":"3889","messageId":"3945","endLine":81,"endColumn":39,"fix":"5274"},{"ruleId":"3947","severity":1,"message":"3944","line":81,"column":5,"nodeType":"3889","messageId":"3945","endLine":81,"endColumn":39,"fix":"5275"},{"ruleId":"3943","severity":1,"message":"3944","line":90,"column":5,"nodeType":"3889","messageId":"3945","endLine":90,"endColumn":39,"fix":"5276"},{"ruleId":"3947","severity":1,"message":"3944","line":90,"column":5,"nodeType":"3889","messageId":"3945","endLine":90,"endColumn":39,"fix":"5277"},{"ruleId":"3943","severity":1,"message":"3944","line":99,"column":5,"nodeType":"3889","messageId":"3945","endLine":99,"endColumn":39,"fix":"5278"},{"ruleId":"3947","severity":1,"message":"3944","line":99,"column":5,"nodeType":"3889","messageId":"3945","endLine":99,"endColumn":39,"fix":"5279"},{"ruleId":"3943","severity":1,"message":"3944","line":104,"column":5,"nodeType":"3889","messageId":"3945","endLine":104,"endColumn":32,"fix":"5280"},{"ruleId":"3947","severity":1,"message":"3944","line":104,"column":5,"nodeType":"3889","messageId":"3945","endLine":104,"endColumn":32,"fix":"5281"},{"ruleId":"4083","severity":1,"message":"4084","line":108,"column":10,"nodeType":"3850","messageId":"4085","endLine":108,"endColumn":26,"fix":"5282"},{"ruleId":"3943","severity":1,"message":"3944","line":111,"column":5,"nodeType":"3889","messageId":"3945","endLine":111,"endColumn":44,"fix":"5283"},{"ruleId":"3947","severity":1,"message":"3944","line":111,"column":5,"nodeType":"3889","messageId":"3945","endLine":111,"endColumn":44,"fix":"5284"},{"ruleId":"3943","severity":1,"message":"3944","line":120,"column":5,"nodeType":"3889","messageId":"3945","endLine":120,"endColumn":46,"fix":"5285"},{"ruleId":"3947","severity":1,"message":"3944","line":120,"column":5,"nodeType":"3889","messageId":"3945","endLine":120,"endColumn":46,"fix":"5286"},{"ruleId":"3943","severity":1,"message":"3944","line":128,"column":5,"nodeType":"3889","messageId":"3945","endLine":128,"endColumn":44,"fix":"5287"},{"ruleId":"3947","severity":1,"message":"3944","line":128,"column":5,"nodeType":"3889","messageId":"3945","endLine":128,"endColumn":44,"fix":"5288"},{"ruleId":"3943","severity":1,"message":"3944","line":136,"column":5,"nodeType":"3889","messageId":"3945","endLine":136,"endColumn":46,"fix":"5289"},{"ruleId":"3947","severity":1,"message":"3944","line":136,"column":5,"nodeType":"3889","messageId":"3945","endLine":136,"endColumn":46,"fix":"5290"},{"ruleId":"3943","severity":1,"message":"3944","line":145,"column":5,"nodeType":"3889","messageId":"3945","endLine":145,"endColumn":40,"fix":"5291"},{"ruleId":"3947","severity":1,"message":"3944","line":145,"column":5,"nodeType":"3889","messageId":"3945","endLine":145,"endColumn":40,"fix":"5292"},{"ruleId":"4083","severity":1,"message":"4084","line":149,"column":10,"nodeType":"3850","messageId":"4085","endLine":149,"endColumn":31,"fix":"5293"},{"ruleId":"3943","severity":1,"message":"3944","line":152,"column":5,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":52,"fix":"5294"},{"ruleId":"3947","severity":1,"message":"3944","line":152,"column":5,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":52,"fix":"5295"},{"ruleId":"3943","severity":1,"message":"3944","line":160,"column":5,"nodeType":"3889","messageId":"3945","endLine":160,"endColumn":52,"fix":"5296"},{"ruleId":"3947","severity":1,"message":"3944","line":160,"column":5,"nodeType":"3889","messageId":"3945","endLine":160,"endColumn":52,"fix":"5297"},{"ruleId":"3838","severity":1,"message":"3839","line":167,"column":5,"nodeType":"3840","messageId":"3841","endLine":168,"endColumn":1,"fix":"5298"},{"ruleId":"3943","severity":1,"message":"3944","line":174,"column":5,"nodeType":"3889","messageId":"3945","endLine":174,"endColumn":52,"fix":"5299"},{"ruleId":"3947","severity":1,"message":"3944","line":174,"column":5,"nodeType":"3889","messageId":"3945","endLine":174,"endColumn":52,"fix":"5300"},{"ruleId":"3943","severity":1,"message":"3944","line":182,"column":5,"nodeType":"3889","messageId":"3945","endLine":182,"endColumn":52,"fix":"5301"},{"ruleId":"3947","severity":1,"message":"3944","line":182,"column":5,"nodeType":"3889","messageId":"3945","endLine":182,"endColumn":52,"fix":"5302"},{"ruleId":"3943","severity":1,"message":"3944","line":190,"column":5,"nodeType":"3889","messageId":"3945","endLine":190,"endColumn":54,"fix":"5303"},{"ruleId":"3947","severity":1,"message":"3944","line":190,"column":5,"nodeType":"3889","messageId":"3945","endLine":190,"endColumn":54,"fix":"5304"},{"ruleId":"3943","severity":1,"message":"3944","line":199,"column":5,"nodeType":"3889","messageId":"3945","endLine":199,"endColumn":40,"fix":"5305"},{"ruleId":"3947","severity":1,"message":"3944","line":199,"column":5,"nodeType":"3889","messageId":"3945","endLine":199,"endColumn":40,"fix":"5306"},{"ruleId":"3835","severity":1,"message":"3836","line":2,"column":1,"nodeType":"3831","endLine":2,"endColumn":1,"fix":"5307"},{"ruleId":"3922","severity":1,"message":"3925","line":3,"column":1,"nodeType":"3831","endLine":3,"endColumn":1,"fix":"5308"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":20,"column":1,"nodeType":"3831","endLine":20,"endColumn":1,"fix":"5309"},{"ruleId":"3922","severity":1,"message":"3925","line":25,"column":1,"nodeType":"3831","endLine":25,"endColumn":1,"fix":"5310"},{"ruleId":"3838","severity":1,"message":"3839","line":72,"column":8,"nodeType":"3840","messageId":"3841","endLine":73,"endColumn":1,"fix":"5311"},{"ruleId":"3815","severity":2,"message":"5044","line":77,"column":9,"nodeType":"3817","messageId":"3818","endLine":77,"endColumn":25,"fix":"5312"},{"ruleId":"3922","severity":1,"message":"3923","line":105,"column":1,"nodeType":"3831","endLine":105,"endColumn":1,"fix":"5313"},{"ruleId":"3922","severity":1,"message":"3925","line":110,"column":1,"nodeType":"3831","endLine":110,"endColumn":1,"fix":"5314"},{"ruleId":"3815","severity":2,"message":"5044","line":162,"column":9,"nodeType":"3817","messageId":"3818","endLine":162,"endColumn":25,"fix":"5315"},{"ruleId":"3943","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":31,"fix":"5316"},{"ruleId":"3947","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":31,"fix":"5317"},{"ruleId":"3943","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":32,"fix":"5318"},{"ruleId":"3947","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":32,"fix":"5319"},{"ruleId":"3943","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":31,"fix":"5320"},{"ruleId":"3947","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":31,"fix":"5321"},{"ruleId":"3943","severity":1,"message":"3944","line":44,"column":5,"nodeType":"3889","messageId":"3945","endLine":44,"endColumn":31,"fix":"5322"},{"ruleId":"3947","severity":1,"message":"3944","line":44,"column":5,"nodeType":"3889","messageId":"3945","endLine":44,"endColumn":31,"fix":"5323"},{"ruleId":"3943","severity":1,"message":"3944","line":60,"column":5,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":31,"fix":"5324"},{"ruleId":"3947","severity":1,"message":"3944","line":60,"column":5,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":31,"fix":"5325"},{"ruleId":"3943","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":32,"fix":"5326"},{"ruleId":"3947","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":32,"fix":"5327"},{"ruleId":"3943","severity":1,"message":"3944","line":70,"column":5,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":31,"fix":"5328"},{"ruleId":"3947","severity":1,"message":"3944","line":70,"column":5,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":31,"fix":"5329"},{"ruleId":"3943","severity":1,"message":"3944","line":75,"column":5,"nodeType":"3889","messageId":"3945","endLine":75,"endColumn":31,"fix":"5330"},{"ruleId":"3947","severity":1,"message":"3944","line":75,"column":5,"nodeType":"3889","messageId":"3945","endLine":75,"endColumn":31,"fix":"5331"},{"ruleId":"3838","severity":1,"message":"3839","line":88,"column":5,"nodeType":"3840","messageId":"3841","endLine":89,"endColumn":1,"fix":"5332"},{"ruleId":"3943","severity":1,"message":"3944","line":97,"column":5,"nodeType":"3889","messageId":"3945","endLine":97,"endColumn":31,"fix":"5333"},{"ruleId":"3947","severity":1,"message":"3944","line":97,"column":5,"nodeType":"3889","messageId":"3945","endLine":97,"endColumn":31,"fix":"5334"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":14,"column":1,"nodeType":"3831","endLine":14,"endColumn":1,"fix":"5335"},{"ruleId":"3922","severity":1,"message":"3925","line":19,"column":1,"nodeType":"3831","endLine":19,"endColumn":1,"fix":"5336"},{"ruleId":"3922","severity":1,"message":"3923","line":98,"column":1,"nodeType":"3831","endLine":98,"endColumn":1,"fix":"5337"},{"ruleId":"3922","severity":1,"message":"3925","line":103,"column":1,"nodeType":"3831","endLine":103,"endColumn":1,"fix":"5338"},{"ruleId":"3848","severity":2,"message":"4098","line":4,"column":33,"nodeType":"3850","messageId":"3851","endLine":4,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"5339"},{"ruleId":"3838","severity":1,"message":"3839","line":24,"column":35,"nodeType":"3840","messageId":"3841","endLine":25,"endColumn":1,"fix":"5340"},{"ruleId":"3815","severity":2,"message":"5341","line":24,"column":50,"nodeType":"3817","messageId":"3818","endLine":24,"endColumn":67},{"ruleId":"3815","severity":2,"message":"5085","line":24,"column":68,"nodeType":"3817","messageId":"3818","endLine":24,"endColumn":71,"fix":"5342"},{"ruleId":"3815","severity":2,"message":"3908","line":25,"column":15,"nodeType":"3817","messageId":"3818","endLine":25,"endColumn":21,"fix":"5343"},{"ruleId":"3815","severity":2,"message":"3908","line":31,"column":20,"nodeType":"3817","messageId":"3818","endLine":31,"endColumn":21,"fix":"5344"},{"ruleId":"3922","severity":1,"message":"3923","line":44,"column":1,"nodeType":"3831","endLine":44,"endColumn":1,"fix":"5345"},{"ruleId":"3815","severity":2,"message":"5085","line":83,"column":46,"nodeType":"3817","messageId":"3818","endLine":83,"endColumn":49,"fix":"5346"},{"ruleId":"3815","severity":2,"message":"3908","line":84,"column":15,"nodeType":"3817","messageId":"3818","endLine":84,"endColumn":21,"fix":"5347"},{"ruleId":"3815","severity":2,"message":"5044","line":89,"column":9,"nodeType":"3817","messageId":"3818","endLine":89,"endColumn":12,"fix":"5348"},{"ruleId":"3815","severity":2,"message":"3908","line":92,"column":28,"nodeType":"3817","messageId":"3818","endLine":92,"endColumn":34,"fix":"5349"},{"ruleId":"3815","severity":2,"message":"3908","line":101,"column":15,"nodeType":"3817","messageId":"3818","endLine":101,"endColumn":16,"fix":"5350"},{"ruleId":"3922","severity":1,"message":"3923","line":114,"column":1,"nodeType":"3831","endLine":114,"endColumn":1,"fix":"5351"},{"ruleId":"3815","severity":2,"message":"5085","line":145,"column":35,"nodeType":"3817","messageId":"3818","endLine":145,"endColumn":38,"fix":"5352"},{"ruleId":"3815","severity":2,"message":"3908","line":146,"column":15,"nodeType":"3817","messageId":"3818","endLine":146,"endColumn":21,"fix":"5353"},{"ruleId":"3815","severity":2,"message":"3908","line":152,"column":14,"nodeType":"3817","messageId":"3818","endLine":152,"endColumn":15,"fix":"5354"},{"ruleId":"3838","severity":1,"message":"3839","line":113,"column":5,"nodeType":"3840","messageId":"3841","endLine":114,"endColumn":1,"fix":"5355"},{"ruleId":"3922","severity":1,"message":"3923","line":100,"column":1,"nodeType":"3831","endLine":100,"endColumn":1,"fix":"5356"},{"ruleId":"3922","severity":1,"message":"3923","line":157,"column":1,"nodeType":"3831","endLine":157,"endColumn":1,"fix":"5357"},{"ruleId":"4002","severity":2,"message":"5358","line":183,"column":5,"nodeType":"3817","messageId":"4004","endLine":183,"endColumn":12,"suggestions":"5359"},{"ruleId":"3927","severity":1,"message":"3928","line":192,"column":1,"nodeType":"3831","endLine":211,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":194,"column":1,"nodeType":"3831","endLine":194,"endColumn":1,"fix":"5360"},{"ruleId":"3927","severity":1,"message":"3928","line":231,"column":1,"nodeType":"3831","endLine":260,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":234,"column":1,"nodeType":"3831","endLine":234,"endColumn":1,"fix":"5361"},{"ruleId":"3943","severity":1,"message":"3944","line":21,"column":5,"nodeType":"3889","messageId":"3945","endLine":21,"endColumn":26,"fix":"5362"},{"ruleId":"3947","severity":1,"message":"3944","line":21,"column":5,"nodeType":"3889","messageId":"3945","endLine":21,"endColumn":26,"fix":"5363"},{"ruleId":"3943","severity":1,"message":"3944","line":27,"column":5,"nodeType":"3889","messageId":"3945","endLine":27,"endColumn":25,"fix":"5364"},{"ruleId":"3947","severity":1,"message":"3944","line":27,"column":5,"nodeType":"3889","messageId":"3945","endLine":27,"endColumn":25,"fix":"5365"},{"ruleId":"5366","severity":2,"message":"5367","line":33,"column":50,"nodeType":"4103","messageId":"5368","endLine":33,"endColumn":65},{"ruleId":"3943","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":35,"fix":"5369"},{"ruleId":"3947","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":35,"fix":"5370"},{"ruleId":"3943","severity":1,"message":"3944","line":40,"column":5,"nodeType":"3889","messageId":"3945","endLine":40,"endColumn":26,"fix":"5371"},{"ruleId":"3947","severity":1,"message":"3944","line":40,"column":5,"nodeType":"3889","messageId":"3945","endLine":40,"endColumn":26,"fix":"5372"},{"ruleId":"3943","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":26,"fix":"5373"},{"ruleId":"3947","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":26,"fix":"5374"},{"ruleId":"3943","severity":1,"message":"3944","line":56,"column":5,"nodeType":"3889","messageId":"3945","endLine":56,"endColumn":25,"fix":"5375"},{"ruleId":"3947","severity":1,"message":"3944","line":56,"column":5,"nodeType":"3889","messageId":"3945","endLine":56,"endColumn":25,"fix":"5376"},{"ruleId":"3838","severity":1,"message":"3839","line":60,"column":5,"nodeType":"3840","messageId":"3841","endLine":61,"endColumn":1,"fix":"5377"},{"ruleId":"3943","severity":1,"message":"3944","line":68,"column":5,"nodeType":"3889","messageId":"3945","endLine":68,"endColumn":25,"fix":"5378"},{"ruleId":"3947","severity":1,"message":"3944","line":68,"column":5,"nodeType":"3889","messageId":"3945","endLine":68,"endColumn":25,"fix":"5379"},{"ruleId":"5366","severity":2,"message":"5367","line":109,"column":72,"nodeType":"4103","messageId":"5368","endLine":109,"endColumn":87},{"ruleId":"3838","severity":1,"message":"3839","line":135,"column":5,"nodeType":"3840","messageId":"3841","endLine":136,"endColumn":1,"fix":"5380"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"5381"},{"ruleId":"3922","severity":1,"message":"3925","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"5382"},{"ruleId":"3922","severity":1,"message":"3923","line":49,"column":1,"nodeType":"3831","endLine":49,"endColumn":1,"fix":"5383"},{"ruleId":"3922","severity":1,"message":"3925","line":54,"column":1,"nodeType":"3831","endLine":54,"endColumn":1,"fix":"5384"},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"5385"},{"ruleId":"3922","severity":1,"message":"3925","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"5386"},{"ruleId":"3922","severity":1,"message":"3923","line":102,"column":1,"nodeType":"3831","endLine":102,"endColumn":1,"fix":"5387"},{"ruleId":"3922","severity":1,"message":"3925","line":106,"column":1,"nodeType":"3831","endLine":106,"endColumn":1,"fix":"5388"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"5389"},{"ruleId":"3815","severity":2,"message":"5044","line":26,"column":9,"nodeType":"3817","messageId":"3818","endLine":26,"endColumn":12,"fix":"5390"},{"ruleId":"3922","severity":1,"message":"3923","line":42,"column":1,"nodeType":"3831","endLine":42,"endColumn":1,"fix":"5391"},{"ruleId":"3815","severity":2,"message":"5044","line":71,"column":9,"nodeType":"3817","messageId":"3818","endLine":71,"endColumn":12,"fix":"5392"},{"ruleId":"4002","severity":2,"message":"5393","line":72,"column":44,"nodeType":"3817","messageId":"4004","endLine":72,"endColumn":58,"suggestions":"5394"},{"ruleId":"4002","severity":2,"message":"5393","line":76,"column":56,"nodeType":"3817","messageId":"4004","endLine":76,"endColumn":70,"suggestions":"5395"},{"ruleId":"3922","severity":1,"message":"3923","line":7,"column":1,"nodeType":"3831","endLine":7,"endColumn":1,"fix":"5396"},{"ruleId":"3922","severity":1,"message":"3923","line":16,"column":1,"nodeType":"3831","endLine":16,"endColumn":1,"fix":"5397"},{"ruleId":"3815","severity":2,"message":"5398","line":44,"column":45,"nodeType":"3817","messageId":"3818","endLine":44,"endColumn":51,"fix":"5399"},{"ruleId":"3815","severity":2,"message":"5398","line":47,"column":45,"nodeType":"3817","messageId":"3818","endLine":47,"endColumn":51,"fix":"5400"},{"ruleId":"3815","severity":2,"message":"5401","line":47,"column":59,"nodeType":"3817","messageId":"3818","endLine":47,"endColumn":65,"fix":"5402"},{"ruleId":"3815","severity":2,"message":"5398","line":50,"column":45,"nodeType":"3817","messageId":"3818","endLine":50,"endColumn":51,"fix":"5403"},{"ruleId":"3815","severity":2,"message":"5401","line":50,"column":59,"nodeType":"3817","messageId":"3818","endLine":50,"endColumn":65,"fix":"5404"},{"ruleId":"3815","severity":2,"message":"5405","line":50,"column":73,"nodeType":"3817","messageId":"3818","endLine":50,"endColumn":79,"fix":"5406"},{"ruleId":"3815","severity":2,"message":"5398","line":53,"column":45,"nodeType":"3817","messageId":"3818","endLine":53,"endColumn":51,"fix":"5407"},{"ruleId":"3815","severity":2,"message":"5401","line":53,"column":59,"nodeType":"3817","messageId":"3818","endLine":53,"endColumn":65,"fix":"5408"},{"ruleId":"3815","severity":2,"message":"5405","line":53,"column":73,"nodeType":"3817","messageId":"3818","endLine":53,"endColumn":79,"fix":"5409"},{"ruleId":"3815","severity":2,"message":"5410","line":54,"column":9,"nodeType":"3817","messageId":"3818","endLine":54,"endColumn":15,"fix":"5411"},{"ruleId":"3815","severity":2,"message":"5398","line":57,"column":45,"nodeType":"3817","messageId":"3818","endLine":57,"endColumn":51,"fix":"5412"},{"ruleId":"3815","severity":2,"message":"5401","line":57,"column":59,"nodeType":"3817","messageId":"3818","endLine":57,"endColumn":65,"fix":"5413"},{"ruleId":"3815","severity":2,"message":"5405","line":57,"column":73,"nodeType":"3817","messageId":"3818","endLine":57,"endColumn":79,"fix":"5414"},{"ruleId":"3815","severity":2,"message":"5410","line":58,"column":9,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":15,"fix":"5415"},{"ruleId":"3815","severity":2,"message":"5416","line":58,"column":23,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":29,"fix":"5417"},{"ruleId":"3815","severity":2,"message":"5398","line":67,"column":45,"nodeType":"3817","messageId":"3818","endLine":67,"endColumn":51,"fix":"5418"},{"ruleId":"3815","severity":2,"message":"5401","line":67,"column":59,"nodeType":"3817","messageId":"3818","endLine":67,"endColumn":65,"fix":"5419"},{"ruleId":"3815","severity":2,"message":"5405","line":67,"column":73,"nodeType":"3817","messageId":"3818","endLine":67,"endColumn":79,"fix":"5420"},{"ruleId":"3815","severity":2,"message":"5410","line":68,"column":9,"nodeType":"3817","messageId":"3818","endLine":68,"endColumn":15,"fix":"5421"},{"ruleId":"3815","severity":2,"message":"5416","line":68,"column":23,"nodeType":"3817","messageId":"3818","endLine":68,"endColumn":29,"fix":"5422"},{"ruleId":"3815","severity":2,"message":"5423","line":68,"column":37,"nodeType":"3817","messageId":"3818","endLine":68,"endColumn":43,"fix":"5424"},{"ruleId":"3815","severity":2,"message":"5398","line":78,"column":45,"nodeType":"3817","messageId":"3818","endLine":78,"endColumn":51,"fix":"5425"},{"ruleId":"3815","severity":2,"message":"5401","line":78,"column":59,"nodeType":"3817","messageId":"3818","endLine":78,"endColumn":65,"fix":"5426"},{"ruleId":"3815","severity":2,"message":"5405","line":78,"column":73,"nodeType":"3817","messageId":"3818","endLine":78,"endColumn":79,"fix":"5427"},{"ruleId":"3815","severity":2,"message":"5410","line":79,"column":9,"nodeType":"3817","messageId":"3818","endLine":79,"endColumn":15,"fix":"5428"},{"ruleId":"3815","severity":2,"message":"5416","line":79,"column":23,"nodeType":"3817","messageId":"3818","endLine":79,"endColumn":29,"fix":"5429"},{"ruleId":"3815","severity":2,"message":"5423","line":79,"column":37,"nodeType":"3817","messageId":"3818","endLine":79,"endColumn":43,"fix":"5430"},{"ruleId":"3815","severity":2,"message":"5431","line":79,"column":51,"nodeType":"3817","messageId":"3818","endLine":79,"endColumn":57,"fix":"5432"},{"ruleId":"3815","severity":2,"message":"5398","line":90,"column":45,"nodeType":"3817","messageId":"3818","endLine":90,"endColumn":51,"fix":"5433"},{"ruleId":"3815","severity":2,"message":"5401","line":90,"column":59,"nodeType":"3817","messageId":"3818","endLine":90,"endColumn":65,"fix":"5434"},{"ruleId":"3815","severity":2,"message":"5405","line":90,"column":73,"nodeType":"3817","messageId":"3818","endLine":90,"endColumn":79,"fix":"5435"},{"ruleId":"3815","severity":2,"message":"5410","line":91,"column":9,"nodeType":"3817","messageId":"3818","endLine":91,"endColumn":15,"fix":"5436"},{"ruleId":"3815","severity":2,"message":"5416","line":91,"column":23,"nodeType":"3817","messageId":"3818","endLine":91,"endColumn":29,"fix":"5437"},{"ruleId":"3815","severity":2,"message":"5423","line":91,"column":37,"nodeType":"3817","messageId":"3818","endLine":91,"endColumn":43,"fix":"5438"},{"ruleId":"3815","severity":2,"message":"5431","line":91,"column":51,"nodeType":"3817","messageId":"3818","endLine":91,"endColumn":57,"fix":"5439"},{"ruleId":"3815","severity":2,"message":"5440","line":91,"column":65,"nodeType":"3817","messageId":"3818","endLine":91,"endColumn":71,"fix":"5441"},{"ruleId":"3815","severity":2,"message":"5398","line":103,"column":45,"nodeType":"3817","messageId":"3818","endLine":103,"endColumn":51,"fix":"5442"},{"ruleId":"3815","severity":2,"message":"5401","line":103,"column":59,"nodeType":"3817","messageId":"3818","endLine":103,"endColumn":65,"fix":"5443"},{"ruleId":"3815","severity":2,"message":"5405","line":103,"column":73,"nodeType":"3817","messageId":"3818","endLine":103,"endColumn":79,"fix":"5444"},{"ruleId":"3815","severity":2,"message":"5410","line":104,"column":9,"nodeType":"3817","messageId":"3818","endLine":104,"endColumn":15,"fix":"5445"},{"ruleId":"3815","severity":2,"message":"5416","line":104,"column":23,"nodeType":"3817","messageId":"3818","endLine":104,"endColumn":29,"fix":"5446"},{"ruleId":"3815","severity":2,"message":"5423","line":104,"column":37,"nodeType":"3817","messageId":"3818","endLine":104,"endColumn":43,"fix":"5447"},{"ruleId":"3815","severity":2,"message":"5431","line":104,"column":51,"nodeType":"3817","messageId":"3818","endLine":104,"endColumn":57,"fix":"5448"},{"ruleId":"3815","severity":2,"message":"5440","line":104,"column":65,"nodeType":"3817","messageId":"3818","endLine":104,"endColumn":71,"fix":"5449"},{"ruleId":"3815","severity":2,"message":"5450","line":104,"column":79,"nodeType":"3817","messageId":"3818","endLine":104,"endColumn":85,"fix":"5451"},{"ruleId":"3838","severity":1,"message":"3839","line":118,"column":8,"nodeType":"3840","messageId":"3841","endLine":119,"endColumn":1,"fix":"5452"},{"ruleId":"3922","severity":1,"message":"3923","line":164,"column":1,"nodeType":"3831","endLine":164,"endColumn":1,"fix":"5453"},{"ruleId":"3922","severity":1,"message":"3923","line":204,"column":1,"nodeType":"3831","endLine":204,"endColumn":1,"fix":"5454"},{"ruleId":"3922","severity":1,"message":"3923","line":252,"column":1,"nodeType":"3831","endLine":252,"endColumn":1,"fix":"5455"},{"ruleId":"3815","severity":2,"message":"5398","line":305,"column":56,"nodeType":"3817","messageId":"3818","endLine":305,"endColumn":62,"fix":"5456"},{"ruleId":"3815","severity":2,"message":"5398","line":308,"column":56,"nodeType":"3817","messageId":"3818","endLine":308,"endColumn":62,"fix":"5457"},{"ruleId":"3815","severity":2,"message":"5401","line":308,"column":70,"nodeType":"3817","messageId":"3818","endLine":308,"endColumn":76,"fix":"5458"},{"ruleId":"3815","severity":2,"message":"5398","line":311,"column":56,"nodeType":"3817","messageId":"3818","endLine":311,"endColumn":62,"fix":"5459"},{"ruleId":"3815","severity":2,"message":"5401","line":311,"column":70,"nodeType":"3817","messageId":"3818","endLine":311,"endColumn":76,"fix":"5460"},{"ruleId":"3815","severity":2,"message":"5405","line":312,"column":9,"nodeType":"3817","messageId":"3818","endLine":312,"endColumn":15,"fix":"5461"},{"ruleId":"3815","severity":2,"message":"5398","line":319,"column":56,"nodeType":"3817","messageId":"3818","endLine":319,"endColumn":62,"fix":"5462"},{"ruleId":"3815","severity":2,"message":"5401","line":319,"column":70,"nodeType":"3817","messageId":"3818","endLine":319,"endColumn":76,"fix":"5463"},{"ruleId":"3815","severity":2,"message":"5405","line":319,"column":84,"nodeType":"3817","messageId":"3818","endLine":319,"endColumn":90,"fix":"5464"},{"ruleId":"3815","severity":2,"message":"5410","line":320,"column":9,"nodeType":"3817","messageId":"3818","endLine":320,"endColumn":15,"fix":"5465"},{"ruleId":"3815","severity":2,"message":"5398","line":328,"column":56,"nodeType":"3817","messageId":"3818","endLine":328,"endColumn":62,"fix":"5466"},{"ruleId":"3815","severity":2,"message":"5401","line":328,"column":70,"nodeType":"3817","messageId":"3818","endLine":328,"endColumn":76,"fix":"5467"},{"ruleId":"3815","severity":2,"message":"5405","line":328,"column":84,"nodeType":"3817","messageId":"3818","endLine":328,"endColumn":90,"fix":"5468"},{"ruleId":"3815","severity":2,"message":"5410","line":329,"column":9,"nodeType":"3817","messageId":"3818","endLine":329,"endColumn":15,"fix":"5469"},{"ruleId":"3815","severity":2,"message":"5416","line":329,"column":23,"nodeType":"3817","messageId":"3818","endLine":329,"endColumn":29,"fix":"5470"},{"ruleId":"3815","severity":2,"message":"5398","line":338,"column":56,"nodeType":"3817","messageId":"3818","endLine":338,"endColumn":62,"fix":"5471"},{"ruleId":"3815","severity":2,"message":"5401","line":338,"column":70,"nodeType":"3817","messageId":"3818","endLine":338,"endColumn":76,"fix":"5472"},{"ruleId":"3815","severity":2,"message":"5405","line":338,"column":84,"nodeType":"3817","messageId":"3818","endLine":338,"endColumn":90,"fix":"5473"},{"ruleId":"3815","severity":2,"message":"5410","line":339,"column":9,"nodeType":"3817","messageId":"3818","endLine":339,"endColumn":15,"fix":"5474"},{"ruleId":"3815","severity":2,"message":"5416","line":339,"column":23,"nodeType":"3817","messageId":"3818","endLine":339,"endColumn":29,"fix":"5475"},{"ruleId":"3815","severity":2,"message":"5423","line":339,"column":37,"nodeType":"3817","messageId":"3818","endLine":339,"endColumn":43,"fix":"5476"},{"ruleId":"3815","severity":2,"message":"5398","line":349,"column":56,"nodeType":"3817","messageId":"3818","endLine":349,"endColumn":62,"fix":"5477"},{"ruleId":"3815","severity":2,"message":"5401","line":349,"column":70,"nodeType":"3817","messageId":"3818","endLine":349,"endColumn":76,"fix":"5478"},{"ruleId":"3815","severity":2,"message":"5405","line":349,"column":84,"nodeType":"3817","messageId":"3818","endLine":349,"endColumn":90,"fix":"5479"},{"ruleId":"3815","severity":2,"message":"5410","line":350,"column":9,"nodeType":"3817","messageId":"3818","endLine":350,"endColumn":15,"fix":"5480"},{"ruleId":"3815","severity":2,"message":"5416","line":350,"column":23,"nodeType":"3817","messageId":"3818","endLine":350,"endColumn":29,"fix":"5481"},{"ruleId":"3815","severity":2,"message":"5423","line":350,"column":37,"nodeType":"3817","messageId":"3818","endLine":350,"endColumn":43,"fix":"5482"},{"ruleId":"3815","severity":2,"message":"5431","line":350,"column":51,"nodeType":"3817","messageId":"3818","endLine":350,"endColumn":57,"fix":"5483"},{"ruleId":"3815","severity":2,"message":"5398","line":361,"column":56,"nodeType":"3817","messageId":"3818","endLine":361,"endColumn":62,"fix":"5484"},{"ruleId":"3815","severity":2,"message":"5401","line":361,"column":70,"nodeType":"3817","messageId":"3818","endLine":361,"endColumn":76,"fix":"5485"},{"ruleId":"3815","severity":2,"message":"5405","line":361,"column":84,"nodeType":"3817","messageId":"3818","endLine":361,"endColumn":90,"fix":"5486"},{"ruleId":"3815","severity":2,"message":"5410","line":362,"column":9,"nodeType":"3817","messageId":"3818","endLine":362,"endColumn":15,"fix":"5487"},{"ruleId":"3815","severity":2,"message":"5416","line":362,"column":23,"nodeType":"3817","messageId":"3818","endLine":362,"endColumn":29,"fix":"5488"},{"ruleId":"3815","severity":2,"message":"5423","line":362,"column":37,"nodeType":"3817","messageId":"3818","endLine":362,"endColumn":43,"fix":"5489"},{"ruleId":"3815","severity":2,"message":"5431","line":362,"column":51,"nodeType":"3817","messageId":"3818","endLine":362,"endColumn":57,"fix":"5490"},{"ruleId":"3815","severity":2,"message":"5440","line":362,"column":65,"nodeType":"3817","messageId":"3818","endLine":362,"endColumn":71,"fix":"5491"},{"ruleId":"3815","severity":2,"message":"5398","line":374,"column":56,"nodeType":"3817","messageId":"3818","endLine":374,"endColumn":62,"fix":"5492"},{"ruleId":"3815","severity":2,"message":"5401","line":374,"column":70,"nodeType":"3817","messageId":"3818","endLine":374,"endColumn":76,"fix":"5493"},{"ruleId":"3815","severity":2,"message":"5405","line":374,"column":84,"nodeType":"3817","messageId":"3818","endLine":374,"endColumn":90,"fix":"5494"},{"ruleId":"3815","severity":2,"message":"5410","line":375,"column":9,"nodeType":"3817","messageId":"3818","endLine":375,"endColumn":15,"fix":"5495"},{"ruleId":"3815","severity":2,"message":"5416","line":375,"column":23,"nodeType":"3817","messageId":"3818","endLine":375,"endColumn":29,"fix":"5496"},{"ruleId":"3815","severity":2,"message":"5423","line":375,"column":37,"nodeType":"3817","messageId":"3818","endLine":375,"endColumn":43,"fix":"5497"},{"ruleId":"3815","severity":2,"message":"5431","line":375,"column":51,"nodeType":"3817","messageId":"3818","endLine":375,"endColumn":57,"fix":"5498"},{"ruleId":"3815","severity":2,"message":"5440","line":375,"column":65,"nodeType":"3817","messageId":"3818","endLine":375,"endColumn":71,"fix":"5499"},{"ruleId":"3815","severity":2,"message":"5450","line":375,"column":79,"nodeType":"3817","messageId":"3818","endLine":375,"endColumn":85,"fix":"5500"},{"ruleId":"3838","severity":1,"message":"3839","line":393,"column":8,"nodeType":"3840","messageId":"3841","endLine":394,"endColumn":1,"fix":"5501"},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"5502"},{"ruleId":"3815","severity":2,"message":"5398","line":36,"column":38,"nodeType":"3817","messageId":"3818","endLine":36,"endColumn":44,"fix":"5503"},{"ruleId":"3815","severity":2,"message":"5398","line":39,"column":38,"nodeType":"3817","messageId":"3818","endLine":39,"endColumn":44,"fix":"5504"},{"ruleId":"3815","severity":2,"message":"5401","line":39,"column":52,"nodeType":"3817","messageId":"3818","endLine":39,"endColumn":58,"fix":"5505"},{"ruleId":"3815","severity":2,"message":"5398","line":42,"column":38,"nodeType":"3817","messageId":"3818","endLine":42,"endColumn":44,"fix":"5506"},{"ruleId":"3815","severity":2,"message":"5401","line":42,"column":52,"nodeType":"3817","messageId":"3818","endLine":42,"endColumn":58,"fix":"5507"},{"ruleId":"3815","severity":2,"message":"5405","line":42,"column":66,"nodeType":"3817","messageId":"3818","endLine":42,"endColumn":72,"fix":"5508"},{"ruleId":"3815","severity":2,"message":"5398","line":45,"column":38,"nodeType":"3817","messageId":"3818","endLine":45,"endColumn":44,"fix":"5509"},{"ruleId":"3815","severity":2,"message":"5401","line":45,"column":52,"nodeType":"3817","messageId":"3818","endLine":45,"endColumn":58,"fix":"5510"},{"ruleId":"3815","severity":2,"message":"5405","line":45,"column":66,"nodeType":"3817","messageId":"3818","endLine":45,"endColumn":72,"fix":"5511"},{"ruleId":"3815","severity":2,"message":"5410","line":45,"column":80,"nodeType":"3817","messageId":"3818","endLine":45,"endColumn":86,"fix":"5512"},{"ruleId":"3815","severity":2,"message":"5398","line":48,"column":38,"nodeType":"3817","messageId":"3818","endLine":48,"endColumn":44,"fix":"5513"},{"ruleId":"3815","severity":2,"message":"5401","line":48,"column":52,"nodeType":"3817","messageId":"3818","endLine":48,"endColumn":58,"fix":"5514"},{"ruleId":"3815","severity":2,"message":"5405","line":48,"column":66,"nodeType":"3817","messageId":"3818","endLine":48,"endColumn":72,"fix":"5515"},{"ruleId":"3815","severity":2,"message":"5410","line":48,"column":80,"nodeType":"3817","messageId":"3818","endLine":48,"endColumn":86,"fix":"5516"},{"ruleId":"3815","severity":2,"message":"5416","line":49,"column":9,"nodeType":"3817","messageId":"3818","endLine":49,"endColumn":15,"fix":"5517"},{"ruleId":"3815","severity":2,"message":"5398","line":58,"column":38,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":44,"fix":"5518"},{"ruleId":"3815","severity":2,"message":"5401","line":58,"column":52,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":58,"fix":"5519"},{"ruleId":"3815","severity":2,"message":"5405","line":58,"column":66,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":72,"fix":"5520"},{"ruleId":"3815","severity":2,"message":"5410","line":58,"column":80,"nodeType":"3817","messageId":"3818","endLine":58,"endColumn":86,"fix":"5521"},{"ruleId":"3815","severity":2,"message":"5416","line":59,"column":9,"nodeType":"3817","messageId":"3818","endLine":59,"endColumn":15,"fix":"5522"},{"ruleId":"3815","severity":2,"message":"5423","line":59,"column":23,"nodeType":"3817","messageId":"3818","endLine":59,"endColumn":29,"fix":"5523"},{"ruleId":"3815","severity":2,"message":"5398","line":69,"column":38,"nodeType":"3817","messageId":"3818","endLine":69,"endColumn":44,"fix":"5524"},{"ruleId":"3815","severity":2,"message":"5401","line":69,"column":52,"nodeType":"3817","messageId":"3818","endLine":69,"endColumn":58,"fix":"5525"},{"ruleId":"3815","severity":2,"message":"5405","line":69,"column":66,"nodeType":"3817","messageId":"3818","endLine":69,"endColumn":72,"fix":"5526"},{"ruleId":"3815","severity":2,"message":"5410","line":69,"column":80,"nodeType":"3817","messageId":"3818","endLine":69,"endColumn":86,"fix":"5527"},{"ruleId":"3815","severity":2,"message":"5416","line":70,"column":9,"nodeType":"3817","messageId":"3818","endLine":70,"endColumn":15,"fix":"5528"},{"ruleId":"3815","severity":2,"message":"5423","line":70,"column":23,"nodeType":"3817","messageId":"3818","endLine":70,"endColumn":29,"fix":"5529"},{"ruleId":"3815","severity":2,"message":"5431","line":70,"column":37,"nodeType":"3817","messageId":"3818","endLine":70,"endColumn":43,"fix":"5530"},{"ruleId":"3815","severity":2,"message":"5398","line":81,"column":38,"nodeType":"3817","messageId":"3818","endLine":81,"endColumn":44,"fix":"5531"},{"ruleId":"3815","severity":2,"message":"5401","line":81,"column":52,"nodeType":"3817","messageId":"3818","endLine":81,"endColumn":58,"fix":"5532"},{"ruleId":"3815","severity":2,"message":"5405","line":81,"column":66,"nodeType":"3817","messageId":"3818","endLine":81,"endColumn":72,"fix":"5533"},{"ruleId":"3815","severity":2,"message":"5410","line":81,"column":80,"nodeType":"3817","messageId":"3818","endLine":81,"endColumn":86,"fix":"5534"},{"ruleId":"3815","severity":2,"message":"5416","line":82,"column":9,"nodeType":"3817","messageId":"3818","endLine":82,"endColumn":15,"fix":"5535"},{"ruleId":"3815","severity":2,"message":"5423","line":82,"column":23,"nodeType":"3817","messageId":"3818","endLine":82,"endColumn":29,"fix":"5536"},{"ruleId":"3815","severity":2,"message":"5431","line":82,"column":37,"nodeType":"3817","messageId":"3818","endLine":82,"endColumn":43,"fix":"5537"},{"ruleId":"3815","severity":2,"message":"5440","line":82,"column":51,"nodeType":"3817","messageId":"3818","endLine":82,"endColumn":57,"fix":"5538"},{"ruleId":"3815","severity":2,"message":"5398","line":94,"column":38,"nodeType":"3817","messageId":"3818","endLine":94,"endColumn":44,"fix":"5539"},{"ruleId":"3815","severity":2,"message":"5401","line":94,"column":52,"nodeType":"3817","messageId":"3818","endLine":94,"endColumn":58,"fix":"5540"},{"ruleId":"3815","severity":2,"message":"5405","line":94,"column":66,"nodeType":"3817","messageId":"3818","endLine":94,"endColumn":72,"fix":"5541"},{"ruleId":"3815","severity":2,"message":"5410","line":94,"column":80,"nodeType":"3817","messageId":"3818","endLine":94,"endColumn":86,"fix":"5542"},{"ruleId":"3815","severity":2,"message":"5416","line":95,"column":9,"nodeType":"3817","messageId":"3818","endLine":95,"endColumn":15,"fix":"5543"},{"ruleId":"3815","severity":2,"message":"5423","line":95,"column":23,"nodeType":"3817","messageId":"3818","endLine":95,"endColumn":29,"fix":"5544"},{"ruleId":"3815","severity":2,"message":"5431","line":95,"column":37,"nodeType":"3817","messageId":"3818","endLine":95,"endColumn":43,"fix":"5545"},{"ruleId":"3815","severity":2,"message":"5440","line":95,"column":51,"nodeType":"3817","messageId":"3818","endLine":95,"endColumn":57,"fix":"5546"},{"ruleId":"3815","severity":2,"message":"5450","line":95,"column":65,"nodeType":"3817","messageId":"3818","endLine":95,"endColumn":71,"fix":"5547"},{"ruleId":"3838","severity":1,"message":"3839","line":109,"column":8,"nodeType":"3840","messageId":"3841","endLine":110,"endColumn":1,"fix":"5548"},{"ruleId":"3922","severity":1,"message":"3923","line":128,"column":1,"nodeType":"3831","endLine":128,"endColumn":1,"fix":"5549"},{"ruleId":"3815","severity":2,"message":"5398","line":161,"column":49,"nodeType":"3817","messageId":"3818","endLine":161,"endColumn":55,"fix":"5550"},{"ruleId":"3815","severity":2,"message":"5398","line":164,"column":49,"nodeType":"3817","messageId":"3818","endLine":164,"endColumn":55,"fix":"5551"},{"ruleId":"3815","severity":2,"message":"5401","line":164,"column":63,"nodeType":"3817","messageId":"3818","endLine":164,"endColumn":69,"fix":"5552"},{"ruleId":"3815","severity":2,"message":"5398","line":167,"column":49,"nodeType":"3817","messageId":"3818","endLine":167,"endColumn":55,"fix":"5553"},{"ruleId":"3815","severity":2,"message":"5401","line":167,"column":63,"nodeType":"3817","messageId":"3818","endLine":167,"endColumn":69,"fix":"5554"},{"ruleId":"3815","severity":2,"message":"5405","line":167,"column":77,"nodeType":"3817","messageId":"3818","endLine":167,"endColumn":83,"fix":"5555"},{"ruleId":"3815","severity":2,"message":"5398","line":174,"column":49,"nodeType":"3817","messageId":"3818","endLine":174,"endColumn":55,"fix":"5556"},{"ruleId":"3815","severity":2,"message":"5401","line":174,"column":63,"nodeType":"3817","messageId":"3818","endLine":174,"endColumn":69,"fix":"5557"},{"ruleId":"3815","severity":2,"message":"5405","line":174,"column":77,"nodeType":"3817","messageId":"3818","endLine":174,"endColumn":83,"fix":"5558"},{"ruleId":"3815","severity":2,"message":"5410","line":175,"column":9,"nodeType":"3817","messageId":"3818","endLine":175,"endColumn":15,"fix":"5559"},{"ruleId":"3815","severity":2,"message":"5398","line":183,"column":49,"nodeType":"3817","messageId":"3818","endLine":183,"endColumn":55,"fix":"5560"},{"ruleId":"3815","severity":2,"message":"5401","line":183,"column":63,"nodeType":"3817","messageId":"3818","endLine":183,"endColumn":69,"fix":"5561"},{"ruleId":"3815","severity":2,"message":"5405","line":183,"column":77,"nodeType":"3817","messageId":"3818","endLine":183,"endColumn":83,"fix":"5562"},{"ruleId":"3815","severity":2,"message":"5410","line":184,"column":9,"nodeType":"3817","messageId":"3818","endLine":184,"endColumn":15,"fix":"5563"},{"ruleId":"3815","severity":2,"message":"5416","line":184,"column":23,"nodeType":"3817","messageId":"3818","endLine":184,"endColumn":29,"fix":"5564"},{"ruleId":"3815","severity":2,"message":"5398","line":193,"column":49,"nodeType":"3817","messageId":"3818","endLine":193,"endColumn":55,"fix":"5565"},{"ruleId":"3815","severity":2,"message":"5401","line":193,"column":63,"nodeType":"3817","messageId":"3818","endLine":193,"endColumn":69,"fix":"5566"},{"ruleId":"3815","severity":2,"message":"5405","line":193,"column":77,"nodeType":"3817","messageId":"3818","endLine":193,"endColumn":83,"fix":"5567"},{"ruleId":"3815","severity":2,"message":"5410","line":194,"column":9,"nodeType":"3817","messageId":"3818","endLine":194,"endColumn":15,"fix":"5568"},{"ruleId":"3815","severity":2,"message":"5416","line":194,"column":23,"nodeType":"3817","messageId":"3818","endLine":194,"endColumn":29,"fix":"5569"},{"ruleId":"3815","severity":2,"message":"5423","line":194,"column":37,"nodeType":"3817","messageId":"3818","endLine":194,"endColumn":43,"fix":"5570"},{"ruleId":"3815","severity":2,"message":"5398","line":204,"column":49,"nodeType":"3817","messageId":"3818","endLine":204,"endColumn":55,"fix":"5571"},{"ruleId":"3815","severity":2,"message":"5401","line":204,"column":63,"nodeType":"3817","messageId":"3818","endLine":204,"endColumn":69,"fix":"5572"},{"ruleId":"3815","severity":2,"message":"5405","line":204,"column":77,"nodeType":"3817","messageId":"3818","endLine":204,"endColumn":83,"fix":"5573"},{"ruleId":"3815","severity":2,"message":"5410","line":205,"column":9,"nodeType":"3817","messageId":"3818","endLine":205,"endColumn":15,"fix":"5574"},{"ruleId":"3815","severity":2,"message":"5416","line":205,"column":23,"nodeType":"3817","messageId":"3818","endLine":205,"endColumn":29,"fix":"5575"},{"ruleId":"3815","severity":2,"message":"5423","line":205,"column":37,"nodeType":"3817","messageId":"3818","endLine":205,"endColumn":43,"fix":"5576"},{"ruleId":"3815","severity":2,"message":"5431","line":205,"column":51,"nodeType":"3817","messageId":"3818","endLine":205,"endColumn":57,"fix":"5577"},{"ruleId":"3815","severity":2,"message":"5398","line":216,"column":49,"nodeType":"3817","messageId":"3818","endLine":216,"endColumn":55,"fix":"5578"},{"ruleId":"3815","severity":2,"message":"5401","line":216,"column":63,"nodeType":"3817","messageId":"3818","endLine":216,"endColumn":69,"fix":"5579"},{"ruleId":"3815","severity":2,"message":"5405","line":216,"column":77,"nodeType":"3817","messageId":"3818","endLine":216,"endColumn":83,"fix":"5580"},{"ruleId":"3815","severity":2,"message":"5410","line":217,"column":9,"nodeType":"3817","messageId":"3818","endLine":217,"endColumn":15,"fix":"5581"},{"ruleId":"3815","severity":2,"message":"5416","line":217,"column":23,"nodeType":"3817","messageId":"3818","endLine":217,"endColumn":29,"fix":"5582"},{"ruleId":"3815","severity":2,"message":"5423","line":217,"column":37,"nodeType":"3817","messageId":"3818","endLine":217,"endColumn":43,"fix":"5583"},{"ruleId":"3815","severity":2,"message":"5431","line":217,"column":51,"nodeType":"3817","messageId":"3818","endLine":217,"endColumn":57,"fix":"5584"},{"ruleId":"3815","severity":2,"message":"5440","line":217,"column":65,"nodeType":"3817","messageId":"3818","endLine":217,"endColumn":71,"fix":"5585"},{"ruleId":"3815","severity":2,"message":"5398","line":229,"column":49,"nodeType":"3817","messageId":"3818","endLine":229,"endColumn":55,"fix":"5586"},{"ruleId":"3815","severity":2,"message":"5401","line":229,"column":63,"nodeType":"3817","messageId":"3818","endLine":229,"endColumn":69,"fix":"5587"},{"ruleId":"3815","severity":2,"message":"5405","line":229,"column":77,"nodeType":"3817","messageId":"3818","endLine":229,"endColumn":83,"fix":"5588"},{"ruleId":"3815","severity":2,"message":"5410","line":230,"column":9,"nodeType":"3817","messageId":"3818","endLine":230,"endColumn":15,"fix":"5589"},{"ruleId":"3815","severity":2,"message":"5416","line":230,"column":23,"nodeType":"3817","messageId":"3818","endLine":230,"endColumn":29,"fix":"5590"},{"ruleId":"3815","severity":2,"message":"5423","line":230,"column":37,"nodeType":"3817","messageId":"3818","endLine":230,"endColumn":43,"fix":"5591"},{"ruleId":"3815","severity":2,"message":"5431","line":230,"column":51,"nodeType":"3817","messageId":"3818","endLine":230,"endColumn":57,"fix":"5592"},{"ruleId":"3815","severity":2,"message":"5440","line":230,"column":65,"nodeType":"3817","messageId":"3818","endLine":230,"endColumn":71,"fix":"5593"},{"ruleId":"3815","severity":2,"message":"5450","line":230,"column":79,"nodeType":"3817","messageId":"3818","endLine":230,"endColumn":85,"fix":"5594"},{"ruleId":"3838","severity":1,"message":"3839","line":248,"column":8,"nodeType":"3840","messageId":"3841","endLine":249,"endColumn":1,"fix":"5595"},{"ruleId":"3922","severity":1,"message":"3923","line":285,"column":1,"nodeType":"3831","endLine":285,"endColumn":1,"fix":"5596"},{"ruleId":"3815","severity":2,"message":"5398","line":320,"column":41,"nodeType":"3817","messageId":"3818","endLine":320,"endColumn":47,"fix":"5597"},{"ruleId":"3815","severity":2,"message":"5398","line":323,"column":41,"nodeType":"3817","messageId":"3818","endLine":323,"endColumn":47,"fix":"5598"},{"ruleId":"3815","severity":2,"message":"5401","line":323,"column":55,"nodeType":"3817","messageId":"3818","endLine":323,"endColumn":61,"fix":"5599"},{"ruleId":"3815","severity":2,"message":"5398","line":326,"column":41,"nodeType":"3817","messageId":"3818","endLine":326,"endColumn":47,"fix":"5600"},{"ruleId":"3815","severity":2,"message":"5401","line":326,"column":55,"nodeType":"3817","messageId":"3818","endLine":326,"endColumn":61,"fix":"5601"},{"ruleId":"3815","severity":2,"message":"5405","line":326,"column":69,"nodeType":"3817","messageId":"3818","endLine":326,"endColumn":75,"fix":"5602"},{"ruleId":"3815","severity":2,"message":"5398","line":329,"column":41,"nodeType":"3817","messageId":"3818","endLine":329,"endColumn":47,"fix":"5603"},{"ruleId":"3815","severity":2,"message":"5401","line":329,"column":55,"nodeType":"3817","messageId":"3818","endLine":329,"endColumn":61,"fix":"5604"},{"ruleId":"3815","severity":2,"message":"5405","line":329,"column":69,"nodeType":"3817","messageId":"3818","endLine":329,"endColumn":75,"fix":"5605"},{"ruleId":"3815","severity":2,"message":"5410","line":330,"column":9,"nodeType":"3817","messageId":"3818","endLine":330,"endColumn":15,"fix":"5606"},{"ruleId":"3815","severity":2,"message":"5398","line":333,"column":41,"nodeType":"3817","messageId":"3818","endLine":333,"endColumn":47,"fix":"5607"},{"ruleId":"3815","severity":2,"message":"5401","line":333,"column":55,"nodeType":"3817","messageId":"3818","endLine":333,"endColumn":61,"fix":"5608"},{"ruleId":"3815","severity":2,"message":"5405","line":333,"column":69,"nodeType":"3817","messageId":"3818","endLine":333,"endColumn":75,"fix":"5609"},{"ruleId":"3815","severity":2,"message":"5410","line":333,"column":83,"nodeType":"3817","messageId":"3818","endLine":333,"endColumn":89,"fix":"5610"},{"ruleId":"3815","severity":2,"message":"5416","line":334,"column":9,"nodeType":"3817","messageId":"3818","endLine":334,"endColumn":15,"fix":"5611"},{"ruleId":"3815","severity":2,"message":"5398","line":343,"column":41,"nodeType":"3817","messageId":"3818","endLine":343,"endColumn":47,"fix":"5612"},{"ruleId":"3815","severity":2,"message":"5401","line":343,"column":55,"nodeType":"3817","messageId":"3818","endLine":343,"endColumn":61,"fix":"5613"},{"ruleId":"3815","severity":2,"message":"5405","line":343,"column":69,"nodeType":"3817","messageId":"3818","endLine":343,"endColumn":75,"fix":"5614"},{"ruleId":"3815","severity":2,"message":"5410","line":343,"column":83,"nodeType":"3817","messageId":"3818","endLine":343,"endColumn":89,"fix":"5615"},{"ruleId":"3815","severity":2,"message":"5416","line":344,"column":9,"nodeType":"3817","messageId":"3818","endLine":344,"endColumn":15,"fix":"5616"},{"ruleId":"3815","severity":2,"message":"5423","line":344,"column":23,"nodeType":"3817","messageId":"3818","endLine":344,"endColumn":29,"fix":"5617"},{"ruleId":"3815","severity":2,"message":"5398","line":354,"column":41,"nodeType":"3817","messageId":"3818","endLine":354,"endColumn":47,"fix":"5618"},{"ruleId":"3815","severity":2,"message":"5401","line":354,"column":55,"nodeType":"3817","messageId":"3818","endLine":354,"endColumn":61,"fix":"5619"},{"ruleId":"3815","severity":2,"message":"5405","line":354,"column":69,"nodeType":"3817","messageId":"3818","endLine":354,"endColumn":75,"fix":"5620"},{"ruleId":"3815","severity":2,"message":"5410","line":354,"column":83,"nodeType":"3817","messageId":"3818","endLine":354,"endColumn":89,"fix":"5621"},{"ruleId":"3815","severity":2,"message":"5416","line":355,"column":9,"nodeType":"3817","messageId":"3818","endLine":355,"endColumn":15,"fix":"5622"},{"ruleId":"3815","severity":2,"message":"5423","line":355,"column":23,"nodeType":"3817","messageId":"3818","endLine":355,"endColumn":29,"fix":"5623"},{"ruleId":"3815","severity":2,"message":"5431","line":355,"column":37,"nodeType":"3817","messageId":"3818","endLine":355,"endColumn":43,"fix":"5624"},{"ruleId":"3815","severity":2,"message":"5398","line":367,"column":41,"nodeType":"3817","messageId":"3818","endLine":367,"endColumn":47,"fix":"5625"},{"ruleId":"3815","severity":2,"message":"5401","line":367,"column":55,"nodeType":"3817","messageId":"3818","endLine":367,"endColumn":61,"fix":"5626"},{"ruleId":"3815","severity":2,"message":"5405","line":367,"column":69,"nodeType":"3817","messageId":"3818","endLine":367,"endColumn":75,"fix":"5627"},{"ruleId":"3815","severity":2,"message":"5410","line":367,"column":83,"nodeType":"3817","messageId":"3818","endLine":367,"endColumn":89,"fix":"5628"},{"ruleId":"3815","severity":2,"message":"5416","line":368,"column":9,"nodeType":"3817","messageId":"3818","endLine":368,"endColumn":15,"fix":"5629"},{"ruleId":"3815","severity":2,"message":"5423","line":368,"column":23,"nodeType":"3817","messageId":"3818","endLine":368,"endColumn":29,"fix":"5630"},{"ruleId":"3815","severity":2,"message":"5431","line":368,"column":37,"nodeType":"3817","messageId":"3818","endLine":368,"endColumn":43,"fix":"5631"},{"ruleId":"3815","severity":2,"message":"5440","line":368,"column":51,"nodeType":"3817","messageId":"3818","endLine":368,"endColumn":57,"fix":"5632"},{"ruleId":"3815","severity":2,"message":"5398","line":384,"column":41,"nodeType":"3817","messageId":"3818","endLine":384,"endColumn":47,"fix":"5633"},{"ruleId":"3815","severity":2,"message":"5401","line":384,"column":55,"nodeType":"3817","messageId":"3818","endLine":384,"endColumn":61,"fix":"5634"},{"ruleId":"3815","severity":2,"message":"5405","line":384,"column":69,"nodeType":"3817","messageId":"3818","endLine":384,"endColumn":75,"fix":"5635"},{"ruleId":"3815","severity":2,"message":"5410","line":384,"column":83,"nodeType":"3817","messageId":"3818","endLine":384,"endColumn":89,"fix":"5636"},{"ruleId":"3815","severity":2,"message":"5416","line":385,"column":9,"nodeType":"3817","messageId":"3818","endLine":385,"endColumn":15,"fix":"5637"},{"ruleId":"3815","severity":2,"message":"5423","line":385,"column":23,"nodeType":"3817","messageId":"3818","endLine":385,"endColumn":29,"fix":"5638"},{"ruleId":"3815","severity":2,"message":"5431","line":385,"column":37,"nodeType":"3817","messageId":"3818","endLine":385,"endColumn":43,"fix":"5639"},{"ruleId":"3815","severity":2,"message":"5440","line":385,"column":51,"nodeType":"3817","messageId":"3818","endLine":385,"endColumn":57,"fix":"5640"},{"ruleId":"3815","severity":2,"message":"5450","line":385,"column":65,"nodeType":"3817","messageId":"3818","endLine":385,"endColumn":71,"fix":"5641"},{"ruleId":"3838","severity":1,"message":"3839","line":405,"column":8,"nodeType":"3840","messageId":"3841","endLine":406,"endColumn":1,"fix":"5642"},{"ruleId":"3922","severity":1,"message":"3923","line":425,"column":1,"nodeType":"3831","endLine":425,"endColumn":1,"fix":"5643"},{"ruleId":"3815","severity":2,"message":"5398","line":475,"column":46,"nodeType":"3817","messageId":"3818","endLine":475,"endColumn":52,"fix":"5644"},{"ruleId":"3815","severity":2,"message":"5398","line":478,"column":46,"nodeType":"3817","messageId":"3818","endLine":478,"endColumn":52,"fix":"5645"},{"ruleId":"3815","severity":2,"message":"5401","line":478,"column":60,"nodeType":"3817","messageId":"3818","endLine":478,"endColumn":66,"fix":"5646"},{"ruleId":"3815","severity":2,"message":"5398","line":481,"column":46,"nodeType":"3817","messageId":"3818","endLine":481,"endColumn":52,"fix":"5647"},{"ruleId":"3815","severity":2,"message":"5401","line":481,"column":60,"nodeType":"3817","messageId":"3818","endLine":481,"endColumn":66,"fix":"5648"},{"ruleId":"3815","severity":2,"message":"5405","line":481,"column":74,"nodeType":"3817","messageId":"3818","endLine":481,"endColumn":80,"fix":"5649"},{"ruleId":"3815","severity":2,"message":"5398","line":488,"column":46,"nodeType":"3817","messageId":"3818","endLine":488,"endColumn":52,"fix":"5650"},{"ruleId":"3815","severity":2,"message":"5401","line":488,"column":60,"nodeType":"3817","messageId":"3818","endLine":488,"endColumn":66,"fix":"5651"},{"ruleId":"3815","severity":2,"message":"5405","line":488,"column":74,"nodeType":"3817","messageId":"3818","endLine":488,"endColumn":80,"fix":"5652"},{"ruleId":"3815","severity":2,"message":"5410","line":489,"column":9,"nodeType":"3817","messageId":"3818","endLine":489,"endColumn":15,"fix":"5653"},{"ruleId":"3815","severity":2,"message":"5398","line":497,"column":46,"nodeType":"3817","messageId":"3818","endLine":497,"endColumn":52,"fix":"5654"},{"ruleId":"3815","severity":2,"message":"5401","line":497,"column":60,"nodeType":"3817","messageId":"3818","endLine":497,"endColumn":66,"fix":"5655"},{"ruleId":"3815","severity":2,"message":"5405","line":497,"column":74,"nodeType":"3817","messageId":"3818","endLine":497,"endColumn":80,"fix":"5656"},{"ruleId":"3815","severity":2,"message":"5410","line":498,"column":9,"nodeType":"3817","messageId":"3818","endLine":498,"endColumn":15,"fix":"5657"},{"ruleId":"3815","severity":2,"message":"5416","line":498,"column":23,"nodeType":"3817","messageId":"3818","endLine":498,"endColumn":29,"fix":"5658"},{"ruleId":"3815","severity":2,"message":"5398","line":507,"column":46,"nodeType":"3817","messageId":"3818","endLine":507,"endColumn":52,"fix":"5659"},{"ruleId":"3815","severity":2,"message":"5401","line":507,"column":60,"nodeType":"3817","messageId":"3818","endLine":507,"endColumn":66,"fix":"5660"},{"ruleId":"3815","severity":2,"message":"5405","line":507,"column":74,"nodeType":"3817","messageId":"3818","endLine":507,"endColumn":80,"fix":"5661"},{"ruleId":"3815","severity":2,"message":"5410","line":508,"column":9,"nodeType":"3817","messageId":"3818","endLine":508,"endColumn":15,"fix":"5662"},{"ruleId":"3815","severity":2,"message":"5416","line":508,"column":23,"nodeType":"3817","messageId":"3818","endLine":508,"endColumn":29,"fix":"5663"},{"ruleId":"3815","severity":2,"message":"5423","line":508,"column":37,"nodeType":"3817","messageId":"3818","endLine":508,"endColumn":43,"fix":"5664"},{"ruleId":"3815","severity":2,"message":"5398","line":518,"column":46,"nodeType":"3817","messageId":"3818","endLine":518,"endColumn":52,"fix":"5665"},{"ruleId":"3815","severity":2,"message":"5401","line":518,"column":60,"nodeType":"3817","messageId":"3818","endLine":518,"endColumn":66,"fix":"5666"},{"ruleId":"3815","severity":2,"message":"5405","line":518,"column":74,"nodeType":"3817","messageId":"3818","endLine":518,"endColumn":80,"fix":"5667"},{"ruleId":"3815","severity":2,"message":"5410","line":519,"column":9,"nodeType":"3817","messageId":"3818","endLine":519,"endColumn":15,"fix":"5668"},{"ruleId":"3815","severity":2,"message":"5416","line":519,"column":23,"nodeType":"3817","messageId":"3818","endLine":519,"endColumn":29,"fix":"5669"},{"ruleId":"3815","severity":2,"message":"5423","line":519,"column":37,"nodeType":"3817","messageId":"3818","endLine":519,"endColumn":43,"fix":"5670"},{"ruleId":"3815","severity":2,"message":"5431","line":519,"column":51,"nodeType":"3817","messageId":"3818","endLine":519,"endColumn":57,"fix":"5671"},{"ruleId":"3815","severity":2,"message":"5398","line":531,"column":46,"nodeType":"3817","messageId":"3818","endLine":531,"endColumn":52,"fix":"5672"},{"ruleId":"3815","severity":2,"message":"5401","line":531,"column":60,"nodeType":"3817","messageId":"3818","endLine":531,"endColumn":66,"fix":"5673"},{"ruleId":"3815","severity":2,"message":"5405","line":531,"column":74,"nodeType":"3817","messageId":"3818","endLine":531,"endColumn":80,"fix":"5674"},{"ruleId":"3815","severity":2,"message":"5410","line":532,"column":9,"nodeType":"3817","messageId":"3818","endLine":532,"endColumn":15,"fix":"5675"},{"ruleId":"3815","severity":2,"message":"5416","line":532,"column":23,"nodeType":"3817","messageId":"3818","endLine":532,"endColumn":29,"fix":"5676"},{"ruleId":"3815","severity":2,"message":"5423","line":532,"column":37,"nodeType":"3817","messageId":"3818","endLine":532,"endColumn":43,"fix":"5677"},{"ruleId":"3815","severity":2,"message":"5431","line":532,"column":51,"nodeType":"3817","messageId":"3818","endLine":532,"endColumn":57,"fix":"5678"},{"ruleId":"3815","severity":2,"message":"5440","line":532,"column":65,"nodeType":"3817","messageId":"3818","endLine":532,"endColumn":71,"fix":"5679"},{"ruleId":"3815","severity":2,"message":"5398","line":548,"column":46,"nodeType":"3817","messageId":"3818","endLine":548,"endColumn":52,"fix":"5680"},{"ruleId":"3815","severity":2,"message":"5401","line":548,"column":60,"nodeType":"3817","messageId":"3818","endLine":548,"endColumn":66,"fix":"5681"},{"ruleId":"3815","severity":2,"message":"5405","line":548,"column":74,"nodeType":"3817","messageId":"3818","endLine":548,"endColumn":80,"fix":"5682"},{"ruleId":"3815","severity":2,"message":"5410","line":549,"column":9,"nodeType":"3817","messageId":"3818","endLine":549,"endColumn":15,"fix":"5683"},{"ruleId":"3815","severity":2,"message":"5416","line":549,"column":23,"nodeType":"3817","messageId":"3818","endLine":549,"endColumn":29,"fix":"5684"},{"ruleId":"3815","severity":2,"message":"5423","line":549,"column":37,"nodeType":"3817","messageId":"3818","endLine":549,"endColumn":43,"fix":"5685"},{"ruleId":"3815","severity":2,"message":"5431","line":549,"column":51,"nodeType":"3817","messageId":"3818","endLine":549,"endColumn":57,"fix":"5686"},{"ruleId":"3815","severity":2,"message":"5440","line":549,"column":65,"nodeType":"3817","messageId":"3818","endLine":549,"endColumn":71,"fix":"5687"},{"ruleId":"3815","severity":2,"message":"5450","line":549,"column":79,"nodeType":"3817","messageId":"3818","endLine":549,"endColumn":85,"fix":"5688"},{"ruleId":"3838","severity":1,"message":"3839","line":569,"column":8,"nodeType":"3840","messageId":"3841","endLine":570,"endColumn":1,"fix":"5689"},{"ruleId":"3943","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":40,"fix":"5690"},{"ruleId":"3947","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":40,"fix":"5691"},{"ruleId":"3943","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":44,"fix":"5692"},{"ruleId":"3947","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":44,"fix":"5693"},{"ruleId":"3943","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":56,"fix":"5694"},{"ruleId":"3947","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":56,"fix":"5695"},{"ruleId":"3943","severity":1,"message":"3944","line":35,"column":5,"nodeType":"3889","messageId":"3945","endLine":35,"endColumn":50,"fix":"5696"},{"ruleId":"3947","severity":1,"message":"3944","line":35,"column":5,"nodeType":"3889","messageId":"3945","endLine":35,"endColumn":50,"fix":"5697"},{"ruleId":"3943","severity":1,"message":"3944","line":40,"column":5,"nodeType":"3889","messageId":"3945","endLine":40,"endColumn":65,"fix":"5698"},{"ruleId":"3947","severity":1,"message":"3944","line":40,"column":5,"nodeType":"3889","messageId":"3945","endLine":40,"endColumn":65,"fix":"5699"},{"ruleId":"3943","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":40,"fix":"5700"},{"ruleId":"3947","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":40,"fix":"5701"},{"ruleId":"3838","severity":1,"message":"3839","line":70,"column":5,"nodeType":"3840","messageId":"3841","endLine":71,"endColumn":1,"fix":"5702"},{"ruleId":"3943","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":44,"fix":"5703"},{"ruleId":"3947","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":44,"fix":"5704"},{"ruleId":"3838","severity":1,"message":"3839","line":83,"column":5,"nodeType":"3840","messageId":"3841","endLine":84,"endColumn":1,"fix":"5705"},{"ruleId":"3838","severity":1,"message":"3839","line":87,"column":5,"nodeType":"3840","messageId":"3841","endLine":88,"endColumn":1,"fix":"5706"},{"ruleId":"3943","severity":1,"message":"3944","line":92,"column":5,"nodeType":"3889","messageId":"3945","endLine":92,"endColumn":47,"fix":"5707"},{"ruleId":"3947","severity":1,"message":"3944","line":92,"column":5,"nodeType":"3889","messageId":"3945","endLine":92,"endColumn":47,"fix":"5708"},{"ruleId":"3838","severity":1,"message":"3839","line":97,"column":5,"nodeType":"3840","messageId":"3841","endLine":98,"endColumn":1,"fix":"5709"},{"ruleId":"3943","severity":1,"message":"3944","line":102,"column":5,"nodeType":"3889","messageId":"3945","endLine":102,"endColumn":53,"fix":"5710"},{"ruleId":"3947","severity":1,"message":"3944","line":102,"column":5,"nodeType":"3889","messageId":"3945","endLine":102,"endColumn":53,"fix":"5711"},{"ruleId":"3838","severity":1,"message":"3839","line":106,"column":5,"nodeType":"3840","messageId":"3841","endLine":107,"endColumn":1,"fix":"5712"},{"ruleId":"3838","severity":1,"message":"3839","line":110,"column":5,"nodeType":"3840","messageId":"3841","endLine":111,"endColumn":1,"fix":"5713"},{"ruleId":"3943","severity":1,"message":"3944","line":132,"column":5,"nodeType":"3889","messageId":"3945","endLine":132,"endColumn":32,"fix":"5714"},{"ruleId":"3947","severity":1,"message":"3944","line":132,"column":5,"nodeType":"3889","messageId":"3945","endLine":132,"endColumn":32,"fix":"5715"},{"ruleId":"3943","severity":1,"message":"3944","line":137,"column":5,"nodeType":"3889","messageId":"3945","endLine":137,"endColumn":39,"fix":"5716"},{"ruleId":"3947","severity":1,"message":"3944","line":137,"column":5,"nodeType":"3889","messageId":"3945","endLine":137,"endColumn":39,"fix":"5717"},{"ruleId":"3943","severity":1,"message":"3944","line":142,"column":5,"nodeType":"3889","messageId":"3945","endLine":142,"endColumn":51,"fix":"5718"},{"ruleId":"3947","severity":1,"message":"3944","line":142,"column":5,"nodeType":"3889","messageId":"3945","endLine":142,"endColumn":51,"fix":"5719"},{"ruleId":"3943","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":45,"fix":"5720"},{"ruleId":"3947","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":45,"fix":"5721"},{"ruleId":"3943","severity":1,"message":"3944","line":154,"column":5,"nodeType":"3889","messageId":"3945","endLine":154,"endColumn":60,"fix":"5722"},{"ruleId":"3947","severity":1,"message":"3944","line":154,"column":5,"nodeType":"3889","messageId":"3945","endLine":154,"endColumn":60,"fix":"5723"},{"ruleId":"3943","severity":1,"message":"3944","line":174,"column":5,"nodeType":"3961","messageId":"3945","endLine":174,"endColumn":42,"fix":"5724"},{"ruleId":"3947","severity":1,"message":"3944","line":174,"column":5,"nodeType":"3961","messageId":"3945","endLine":174,"endColumn":42,"fix":"5725"},{"ruleId":"3943","severity":1,"message":"3944","line":175,"column":5,"nodeType":"3889","messageId":"3945","endLine":175,"endColumn":35,"fix":"5726"},{"ruleId":"3947","severity":1,"message":"3944","line":175,"column":5,"nodeType":"3889","messageId":"3945","endLine":175,"endColumn":35,"fix":"5727"},{"ruleId":"3943","severity":1,"message":"3944","line":186,"column":5,"nodeType":"3889","messageId":"3945","endLine":186,"endColumn":32,"fix":"5728"},{"ruleId":"3947","severity":1,"message":"3944","line":186,"column":5,"nodeType":"3889","messageId":"3945","endLine":186,"endColumn":32,"fix":"5729"},{"ruleId":"3838","severity":1,"message":"3839","line":190,"column":5,"nodeType":"3840","messageId":"3841","endLine":191,"endColumn":1,"fix":"5730"},{"ruleId":"3943","severity":1,"message":"3944","line":202,"column":5,"nodeType":"3889","messageId":"3945","endLine":202,"endColumn":39,"fix":"5731"},{"ruleId":"3947","severity":1,"message":"3944","line":202,"column":5,"nodeType":"3889","messageId":"3945","endLine":202,"endColumn":39,"fix":"5732"},{"ruleId":"3838","severity":1,"message":"3839","line":206,"column":5,"nodeType":"3840","messageId":"3841","endLine":207,"endColumn":1,"fix":"5733"},{"ruleId":"3838","severity":1,"message":"3839","line":210,"column":5,"nodeType":"3840","messageId":"3841","endLine":211,"endColumn":1,"fix":"5734"},{"ruleId":"3943","severity":1,"message":"3944","line":220,"column":5,"nodeType":"3889","messageId":"3945","endLine":220,"endColumn":42,"fix":"5735"},{"ruleId":"3947","severity":1,"message":"3944","line":220,"column":5,"nodeType":"3889","messageId":"3945","endLine":220,"endColumn":42,"fix":"5736"},{"ruleId":"3838","severity":1,"message":"3839","line":225,"column":5,"nodeType":"3840","messageId":"3841","endLine":226,"endColumn":1,"fix":"5737"},{"ruleId":"3943","severity":1,"message":"3944","line":233,"column":5,"nodeType":"3889","messageId":"3945","endLine":233,"endColumn":48,"fix":"5738"},{"ruleId":"3947","severity":1,"message":"3944","line":233,"column":5,"nodeType":"3889","messageId":"3945","endLine":233,"endColumn":48,"fix":"5739"},{"ruleId":"3838","severity":1,"message":"3839","line":237,"column":5,"nodeType":"3840","messageId":"3841","endLine":238,"endColumn":1,"fix":"5740"},{"ruleId":"3838","severity":1,"message":"3839","line":241,"column":5,"nodeType":"3840","messageId":"3841","endLine":242,"endColumn":1,"fix":"5741"},{"ruleId":"3943","severity":1,"message":"3944","line":261,"column":5,"nodeType":"3889","messageId":"3945","endLine":261,"endColumn":45,"fix":"5742"},{"ruleId":"3947","severity":1,"message":"3944","line":261,"column":5,"nodeType":"3889","messageId":"3945","endLine":261,"endColumn":45,"fix":"5743"},{"ruleId":"3943","severity":1,"message":"3944","line":265,"column":5,"nodeType":"3889","messageId":"3945","endLine":265,"endColumn":53,"fix":"5744"},{"ruleId":"3947","severity":1,"message":"3944","line":265,"column":5,"nodeType":"3889","messageId":"3945","endLine":265,"endColumn":53,"fix":"5745"},{"ruleId":"3943","severity":1,"message":"3944","line":269,"column":5,"nodeType":"3889","messageId":"3945","endLine":269,"endColumn":38,"fix":"5746"},{"ruleId":"3947","severity":1,"message":"3944","line":269,"column":5,"nodeType":"3889","messageId":"3945","endLine":269,"endColumn":38,"fix":"5747"},{"ruleId":"4432","severity":2,"message":"5748","line":17,"column":28,"nodeType":"3817","messageId":"4435","endLine":17,"endColumn":37},{"ruleId":"3852","severity":2,"message":"4613","line":40,"column":37,"nodeType":"3817","messageId":"3854","endLine":40,"endColumn":46},{"ruleId":"3895","severity":2,"message":"3896","line":43,"column":7,"nodeType":"3817","messageId":"3897","endLine":43,"endColumn":13,"fix":"5749"},{"ruleId":"3895","severity":2,"message":"3896","line":44,"column":7,"nodeType":"3817","messageId":"3897","endLine":44,"endColumn":13,"fix":"5750"},{"ruleId":"3895","severity":2,"message":"3896","line":46,"column":7,"nodeType":"3817","messageId":"3897","endLine":46,"endColumn":13,"fix":"5751"},{"ruleId":"3895","severity":2,"message":"3896","line":49,"column":35,"nodeType":"3817","messageId":"3897","endLine":49,"endColumn":41,"fix":"5752"},{"ruleId":"3895","severity":2,"message":"3896","line":50,"column":9,"nodeType":"3817","messageId":"3897","endLine":50,"endColumn":15,"fix":"5753"},{"ruleId":"3895","severity":2,"message":"3896","line":51,"column":9,"nodeType":"3817","messageId":"3897","endLine":51,"endColumn":15,"fix":"5754"},{"ruleId":null,"message":"5755","line":58,"column":9,"severity":1,"nodeType":null,"fix":"5756"},{"ruleId":"4359","severity":2,"message":"5757","line":59,"column":9,"nodeType":"5758","messageId":"4361","endLine":59,"endColumn":45,"suggestions":"5759"},{"ruleId":"3895","severity":2,"message":"3896","line":61,"column":36,"nodeType":"3817","messageId":"3897","endLine":61,"endColumn":42,"fix":"5760"},{"ruleId":"3895","severity":2,"message":"3896","line":66,"column":28,"nodeType":"3817","messageId":"3897","endLine":66,"endColumn":34,"fix":"5761"},{"ruleId":"3895","severity":2,"message":"3896","line":67,"column":15,"nodeType":"3817","messageId":"3897","endLine":67,"endColumn":21,"fix":"5762"},{"ruleId":"3895","severity":2,"message":"3896","line":71,"column":11,"nodeType":"3817","messageId":"3897","endLine":71,"endColumn":17,"fix":"5763"},{"ruleId":"3852","severity":2,"message":"4613","line":80,"column":39,"nodeType":"3817","messageId":"3854","endLine":80,"endColumn":58},{"ruleId":"3922","severity":1,"message":"3923","line":93,"column":1,"nodeType":"3831","endLine":93,"endColumn":1,"fix":"5764"},{"ruleId":"3922","severity":1,"message":"3925","line":97,"column":1,"nodeType":"3831","endLine":97,"endColumn":1,"fix":"5765"},{"ruleId":"3838","severity":1,"message":"3839","line":14,"column":1,"nodeType":"3840","messageId":"3841","endLine":15,"endColumn":1,"fix":"5766"},{"ruleId":"3838","severity":1,"message":"3839","line":18,"column":1,"nodeType":"3840","messageId":"3841","endLine":19,"endColumn":1,"fix":"5767"},{"ruleId":"3922","severity":1,"message":"3923","line":52,"column":1,"nodeType":"3831","endLine":52,"endColumn":1,"fix":"5768"},{"ruleId":"3922","severity":1,"message":"3925","line":56,"column":1,"nodeType":"3831","endLine":56,"endColumn":1,"fix":"5769"},{"ruleId":"3916","severity":2,"message":"5770","line":28,"column":46,"nodeType":"5758","messageId":"5771","endLine":35,"endColumn":6,"suppressions":"5772"},{"ruleId":"3922","severity":1,"message":"3923","line":16,"column":1,"nodeType":"3831","endLine":16,"endColumn":1,"fix":"5773"},{"ruleId":"3922","severity":1,"message":"3925","line":20,"column":1,"nodeType":"3831","endLine":20,"endColumn":1,"fix":"5774"},{"ruleId":"3815","severity":2,"message":"5775","line":66,"column":13,"nodeType":"3817","messageId":"3818","endLine":66,"endColumn":16,"fix":"5776"},{"ruleId":"3815","severity":2,"message":"3908","line":68,"column":18,"nodeType":"3817","messageId":"3818","endLine":68,"endColumn":19,"fix":"5777"},{"ruleId":"3922","severity":1,"message":"3923","line":127,"column":1,"nodeType":"3831","endLine":127,"endColumn":1,"fix":"5778"},{"ruleId":"3922","severity":1,"message":"3925","line":130,"column":1,"nodeType":"3831","endLine":130,"endColumn":1,"fix":"5779"},{"ruleId":"3922","severity":1,"message":"3923","line":200,"column":1,"nodeType":"3831","endLine":200,"endColumn":1,"fix":"5780"},{"ruleId":"3922","severity":1,"message":"3925","line":203,"column":1,"nodeType":"3831","endLine":203,"endColumn":1,"fix":"5781"},{"ruleId":"5366","severity":2,"message":"5782","line":71,"column":20,"nodeType":"3861","messageId":"5783","endLine":71,"endColumn":37,"suppressions":"5784"},{"ruleId":"4359","severity":2,"message":"5785","line":184,"column":37,"nodeType":"5758","messageId":"4361","endLine":184,"endColumn":69,"suggestions":"5786","suppressions":"5787"},{"ruleId":"3922","severity":1,"message":"3923","line":14,"column":1,"nodeType":"3831","endLine":14,"endColumn":1,"fix":"5788"},{"ruleId":"3922","severity":1,"message":"3925","line":19,"column":1,"nodeType":"3831","endLine":19,"endColumn":1,"fix":"5789"},{"ruleId":"3922","severity":1,"message":"3923","line":44,"column":1,"nodeType":"3831","endLine":44,"endColumn":1,"fix":"5790"},{"ruleId":"3922","severity":1,"message":"3925","line":48,"column":1,"nodeType":"3831","endLine":48,"endColumn":1,"fix":"5791"},{"ruleId":"4002","severity":2,"message":"5792","line":73,"column":25,"nodeType":"3817","messageId":"4004","endLine":73,"endColumn":38,"suggestions":"5793"},{"ruleId":"3922","severity":1,"message":"3923","line":81,"column":1,"nodeType":"3831","endLine":81,"endColumn":1,"fix":"5794"},{"ruleId":"3922","severity":1,"message":"3925","line":86,"column":1,"nodeType":"3831","endLine":86,"endColumn":1,"fix":"5795"},{"ruleId":"3922","severity":1,"message":"3923","line":112,"column":1,"nodeType":"3831","endLine":112,"endColumn":1,"fix":"5796"},{"ruleId":"3922","severity":1,"message":"3925","line":116,"column":1,"nodeType":"3831","endLine":116,"endColumn":1,"fix":"5797"},{"ruleId":"4002","severity":2,"message":"5798","line":144,"column":25,"nodeType":"3817","messageId":"4004","endLine":144,"endColumn":38,"suggestions":"5799"},{"ruleId":"3922","severity":1,"message":"3923","line":152,"column":1,"nodeType":"3831","endLine":152,"endColumn":1,"fix":"5800"},{"ruleId":"3922","severity":1,"message":"3925","line":160,"column":1,"nodeType":"3831","endLine":160,"endColumn":1,"fix":"5801"},{"ruleId":"3815","severity":2,"message":"5802","line":185,"column":38,"nodeType":"3817","messageId":"3818","endLine":185,"endColumn":42,"fix":"5803"},{"ruleId":"3815","severity":2,"message":"5804","line":186,"column":9,"nodeType":"3817","messageId":"3818","endLine":186,"endColumn":13,"fix":"5805"},{"ruleId":"3922","severity":1,"message":"3923","line":204,"column":1,"nodeType":"3831","endLine":204,"endColumn":1,"fix":"5806"},{"ruleId":"3922","severity":1,"message":"3925","line":210,"column":1,"nodeType":"3831","endLine":210,"endColumn":1,"fix":"5807"},{"ruleId":"4002","severity":2,"message":"5808","line":245,"column":5,"nodeType":"3817","messageId":"4004","endLine":245,"endColumn":19,"suggestions":"5809"},{"ruleId":"3922","severity":1,"message":"3923","line":255,"column":1,"nodeType":"3831","endLine":255,"endColumn":1,"fix":"5810"},{"ruleId":"3922","severity":1,"message":"3925","line":259,"column":1,"nodeType":"3831","endLine":259,"endColumn":1,"fix":"5811"},{"ruleId":"3922","severity":1,"message":"3923","line":308,"column":1,"nodeType":"3831","endLine":308,"endColumn":1,"fix":"5812"},{"ruleId":"3922","severity":1,"message":"3925","line":312,"column":1,"nodeType":"3831","endLine":312,"endColumn":1,"fix":"5813"},{"ruleId":"3922","severity":1,"message":"3923","line":353,"column":1,"nodeType":"3831","endLine":353,"endColumn":1,"fix":"5814"},{"ruleId":"3922","severity":1,"message":"3925","line":357,"column":1,"nodeType":"3831","endLine":357,"endColumn":1,"fix":"5815"},{"ruleId":"3922","severity":1,"message":"3923","line":405,"column":1,"nodeType":"3831","endLine":405,"endColumn":1,"fix":"5816"},{"ruleId":"3922","severity":1,"message":"3925","line":409,"column":1,"nodeType":"3831","endLine":409,"endColumn":1,"fix":"5817"},{"ruleId":"3922","severity":1,"message":"3923","line":452,"column":1,"nodeType":"3831","endLine":452,"endColumn":1,"fix":"5818"},{"ruleId":"3922","severity":1,"message":"3925","line":458,"column":1,"nodeType":"3831","endLine":458,"endColumn":1,"fix":"5819"},{"ruleId":"3922","severity":1,"message":"3923","line":509,"column":1,"nodeType":"3831","endLine":509,"endColumn":1,"fix":"5820"},{"ruleId":"3922","severity":1,"message":"3925","line":515,"column":1,"nodeType":"3831","endLine":515,"endColumn":1,"fix":"5821"},{"ruleId":"4083","severity":1,"message":"4084","line":27,"column":10,"nodeType":"3850","messageId":"4085","endLine":27,"endColumn":27,"fix":"5822"},{"ruleId":"3838","severity":1,"message":"3839","line":35,"column":5,"nodeType":"3840","messageId":"3841","endLine":36,"endColumn":1,"fix":"5823"},{"ruleId":"3943","severity":1,"message":"3944","line":40,"column":5,"nodeType":"3889","messageId":"3945","endLine":40,"endColumn":62,"fix":"5824"},{"ruleId":"3947","severity":1,"message":"3944","line":40,"column":5,"nodeType":"3889","messageId":"3945","endLine":40,"endColumn":62,"fix":"5825"},{"ruleId":"4083","severity":1,"message":"4084","line":44,"column":10,"nodeType":"3850","messageId":"4085","endLine":44,"endColumn":22,"fix":"5826"},{"ruleId":"4083","severity":1,"message":"4084","line":52,"column":10,"nodeType":"3850","messageId":"4085","endLine":52,"endColumn":27,"fix":"5827"},{"ruleId":"3838","severity":1,"message":"3839","line":60,"column":5,"nodeType":"3840","messageId":"3841","endLine":61,"endColumn":1,"fix":"5828"},{"ruleId":"3943","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":63,"fix":"5829"},{"ruleId":"3947","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":63,"fix":"5830"},{"ruleId":"4083","severity":1,"message":"4084","line":69,"column":10,"nodeType":"3850","messageId":"4085","endLine":69,"endColumn":23,"fix":"5831"},{"ruleId":"4083","severity":1,"message":"4084","line":89,"column":10,"nodeType":"3850","messageId":"4085","endLine":89,"endColumn":28,"fix":"5832"},{"ruleId":"3838","severity":1,"message":"3839","line":105,"column":5,"nodeType":"3840","messageId":"3841","endLine":106,"endColumn":1,"fix":"5833"},{"ruleId":"3943","severity":1,"message":"3944","line":110,"column":5,"nodeType":"3889","messageId":"3945","endLine":110,"endColumn":62,"fix":"5834"},{"ruleId":"3947","severity":1,"message":"3944","line":110,"column":5,"nodeType":"3889","messageId":"3945","endLine":110,"endColumn":62,"fix":"5835"},{"ruleId":"3848","severity":2,"message":"4098","line":4,"column":8,"nodeType":"3850","messageId":"3851","endLine":4,"endColumn":19},{"ruleId":"3922","severity":1,"message":"3923","line":22,"column":1,"nodeType":"3831","endLine":22,"endColumn":1,"fix":"5836"},{"ruleId":"3922","severity":1,"message":"3925","line":27,"column":1,"nodeType":"3831","endLine":27,"endColumn":1,"fix":"5837"},{"ruleId":"3838","severity":1,"message":"3839","line":57,"column":35,"nodeType":"3840","messageId":"3841","endLine":58,"endColumn":1,"fix":"5838"},{"ruleId":"3922","severity":1,"message":"3923","line":68,"column":1,"nodeType":"3831","endLine":68,"endColumn":1,"fix":"5839"},{"ruleId":"3922","severity":1,"message":"3925","line":72,"column":1,"nodeType":"3831","endLine":72,"endColumn":1,"fix":"5840"},{"ruleId":"3838","severity":1,"message":"3839","line":101,"column":35,"nodeType":"3840","messageId":"3841","endLine":102,"endColumn":1,"fix":"5841"},{"ruleId":"3922","severity":1,"message":"3923","line":108,"column":1,"nodeType":"3831","endLine":108,"endColumn":1,"fix":"5842"},{"ruleId":"3922","severity":1,"message":"3923","line":126,"column":1,"nodeType":"3831","endLine":126,"endColumn":1,"fix":"5843"},{"ruleId":"3922","severity":1,"message":"3925","line":130,"column":1,"nodeType":"3831","endLine":130,"endColumn":1,"fix":"5844"},{"ruleId":"3922","severity":1,"message":"3923","line":181,"column":1,"nodeType":"3831","endLine":181,"endColumn":1,"fix":"5845"},{"ruleId":"3922","severity":1,"message":"3925","line":185,"column":1,"nodeType":"3831","endLine":185,"endColumn":1,"fix":"5846"},{"ruleId":"3922","severity":1,"message":"3923","line":226,"column":1,"nodeType":"3831","endLine":226,"endColumn":1,"fix":"5847"},{"ruleId":"3922","severity":1,"message":"3925","line":230,"column":1,"nodeType":"3831","endLine":230,"endColumn":1,"fix":"5848"},{"ruleId":"3922","severity":1,"message":"3923","line":272,"column":1,"nodeType":"3831","endLine":272,"endColumn":1,"fix":"5849"},{"ruleId":"3922","severity":1,"message":"3925","line":276,"column":1,"nodeType":"3831","endLine":276,"endColumn":1,"fix":"5850"},{"ruleId":"3922","severity":1,"message":"3923","line":316,"column":1,"nodeType":"3831","endLine":316,"endColumn":1,"fix":"5851"},{"ruleId":"3922","severity":1,"message":"3925","line":320,"column":1,"nodeType":"3831","endLine":320,"endColumn":1,"fix":"5852"},{"ruleId":"3922","severity":1,"message":"3923","line":365,"column":1,"nodeType":"3831","endLine":365,"endColumn":1,"fix":"5853"},{"ruleId":"3922","severity":1,"message":"3925","line":369,"column":1,"nodeType":"3831","endLine":369,"endColumn":1,"fix":"5854"},{"ruleId":"3922","severity":1,"message":"3923","line":410,"column":1,"nodeType":"3831","endLine":410,"endColumn":1,"fix":"5855"},{"ruleId":"3922","severity":1,"message":"3925","line":414,"column":1,"nodeType":"3831","endLine":414,"endColumn":1,"fix":"5856"},{"ruleId":"3922","severity":1,"message":"3923","line":455,"column":1,"nodeType":"3831","endLine":455,"endColumn":1,"fix":"5857"},{"ruleId":"3922","severity":1,"message":"3925","line":460,"column":1,"nodeType":"3831","endLine":460,"endColumn":1,"fix":"5858"},{"ruleId":"3838","severity":1,"message":"3839","line":488,"column":35,"nodeType":"3840","messageId":"3841","endLine":489,"endColumn":1,"fix":"5859"},{"ruleId":"3922","severity":1,"message":"3923","line":499,"column":1,"nodeType":"3831","endLine":499,"endColumn":1,"fix":"5860"},{"ruleId":"3922","severity":1,"message":"3925","line":503,"column":1,"nodeType":"3831","endLine":503,"endColumn":1,"fix":"5861"},{"ruleId":"3838","severity":1,"message":"3839","line":536,"column":35,"nodeType":"3840","messageId":"3841","endLine":537,"endColumn":1,"fix":"5862"},{"ruleId":"3922","severity":1,"message":"3923","line":547,"column":1,"nodeType":"3831","endLine":547,"endColumn":1,"fix":"5863"},{"ruleId":"3922","severity":1,"message":"3925","line":551,"column":1,"nodeType":"3831","endLine":551,"endColumn":1,"fix":"5864"},{"ruleId":"3838","severity":1,"message":"3839","line":581,"column":35,"nodeType":"3840","messageId":"3841","endLine":582,"endColumn":1,"fix":"5865"},{"ruleId":"3922","severity":1,"message":"3923","line":593,"column":1,"nodeType":"3831","endLine":593,"endColumn":1,"fix":"5866"},{"ruleId":"3922","severity":1,"message":"3925","line":598,"column":1,"nodeType":"3831","endLine":598,"endColumn":1,"fix":"5867"},{"ruleId":"3838","severity":1,"message":"3839","line":628,"column":35,"nodeType":"3840","messageId":"3841","endLine":629,"endColumn":1,"fix":"5868"},{"ruleId":"5199","severity":2,"message":"5200","line":629,"column":20,"nodeType":"5201","messageId":"5202","endLine":629,"endColumn":27},{"ruleId":"3922","severity":1,"message":"3923","line":643,"column":1,"nodeType":"3831","endLine":643,"endColumn":1,"fix":"5869"},{"ruleId":"3922","severity":1,"message":"3925","line":648,"column":1,"nodeType":"3831","endLine":648,"endColumn":1,"fix":"5870"},{"ruleId":"3838","severity":1,"message":"3839","line":679,"column":35,"nodeType":"3840","messageId":"3841","endLine":680,"endColumn":1,"fix":"5871"},{"ruleId":"5199","severity":2,"message":"5872","line":682,"column":3,"nodeType":"5873","messageId":"5874","endLine":682,"endColumn":19},{"ruleId":"5199","severity":2,"message":"5875","line":682,"column":22,"nodeType":"5873","messageId":"5874","endLine":682,"endColumn":38},{"ruleId":"3922","severity":1,"message":"3923","line":693,"column":1,"nodeType":"3831","endLine":693,"endColumn":1,"fix":"5876"},{"ruleId":"3922","severity":1,"message":"3925","line":698,"column":1,"nodeType":"3831","endLine":698,"endColumn":1,"fix":"5877"},{"ruleId":"3838","severity":1,"message":"3839","line":730,"column":35,"nodeType":"3840","messageId":"3841","endLine":731,"endColumn":1,"fix":"5878"},{"ruleId":"5199","severity":2,"message":"5872","line":733,"column":3,"nodeType":"5873","messageId":"5874","endLine":733,"endColumn":19},{"ruleId":"5199","severity":2,"message":"5875","line":733,"column":22,"nodeType":"5873","messageId":"5874","endLine":733,"endColumn":38},{"ruleId":"3922","severity":1,"message":"3923","line":745,"column":1,"nodeType":"3831","endLine":745,"endColumn":1,"fix":"5879"},{"ruleId":"3922","severity":1,"message":"3925","line":750,"column":1,"nodeType":"3831","endLine":750,"endColumn":1,"fix":"5880"},{"ruleId":"3838","severity":1,"message":"3839","line":785,"column":35,"nodeType":"3840","messageId":"3841","endLine":786,"endColumn":1,"fix":"5881"},{"ruleId":"3922","severity":1,"message":"3923","line":797,"column":1,"nodeType":"3831","endLine":797,"endColumn":1,"fix":"5882"},{"ruleId":"3922","severity":1,"message":"3925","line":801,"column":1,"nodeType":"3831","endLine":801,"endColumn":1,"fix":"5883"},{"ruleId":"3838","severity":1,"message":"3839","line":831,"column":35,"nodeType":"3840","messageId":"3841","endLine":832,"endColumn":1,"fix":"5884"},{"ruleId":"3922","severity":1,"message":"3923","line":841,"column":1,"nodeType":"3831","endLine":841,"endColumn":1,"fix":"5885"},{"ruleId":"3922","severity":1,"message":"3925","line":845,"column":1,"nodeType":"3831","endLine":845,"endColumn":1,"fix":"5886"},{"ruleId":"3922","severity":1,"message":"3923","line":887,"column":1,"nodeType":"3831","endLine":887,"endColumn":1,"fix":"5887"},{"ruleId":"3922","severity":1,"message":"3925","line":891,"column":1,"nodeType":"3831","endLine":891,"endColumn":1,"fix":"5888"},{"ruleId":"3922","severity":1,"message":"3923","line":934,"column":1,"nodeType":"3831","endLine":934,"endColumn":1,"fix":"5889"},{"ruleId":"3922","severity":1,"message":"3925","line":938,"column":1,"nodeType":"3831","endLine":938,"endColumn":1,"fix":"5890"},{"ruleId":"3922","severity":1,"message":"3923","line":980,"column":1,"nodeType":"3831","endLine":980,"endColumn":1,"fix":"5891"},{"ruleId":"3922","severity":1,"message":"3925","line":983,"column":1,"nodeType":"3831","endLine":983,"endColumn":1,"fix":"5892"},{"ruleId":"4002","severity":2,"message":"5893","line":391,"column":45,"nodeType":"3817","messageId":"4004","endLine":391,"endColumn":54,"suggestions":"5894"},{"ruleId":"3943","severity":1,"message":"3944","line":392,"column":5,"nodeType":"3889","messageId":"3945","endLine":392,"endColumn":49,"fix":"5895"},{"ruleId":"3947","severity":1,"message":"3944","line":392,"column":5,"nodeType":"3889","messageId":"3945","endLine":392,"endColumn":49,"fix":"5896"},{"ruleId":"3922","severity":1,"message":"3923","line":3,"column":1,"nodeType":"3831","endLine":3,"endColumn":1,"fix":"5897"},{"ruleId":"3922","severity":1,"message":"3925","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"5898"},{"ruleId":"3922","severity":1,"message":"3923","line":3,"column":1,"nodeType":"3831","endLine":3,"endColumn":1,"fix":"5899"},{"ruleId":"3922","severity":1,"message":"3923","line":19,"column":1,"nodeType":"3831","endLine":19,"endColumn":1,"fix":"5900"},{"ruleId":"3922","severity":1,"message":"3923","line":35,"column":1,"nodeType":"3831","endLine":35,"endColumn":1,"fix":"5901"},{"ruleId":"3922","severity":1,"message":"3923","line":51,"column":1,"nodeType":"3831","endLine":51,"endColumn":1,"fix":"5902"},{"ruleId":"3922","severity":1,"message":"3923","line":67,"column":1,"nodeType":"3831","endLine":67,"endColumn":1,"fix":"5903"},{"ruleId":"3922","severity":1,"message":"3923","line":85,"column":1,"nodeType":"3831","endLine":85,"endColumn":1,"fix":"5904"},{"ruleId":"3922","severity":1,"message":"3923","line":103,"column":1,"nodeType":"3831","endLine":103,"endColumn":1,"fix":"5905"},{"ruleId":"3922","severity":1,"message":"3923","line":123,"column":1,"nodeType":"3831","endLine":123,"endColumn":1,"fix":"5906"},{"ruleId":"3922","severity":1,"message":"3923","line":141,"column":1,"nodeType":"3831","endLine":141,"endColumn":1,"fix":"5907"},{"ruleId":"3922","severity":1,"message":"3923","line":159,"column":1,"nodeType":"3831","endLine":159,"endColumn":1,"fix":"5908"},{"ruleId":"3922","severity":1,"message":"3923","line":177,"column":1,"nodeType":"3831","endLine":177,"endColumn":1,"fix":"5909"},{"ruleId":"3922","severity":1,"message":"3923","line":193,"column":1,"nodeType":"3831","endLine":193,"endColumn":1,"fix":"5910"},{"ruleId":"3922","severity":1,"message":"3923","line":211,"column":1,"nodeType":"3831","endLine":211,"endColumn":1,"fix":"5911"},{"ruleId":"3922","severity":1,"message":"3925","line":214,"column":1,"nodeType":"3831","endLine":214,"endColumn":1,"fix":"5912"},{"ruleId":"3815","severity":2,"message":"5913","line":1,"column":35,"nodeType":"3817","messageId":"3818","endLine":1,"endColumn":46,"fix":"5914"},{"ruleId":"3815","severity":2,"message":"5913","line":28,"column":44,"nodeType":"3817","messageId":"3818","endLine":28,"endColumn":55,"fix":"5915"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"5916"},{"ruleId":"3922","severity":1,"message":"3925","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"5917"},{"ruleId":"3815","severity":2,"message":"5913","line":1,"column":18,"nodeType":"3817","messageId":"3818","endLine":1,"endColumn":29,"fix":"5918"},{"ruleId":"3922","severity":1,"message":"3923","line":3,"column":1,"nodeType":"3831","endLine":3,"endColumn":1,"fix":"5919"},{"ruleId":"3922","severity":1,"message":"3923","line":29,"column":1,"nodeType":"3831","endLine":29,"endColumn":1,"fix":"5920"},{"ruleId":"3922","severity":1,"message":"3923","line":58,"column":1,"nodeType":"3831","endLine":58,"endColumn":1,"fix":"5921"},{"ruleId":"3922","severity":1,"message":"3923","line":88,"column":1,"nodeType":"3831","endLine":88,"endColumn":1,"fix":"5922"},{"ruleId":"3922","severity":1,"message":"3923","line":128,"column":1,"nodeType":"3831","endLine":128,"endColumn":1,"fix":"5923"},{"ruleId":"3922","severity":1,"message":"3923","line":158,"column":1,"nodeType":"3831","endLine":158,"endColumn":1,"fix":"5924"},{"ruleId":"3922","severity":1,"message":"3923","line":186,"column":1,"nodeType":"3831","endLine":186,"endColumn":1,"fix":"5925"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"5926"},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"5927"},{"ruleId":"3922","severity":1,"message":"3925","line":12,"column":1,"nodeType":"3831","endLine":12,"endColumn":1,"fix":"5928"},{"ruleId":"3922","severity":1,"message":"3923","line":7,"column":1,"nodeType":"3831","endLine":7,"endColumn":1,"fix":"5929"},{"ruleId":"3922","severity":1,"message":"3925","line":12,"column":1,"nodeType":"3831","endLine":12,"endColumn":1,"fix":"5930"},{"ruleId":"3943","severity":1,"message":"3944","line":12,"column":5,"nodeType":"3889","messageId":"3945","endLine":12,"endColumn":29,"fix":"5931"},{"ruleId":"3947","severity":1,"message":"3944","line":12,"column":5,"nodeType":"3889","messageId":"3945","endLine":12,"endColumn":29,"fix":"5932"},{"ruleId":"3943","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":29,"fix":"5933"},{"ruleId":"3947","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":29,"fix":"5934"},{"ruleId":"3933","severity":1,"message":"3934","line":24,"column":32,"nodeType":"3817","messageId":"3935","endLine":24,"endColumn":36,"fix":"5935"},{"ruleId":"3937","severity":2,"message":"3938","line":25,"column":12,"nodeType":"4676","messageId":"3939","endLine":25,"endColumn":35},{"ruleId":"3933","severity":1,"message":"3940","line":25,"column":37,"nodeType":"3817","messageId":"3941","endLine":25,"endColumn":41,"fix":"5936"},{"ruleId":"3943","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":29,"fix":"5937"},{"ruleId":"3947","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":29,"fix":"5938"},{"ruleId":"3943","severity":1,"message":"3944","line":52,"column":5,"nodeType":"3889","messageId":"3945","endLine":52,"endColumn":41,"fix":"5939"},{"ruleId":"3947","severity":1,"message":"3944","line":52,"column":5,"nodeType":"3889","messageId":"3945","endLine":52,"endColumn":41,"fix":"5940"},{"ruleId":"3943","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":30,"fix":"5941"},{"ruleId":"3947","severity":1,"message":"3944","line":66,"column":5,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":30,"fix":"5942"},{"ruleId":"3943","severity":1,"message":"3944","line":69,"column":5,"nodeType":"3889","messageId":"3945","endLine":69,"endColumn":29,"fix":"5943"},{"ruleId":"3947","severity":1,"message":"3944","line":69,"column":5,"nodeType":"3889","messageId":"3945","endLine":69,"endColumn":29,"fix":"5944"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"5945"},{"ruleId":"3922","severity":1,"message":"3925","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"5946"},{"ruleId":"3838","severity":1,"message":"3839","line":35,"column":35,"nodeType":"3840","messageId":"3841","endLine":36,"endColumn":1,"fix":"5947"},{"ruleId":"3843","severity":2,"message":"5948","line":36,"column":24,"nodeType":"3817","messageId":"3845","endLine":36,"endColumn":28},{"ruleId":"4083","severity":1,"message":"4084","line":14,"column":10,"nodeType":"3850","messageId":"4085","endLine":14,"endColumn":21,"fix":"5949"},{"ruleId":"3943","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":43,"fix":"5950"},{"ruleId":"3947","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":43,"fix":"5951"},{"ruleId":"3943","severity":1,"message":"3944","line":26,"column":5,"nodeType":"3889","messageId":"3945","endLine":26,"endColumn":44,"fix":"5952"},{"ruleId":"3947","severity":1,"message":"3944","line":26,"column":5,"nodeType":"3889","messageId":"3945","endLine":26,"endColumn":44,"fix":"5953"},{"ruleId":"3943","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":42,"fix":"5954"},{"ruleId":"3947","severity":1,"message":"3944","line":65,"column":5,"nodeType":"3889","messageId":"3945","endLine":65,"endColumn":42,"fix":"5955"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"5956"},{"ruleId":"3922","severity":1,"message":"3925","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"5957"},{"ruleId":"3922","severity":1,"message":"3923","line":37,"column":1,"nodeType":"3831","endLine":37,"endColumn":1,"fix":"5958"},{"ruleId":"3922","severity":1,"message":"3923","line":69,"column":1,"nodeType":"3831","endLine":69,"endColumn":1,"fix":"5959"},{"ruleId":"3922","severity":1,"message":"3923","line":123,"column":1,"nodeType":"3831","endLine":123,"endColumn":1,"fix":"5960"},{"ruleId":"3922","severity":1,"message":"3923","line":180,"column":1,"nodeType":"3831","endLine":180,"endColumn":1,"fix":"5961"},{"ruleId":"3922","severity":1,"message":"3925","line":183,"column":1,"nodeType":"3831","endLine":183,"endColumn":1,"fix":"5962"},{"ruleId":"3922","severity":1,"message":"3923","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"5963"},{"ruleId":"3922","severity":1,"message":"3925","line":10,"column":1,"nodeType":"3831","endLine":10,"endColumn":1,"fix":"5964"},{"ruleId":"4083","severity":1,"message":"4084","line":14,"column":10,"nodeType":"3850","messageId":"4085","endLine":14,"endColumn":16,"fix":"5965"},{"ruleId":"3943","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":62,"fix":"5966"},{"ruleId":"3947","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":62,"fix":"5967"},{"ruleId":"3937","severity":2,"message":"3938","line":26,"column":20,"nodeType":"4676","messageId":"3939","endLine":26,"endColumn":34},{"ruleId":"3943","severity":1,"message":"3944","line":27,"column":5,"nodeType":"3889","messageId":"3945","endLine":27,"endColumn":36,"fix":"5968"},{"ruleId":"3947","severity":1,"message":"3944","line":27,"column":5,"nodeType":"3889","messageId":"3945","endLine":27,"endColumn":36,"fix":"5969"},{"ruleId":"3933","severity":1,"message":"3940","line":27,"column":20,"nodeType":"3817","messageId":"3941","endLine":27,"endColumn":24,"fix":"5970"},{"ruleId":"3943","severity":1,"message":"3944","line":38,"column":7,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":62,"fix":"5971"},{"ruleId":"3947","severity":1,"message":"3944","line":38,"column":7,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":62,"fix":"5972"},{"ruleId":"3943","severity":1,"message":"3944","line":46,"column":5,"nodeType":"3889","messageId":"3945","endLine":46,"endColumn":51,"fix":"5973"},{"ruleId":"3947","severity":1,"message":"3944","line":46,"column":5,"nodeType":"3889","messageId":"3945","endLine":46,"endColumn":51,"fix":"5974"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":30,"column":1,"nodeType":"3831","endLine":30,"endColumn":1,"fix":"5975"},{"ruleId":"3910","severity":2,"message":"5976","line":46,"column":28,"nodeType":"3817","messageId":"3912","endLine":46,"endColumn":36},{"ruleId":"3910","severity":2,"message":"5976","line":60,"column":29,"nodeType":"3817","messageId":"3912","endLine":60,"endColumn":34},{"ruleId":"3943","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":33,"fix":"5977"},{"ruleId":"3947","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":33,"fix":"5978"},{"ruleId":"5979","severity":1,"message":"5980","line":22,"column":20,"nodeType":"3817","messageId":"5981","endLine":22,"endColumn":30,"fix":"5982"},{"ruleId":"3943","severity":1,"message":"3944","line":30,"column":5,"nodeType":"3889","messageId":"3945","endLine":30,"endColumn":32,"fix":"5983"},{"ruleId":"3947","severity":1,"message":"3944","line":30,"column":5,"nodeType":"3889","messageId":"3945","endLine":30,"endColumn":32,"fix":"5984"},{"ruleId":"3943","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":33,"fix":"5985"},{"ruleId":"3947","severity":1,"message":"3944","line":38,"column":5,"nodeType":"3889","messageId":"3945","endLine":38,"endColumn":33,"fix":"5986"},{"ruleId":"5979","severity":1,"message":"5980","line":38,"column":20,"nodeType":"3817","messageId":"5981","endLine":38,"endColumn":30,"fix":"5987"},{"ruleId":"3943","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":31,"fix":"5988"},{"ruleId":"3947","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":31,"fix":"5989"},{"ruleId":"3943","severity":1,"message":"3944","line":57,"column":5,"nodeType":"3889","messageId":"3945","endLine":57,"endColumn":32,"fix":"5990"},{"ruleId":"3947","severity":1,"message":"3944","line":57,"column":5,"nodeType":"3889","messageId":"3945","endLine":57,"endColumn":32,"fix":"5991"},{"ruleId":"3838","severity":1,"message":"3839","line":61,"column":5,"nodeType":"3840","messageId":"3841","endLine":62,"endColumn":1,"fix":"5992"},{"ruleId":"3943","severity":1,"message":"3944","line":72,"column":5,"nodeType":"3889","messageId":"3945","endLine":72,"endColumn":33,"fix":"5993"},{"ruleId":"3947","severity":1,"message":"3944","line":72,"column":5,"nodeType":"3889","messageId":"3945","endLine":72,"endColumn":33,"fix":"5994"},{"ruleId":"5979","severity":1,"message":"5980","line":72,"column":20,"nodeType":"3817","messageId":"5981","endLine":72,"endColumn":30,"fix":"5995"},{"ruleId":"3943","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3889","messageId":"3945","endLine":83,"endColumn":33,"fix":"5996"},{"ruleId":"3947","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3889","messageId":"3945","endLine":83,"endColumn":33,"fix":"5997"},{"ruleId":"5979","severity":1,"message":"5980","line":83,"column":20,"nodeType":"3817","messageId":"5981","endLine":83,"endColumn":30,"fix":"5998"},{"ruleId":"3943","severity":1,"message":"3944","line":94,"column":5,"nodeType":"3889","messageId":"3945","endLine":94,"endColumn":33,"fix":"5999"},{"ruleId":"3947","severity":1,"message":"3944","line":94,"column":5,"nodeType":"3889","messageId":"3945","endLine":94,"endColumn":33,"fix":"6000"},{"ruleId":"5979","severity":1,"message":"5980","line":94,"column":20,"nodeType":"3817","messageId":"5981","endLine":94,"endColumn":30,"fix":"6001"},{"ruleId":"3943","severity":1,"message":"3944","line":105,"column":5,"nodeType":"3889","messageId":"3945","endLine":105,"endColumn":32,"fix":"6002"},{"ruleId":"3947","severity":1,"message":"3944","line":105,"column":5,"nodeType":"3889","messageId":"3945","endLine":105,"endColumn":32,"fix":"6003"},{"ruleId":"3978","severity":1,"message":"3979","line":127,"column":66,"nodeType":"3980","messageId":"3981","endLine":127,"endColumn":76},{"ruleId":"3978","severity":1,"message":"3979","line":144,"column":60,"nodeType":"3980","messageId":"3981","endLine":144,"endColumn":70},{"ruleId":"3978","severity":1,"message":"3979","line":160,"column":55,"nodeType":"3980","messageId":"3981","endLine":160,"endColumn":65},{"ruleId":"5979","severity":1,"message":"5980","line":221,"column":22,"nodeType":"3817","messageId":"5981","endLine":221,"endColumn":32,"fix":"6004"},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"6005"},{"ruleId":"3922","severity":1,"message":"3925","line":14,"column":1,"nodeType":"3831","endLine":14,"endColumn":1,"fix":"6006"},{"ruleId":"3815","severity":2,"message":"6007","line":32,"column":34,"nodeType":"3817","messageId":"3818","endLine":32,"endColumn":37,"fix":"6008"},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"6009"},{"ruleId":"3922","severity":1,"message":"3925","line":14,"column":1,"nodeType":"3831","endLine":14,"endColumn":1,"fix":"6010"},{"ruleId":"3815","severity":2,"message":"6011","line":87,"column":34,"nodeType":"3817","messageId":"3818","endLine":87,"endColumn":45,"fix":"6012"},{"ruleId":"3922","severity":1,"message":"3923","line":21,"column":1,"nodeType":"3831","endLine":21,"endColumn":1,"fix":"6013"},{"ruleId":"3838","severity":1,"message":"3839","line":38,"column":35,"nodeType":"3840","messageId":"3841","endLine":39,"endColumn":1,"fix":"6014"},{"ruleId":"3922","severity":1,"message":"3923","line":45,"column":1,"nodeType":"3831","endLine":45,"endColumn":1,"fix":"6015"},{"ruleId":"3838","severity":1,"message":"3839","line":59,"column":35,"nodeType":"3840","messageId":"3841","endLine":60,"endColumn":1,"fix":"6016"},{"ruleId":"3922","severity":1,"message":"3923","line":66,"column":1,"nodeType":"3831","endLine":66,"endColumn":1,"fix":"6017"},{"ruleId":"3838","severity":1,"message":"3839","line":79,"column":35,"nodeType":"3840","messageId":"3841","endLine":80,"endColumn":1,"fix":"6018"},{"ruleId":"3922","severity":1,"message":"3923","line":88,"column":1,"nodeType":"3831","endLine":88,"endColumn":1,"fix":"6019"},{"ruleId":"3838","severity":1,"message":"3839","line":102,"column":35,"nodeType":"3840","messageId":"3841","endLine":103,"endColumn":1,"fix":"6020"},{"ruleId":"3922","severity":1,"message":"3923","line":111,"column":1,"nodeType":"3831","endLine":111,"endColumn":1,"fix":"6021"},{"ruleId":"3838","severity":1,"message":"3839","line":125,"column":35,"nodeType":"3840","messageId":"3841","endLine":126,"endColumn":1,"fix":"6022"},{"ruleId":"3922","severity":1,"message":"3923","line":132,"column":1,"nodeType":"3831","endLine":132,"endColumn":1,"fix":"6023"},{"ruleId":"3910","severity":2,"message":"3911","line":147,"column":70,"nodeType":"3817","messageId":"3912","endLine":147,"endColumn":75},{"ruleId":"3922","severity":1,"message":"3923","line":153,"column":1,"nodeType":"3831","endLine":153,"endColumn":1,"fix":"6024"},{"ruleId":"3910","severity":2,"message":"3911","line":168,"column":65,"nodeType":"3817","messageId":"3912","endLine":168,"endColumn":70},{"ruleId":"3922","severity":1,"message":"3923","line":174,"column":1,"nodeType":"3831","endLine":174,"endColumn":1,"fix":"6025"},{"ruleId":"6026","severity":2,"message":"6027","line":189,"column":50,"nodeType":"6028","messageId":"6029","endLine":189,"endColumn":58},{"ruleId":"4002","severity":2,"message":"6030","line":189,"column":66,"nodeType":"3817","messageId":"4004","endLine":189,"endColumn":79,"suggestions":"6031"},{"ruleId":"3922","severity":1,"message":"3923","line":195,"column":1,"nodeType":"3831","endLine":195,"endColumn":1,"fix":"6032"},{"ruleId":"3922","severity":1,"message":"3923","line":231,"column":1,"nodeType":"3831","endLine":231,"endColumn":1,"fix":"6033"},{"ruleId":"3922","severity":1,"message":"3923","line":261,"column":1,"nodeType":"3831","endLine":261,"endColumn":1,"fix":"6034"},{"ruleId":"6026","severity":2,"message":"6027","line":292,"column":6,"nodeType":"6028","messageId":"6029","endLine":292,"endColumn":18},{"ruleId":"3922","severity":1,"message":"3923","line":302,"column":1,"nodeType":"3831","endLine":302,"endColumn":1,"fix":"6035"},{"ruleId":"3922","severity":1,"message":"3923","line":332,"column":1,"nodeType":"3831","endLine":332,"endColumn":1,"fix":"6036"},{"ruleId":"3922","severity":1,"message":"3923","line":353,"column":1,"nodeType":"3831","endLine":353,"endColumn":1,"fix":"6037"},{"ruleId":"3922","severity":1,"message":"3923","line":374,"column":1,"nodeType":"3831","endLine":374,"endColumn":1,"fix":"6038"},{"ruleId":"3922","severity":1,"message":"3923","line":395,"column":1,"nodeType":"3831","endLine":395,"endColumn":1,"fix":"6039"},{"ruleId":"3922","severity":1,"message":"3923","line":416,"column":1,"nodeType":"3831","endLine":416,"endColumn":1,"fix":"6040"},{"ruleId":"3922","severity":1,"message":"3923","line":63,"column":1,"nodeType":"3831","endLine":63,"endColumn":1,"fix":"6041"},{"ruleId":"3922","severity":1,"message":"3923","line":93,"column":1,"nodeType":"3831","endLine":93,"endColumn":1,"fix":"6042"},{"ruleId":"3922","severity":1,"message":"3923","line":134,"column":1,"nodeType":"3831","endLine":134,"endColumn":1,"fix":"6043"},{"ruleId":"3922","severity":1,"message":"3923","line":156,"column":1,"nodeType":"3831","endLine":156,"endColumn":1,"fix":"6044"},{"ruleId":"3922","severity":1,"message":"3923","line":192,"column":1,"nodeType":"3831","endLine":192,"endColumn":1,"fix":"6045"},{"ruleId":"3815","severity":2,"message":"6046","line":205,"column":22,"nodeType":"3817","messageId":"3818","endLine":205,"endColumn":25,"fix":"6047"},{"ruleId":"3815","severity":2,"message":"5044","line":205,"column":51,"nodeType":"3817","messageId":"3818","endLine":205,"endColumn":70,"fix":"6048"},{"ruleId":"3815","severity":2,"message":"3908","line":216,"column":13,"nodeType":"3817","messageId":"3818","endLine":216,"endColumn":14,"fix":"6049"},{"ruleId":"4002","severity":2,"message":"5358","line":238,"column":13,"nodeType":"3817","messageId":"4004","endLine":238,"endColumn":20,"suggestions":"6050"},{"ruleId":"3922","severity":1,"message":"3923","line":263,"column":1,"nodeType":"3831","endLine":263,"endColumn":1,"fix":"6051"},{"ruleId":"3815","severity":2,"message":"6046","line":275,"column":42,"nodeType":"3817","messageId":"3818","endLine":275,"endColumn":53,"fix":"6052"},{"ruleId":"3922","severity":1,"message":"3923","line":298,"column":1,"nodeType":"3831","endLine":298,"endColumn":1,"fix":"6053"},{"ruleId":"3815","severity":2,"message":"6046","line":310,"column":47,"nodeType":"3817","messageId":"3818","endLine":310,"endColumn":58,"fix":"6054"},{"ruleId":"3922","severity":1,"message":"3923","line":333,"column":1,"nodeType":"3831","endLine":333,"endColumn":1,"fix":"6055"},{"ruleId":"3815","severity":2,"message":"6056","line":346,"column":17,"nodeType":"3817","messageId":"3818","endLine":346,"endColumn":39},{"ruleId":"3815","severity":2,"message":"6046","line":346,"column":40,"nodeType":"3817","messageId":"3818","endLine":346,"endColumn":51,"fix":"6057"},{"ruleId":"3815","severity":2,"message":"4514","line":349,"column":9,"nodeType":"3817","messageId":"3818","endLine":349,"endColumn":13,"fix":"6058"},{"ruleId":"3815","severity":2,"message":"6059","line":354,"column":9,"nodeType":"3817","messageId":"3818","endLine":354,"endColumn":17,"fix":"6060"},{"ruleId":"3922","severity":1,"message":"3923","line":376,"column":1,"nodeType":"3831","endLine":376,"endColumn":1,"fix":"6061"},{"ruleId":"3910","severity":2,"message":"6062","line":391,"column":36,"nodeType":"3817","messageId":"3912","endLine":391,"endColumn":59},{"ruleId":"3922","severity":1,"message":"3923","line":399,"column":1,"nodeType":"3831","endLine":399,"endColumn":1,"fix":"6063"},{"ruleId":"3815","severity":2,"message":"6064","line":413,"column":17,"nodeType":"3817","messageId":"3818","endLine":413,"endColumn":41},{"ruleId":"3815","severity":2,"message":"6046","line":413,"column":42,"nodeType":"3817","messageId":"3818","endLine":413,"endColumn":53,"fix":"6065"},{"ruleId":"3815","severity":2,"message":"4514","line":414,"column":3,"nodeType":"3817","messageId":"3818","endLine":414,"endColumn":23,"fix":"6066"},{"ruleId":"3815","severity":2,"message":"6067","line":435,"column":15,"nodeType":"3817","messageId":"3818","endLine":435,"endColumn":24,"fix":"6068"},{"ruleId":"3815","severity":2,"message":"6069","line":436,"column":9,"nodeType":"3817","messageId":"3818","endLine":436,"endColumn":25,"fix":"6070"},{"ruleId":"3815","severity":2,"message":"6071","line":452,"column":9,"nodeType":"3817","messageId":"3818","endLine":452,"endColumn":18,"fix":"6072"},{"ruleId":"3922","severity":1,"message":"3923","line":459,"column":1,"nodeType":"3831","endLine":459,"endColumn":1,"fix":"6073"},{"ruleId":"3815","severity":2,"message":"6074","line":475,"column":17,"nodeType":"3817","messageId":"3818","endLine":475,"endColumn":39},{"ruleId":"3815","severity":2,"message":"6046","line":475,"column":40,"nodeType":"3817","messageId":"3818","endLine":475,"endColumn":51,"fix":"6075"},{"ruleId":"3815","severity":2,"message":"6076","line":475,"column":53,"nodeType":"3817","messageId":"3818","endLine":475,"endColumn":78,"fix":"6077"},{"ruleId":"3922","severity":1,"message":"3923","line":500,"column":1,"nodeType":"3831","endLine":500,"endColumn":1,"fix":"6078"},{"ruleId":"3815","severity":2,"message":"6046","line":515,"column":35,"nodeType":"3817","messageId":"3818","endLine":515,"endColumn":46,"fix":"6079"},{"ruleId":"3922","severity":1,"message":"3923","line":528,"column":1,"nodeType":"3831","endLine":528,"endColumn":1,"fix":"6080"},{"ruleId":"4002","severity":2,"message":"6081","line":566,"column":31,"nodeType":"3817","messageId":"4004","endLine":566,"endColumn":55,"suggestions":"6082"},{"ruleId":"3943","severity":1,"message":"3944","line":97,"column":5,"nodeType":"3889","messageId":"3945","endLine":99,"endColumn":8,"fix":"6083"},{"ruleId":"3947","severity":1,"message":"3944","line":97,"column":5,"nodeType":"3889","messageId":"3945","endLine":99,"endColumn":8,"fix":"6084"},{"ruleId":"3943","severity":1,"message":"3944","line":104,"column":5,"nodeType":"3889","messageId":"3945","endLine":106,"endColumn":8,"fix":"6085"},{"ruleId":"3947","severity":1,"message":"3944","line":104,"column":5,"nodeType":"3889","messageId":"3945","endLine":106,"endColumn":8,"fix":"6086"},{"ruleId":"3943","severity":1,"message":"3944","line":111,"column":5,"nodeType":"3889","messageId":"3945","endLine":113,"endColumn":8,"fix":"6087"},{"ruleId":"3947","severity":1,"message":"3944","line":111,"column":5,"nodeType":"3889","messageId":"3945","endLine":113,"endColumn":8,"fix":"6088"},{"ruleId":"3943","severity":1,"message":"3944","line":118,"column":5,"nodeType":"3889","messageId":"3945","endLine":122,"endColumn":8,"fix":"6089"},{"ruleId":"3947","severity":1,"message":"3944","line":118,"column":5,"nodeType":"3889","messageId":"3945","endLine":122,"endColumn":8,"fix":"6090"},{"ruleId":"3943","severity":1,"message":"3944","line":138,"column":5,"nodeType":"3889","messageId":"3945","endLine":138,"endColumn":49,"fix":"6091"},{"ruleId":"3947","severity":1,"message":"3944","line":138,"column":5,"nodeType":"3889","messageId":"3945","endLine":138,"endColumn":49,"fix":"6092"},{"ruleId":"4002","severity":2,"message":"6093","line":138,"column":24,"nodeType":"3817","messageId":"4004","endLine":138,"endColumn":34,"suggestions":"6094"},{"ruleId":"3943","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":52,"fix":"6095"},{"ruleId":"3947","severity":1,"message":"3944","line":149,"column":5,"nodeType":"3889","messageId":"3945","endLine":149,"endColumn":52,"fix":"6096"},{"ruleId":"3943","severity":1,"message":"3944","line":158,"column":5,"nodeType":"3889","messageId":"3945","endLine":158,"endColumn":52,"fix":"6097"},{"ruleId":"3947","severity":1,"message":"3944","line":158,"column":5,"nodeType":"3889","messageId":"3945","endLine":158,"endColumn":52,"fix":"6098"},{"ruleId":"3943","severity":1,"message":"3944","line":163,"column":5,"nodeType":"3889","messageId":"3945","endLine":163,"endColumn":59,"fix":"6099"},{"ruleId":"3947","severity":1,"message":"3944","line":163,"column":5,"nodeType":"3889","messageId":"3945","endLine":163,"endColumn":59,"fix":"6100"},{"ruleId":"3943","severity":1,"message":"3944","line":168,"column":5,"nodeType":"3889","messageId":"3945","endLine":168,"endColumn":56,"fix":"6101"},{"ruleId":"3947","severity":1,"message":"3944","line":168,"column":5,"nodeType":"3889","messageId":"3945","endLine":168,"endColumn":56,"fix":"6102"},{"ruleId":"3943","severity":1,"message":"3944","line":173,"column":5,"nodeType":"3889","messageId":"3945","endLine":173,"endColumn":85,"fix":"6103"},{"ruleId":"3947","severity":1,"message":"3944","line":173,"column":5,"nodeType":"3889","messageId":"3945","endLine":173,"endColumn":85,"fix":"6104"},{"ruleId":"3943","severity":1,"message":"3944","line":180,"column":5,"nodeType":"3889","messageId":"3945","endLine":182,"endColumn":7,"fix":"6105"},{"ruleId":"3947","severity":1,"message":"3944","line":180,"column":5,"nodeType":"3889","messageId":"3945","endLine":182,"endColumn":7,"fix":"6106"},{"ruleId":"3943","severity":1,"message":"3944","line":197,"column":5,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":62,"fix":"6107"},{"ruleId":"3947","severity":1,"message":"3944","line":197,"column":5,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":62,"fix":"6108"},{"ruleId":"3943","severity":1,"message":"3944","line":213,"column":5,"nodeType":"3889","messageId":"3945","endLine":213,"endColumn":64,"fix":"6109"},{"ruleId":"3947","severity":1,"message":"3944","line":213,"column":5,"nodeType":"3889","messageId":"3945","endLine":213,"endColumn":64,"fix":"6110"},{"ruleId":"3943","severity":1,"message":"3944","line":241,"column":5,"nodeType":"3889","messageId":"3945","endLine":241,"endColumn":64,"fix":"6111"},{"ruleId":"3947","severity":1,"message":"3944","line":241,"column":5,"nodeType":"3889","messageId":"3945","endLine":241,"endColumn":64,"fix":"6112"},{"ruleId":"3943","severity":1,"message":"3944","line":271,"column":5,"nodeType":"3889","messageId":"3945","endLine":271,"endColumn":64,"fix":"6113"},{"ruleId":"3947","severity":1,"message":"3944","line":271,"column":5,"nodeType":"3889","messageId":"3945","endLine":271,"endColumn":64,"fix":"6114"},{"ruleId":"3943","severity":1,"message":"3944","line":300,"column":5,"nodeType":"3889","messageId":"3945","endLine":300,"endColumn":71,"fix":"6115"},{"ruleId":"3947","severity":1,"message":"3944","line":300,"column":5,"nodeType":"3889","messageId":"3945","endLine":300,"endColumn":71,"fix":"6116"},{"ruleId":"3943","severity":1,"message":"3944","line":307,"column":5,"nodeType":"3889","messageId":"3945","endLine":307,"endColumn":87,"fix":"6117"},{"ruleId":"3947","severity":1,"message":"3944","line":307,"column":5,"nodeType":"3889","messageId":"3945","endLine":307,"endColumn":87,"fix":"6118"},{"ruleId":"3943","severity":1,"message":"3944","line":323,"column":5,"nodeType":"3889","messageId":"3945","endLine":326,"endColumn":18,"fix":"6119"},{"ruleId":"3947","severity":1,"message":"3944","line":323,"column":5,"nodeType":"3889","messageId":"3945","endLine":326,"endColumn":18,"fix":"6120"},{"ruleId":"3943","severity":1,"message":"3944","line":327,"column":5,"nodeType":"3961","messageId":"3945","endLine":331,"endColumn":8,"fix":"6121"},{"ruleId":"3947","severity":1,"message":"3944","line":327,"column":5,"nodeType":"3961","messageId":"3945","endLine":331,"endColumn":8,"fix":"6122"},{"ruleId":"3943","severity":1,"message":"3944","line":332,"column":5,"nodeType":"3889","messageId":"3945","endLine":332,"endColumn":77,"fix":"6123"},{"ruleId":"3947","severity":1,"message":"3944","line":332,"column":5,"nodeType":"3889","messageId":"3945","endLine":332,"endColumn":77,"fix":"6124"},{"ruleId":"3943","severity":1,"message":"3944","line":344,"column":5,"nodeType":"3889","messageId":"3945","endLine":344,"endColumn":74,"fix":"6125"},{"ruleId":"3947","severity":1,"message":"3944","line":344,"column":5,"nodeType":"3889","messageId":"3945","endLine":344,"endColumn":74,"fix":"6126"},{"ruleId":"3943","severity":1,"message":"3944","line":352,"column":5,"nodeType":"3889","messageId":"3945","endLine":352,"endColumn":74,"fix":"6127"},{"ruleId":"3947","severity":1,"message":"3944","line":352,"column":5,"nodeType":"3889","messageId":"3945","endLine":352,"endColumn":74,"fix":"6128"},{"ruleId":"3943","severity":1,"message":"3944","line":372,"column":5,"nodeType":"3889","messageId":"3945","endLine":372,"endColumn":66,"fix":"6129"},{"ruleId":"3947","severity":1,"message":"3944","line":372,"column":5,"nodeType":"3889","messageId":"3945","endLine":372,"endColumn":66,"fix":"6130"},{"ruleId":"3943","severity":1,"message":"3944","line":384,"column":5,"nodeType":"3889","messageId":"3945","endLine":384,"endColumn":67,"fix":"6131"},{"ruleId":"3947","severity":1,"message":"3944","line":384,"column":5,"nodeType":"3889","messageId":"3945","endLine":384,"endColumn":67,"fix":"6132"},{"ruleId":"3943","severity":1,"message":"3944","line":404,"column":5,"nodeType":"3889","messageId":"3945","endLine":404,"endColumn":66,"fix":"6133"},{"ruleId":"3947","severity":1,"message":"3944","line":404,"column":5,"nodeType":"3889","messageId":"3945","endLine":404,"endColumn":66,"fix":"6134"},{"ruleId":"3943","severity":1,"message":"3944","line":409,"column":5,"nodeType":"3889","messageId":"3945","endLine":411,"endColumn":7,"fix":"6135"},{"ruleId":"3947","severity":1,"message":"3944","line":409,"column":5,"nodeType":"3889","messageId":"3945","endLine":411,"endColumn":7,"fix":"6136"},{"ruleId":"3943","severity":1,"message":"3944","line":420,"column":5,"nodeType":"3889","messageId":"3945","endLine":420,"endColumn":64,"fix":"6137"},{"ruleId":"3947","severity":1,"message":"3944","line":420,"column":5,"nodeType":"3889","messageId":"3945","endLine":420,"endColumn":64,"fix":"6138"},{"ruleId":"3943","severity":1,"message":"3944","line":425,"column":5,"nodeType":"3889","messageId":"3945","endLine":425,"endColumn":64,"fix":"6139"},{"ruleId":"3947","severity":1,"message":"3944","line":425,"column":5,"nodeType":"3889","messageId":"3945","endLine":425,"endColumn":64,"fix":"6140"},{"ruleId":"3943","severity":1,"message":"3944","line":452,"column":5,"nodeType":"3889","messageId":"3945","endLine":452,"endColumn":86,"fix":"6141"},{"ruleId":"3947","severity":1,"message":"3944","line":452,"column":5,"nodeType":"3889","messageId":"3945","endLine":452,"endColumn":86,"fix":"6142"},{"ruleId":"3943","severity":1,"message":"3944","line":457,"column":5,"nodeType":"3889","messageId":"3945","endLine":457,"endColumn":83,"fix":"6143"},{"ruleId":"3947","severity":1,"message":"3944","line":457,"column":5,"nodeType":"3889","messageId":"3945","endLine":457,"endColumn":83,"fix":"6144"},{"ruleId":"3943","severity":1,"message":"3944","line":490,"column":5,"nodeType":"3889","messageId":"3945","endLine":490,"endColumn":77,"fix":"6145"},{"ruleId":"3947","severity":1,"message":"3944","line":490,"column":5,"nodeType":"3889","messageId":"3945","endLine":490,"endColumn":77,"fix":"6146"},{"ruleId":"3943","severity":1,"message":"3944","line":502,"column":5,"nodeType":"3889","messageId":"3945","endLine":502,"endColumn":69,"fix":"6147"},{"ruleId":"3947","severity":1,"message":"3944","line":502,"column":5,"nodeType":"3889","messageId":"3945","endLine":502,"endColumn":69,"fix":"6148"},{"ruleId":"3922","severity":1,"message":"3923","line":3,"column":1,"nodeType":"3831","endLine":3,"endColumn":1,"fix":"6149"},{"ruleId":"3922","severity":1,"message":"3925","line":7,"column":1,"nodeType":"3831","endLine":7,"endColumn":1,"fix":"6150"},{"ruleId":"3922","severity":1,"message":"3923","line":25,"column":1,"nodeType":"3831","endLine":25,"endColumn":1,"fix":"6151"},{"ruleId":"3922","severity":1,"message":"3925","line":29,"column":1,"nodeType":"3831","endLine":29,"endColumn":1,"fix":"6152"},{"ruleId":"3922","severity":1,"message":"3923","line":48,"column":1,"nodeType":"3831","endLine":48,"endColumn":1,"fix":"6153"},{"ruleId":"3922","severity":1,"message":"3925","line":53,"column":1,"nodeType":"3831","endLine":53,"endColumn":1,"fix":"6154"},{"ruleId":"3922","severity":1,"message":"3923","line":88,"column":1,"nodeType":"3831","endLine":88,"endColumn":1,"fix":"6155"},{"ruleId":"3922","severity":1,"message":"3925","line":93,"column":1,"nodeType":"3831","endLine":93,"endColumn":1,"fix":"6156"},{"ruleId":"3922","severity":1,"message":"3923","line":5,"column":1,"nodeType":"3831","endLine":5,"endColumn":1,"fix":"6157"},{"ruleId":"3922","severity":1,"message":"3925","line":11,"column":1,"nodeType":"3831","endLine":11,"endColumn":1,"fix":"6158"},{"ruleId":"3815","severity":2,"message":"6011","line":20,"column":29,"nodeType":"3817","messageId":"3818","endLine":20,"endColumn":40,"fix":"6159"},{"ruleId":"6026","severity":2,"message":"6027","line":27,"column":28,"nodeType":"6028","messageId":"6029","endLine":27,"endColumn":38},{"ruleId":"6026","severity":2,"message":"6027","line":31,"column":7,"nodeType":"6028","messageId":"6029","endLine":34,"endColumn":38},{"ruleId":"6026","severity":2,"message":"6027","line":31,"column":11,"nodeType":"6028","messageId":"6029","endLine":31,"endColumn":29},{"ruleId":"3922","severity":1,"message":"3923","line":46,"column":1,"nodeType":"3831","endLine":46,"endColumn":1,"fix":"6160"},{"ruleId":"3922","severity":1,"message":"3925","line":52,"column":1,"nodeType":"3831","endLine":52,"endColumn":1,"fix":"6161"},{"ruleId":"3815","severity":2,"message":"6011","line":61,"column":31,"nodeType":"3817","messageId":"3818","endLine":61,"endColumn":42,"fix":"6162"},{"ruleId":"3922","severity":1,"message":"3923","line":4,"column":1,"nodeType":"3831","endLine":4,"endColumn":1,"fix":"6163"},{"ruleId":"3922","severity":1,"message":"3923","line":42,"column":1,"nodeType":"3831","endLine":42,"endColumn":1,"fix":"6164"},{"ruleId":"3922","severity":1,"message":"3923","line":81,"column":1,"nodeType":"3831","endLine":81,"endColumn":1,"fix":"6165"},{"ruleId":"3922","severity":1,"message":"3923","line":120,"column":1,"nodeType":"3831","endLine":120,"endColumn":1,"fix":"6166"},{"ruleId":"3922","severity":1,"message":"3923","line":162,"column":1,"nodeType":"3831","endLine":162,"endColumn":1,"fix":"6167"},{"ruleId":"3922","severity":1,"message":"3923","line":174,"column":1,"nodeType":"3831","endLine":174,"endColumn":1,"fix":"6168"},{"ruleId":"3922","severity":1,"message":"3923","line":190,"column":1,"nodeType":"3831","endLine":190,"endColumn":1,"fix":"6169"},{"ruleId":"6026","severity":2,"message":"6027","line":200,"column":3,"nodeType":"6028","messageId":"6029","endLine":200,"endColumn":34},{"ruleId":"3922","severity":1,"message":"3923","line":205,"column":1,"nodeType":"3831","endLine":205,"endColumn":1,"fix":"6170"},{"ruleId":"6026","severity":2,"message":"6027","line":215,"column":3,"nodeType":"6028","messageId":"6029","endLine":215,"endColumn":34},{"ruleId":"3922","severity":1,"message":"3923","line":224,"column":1,"nodeType":"3831","endLine":224,"endColumn":1,"fix":"6171"},{"ruleId":"3922","severity":1,"message":"3923","line":238,"column":1,"nodeType":"3831","endLine":238,"endColumn":1,"fix":"6172"},{"ruleId":"3922","severity":1,"message":"3923","line":252,"column":1,"nodeType":"3831","endLine":252,"endColumn":1,"fix":"6173"},{"ruleId":"3922","severity":1,"message":"3923","line":269,"column":1,"nodeType":"3831","endLine":269,"endColumn":1,"fix":"6174"},{"ruleId":"3922","severity":1,"message":"3923","line":281,"column":1,"nodeType":"3831","endLine":281,"endColumn":1,"fix":"6175"},{"ruleId":"3922","severity":1,"message":"3923","line":293,"column":1,"nodeType":"3831","endLine":293,"endColumn":1,"fix":"6176"},{"ruleId":"3922","severity":1,"message":"3923","line":305,"column":1,"nodeType":"3831","endLine":305,"endColumn":1,"fix":"6177"},{"ruleId":"3922","severity":1,"message":"3923","line":318,"column":1,"nodeType":"3831","endLine":318,"endColumn":1,"fix":"6178"},{"ruleId":"3922","severity":1,"message":"3923","line":340,"column":1,"nodeType":"3831","endLine":340,"endColumn":1,"fix":"6179"},{"ruleId":"3922","severity":1,"message":"3923","line":361,"column":1,"nodeType":"3831","endLine":361,"endColumn":1,"fix":"6180"},{"ruleId":"3922","severity":1,"message":"3923","line":379,"column":1,"nodeType":"3831","endLine":379,"endColumn":1,"fix":"6181"},{"ruleId":"3922","severity":1,"message":"3923","line":397,"column":1,"nodeType":"3831","endLine":397,"endColumn":1,"fix":"6182"},{"ruleId":"3922","severity":1,"message":"3923","line":419,"column":1,"nodeType":"3831","endLine":419,"endColumn":1,"fix":"6183"},{"ruleId":"3922","severity":1,"message":"3923","line":431,"column":1,"nodeType":"3831","endLine":431,"endColumn":1,"fix":"6184"},{"ruleId":"3922","severity":1,"message":"3923","line":443,"column":1,"nodeType":"3831","endLine":443,"endColumn":1,"fix":"6185"},{"ruleId":"3922","severity":1,"message":"3923","line":455,"column":1,"nodeType":"3831","endLine":455,"endColumn":1,"fix":"6186"},{"ruleId":"3922","severity":1,"message":"3923","line":467,"column":1,"nodeType":"3831","endLine":467,"endColumn":1,"fix":"6187"},{"ruleId":"3829","severity":1,"message":"6188","line":8,"column":1,"nodeType":"3831","endLine":10,"endColumn":4,"fix":"6189"},{"ruleId":"3829","severity":1,"message":"6190","line":8,"column":1,"nodeType":"3831","endLine":10,"endColumn":4,"fix":"6191"},{"ruleId":"3833","severity":1,"message":"3834","line":8,"column":1,"nodeType":"3831","endLine":10,"endColumn":4},{"ruleId":"4015","severity":2,"message":"4016","line":21,"column":11,"nodeType":"4017","messageId":"4018","endLine":21,"endColumn":32},{"ruleId":"4002","severity":2,"message":"6192","line":29,"column":24,"nodeType":"3817","messageId":"4004","endLine":29,"endColumn":32,"suggestions":"6193"},{"ruleId":"3855","severity":2,"message":"6194","line":31,"column":54,"nodeType":"3817","messageId":"3857","endLine":31,"endColumn":62},{"ruleId":"3852","severity":2,"message":"6195","line":31,"column":54,"nodeType":"3817","messageId":"3854","endLine":31,"endColumn":62},{"ruleId":"3829","severity":1,"message":"6188","line":43,"column":1,"nodeType":"3831","endLine":45,"endColumn":4,"fix":"6196"},{"ruleId":"3829","severity":1,"message":"6190","line":43,"column":1,"nodeType":"3831","endLine":45,"endColumn":4,"fix":"6197"},{"ruleId":"3833","severity":1,"message":"3834","line":43,"column":1,"nodeType":"3831","endLine":45,"endColumn":4},{"ruleId":"4015","severity":2,"message":"4016","line":58,"column":11,"nodeType":"4017","messageId":"4018","endLine":58,"endColumn":32},{"ruleId":"4002","severity":2,"message":"6192","line":66,"column":24,"nodeType":"3817","messageId":"4004","endLine":66,"endColumn":32,"suggestions":"6198"},{"ruleId":"3855","severity":2,"message":"6194","line":68,"column":54,"nodeType":"3817","messageId":"3857","endLine":68,"endColumn":62},{"ruleId":"3852","severity":2,"message":"6199","line":68,"column":54,"nodeType":"3817","messageId":"3854","endLine":68,"endColumn":62},{"ruleId":"3922","severity":1,"message":"3923","line":87,"column":1,"nodeType":"3831","endLine":87,"endColumn":1,"fix":"6200"},{"ruleId":"3910","severity":2,"message":"6201","line":110,"column":36,"nodeType":"6028","messageId":"6202","endLine":110,"endColumn":46},{"ruleId":"3922","severity":1,"message":"3923","line":118,"column":1,"nodeType":"3831","endLine":118,"endColumn":1,"fix":"6203"},{"ruleId":"3910","severity":2,"message":"6201","line":140,"column":37,"nodeType":"6028","messageId":"6202","endLine":140,"endColumn":47},{"ruleId":"3922","severity":1,"message":"3923","line":148,"column":1,"nodeType":"3831","endLine":148,"endColumn":1,"fix":"6204"},{"ruleId":"3910","severity":2,"message":"6201","line":173,"column":38,"nodeType":"6028","messageId":"6202","endLine":173,"endColumn":48},{"ruleId":"3922","severity":1,"message":"3923","line":182,"column":1,"nodeType":"3831","endLine":182,"endColumn":1,"fix":"6205"},{"ruleId":"3910","severity":2,"message":"6201","line":208,"column":43,"nodeType":"6028","messageId":"6202","endLine":208,"endColumn":53},{"ruleId":"3922","severity":1,"message":"3923","line":218,"column":1,"nodeType":"3831","endLine":218,"endColumn":1,"fix":"6206"},{"ruleId":"3910","severity":2,"message":"6201","line":245,"column":44,"nodeType":"6028","messageId":"6202","endLine":245,"endColumn":54},{"ruleId":"3922","severity":1,"message":"3923","line":255,"column":1,"nodeType":"3831","endLine":255,"endColumn":1,"fix":"6207"},{"ruleId":"3910","severity":2,"message":"6201","line":284,"column":45,"nodeType":"6028","messageId":"6202","endLine":284,"endColumn":55},{"ruleId":"3910","severity":2,"message":"6208","line":33,"column":32,"nodeType":"4253","messageId":"3912","endLine":33,"endColumn":48},{"ruleId":"3910","severity":2,"message":"6208","line":51,"column":41,"nodeType":"4253","messageId":"3912","endLine":51,"endColumn":57},{"ruleId":"3910","severity":2,"message":"6208","line":69,"column":43,"nodeType":"4253","messageId":"3912","endLine":69,"endColumn":59},{"ruleId":"3838","severity":1,"message":"3839","line":81,"column":5,"nodeType":"3840","messageId":"3841","endLine":82,"endColumn":1,"fix":"6209"},{"ruleId":"3910","severity":2,"message":"6210","line":96,"column":37,"nodeType":"4253","messageId":"3912","endLine":96,"endColumn":53},{"ruleId":"3838","severity":1,"message":"3839","line":108,"column":5,"nodeType":"3840","messageId":"3841","endLine":109,"endColumn":1,"fix":"6211"},{"ruleId":"3910","severity":2,"message":"6210","line":123,"column":46,"nodeType":"4253","messageId":"3912","endLine":123,"endColumn":62},{"ruleId":"3838","severity":1,"message":"3839","line":137,"column":5,"nodeType":"3840","messageId":"3841","endLine":138,"endColumn":1,"fix":"6212"},{"ruleId":"3910","severity":2,"message":"6210","line":152,"column":48,"nodeType":"4253","messageId":"3912","endLine":152,"endColumn":64},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"6213"},{"ruleId":"3922","severity":1,"message":"3925","line":13,"column":1,"nodeType":"3831","endLine":13,"endColumn":1,"fix":"6214"},{"ruleId":"3815","severity":2,"message":"6215","line":67,"column":9,"nodeType":"3817","messageId":"3818","endLine":67,"endColumn":29,"fix":"6216"},{"ruleId":"3922","severity":1,"message":"3923","line":76,"column":1,"nodeType":"3831","endLine":76,"endColumn":1,"fix":"6217"},{"ruleId":"3922","severity":1,"message":"3925","line":81,"column":1,"nodeType":"3831","endLine":81,"endColumn":1,"fix":"6218"},{"ruleId":"3815","severity":2,"message":"6215","line":144,"column":9,"nodeType":"3817","messageId":"3818","endLine":144,"endColumn":29,"fix":"6219"},{"ruleId":"4083","severity":1,"message":"4084","line":15,"column":10,"nodeType":"3850","messageId":"4085","endLine":15,"endColumn":23,"fix":"6220"},{"ruleId":"3943","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":53,"fix":"6221"},{"ruleId":"3947","severity":1,"message":"3944","line":18,"column":5,"nodeType":"3889","messageId":"3945","endLine":18,"endColumn":53,"fix":"6222"},{"ruleId":"3943","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":53,"fix":"6223"},{"ruleId":"3947","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":53,"fix":"6224"},{"ruleId":"4083","severity":1,"message":"4084","line":39,"column":10,"nodeType":"3850","messageId":"4085","endLine":39,"endColumn":28,"fix":"6225"},{"ruleId":"3943","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":64,"fix":"6226"},{"ruleId":"3947","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":64,"fix":"6227"},{"ruleId":"3943","severity":1,"message":"3944","line":54,"column":5,"nodeType":"3889","messageId":"3945","endLine":54,"endColumn":70,"fix":"6228"},{"ruleId":"3947","severity":1,"message":"3944","line":54,"column":5,"nodeType":"3889","messageId":"3945","endLine":54,"endColumn":70,"fix":"6229"},{"ruleId":"3943","severity":1,"message":"3944","line":67,"column":5,"nodeType":"3889","messageId":"3945","endLine":67,"endColumn":70,"fix":"6230"},{"ruleId":"3947","severity":1,"message":"3944","line":67,"column":5,"nodeType":"3889","messageId":"3945","endLine":67,"endColumn":70,"fix":"6231"},{"ruleId":"3943","severity":1,"message":"3944","line":76,"column":5,"nodeType":"3889","messageId":"3945","endLine":76,"endColumn":77,"fix":"6232"},{"ruleId":"3947","severity":1,"message":"3944","line":76,"column":5,"nodeType":"3889","messageId":"3945","endLine":76,"endColumn":77,"fix":"6233"},{"ruleId":"6234","severity":2,"message":"6235","line":1,"column":24,"nodeType":"3850","messageId":"6236","endLine":1,"endColumn":56},{"ruleId":"3824","severity":2,"message":"3825","line":7,"column":19,"nodeType":"3826","messageId":"3827","endLine":7,"endColumn":58,"fix":"6237"},{"ruleId":"3824","severity":2,"message":"3825","line":40,"column":14,"nodeType":"3826","messageId":"3827","endLine":40,"endColumn":59,"fix":"6238"},{"ruleId":"6239","severity":2,"message":"6240","line":41,"column":37,"nodeType":"3850","messageId":"6241","endLine":41,"endColumn":44,"fix":"6242"},{"ruleId":"4015","severity":2,"message":"6243","line":46,"column":9,"nodeType":"6244","messageId":"6245","endLine":51,"endColumn":10},{"ruleId":"4061","severity":2,"message":"6246","line":47,"column":11,"nodeType":"3817","messageId":"4063","endLine":47,"endColumn":24},{"ruleId":"4061","severity":2,"message":"6246","line":48,"column":11,"nodeType":"3817","messageId":"4063","endLine":48,"endColumn":29},{"ruleId":"3916","severity":2,"message":"3917","line":123,"column":33,"nodeType":"6247","messageId":"3918","endLine":129,"endColumn":12},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6248","line":9,"column":1},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6249","line":3,"column":13},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6249","line":3,"column":13},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6248","line":2,"column":1},{"ruleId":"3848","severity":2,"message":"6250","line":5,"column":8,"nodeType":"3850","messageId":"3851","endLine":5,"endColumn":23},{"ruleId":"3848","severity":2,"message":"6250","line":1,"column":31,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":46},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6248","line":4,"column":1},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6251","line":4,"column":6},{"ruleId":"3838","severity":1,"message":"3839","line":9,"column":8,"nodeType":"3840","messageId":"3841","endLine":10,"endColumn":1,"fix":"6252"},{"ruleId":"4359","severity":2,"message":"6253","line":9,"column":8,"nodeType":"3840","messageId":"4361","endLine":9,"endColumn":37,"suggestions":"6254"},{"ruleId":"3838","severity":1,"message":"3839","line":15,"column":8,"nodeType":"3840","messageId":"3841","endLine":16,"endColumn":1,"fix":"6255"},{"ruleId":"3910","severity":2,"message":"3911","line":18,"column":38,"nodeType":"3861","messageId":"3912","endLine":18,"endColumn":49},{"ruleId":"3843","severity":2,"message":"6256","line":18,"column":45,"nodeType":"3817","messageId":"3845","endLine":18,"endColumn":49},{"ruleId":"3910","severity":2,"message":"3911","line":20,"column":51,"nodeType":"3861","messageId":"3912","endLine":20,"endColumn":62},{"ruleId":"3843","severity":2,"message":"6256","line":20,"column":58,"nodeType":"3817","messageId":"3845","endLine":20,"endColumn":62},{"ruleId":"4015","severity":2,"message":"4016","line":23,"column":5,"nodeType":"6244","messageId":"4018","endLine":23,"endColumn":15},{"ruleId":"3843","severity":2,"message":"6257","line":26,"column":31,"nodeType":"3861","messageId":"6258","endLine":26,"endColumn":42},{"ruleId":"3843","severity":2,"message":"6256","line":26,"column":38,"nodeType":"3817","messageId":"3845","endLine":26,"endColumn":42},{"ruleId":"3843","severity":2,"message":"6256","line":34,"column":37,"nodeType":"3817","messageId":"3845","endLine":34,"endColumn":41},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6259","line":22,"column":57},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6259","line":20,"column":37},{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"6259","line":16,"column":43},{"ruleId":"4083","severity":1,"message":"4084","line":9,"column":10,"nodeType":"3850","messageId":"4085","endLine":9,"endColumn":20,"fix":"6260"},{"ruleId":"3943","severity":1,"message":"3944","line":12,"column":5,"nodeType":"3889","messageId":"3945","endLine":12,"endColumn":34,"fix":"6261"},{"ruleId":"3947","severity":1,"message":"3944","line":12,"column":5,"nodeType":"3889","messageId":"3945","endLine":12,"endColumn":34,"fix":"6262"},{"ruleId":"3943","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":59,"fix":"6263"},{"ruleId":"3947","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":59,"fix":"6264"},{"ruleId":"3943","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":37,"fix":"6265"},{"ruleId":"3947","severity":1,"message":"3944","line":25,"column":5,"nodeType":"3889","messageId":"3945","endLine":25,"endColumn":37,"fix":"6266"},{"ruleId":"3943","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":37,"fix":"6267"},{"ruleId":"3947","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":37,"fix":"6268"},{"ruleId":"3933","severity":1,"message":"3934","line":28,"column":26,"nodeType":"3817","messageId":"3935","endLine":28,"endColumn":30,"fix":"6269"},{"ruleId":"3943","severity":1,"message":"3944","line":31,"column":5,"nodeType":"3889","messageId":"3945","endLine":31,"endColumn":47,"fix":"6270"},{"ruleId":"3947","severity":1,"message":"3944","line":31,"column":5,"nodeType":"3889","messageId":"3945","endLine":31,"endColumn":47,"fix":"6271"},{"ruleId":"3937","severity":2,"message":"3938","line":31,"column":12,"nodeType":"3826","messageId":"3939","endLine":31,"endColumn":29},{"ruleId":"3933","severity":1,"message":"3940","line":31,"column":31,"nodeType":"3817","messageId":"3941","endLine":31,"endColumn":35,"fix":"6272"},{"ruleId":"3943","severity":1,"message":"3944","line":36,"column":5,"nodeType":"3889","messageId":"3945","endLine":36,"endColumn":46,"fix":"6273"},{"ruleId":"3947","severity":1,"message":"3944","line":36,"column":5,"nodeType":"3889","messageId":"3945","endLine":36,"endColumn":46,"fix":"6274"},{"ruleId":"3943","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":37,"fix":"6275"},{"ruleId":"3947","severity":1,"message":"3944","line":42,"column":5,"nodeType":"3889","messageId":"3945","endLine":42,"endColumn":37,"fix":"6276"},{"ruleId":"3943","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":39,"fix":"6277"},{"ruleId":"3947","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":39,"fix":"6278"},{"ruleId":"3943","severity":1,"message":"3944","line":56,"column":5,"nodeType":"3889","messageId":"3945","endLine":56,"endColumn":42,"fix":"6279"},{"ruleId":"3947","severity":1,"message":"3944","line":56,"column":5,"nodeType":"3889","messageId":"3945","endLine":56,"endColumn":42,"fix":"6280"},{"ruleId":"4083","severity":1,"message":"4084","line":9,"column":10,"nodeType":"3850","messageId":"4085","endLine":9,"endColumn":16,"fix":"6281"},{"ruleId":"3943","severity":1,"message":"3944","line":12,"column":5,"nodeType":"3889","messageId":"3945","endLine":12,"endColumn":39,"fix":"6282"},{"ruleId":"3947","severity":1,"message":"3944","line":12,"column":5,"nodeType":"3889","messageId":"3945","endLine":12,"endColumn":39,"fix":"6283"},{"ruleId":"3943","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":50,"fix":"6284"},{"ruleId":"3947","severity":1,"message":"3944","line":20,"column":5,"nodeType":"3889","messageId":"3945","endLine":20,"endColumn":50,"fix":"6285"},{"ruleId":"3943","severity":1,"message":"3944","line":24,"column":5,"nodeType":"3889","messageId":"3945","endLine":24,"endColumn":46,"fix":"6286"},{"ruleId":"3947","severity":1,"message":"3944","line":24,"column":5,"nodeType":"3889","messageId":"3945","endLine":24,"endColumn":46,"fix":"6287"},{"ruleId":"3943","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":43,"fix":"6288"},{"ruleId":"3947","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":43,"fix":"6289"},{"ruleId":"3933","severity":1,"message":"3934","line":28,"column":32,"nodeType":"3817","messageId":"3935","endLine":28,"endColumn":36,"fix":"6290"},{"ruleId":"3943","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":44,"fix":"6291"},{"ruleId":"3947","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":44,"fix":"6292"},{"ruleId":"3943","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":43,"fix":"6293"},{"ruleId":"3947","severity":1,"message":"3944","line":39,"column":5,"nodeType":"3889","messageId":"3945","endLine":39,"endColumn":43,"fix":"6294"},{"ruleId":"3943","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":48,"fix":"6295"},{"ruleId":"3947","severity":1,"message":"3944","line":49,"column":5,"nodeType":"3889","messageId":"3945","endLine":49,"endColumn":48,"fix":"6296"},{"ruleId":"3943","severity":1,"message":"3944","line":66,"column":7,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":37,"fix":"6297"},{"ruleId":"3947","severity":1,"message":"3944","line":66,"column":7,"nodeType":"3889","messageId":"3945","endLine":66,"endColumn":37,"fix":"6298"},{"ruleId":"4083","severity":1,"message":"4084","line":8,"column":10,"nodeType":"3850","messageId":"4085","endLine":8,"endColumn":20,"fix":"6299"},{"ruleId":"3933","severity":1,"message":"3934","line":14,"column":28,"nodeType":"3817","messageId":"3935","endLine":14,"endColumn":32,"fix":"6300"},{"ruleId":"3937","severity":2,"message":"3938","line":15,"column":12,"nodeType":"3826","messageId":"3939","endLine":15,"endColumn":31},{"ruleId":"3933","severity":1,"message":"3940","line":15,"column":33,"nodeType":"3817","messageId":"3941","endLine":15,"endColumn":37,"fix":"6301"},{"ruleId":"3943","severity":1,"message":"3944","line":61,"column":5,"nodeType":"3889","messageId":"3945","endLine":61,"endColumn":34,"fix":"6302"},{"ruleId":"3947","severity":1,"message":"3944","line":61,"column":5,"nodeType":"3889","messageId":"3945","endLine":61,"endColumn":34,"fix":"6303"},{"ruleId":"4002","severity":2,"message":"6304","line":82,"column":32,"nodeType":"3817","messageId":"4004","endLine":82,"endColumn":40,"suggestions":"6305"},{"ruleId":"3943","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3889","messageId":"3945","endLine":83,"endColumn":45,"fix":"6306"},{"ruleId":"3947","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3889","messageId":"3945","endLine":83,"endColumn":45,"fix":"6307"},{"ruleId":"4002","severity":2,"message":"6308","line":88,"column":33,"nodeType":"3817","messageId":"4004","endLine":88,"endColumn":41,"suggestions":"6309"},{"ruleId":"3943","severity":1,"message":"3944","line":89,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":52,"fix":"6310"},{"ruleId":"3947","severity":1,"message":"3944","line":89,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":52,"fix":"6311"},{"ruleId":"3838","severity":1,"message":"3839","line":93,"column":5,"nodeType":"3840","messageId":"3841","endLine":94,"endColumn":1,"fix":"6312"},{"ruleId":"4516","severity":2,"message":"4517","line":94,"column":7,"nodeType":"4518","messageId":"4519","endLine":94,"endColumn":31},{"ruleId":"4083","severity":1,"message":"4084","line":17,"column":10,"nodeType":"3850","messageId":"4085","endLine":17,"endColumn":20,"fix":"6313"},{"ruleId":"3943","severity":1,"message":"3944","line":45,"column":7,"nodeType":"3889","messageId":"3945","endLine":45,"endColumn":75,"fix":"6314"},{"ruleId":"3947","severity":1,"message":"3944","line":45,"column":7,"nodeType":"3889","messageId":"3945","endLine":45,"endColumn":75,"fix":"6315"},{"ruleId":"3943","severity":1,"message":"3944","line":48,"column":7,"nodeType":"3889","messageId":"3945","endLine":48,"endColumn":76,"fix":"6316"},{"ruleId":"3947","severity":1,"message":"3944","line":48,"column":7,"nodeType":"3889","messageId":"3945","endLine":48,"endColumn":76,"fix":"6317"},{"ruleId":"3943","severity":1,"message":"3944","line":70,"column":7,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":80,"fix":"6318"},{"ruleId":"3947","severity":1,"message":"3944","line":70,"column":7,"nodeType":"3889","messageId":"3945","endLine":70,"endColumn":80,"fix":"6319"},{"ruleId":"3943","severity":1,"message":"3944","line":73,"column":7,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":84,"fix":"6320"},{"ruleId":"3947","severity":1,"message":"3944","line":73,"column":7,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":84,"fix":"6321"},{"ruleId":"3943","severity":1,"message":"3944","line":76,"column":7,"nodeType":"3889","messageId":"3945","endLine":76,"endColumn":90,"fix":"6322"},{"ruleId":"3947","severity":1,"message":"3944","line":76,"column":7,"nodeType":"3889","messageId":"3945","endLine":76,"endColumn":90,"fix":"6323"},{"ruleId":"3943","severity":1,"message":"3944","line":91,"column":7,"nodeType":"3889","messageId":"3945","endLine":91,"endColumn":91,"fix":"6324"},{"ruleId":"3947","severity":1,"message":"3944","line":91,"column":7,"nodeType":"3889","messageId":"3945","endLine":91,"endColumn":91,"fix":"6325"},{"ruleId":"3943","severity":1,"message":"3944","line":94,"column":7,"nodeType":"3889","messageId":"3945","endLine":96,"endColumn":9,"fix":"6326"},{"ruleId":"3947","severity":1,"message":"3944","line":94,"column":7,"nodeType":"3889","messageId":"3945","endLine":96,"endColumn":9,"fix":"6327"},{"ruleId":"3943","severity":1,"message":"3944","line":99,"column":7,"nodeType":"3889","messageId":"3945","endLine":101,"endColumn":9,"fix":"6328"},{"ruleId":"3947","severity":1,"message":"3944","line":99,"column":7,"nodeType":"3889","messageId":"3945","endLine":101,"endColumn":9,"fix":"6329"},{"ruleId":"3943","severity":1,"message":"3944","line":112,"column":7,"nodeType":"3889","messageId":"3945","endLine":114,"endColumn":9,"fix":"6330"},{"ruleId":"3947","severity":1,"message":"3944","line":112,"column":7,"nodeType":"3889","messageId":"3945","endLine":114,"endColumn":9,"fix":"6331"},{"ruleId":"3943","severity":1,"message":"3944","line":117,"column":7,"nodeType":"3889","messageId":"3945","endLine":119,"endColumn":9,"fix":"6332"},{"ruleId":"3947","severity":1,"message":"3944","line":117,"column":7,"nodeType":"3889","messageId":"3945","endLine":119,"endColumn":9,"fix":"6333"},{"ruleId":"3943","severity":1,"message":"3944","line":126,"column":7,"nodeType":"3889","messageId":"3945","endLine":126,"endColumn":47,"fix":"6334"},{"ruleId":"3947","severity":1,"message":"3944","line":126,"column":7,"nodeType":"3889","messageId":"3945","endLine":126,"endColumn":47,"fix":"6335"},{"ruleId":"3943","severity":1,"message":"3944","line":133,"column":7,"nodeType":"3889","messageId":"3945","endLine":133,"endColumn":57,"fix":"6336"},{"ruleId":"3947","severity":1,"message":"3944","line":133,"column":7,"nodeType":"3889","messageId":"3945","endLine":133,"endColumn":57,"fix":"6337"},{"ruleId":"3943","severity":1,"message":"3944","line":140,"column":7,"nodeType":"3889","messageId":"3945","endLine":140,"endColumn":57,"fix":"6338"},{"ruleId":"3947","severity":1,"message":"3944","line":140,"column":7,"nodeType":"3889","messageId":"3945","endLine":140,"endColumn":57,"fix":"6339"},{"ruleId":"3943","severity":1,"message":"3944","line":147,"column":7,"nodeType":"3889","messageId":"3945","endLine":147,"endColumn":51,"fix":"6340"},{"ruleId":"3947","severity":1,"message":"3944","line":147,"column":7,"nodeType":"3889","messageId":"3945","endLine":147,"endColumn":51,"fix":"6341"},{"ruleId":"3943","severity":1,"message":"3944","line":152,"column":7,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":52,"fix":"6342"},{"ruleId":"3947","severity":1,"message":"3944","line":152,"column":7,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":52,"fix":"6343"},{"ruleId":"3943","severity":1,"message":"3944","line":168,"column":7,"nodeType":"3889","messageId":"3945","endLine":168,"endColumn":70,"fix":"6344"},{"ruleId":"3947","severity":1,"message":"3944","line":168,"column":7,"nodeType":"3889","messageId":"3945","endLine":168,"endColumn":70,"fix":"6345"},{"ruleId":"3943","severity":1,"message":"3944","line":210,"column":7,"nodeType":"3889","messageId":"3945","endLine":210,"endColumn":54,"fix":"6346"},{"ruleId":"3947","severity":1,"message":"3944","line":210,"column":7,"nodeType":"3889","messageId":"3945","endLine":210,"endColumn":54,"fix":"6347"},{"ruleId":"3943","severity":1,"message":"3944","line":245,"column":7,"nodeType":"3889","messageId":"3945","endLine":245,"endColumn":45,"fix":"6348"},{"ruleId":"3947","severity":1,"message":"3944","line":245,"column":7,"nodeType":"3889","messageId":"3945","endLine":245,"endColumn":45,"fix":"6349"},{"ruleId":"3943","severity":1,"message":"3944","line":252,"column":7,"nodeType":"3889","messageId":"3945","endLine":252,"endColumn":61,"fix":"6350"},{"ruleId":"3947","severity":1,"message":"3944","line":252,"column":7,"nodeType":"3889","messageId":"3945","endLine":252,"endColumn":61,"fix":"6351"},{"ruleId":"3943","severity":1,"message":"3944","line":258,"column":7,"nodeType":"3889","messageId":"3945","endLine":258,"endColumn":60,"fix":"6352"},{"ruleId":"3947","severity":1,"message":"3944","line":258,"column":7,"nodeType":"3889","messageId":"3945","endLine":258,"endColumn":60,"fix":"6353"},{"ruleId":"3943","severity":1,"message":"3944","line":261,"column":7,"nodeType":"3889","messageId":"3945","endLine":261,"endColumn":80,"fix":"6354"},{"ruleId":"3947","severity":1,"message":"3944","line":261,"column":7,"nodeType":"3889","messageId":"3945","endLine":261,"endColumn":80,"fix":"6355"},{"ruleId":"3943","severity":1,"message":"3944","line":267,"column":7,"nodeType":"3889","messageId":"3945","endLine":267,"endColumn":37,"fix":"6356"},{"ruleId":"3947","severity":1,"message":"3944","line":267,"column":7,"nodeType":"3889","messageId":"3945","endLine":267,"endColumn":37,"fix":"6357"},{"ruleId":"3943","severity":1,"message":"3944","line":276,"column":7,"nodeType":"3889","messageId":"3945","endLine":276,"endColumn":84,"fix":"6358"},{"ruleId":"3947","severity":1,"message":"3944","line":276,"column":7,"nodeType":"3889","messageId":"3945","endLine":276,"endColumn":84,"fix":"6359"},{"ruleId":"3943","severity":1,"message":"3944","line":284,"column":7,"nodeType":"3889","messageId":"3945","endLine":286,"endColumn":9,"fix":"6360"},{"ruleId":"3947","severity":1,"message":"3944","line":284,"column":7,"nodeType":"3889","messageId":"3945","endLine":286,"endColumn":9,"fix":"6361"},{"ruleId":"3943","severity":1,"message":"3944","line":308,"column":7,"nodeType":"3889","messageId":"3945","endLine":308,"endColumn":70,"fix":"6362"},{"ruleId":"3947","severity":1,"message":"3944","line":308,"column":7,"nodeType":"3889","messageId":"3945","endLine":308,"endColumn":70,"fix":"6363"},{"ruleId":"3943","severity":1,"message":"3944","line":335,"column":7,"nodeType":"3889","messageId":"3945","endLine":335,"endColumn":44,"fix":"6364"},{"ruleId":"3947","severity":1,"message":"3944","line":335,"column":7,"nodeType":"3889","messageId":"3945","endLine":335,"endColumn":44,"fix":"6365"},{"ruleId":"3943","severity":1,"message":"3944","line":361,"column":7,"nodeType":"3889","messageId":"3945","endLine":361,"endColumn":54,"fix":"6366"},{"ruleId":"3947","severity":1,"message":"3944","line":361,"column":7,"nodeType":"3889","messageId":"3945","endLine":361,"endColumn":54,"fix":"6367"},{"ruleId":"4083","severity":1,"message":"4084","line":8,"column":10,"nodeType":"3850","messageId":"4085","endLine":8,"endColumn":18,"fix":"6368"},{"ruleId":"3943","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3961","messageId":"3945","endLine":83,"endColumn":37,"fix":"6369"},{"ruleId":"3947","severity":1,"message":"3944","line":83,"column":5,"nodeType":"3961","messageId":"3945","endLine":83,"endColumn":37,"fix":"6370"},{"ruleId":"3943","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":85,"endColumn":47,"fix":"6371"},{"ruleId":"3947","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":85,"endColumn":47,"fix":"6372"},{"ruleId":"3943","severity":1,"message":"3944","line":91,"column":5,"nodeType":"3961","messageId":"3945","endLine":91,"endColumn":37,"fix":"6373"},{"ruleId":"3947","severity":1,"message":"3944","line":91,"column":5,"nodeType":"3961","messageId":"3945","endLine":91,"endColumn":37,"fix":"6374"},{"ruleId":"3943","severity":1,"message":"3944","line":93,"column":5,"nodeType":"3889","messageId":"3945","endLine":93,"endColumn":47,"fix":"6375"},{"ruleId":"3947","severity":1,"message":"3944","line":93,"column":5,"nodeType":"3889","messageId":"3945","endLine":93,"endColumn":47,"fix":"6376"},{"ruleId":"3943","severity":1,"message":"3944","line":106,"column":5,"nodeType":"3889","messageId":"3945","endLine":106,"endColumn":48,"fix":"6377"},{"ruleId":"3947","severity":1,"message":"3944","line":106,"column":5,"nodeType":"3889","messageId":"3945","endLine":106,"endColumn":48,"fix":"6378"},{"ruleId":"4015","severity":2,"message":"4016","line":111,"column":11,"nodeType":"4017","messageId":"4018","endLine":111,"endColumn":43},{"ruleId":"3943","severity":1,"message":"3944","line":147,"column":5,"nodeType":"3889","messageId":"3945","endLine":147,"endColumn":44,"fix":"6379"},{"ruleId":"3947","severity":1,"message":"3944","line":147,"column":5,"nodeType":"3889","messageId":"3945","endLine":147,"endColumn":44,"fix":"6380"},{"ruleId":"3943","severity":1,"message":"3944","line":154,"column":5,"nodeType":"3889","messageId":"3945","endLine":154,"endColumn":51,"fix":"6381"},{"ruleId":"3947","severity":1,"message":"3944","line":154,"column":5,"nodeType":"3889","messageId":"3945","endLine":154,"endColumn":51,"fix":"6382"},{"ruleId":"3848","severity":2,"message":"4098","line":1,"column":33,"nodeType":"3850","messageId":"3851","endLine":1,"endColumn":44},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"6383"},{"ruleId":"3922","severity":1,"message":"3925","line":16,"column":1,"nodeType":"3831","endLine":16,"endColumn":1,"fix":"6384"},{"ruleId":"3922","severity":1,"message":"3923","line":44,"column":1,"nodeType":"3831","endLine":44,"endColumn":1,"fix":"6385"},{"ruleId":"3922","severity":1,"message":"3925","line":52,"column":1,"nodeType":"3831","endLine":52,"endColumn":1,"fix":"6386"},{"ruleId":"4083","severity":1,"message":"4084","line":16,"column":10,"nodeType":"3850","messageId":"4085","endLine":16,"endColumn":16,"fix":"6387"},{"ruleId":"3943","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":28,"fix":"6388"},{"ruleId":"3947","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":28,"fix":"6389"},{"ruleId":"3943","severity":1,"message":"3944","line":30,"column":5,"nodeType":"3889","messageId":"3945","endLine":30,"endColumn":28,"fix":"6390"},{"ruleId":"3947","severity":1,"message":"3944","line":30,"column":5,"nodeType":"3889","messageId":"3945","endLine":30,"endColumn":28,"fix":"6391"},{"ruleId":"4083","severity":1,"message":"4084","line":102,"column":10,"nodeType":"3850","messageId":"4085","endLine":102,"endColumn":21,"fix":"6392"},{"ruleId":"3943","severity":1,"message":"3944","line":108,"column":5,"nodeType":"3889","messageId":"3945","endLine":108,"endColumn":28,"fix":"6393"},{"ruleId":"3947","severity":1,"message":"3944","line":108,"column":5,"nodeType":"3889","messageId":"3945","endLine":108,"endColumn":28,"fix":"6394"},{"ruleId":"3943","severity":1,"message":"3944","line":116,"column":5,"nodeType":"3889","messageId":"3945","endLine":116,"endColumn":28,"fix":"6395"},{"ruleId":"3947","severity":1,"message":"3944","line":116,"column":5,"nodeType":"3889","messageId":"3945","endLine":116,"endColumn":28,"fix":"6396"},{"ruleId":"6397","severity":1,"message":"6398","line":1,"column":1,"nodeType":"3831","endLine":32,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":8,"column":1,"nodeType":"3831","endLine":8,"endColumn":1,"fix":"6399"},{"ruleId":"6397","severity":1,"message":"6398","line":1,"column":1,"nodeType":"3831","endLine":29,"endColumn":4},{"ruleId":"3922","severity":1,"message":"3923","line":6,"column":1,"nodeType":"3831","endLine":6,"endColumn":1,"fix":"6400"},{"ruleId":"3815","severity":2,"message":"6401","line":30,"column":1,"nodeType":"6402","messageId":"3818","endLine":47,"endColumn":1},{"ruleId":"3815","severity":2,"message":"6403","line":30,"column":17,"nodeType":"3817","messageId":"3818","endLine":30,"endColumn":42},{"ruleId":"3815","severity":2,"message":"6404","line":31,"column":9,"nodeType":"3817","messageId":"3818","endLine":31,"endColumn":15,"fix":"6405"},{"ruleId":"4083","severity":1,"message":"4084","line":34,"column":12,"nodeType":"3850","messageId":"4085","endLine":34,"endColumn":23,"fix":"6406"},{"ruleId":"3943","severity":1,"message":"3944","line":43,"column":7,"nodeType":"3961","messageId":"3945","endLine":43,"endColumn":56,"fix":"6407"},{"ruleId":"3947","severity":1,"message":"3944","line":43,"column":7,"nodeType":"3961","messageId":"3945","endLine":43,"endColumn":56,"fix":"6408"},{"ruleId":"3943","severity":1,"message":"3944","line":44,"column":7,"nodeType":"3889","messageId":"3945","endLine":44,"endColumn":32,"fix":"6409"},{"ruleId":"3947","severity":1,"message":"3944","line":44,"column":7,"nodeType":"3889","messageId":"3945","endLine":44,"endColumn":32,"fix":"6410"},{"ruleId":"3943","severity":1,"message":"3944","line":58,"column":7,"nodeType":"3961","messageId":"3945","endLine":58,"endColumn":46,"fix":"6411"},{"ruleId":"3947","severity":1,"message":"3944","line":58,"column":7,"nodeType":"3961","messageId":"3945","endLine":58,"endColumn":46,"fix":"6412"},{"ruleId":"3943","severity":1,"message":"3944","line":59,"column":7,"nodeType":"3889","messageId":"3945","endLine":59,"endColumn":39,"fix":"6413"},{"ruleId":"3947","severity":1,"message":"3944","line":59,"column":7,"nodeType":"3889","messageId":"3945","endLine":59,"endColumn":39,"fix":"6414"},{"ruleId":"3943","severity":1,"message":"3944","line":72,"column":7,"nodeType":"3961","messageId":"3945","endLine":72,"endColumn":56,"fix":"6415"},{"ruleId":"3947","severity":1,"message":"3944","line":72,"column":7,"nodeType":"3961","messageId":"3945","endLine":72,"endColumn":56,"fix":"6416"},{"ruleId":"3943","severity":1,"message":"3944","line":73,"column":7,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":32,"fix":"6417"},{"ruleId":"3947","severity":1,"message":"3944","line":73,"column":7,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":32,"fix":"6418"},{"ruleId":"4083","severity":1,"message":"4084","line":77,"column":12,"nodeType":"3850","messageId":"4085","endLine":77,"endColumn":22,"fix":"6419"},{"ruleId":"3943","severity":1,"message":"3944","line":88,"column":7,"nodeType":"3961","messageId":"3945","endLine":88,"endColumn":46,"fix":"6420"},{"ruleId":"3947","severity":1,"message":"3944","line":88,"column":7,"nodeType":"3961","messageId":"3945","endLine":88,"endColumn":46,"fix":"6421"},{"ruleId":"3943","severity":1,"message":"3944","line":89,"column":7,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":39,"fix":"6422"},{"ruleId":"3947","severity":1,"message":"3944","line":89,"column":7,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":39,"fix":"6423"},{"ruleId":"3943","severity":1,"message":"3944","line":102,"column":7,"nodeType":"3961","messageId":"3945","endLine":102,"endColumn":46,"fix":"6424"},{"ruleId":"3947","severity":1,"message":"3944","line":102,"column":7,"nodeType":"3961","messageId":"3945","endLine":102,"endColumn":46,"fix":"6425"},{"ruleId":"3943","severity":1,"message":"3944","line":103,"column":7,"nodeType":"3889","messageId":"3945","endLine":103,"endColumn":39,"fix":"6426"},{"ruleId":"3947","severity":1,"message":"3944","line":103,"column":7,"nodeType":"3889","messageId":"3945","endLine":103,"endColumn":39,"fix":"6427"},{"ruleId":"3943","severity":1,"message":"3944","line":114,"column":7,"nodeType":"3961","messageId":"3945","endLine":114,"endColumn":50,"fix":"6428"},{"ruleId":"3947","severity":1,"message":"3944","line":114,"column":7,"nodeType":"3961","messageId":"3945","endLine":114,"endColumn":50,"fix":"6429"},{"ruleId":"3943","severity":1,"message":"3944","line":115,"column":7,"nodeType":"3889","messageId":"3945","endLine":115,"endColumn":39,"fix":"6430"},{"ruleId":"3947","severity":1,"message":"3944","line":115,"column":7,"nodeType":"3889","messageId":"3945","endLine":115,"endColumn":39,"fix":"6431"},{"ruleId":"4083","severity":1,"message":"4084","line":119,"column":12,"nodeType":"3850","messageId":"4085","endLine":119,"endColumn":23,"fix":"6432"},{"ruleId":"3943","severity":1,"message":"3944","line":128,"column":7,"nodeType":"3961","messageId":"3945","endLine":128,"endColumn":56,"fix":"6433"},{"ruleId":"3947","severity":1,"message":"3944","line":128,"column":7,"nodeType":"3961","messageId":"3945","endLine":128,"endColumn":56,"fix":"6434"},{"ruleId":"3943","severity":1,"message":"3944","line":129,"column":7,"nodeType":"3889","messageId":"3945","endLine":129,"endColumn":32,"fix":"6435"},{"ruleId":"3947","severity":1,"message":"3944","line":129,"column":7,"nodeType":"3889","messageId":"3945","endLine":129,"endColumn":32,"fix":"6436"},{"ruleId":"3943","severity":1,"message":"3944","line":139,"column":7,"nodeType":"3961","messageId":"3945","endLine":139,"endColumn":56,"fix":"6437"},{"ruleId":"3947","severity":1,"message":"3944","line":139,"column":7,"nodeType":"3961","messageId":"3945","endLine":139,"endColumn":56,"fix":"6438"},{"ruleId":"3943","severity":1,"message":"3944","line":140,"column":7,"nodeType":"3889","messageId":"3945","endLine":140,"endColumn":32,"fix":"6439"},{"ruleId":"3947","severity":1,"message":"3944","line":140,"column":7,"nodeType":"3889","messageId":"3945","endLine":140,"endColumn":32,"fix":"6440"},{"ruleId":"3943","severity":1,"message":"3944","line":153,"column":7,"nodeType":"3961","messageId":"3945","endLine":153,"endColumn":56,"fix":"6441"},{"ruleId":"3947","severity":1,"message":"3944","line":153,"column":7,"nodeType":"3961","messageId":"3945","endLine":153,"endColumn":56,"fix":"6442"},{"ruleId":"3943","severity":1,"message":"3944","line":154,"column":7,"nodeType":"3889","messageId":"3945","endLine":154,"endColumn":32,"fix":"6443"},{"ruleId":"3947","severity":1,"message":"3944","line":154,"column":7,"nodeType":"3889","messageId":"3945","endLine":154,"endColumn":32,"fix":"6444"},{"ruleId":"3943","severity":1,"message":"3944","line":166,"column":7,"nodeType":"3961","messageId":"3945","endLine":166,"endColumn":56,"fix":"6445"},{"ruleId":"3947","severity":1,"message":"3944","line":166,"column":7,"nodeType":"3961","messageId":"3945","endLine":166,"endColumn":56,"fix":"6446"},{"ruleId":"3943","severity":1,"message":"3944","line":167,"column":7,"nodeType":"3889","messageId":"3945","endLine":167,"endColumn":32,"fix":"6447"},{"ruleId":"3947","severity":1,"message":"3944","line":167,"column":7,"nodeType":"3889","messageId":"3945","endLine":167,"endColumn":32,"fix":"6448"},{"ruleId":"4083","severity":1,"message":"4084","line":171,"column":12,"nodeType":"3850","messageId":"4085","endLine":171,"endColumn":35,"fix":"6449"},{"ruleId":"3943","severity":1,"message":"3944","line":185,"column":7,"nodeType":"3961","messageId":"3945","endLine":185,"endColumn":46,"fix":"6450"},{"ruleId":"3947","severity":1,"message":"3944","line":185,"column":7,"nodeType":"3961","messageId":"3945","endLine":185,"endColumn":46,"fix":"6451"},{"ruleId":"3943","severity":1,"message":"3944","line":186,"column":7,"nodeType":"3889","messageId":"3945","endLine":186,"endColumn":39,"fix":"6452"},{"ruleId":"3947","severity":1,"message":"3944","line":186,"column":7,"nodeType":"3889","messageId":"3945","endLine":186,"endColumn":39,"fix":"6453"},{"ruleId":"3943","severity":1,"message":"3944","line":201,"column":7,"nodeType":"3961","messageId":"3945","endLine":201,"endColumn":46,"fix":"6454"},{"ruleId":"3947","severity":1,"message":"3944","line":201,"column":7,"nodeType":"3961","messageId":"3945","endLine":201,"endColumn":46,"fix":"6455"},{"ruleId":"3943","severity":1,"message":"3944","line":202,"column":7,"nodeType":"3889","messageId":"3945","endLine":202,"endColumn":39,"fix":"6456"},{"ruleId":"3947","severity":1,"message":"3944","line":202,"column":7,"nodeType":"3889","messageId":"3945","endLine":202,"endColumn":39,"fix":"6457"},{"ruleId":"3943","severity":1,"message":"3944","line":207,"column":7,"nodeType":"3889","messageId":"3945","endLine":207,"endColumn":46,"fix":"6458"},{"ruleId":"3947","severity":1,"message":"3944","line":207,"column":7,"nodeType":"3889","messageId":"3945","endLine":207,"endColumn":46,"fix":"6459"},{"ruleId":"3943","severity":1,"message":"3944","line":221,"column":7,"nodeType":"3961","messageId":"3945","endLine":221,"endColumn":46,"fix":"6460"},{"ruleId":"3947","severity":1,"message":"3944","line":221,"column":7,"nodeType":"3961","messageId":"3945","endLine":221,"endColumn":46,"fix":"6461"},{"ruleId":"3943","severity":1,"message":"3944","line":222,"column":7,"nodeType":"3889","messageId":"3945","endLine":222,"endColumn":39,"fix":"6462"},{"ruleId":"3947","severity":1,"message":"3944","line":222,"column":7,"nodeType":"3889","messageId":"3945","endLine":222,"endColumn":39,"fix":"6463"},{"ruleId":"3943","severity":1,"message":"3944","line":231,"column":7,"nodeType":"3961","messageId":"3945","endLine":231,"endColumn":46,"fix":"6464"},{"ruleId":"3947","severity":1,"message":"3944","line":231,"column":7,"nodeType":"3961","messageId":"3945","endLine":231,"endColumn":46,"fix":"6465"},{"ruleId":"3943","severity":1,"message":"3944","line":232,"column":7,"nodeType":"3889","messageId":"3945","endLine":232,"endColumn":39,"fix":"6466"},{"ruleId":"3947","severity":1,"message":"3944","line":232,"column":7,"nodeType":"3889","messageId":"3945","endLine":232,"endColumn":39,"fix":"6467"},{"ruleId":"4083","severity":1,"message":"4084","line":23,"column":10,"nodeType":"3850","messageId":"4085","endLine":23,"endColumn":24,"fix":"6468"},{"ruleId":"3922","severity":1,"message":"3923","line":9,"column":1,"nodeType":"3831","endLine":9,"endColumn":1,"fix":"6469"},{"ruleId":"3922","severity":1,"message":"3925","line":14,"column":1,"nodeType":"3831","endLine":14,"endColumn":1,"fix":"6470"},{"ruleId":"3815","severity":2,"message":"6471","line":40,"column":1,"nodeType":"6402","messageId":"3818","endLine":55,"endColumn":1},{"ruleId":"3815","severity":2,"message":"6472","line":40,"column":17,"nodeType":"3817","messageId":"3818","endLine":40,"endColumn":32},{"ruleId":"3815","severity":2,"message":"4514","line":40,"column":53,"nodeType":"3817","messageId":"3818","endLine":40,"endColumn":57,"fix":"6473"},{"ruleId":"3815","severity":2,"message":"6474","line":42,"column":8,"nodeType":"3817","messageId":"3818","endLine":42,"endColumn":15,"fix":"6475"},{"ruleId":"3815","severity":2,"message":"6476","line":44,"column":9,"nodeType":"3817","messageId":"3818","endLine":44,"endColumn":25,"fix":"6477"},{"ruleId":"3815","severity":2,"message":"6474","line":46,"column":22,"nodeType":"3817","messageId":"3818","endLine":46,"endColumn":29,"fix":"6478"},{"ruleId":"3815","severity":2,"message":"6479","line":49,"column":11,"nodeType":"3817","messageId":"3818","endLine":49,"endColumn":20,"fix":"6480"},{"ruleId":"4516","severity":2,"message":"4517","line":50,"column":5,"nodeType":"4518","messageId":"4519","endLine":50,"endColumn":29},{"ruleId":"4083","severity":1,"message":"4084","line":12,"column":10,"nodeType":"3850","messageId":"4085","endLine":12,"endColumn":29,"fix":"6481"},{"ruleId":"3943","severity":1,"message":"3944","line":16,"column":5,"nodeType":"3889","messageId":"3945","endLine":16,"endColumn":31,"fix":"6482"},{"ruleId":"3947","severity":1,"message":"3944","line":16,"column":5,"nodeType":"3889","messageId":"3945","endLine":16,"endColumn":31,"fix":"6483"},{"ruleId":"3943","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":32,"fix":"6484"},{"ruleId":"3947","severity":1,"message":"3944","line":22,"column":5,"nodeType":"3889","messageId":"3945","endLine":22,"endColumn":32,"fix":"6485"},{"ruleId":"3943","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":31,"fix":"6486"},{"ruleId":"3947","severity":1,"message":"3944","line":28,"column":5,"nodeType":"3889","messageId":"3945","endLine":28,"endColumn":31,"fix":"6487"},{"ruleId":"3943","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":31,"fix":"6488"},{"ruleId":"3947","severity":1,"message":"3944","line":34,"column":5,"nodeType":"3889","messageId":"3945","endLine":34,"endColumn":31,"fix":"6489"},{"ruleId":"4703","severity":1,"message":"4704","line":38,"column":23,"nodeType":"3817","messageId":"4705","endLine":38,"endColumn":25},{"ruleId":"3943","severity":1,"message":"3944","line":53,"column":5,"nodeType":"3889","messageId":"3945","endLine":53,"endColumn":31,"fix":"6490"},{"ruleId":"3947","severity":1,"message":"3944","line":53,"column":5,"nodeType":"3889","messageId":"3945","endLine":53,"endColumn":31,"fix":"6491"},{"ruleId":"3943","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":31,"fix":"6492"},{"ruleId":"3947","severity":1,"message":"3944","line":64,"column":5,"nodeType":"3889","messageId":"3945","endLine":64,"endColumn":31,"fix":"6493"},{"ruleId":"3943","severity":1,"message":"3944","line":73,"column":5,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":34,"fix":"6494"},{"ruleId":"3947","severity":1,"message":"3944","line":73,"column":5,"nodeType":"3889","messageId":"3945","endLine":73,"endColumn":34,"fix":"6495"},{"ruleId":"3943","severity":1,"message":"3944","line":80,"column":5,"nodeType":"3889","messageId":"3945","endLine":80,"endColumn":37,"fix":"6496"},{"ruleId":"3947","severity":1,"message":"3944","line":80,"column":5,"nodeType":"3889","messageId":"3945","endLine":80,"endColumn":37,"fix":"6497"},{"ruleId":"3943","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":91,"endColumn":30,"fix":"6498"},{"ruleId":"3947","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":91,"endColumn":30,"fix":"6499"},{"ruleId":"6500","severity":2,"message":"6501","line":96,"column":54,"nodeType":"4103","messageId":"6502","endLine":96,"endColumn":64,"fix":"6503"},{"ruleId":"3943","severity":1,"message":"3944","line":97,"column":5,"nodeType":"3889","messageId":"3945","endLine":97,"endColumn":31,"fix":"6504"},{"ruleId":"3947","severity":1,"message":"3944","line":97,"column":5,"nodeType":"3889","messageId":"3945","endLine":97,"endColumn":31,"fix":"6505"},{"ruleId":"4083","severity":1,"message":"4084","line":101,"column":10,"nodeType":"3850","messageId":"4085","endLine":101,"endColumn":34,"fix":"6506"},{"ruleId":"3943","severity":1,"message":"3944","line":105,"column":5,"nodeType":"3889","messageId":"3945","endLine":105,"endColumn":31,"fix":"6507"},{"ruleId":"3947","severity":1,"message":"3944","line":105,"column":5,"nodeType":"3889","messageId":"3945","endLine":105,"endColumn":31,"fix":"6508"},{"ruleId":"3943","severity":1,"message":"3944","line":111,"column":5,"nodeType":"3889","messageId":"3945","endLine":111,"endColumn":32,"fix":"6509"},{"ruleId":"3947","severity":1,"message":"3944","line":111,"column":5,"nodeType":"3889","messageId":"3945","endLine":111,"endColumn":32,"fix":"6510"},{"ruleId":"3943","severity":1,"message":"3944","line":117,"column":5,"nodeType":"3889","messageId":"3945","endLine":117,"endColumn":31,"fix":"6511"},{"ruleId":"3947","severity":1,"message":"3944","line":117,"column":5,"nodeType":"3889","messageId":"3945","endLine":117,"endColumn":31,"fix":"6512"},{"ruleId":"3943","severity":1,"message":"3944","line":126,"column":5,"nodeType":"3889","messageId":"3945","endLine":126,"endColumn":31,"fix":"6513"},{"ruleId":"3947","severity":1,"message":"3944","line":126,"column":5,"nodeType":"3889","messageId":"3945","endLine":126,"endColumn":31,"fix":"6514"},{"ruleId":"3943","severity":1,"message":"3944","line":132,"column":5,"nodeType":"3889","messageId":"3945","endLine":132,"endColumn":31,"fix":"6515"},{"ruleId":"3947","severity":1,"message":"3944","line":132,"column":5,"nodeType":"3889","messageId":"3945","endLine":132,"endColumn":31,"fix":"6516"},{"ruleId":"4703","severity":1,"message":"4704","line":136,"column":23,"nodeType":"3817","messageId":"4705","endLine":136,"endColumn":25},{"ruleId":"3943","severity":1,"message":"3944","line":157,"column":5,"nodeType":"3889","messageId":"3945","endLine":157,"endColumn":31,"fix":"6517"},{"ruleId":"3947","severity":1,"message":"3944","line":157,"column":5,"nodeType":"3889","messageId":"3945","endLine":157,"endColumn":31,"fix":"6518"},{"ruleId":"3943","severity":1,"message":"3944","line":169,"column":5,"nodeType":"3889","messageId":"3945","endLine":169,"endColumn":31,"fix":"6519"},{"ruleId":"3947","severity":1,"message":"3944","line":169,"column":5,"nodeType":"3889","messageId":"3945","endLine":169,"endColumn":31,"fix":"6520"},{"ruleId":"3838","severity":1,"message":"3839","line":173,"column":5,"nodeType":"3840","messageId":"3841","endLine":174,"endColumn":1,"fix":"6521"},{"ruleId":"3943","severity":1,"message":"3944","line":183,"column":5,"nodeType":"3889","messageId":"3945","endLine":183,"endColumn":31,"fix":"6522"},{"ruleId":"3947","severity":1,"message":"3944","line":183,"column":5,"nodeType":"3889","messageId":"3945","endLine":183,"endColumn":31,"fix":"6523"},{"ruleId":"3943","severity":1,"message":"3944","line":188,"column":5,"nodeType":"3889","messageId":"3945","endLine":196,"endColumn":30,"fix":"6524"},{"ruleId":"3947","severity":1,"message":"3944","line":188,"column":5,"nodeType":"3889","messageId":"3945","endLine":196,"endColumn":30,"fix":"6525"},{"ruleId":"3943","severity":1,"message":"3944","line":201,"column":5,"nodeType":"3889","messageId":"3945","endLine":208,"endColumn":30,"fix":"6526"},{"ruleId":"3947","severity":1,"message":"3944","line":201,"column":5,"nodeType":"3889","messageId":"3945","endLine":208,"endColumn":30,"fix":"6527"},{"ruleId":"3943","severity":1,"message":"3944","line":230,"column":5,"nodeType":"3889","messageId":"3945","endLine":237,"endColumn":37,"fix":"6528"},{"ruleId":"3947","severity":1,"message":"3944","line":230,"column":5,"nodeType":"3889","messageId":"3945","endLine":237,"endColumn":37,"fix":"6529"},{"ruleId":"4083","severity":1,"message":"4084","line":13,"column":10,"nodeType":"3850","messageId":"4085","endLine":13,"endColumn":28,"fix":"6530"},{"ruleId":"3943","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":31,"fix":"6531"},{"ruleId":"3947","severity":1,"message":"3944","line":17,"column":5,"nodeType":"3889","messageId":"3945","endLine":17,"endColumn":31,"fix":"6532"},{"ruleId":"3943","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":32,"fix":"6533"},{"ruleId":"3947","severity":1,"message":"3944","line":23,"column":5,"nodeType":"3889","messageId":"3945","endLine":23,"endColumn":32,"fix":"6534"},{"ruleId":"3943","severity":1,"message":"3944","line":29,"column":5,"nodeType":"3889","messageId":"3945","endLine":29,"endColumn":31,"fix":"6535"},{"ruleId":"3947","severity":1,"message":"3944","line":29,"column":5,"nodeType":"3889","messageId":"3945","endLine":29,"endColumn":31,"fix":"6536"},{"ruleId":"3943","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":47,"endColumn":36,"fix":"6537"},{"ruleId":"3947","severity":1,"message":"3944","line":47,"column":5,"nodeType":"3889","messageId":"3945","endLine":47,"endColumn":36,"fix":"6538"},{"ruleId":"3943","severity":1,"message":"3944","line":51,"column":5,"nodeType":"3889","messageId":"3945","endLine":51,"endColumn":34,"fix":"6539"},{"ruleId":"3947","severity":1,"message":"3944","line":51,"column":5,"nodeType":"3889","messageId":"3945","endLine":51,"endColumn":34,"fix":"6540"},{"ruleId":"3943","severity":1,"message":"3944","line":60,"column":5,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":39,"fix":"6541"},{"ruleId":"3947","severity":1,"message":"3944","line":60,"column":5,"nodeType":"3889","messageId":"3945","endLine":60,"endColumn":39,"fix":"6542"},{"ruleId":"3943","severity":1,"message":"3944","line":69,"column":5,"nodeType":"3889","messageId":"3945","endLine":69,"endColumn":31,"fix":"6543"},{"ruleId":"3947","severity":1,"message":"3944","line":69,"column":5,"nodeType":"3889","messageId":"3945","endLine":69,"endColumn":31,"fix":"6544"},{"ruleId":"3943","severity":1,"message":"3944","line":75,"column":5,"nodeType":"3889","messageId":"3945","endLine":75,"endColumn":36,"fix":"6545"},{"ruleId":"3947","severity":1,"message":"3944","line":75,"column":5,"nodeType":"3889","messageId":"3945","endLine":75,"endColumn":36,"fix":"6546"},{"ruleId":"3943","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":37,"fix":"6547"},{"ruleId":"3947","severity":1,"message":"3944","line":79,"column":5,"nodeType":"3889","messageId":"3945","endLine":79,"endColumn":37,"fix":"6548"},{"ruleId":"3943","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":85,"endColumn":28,"fix":"6549"},{"ruleId":"3947","severity":1,"message":"3944","line":85,"column":5,"nodeType":"3889","messageId":"3945","endLine":85,"endColumn":28,"fix":"6550"},{"ruleId":"3943","severity":1,"message":"3944","line":89,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":30,"fix":"6551"},{"ruleId":"3947","severity":1,"message":"3944","line":89,"column":5,"nodeType":"3889","messageId":"3945","endLine":89,"endColumn":30,"fix":"6552"},{"ruleId":"3943","severity":1,"message":"3944","line":98,"column":5,"nodeType":"3889","messageId":"3945","endLine":98,"endColumn":37,"fix":"6553"},{"ruleId":"3947","severity":1,"message":"3944","line":98,"column":5,"nodeType":"3889","messageId":"3945","endLine":98,"endColumn":37,"fix":"6554"},{"ruleId":"3943","severity":1,"message":"3944","line":112,"column":5,"nodeType":"3889","messageId":"3945","endLine":112,"endColumn":38,"fix":"6555"},{"ruleId":"3947","severity":1,"message":"3944","line":112,"column":5,"nodeType":"3889","messageId":"3945","endLine":112,"endColumn":38,"fix":"6556"},{"ruleId":"3943","severity":1,"message":"3944","line":118,"column":5,"nodeType":"3889","messageId":"3945","endLine":118,"endColumn":34,"fix":"6557"},{"ruleId":"3947","severity":1,"message":"3944","line":118,"column":5,"nodeType":"3889","messageId":"3945","endLine":118,"endColumn":34,"fix":"6558"},{"ruleId":"3943","severity":1,"message":"3944","line":122,"column":5,"nodeType":"3889","messageId":"3945","endLine":122,"endColumn":34,"fix":"6559"},{"ruleId":"3947","severity":1,"message":"3944","line":122,"column":5,"nodeType":"3889","messageId":"3945","endLine":122,"endColumn":34,"fix":"6560"},{"ruleId":"4083","severity":1,"message":"4084","line":128,"column":10,"nodeType":"3850","messageId":"4085","endLine":128,"endColumn":33,"fix":"6561"},{"ruleId":"3943","severity":1,"message":"3944","line":135,"column":5,"nodeType":"3889","messageId":"3945","endLine":135,"endColumn":31,"fix":"6562"},{"ruleId":"3947","severity":1,"message":"3944","line":135,"column":5,"nodeType":"3889","messageId":"3945","endLine":135,"endColumn":31,"fix":"6563"},{"ruleId":"3943","severity":1,"message":"3944","line":144,"column":5,"nodeType":"3889","messageId":"3945","endLine":144,"endColumn":32,"fix":"6564"},{"ruleId":"3947","severity":1,"message":"3944","line":144,"column":5,"nodeType":"3889","messageId":"3945","endLine":144,"endColumn":32,"fix":"6565"},{"ruleId":"3943","severity":1,"message":"3944","line":153,"column":5,"nodeType":"3889","messageId":"3945","endLine":153,"endColumn":31,"fix":"6566"},{"ruleId":"3947","severity":1,"message":"3944","line":153,"column":5,"nodeType":"3889","messageId":"3945","endLine":153,"endColumn":31,"fix":"6567"},{"ruleId":"3838","severity":1,"message":"3839","line":169,"column":5,"nodeType":"3840","messageId":"3841","endLine":170,"endColumn":1,"fix":"6568"},{"ruleId":"3943","severity":1,"message":"3944","line":179,"column":5,"nodeType":"3889","messageId":"3945","endLine":179,"endColumn":31,"fix":"6569"},{"ruleId":"3947","severity":1,"message":"3944","line":179,"column":5,"nodeType":"3889","messageId":"3945","endLine":179,"endColumn":31,"fix":"6570"},{"ruleId":"3943","severity":1,"message":"3944","line":192,"column":5,"nodeType":"3889","messageId":"3945","endLine":192,"endColumn":31,"fix":"6571"},{"ruleId":"3947","severity":1,"message":"3944","line":192,"column":5,"nodeType":"3889","messageId":"3945","endLine":192,"endColumn":31,"fix":"6572"},{"ruleId":"3943","severity":1,"message":"3944","line":201,"column":5,"nodeType":"3889","messageId":"3945","endLine":201,"endColumn":39,"fix":"6573"},{"ruleId":"3947","severity":1,"message":"3944","line":201,"column":5,"nodeType":"3889","messageId":"3945","endLine":201,"endColumn":39,"fix":"6574"},{"ruleId":"3943","severity":1,"message":"3944","line":211,"column":5,"nodeType":"3889","messageId":"3945","endLine":211,"endColumn":31,"fix":"6575"},{"ruleId":"3947","severity":1,"message":"3944","line":211,"column":5,"nodeType":"3889","messageId":"3945","endLine":211,"endColumn":31,"fix":"6576"},{"ruleId":"3943","severity":1,"message":"3944","line":220,"column":5,"nodeType":"3889","messageId":"3945","endLine":220,"endColumn":31,"fix":"6577"},{"ruleId":"3947","severity":1,"message":"3944","line":220,"column":5,"nodeType":"3889","messageId":"3945","endLine":220,"endColumn":31,"fix":"6578"},{"ruleId":"3838","severity":1,"message":"3839","line":240,"column":5,"nodeType":"3840","messageId":"3841","endLine":241,"endColumn":1,"fix":"6579"},{"ruleId":"3943","severity":1,"message":"3944","line":250,"column":5,"nodeType":"3889","messageId":"3945","endLine":250,"endColumn":35,"fix":"6580"},{"ruleId":"3947","severity":1,"message":"3944","line":250,"column":5,"nodeType":"3889","messageId":"3945","endLine":250,"endColumn":35,"fix":"6581"},{"ruleId":"3943","severity":1,"message":"3944","line":268,"column":5,"nodeType":"3889","messageId":"3945","endLine":268,"endColumn":39,"fix":"6582"},{"ruleId":"3947","severity":1,"message":"3944","line":268,"column":5,"nodeType":"3889","messageId":"3945","endLine":268,"endColumn":39,"fix":"6583"},{"ruleId":"3838","severity":1,"message":"3839","line":274,"column":5,"nodeType":"3840","messageId":"3841","endLine":275,"endColumn":1,"fix":"6584"},{"ruleId":"3815","severity":2,"message":"6585","line":124,"column":7,"nodeType":"3817","messageId":"3818","endLine":124,"endColumn":13,"fix":"6586"},{"ruleId":"6587","severity":2,"message":"6588","line":145,"column":29,"nodeType":"3826","messageId":"6589","endLine":145,"endColumn":84,"suggestions":"6590"},{"ruleId":"3815","severity":2,"message":"3820","line":47,"column":15,"nodeType":"3817","messageId":"3818","endLine":47,"endColumn":18,"fix":"6591"},{"ruleId":"3815","severity":2,"message":"4514","line":55,"column":24,"nodeType":"3817","messageId":"3818","endLine":55,"endColumn":28,"fix":"6592"},{"ruleId":"6593","severity":2,"message":"6594","line":86,"column":11,"nodeType":"3826","messageId":"6595","endLine":86,"endColumn":54},{"ruleId":"6593","severity":2,"message":"6594","line":96,"column":11,"nodeType":"3826","messageId":"6595","endLine":96,"endColumn":26},{"ruleId":"6596","severity":2,"message":"6597","line":1,"column":1,"nodeType":null,"messageId":"6598","endLine":1,"endColumn":47,"fix":"6599"},{"ruleId":"6593","severity":2,"message":"6594","line":56,"column":11,"nodeType":"3826","messageId":"6595","endLine":56,"endColumn":26},{"ruleId":"6593","severity":2,"message":"6594","line":61,"column":9,"nodeType":"3826","messageId":"6595","endLine":61,"endColumn":24},{"ruleId":"6593","severity":2,"message":"6594","line":72,"column":3,"nodeType":"3826","messageId":"6595","endLine":72,"endColumn":18},{"ruleId":"5366","severity":2,"message":"6600","line":38,"column":17,"nodeType":"3826","messageId":"5783","endLine":38,"endColumn":32},{"ruleId":"4061","severity":2,"message":"4062","line":38,"column":17,"nodeType":"3861","messageId":"4063","endLine":38,"endColumn":30},{"ruleId":"3843","severity":2,"message":"6601","line":38,"column":22,"nodeType":"3817","messageId":"3845","endLine":38,"endColumn":30},{"ruleId":"3910","severity":2,"message":"6602","line":39,"column":28,"nodeType":"3817","messageId":"3912","endLine":39,"endColumn":32},{"ruleId":"4061","severity":2,"message":"4062","line":42,"column":11,"nodeType":"3861","messageId":"4063","endLine":42,"endColumn":35},{"ruleId":"4061","severity":2,"message":"4062","line":42,"column":11,"nodeType":"3861","messageId":"4063","endLine":42,"endColumn":24},{"ruleId":"3843","severity":2,"message":"6601","line":42,"column":16,"nodeType":"3817","messageId":"3845","endLine":42,"endColumn":24},{"ruleId":"3843","severity":2,"message":"6603","line":42,"column":27,"nodeType":"3817","messageId":"3845","endLine":42,"endColumn":35},{"ruleId":"3910","severity":2,"message":"6602","line":49,"column":28,"nodeType":"3817","messageId":"3912","endLine":49,"endColumn":32},{"ruleId":"6593","severity":2,"message":"6594","line":67,"column":3,"nodeType":"3826","messageId":"6595","endLine":67,"endColumn":18},{"ruleId":"3815","severity":2,"message":"6604","line":22,"column":13,"nodeType":"3817","messageId":"3818","endLine":22,"endColumn":24,"fix":"6605"},{"ruleId":"4015","severity":2,"message":"4016","line":26,"column":17,"nodeType":"4017","messageId":"4018","endLine":26,"endColumn":62},{"ruleId":"4061","severity":2,"message":"4062","line":26,"column":27,"nodeType":"3861","messageId":"4063","endLine":26,"endColumn":52},{"ruleId":"6606","severity":2,"message":"6607","line":26,"column":27,"nodeType":"3817","messageId":"6608","endLine":26,"endColumn":34},{"ruleId":"3843","severity":2,"message":"6609","line":26,"column":41,"nodeType":"3817","messageId":"3845","endLine":26,"endColumn":52},{"ruleId":"4061","severity":2,"message":"4062","line":27,"column":15,"nodeType":"3861","messageId":"4063","endLine":27,"endColumn":27},{"ruleId":"3843","severity":2,"message":"6610","line":27,"column":23,"nodeType":"3817","messageId":"3845","endLine":27,"endColumn":27},{"ruleId":"6593","severity":2,"message":"6594","line":47,"column":3,"nodeType":"3826","messageId":"6595","endLine":47,"endColumn":18},{"ruleId":"6593","severity":2,"message":"6594","line":19,"column":5,"nodeType":"3826","messageId":"6595","endLine":19,"endColumn":20},{"ruleId":"3815","severity":2,"message":"6611","line":25,"column":10,"nodeType":"3817","messageId":"3818","endLine":25,"endColumn":13,"fix":"6612"},{"ruleId":"3815","severity":2,"message":"6611","line":26,"column":13,"nodeType":"3817","messageId":"3818","endLine":26,"endColumn":16,"fix":"6613"},{"ruleId":"3815","severity":2,"message":"6611","line":36,"column":14,"nodeType":"3817","messageId":"3818","endLine":36,"endColumn":17,"fix":"6614"},{"ruleId":"6593","severity":2,"message":"6594","line":59,"column":3,"nodeType":"3826","messageId":"6595","endLine":59,"endColumn":18},{"ruleId":"4083","severity":1,"message":"4084","line":12,"column":10,"nodeType":"3850","messageId":"4085","endLine":12,"endColumn":24,"fix":"6615"},{"ruleId":"3943","severity":1,"message":"3944","line":16,"column":5,"nodeType":"3889","messageId":"3945","endLine":16,"endColumn":39,"fix":"6616"},{"ruleId":"3947","severity":1,"message":"3944","line":16,"column":5,"nodeType":"3889","messageId":"3945","endLine":16,"endColumn":39,"fix":"6617"},{"ruleId":"3943","severity":1,"message":"3944","line":32,"column":5,"nodeType":"3889","messageId":"3945","endLine":32,"endColumn":62,"fix":"6618"},{"ruleId":"3947","severity":1,"message":"3944","line":32,"column":5,"nodeType":"3889","messageId":"3945","endLine":32,"endColumn":62,"fix":"6619"},{"ruleId":"3943","severity":1,"message":"3944","line":36,"column":5,"nodeType":"3889","messageId":"3945","endLine":36,"endColumn":70,"fix":"6620"},{"ruleId":"3947","severity":1,"message":"3944","line":36,"column":5,"nodeType":"3889","messageId":"3945","endLine":36,"endColumn":70,"fix":"6621"},{"ruleId":"3933","severity":1,"message":"3934","line":39,"column":49,"nodeType":"3817","messageId":"3935","endLine":39,"endColumn":53,"fix":"6622"},{"ruleId":"3937","severity":2,"message":"3938","line":40,"column":12,"nodeType":"3826","messageId":"3939","endLine":40,"endColumn":57},{"ruleId":"3933","severity":1,"message":"3940","line":40,"column":59,"nodeType":"3817","messageId":"3941","endLine":40,"endColumn":63,"fix":"6623"},{"ruleId":"3943","severity":1,"message":"3944","line":57,"column":7,"nodeType":"3889","messageId":"3945","endLine":57,"endColumn":41,"fix":"6624"},{"ruleId":"3947","severity":1,"message":"3944","line":57,"column":7,"nodeType":"3889","messageId":"3945","endLine":57,"endColumn":41,"fix":"6625"},{"ruleId":"3943","severity":1,"message":"3944","line":69,"column":7,"nodeType":"3889","messageId":"3945","endLine":69,"endColumn":41,"fix":"6626"},{"ruleId":"3947","severity":1,"message":"3944","line":69,"column":7,"nodeType":"3889","messageId":"3945","endLine":69,"endColumn":41,"fix":"6627"},{"ruleId":"3943","severity":1,"message":"3944","line":90,"column":9,"nodeType":"3889","messageId":"3945","endLine":90,"endColumn":67,"fix":"6628"},{"ruleId":"3947","severity":1,"message":"3944","line":90,"column":9,"nodeType":"3889","messageId":"3945","endLine":90,"endColumn":67,"fix":"6629"},{"ruleId":"3943","severity":1,"message":"3944","line":113,"column":9,"nodeType":"3889","messageId":"3945","endLine":113,"endColumn":67,"fix":"6630"},{"ruleId":"3947","severity":1,"message":"3944","line":113,"column":9,"nodeType":"3889","messageId":"3945","endLine":113,"endColumn":67,"fix":"6631"},{"ruleId":"3943","severity":1,"message":"3944","line":131,"column":7,"nodeType":"3889","messageId":"3945","endLine":131,"endColumn":41,"fix":"6632"},{"ruleId":"3947","severity":1,"message":"3944","line":131,"column":7,"nodeType":"3889","messageId":"3945","endLine":131,"endColumn":41,"fix":"6633"},{"ruleId":"3943","severity":1,"message":"3944","line":137,"column":7,"nodeType":"3889","messageId":"3945","endLine":137,"endColumn":61,"fix":"6634"},{"ruleId":"3947","severity":1,"message":"3944","line":137,"column":7,"nodeType":"3889","messageId":"3945","endLine":137,"endColumn":61,"fix":"6635"},{"ruleId":"3943","severity":1,"message":"3944","line":152,"column":7,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":41,"fix":"6636"},{"ruleId":"3947","severity":1,"message":"3944","line":152,"column":7,"nodeType":"3889","messageId":"3945","endLine":152,"endColumn":41,"fix":"6637"},{"ruleId":"3943","severity":1,"message":"3944","line":171,"column":7,"nodeType":"3889","messageId":"3945","endLine":171,"endColumn":41,"fix":"6638"},{"ruleId":"3947","severity":1,"message":"3944","line":171,"column":7,"nodeType":"3889","messageId":"3945","endLine":171,"endColumn":41,"fix":"6639"},{"ruleId":"3943","severity":1,"message":"3944","line":185,"column":7,"nodeType":"3889","messageId":"3945","endLine":185,"endColumn":41,"fix":"6640"},{"ruleId":"3947","severity":1,"message":"3944","line":185,"column":7,"nodeType":"3889","messageId":"3945","endLine":185,"endColumn":41,"fix":"6641"},{"ruleId":"3843","severity":2,"message":"4215","line":188,"column":26,"nodeType":"3817","messageId":"3845","endLine":188,"endColumn":30},{"ruleId":"3943","severity":1,"message":"3944","line":197,"column":7,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":41,"fix":"6642"},{"ruleId":"3947","severity":1,"message":"3944","line":197,"column":7,"nodeType":"3889","messageId":"3945","endLine":197,"endColumn":41,"fix":"6643"},{"ruleId":"3843","severity":2,"message":"4215","line":200,"column":26,"nodeType":"3817","messageId":"3845","endLine":200,"endColumn":30},{"ruleId":"3943","severity":1,"message":"3944","line":214,"column":5,"nodeType":"3889","messageId":"3945","endLine":214,"endColumn":68,"fix":"6644"},{"ruleId":"3947","severity":1,"message":"3944","line":214,"column":5,"nodeType":"3889","messageId":"3945","endLine":214,"endColumn":68,"fix":"6645"},{"ruleId":"3943","severity":1,"message":"3944","line":219,"column":5,"nodeType":"3889","messageId":"3945","endLine":219,"endColumn":51,"fix":"6646"},{"ruleId":"3947","severity":1,"message":"3944","line":219,"column":5,"nodeType":"3889","messageId":"3945","endLine":219,"endColumn":51,"fix":"6647"},{"ruleId":"3943","severity":1,"message":"3944","line":224,"column":5,"nodeType":"3889","messageId":"3945","endLine":224,"endColumn":47,"fix":"6648"},{"ruleId":"3947","severity":1,"message":"3944","line":224,"column":5,"nodeType":"3889","messageId":"3945","endLine":224,"endColumn":47,"fix":"6649"},{"ruleId":"3943","severity":1,"message":"3944","line":239,"column":7,"nodeType":"3889","messageId":"3945","endLine":239,"endColumn":41,"fix":"6650"},{"ruleId":"3947","severity":1,"message":"3944","line":239,"column":7,"nodeType":"3889","messageId":"3945","endLine":239,"endColumn":41,"fix":"6651"},{"ruleId":"3943","severity":1,"message":"3944","line":260,"column":9,"nodeType":"3889","messageId":"3945","endLine":260,"endColumn":67,"fix":"6652"},{"ruleId":"3947","severity":1,"message":"3944","line":260,"column":9,"nodeType":"3889","messageId":"3945","endLine":260,"endColumn":67,"fix":"6653"},{"ruleId":"3824","severity":2,"message":"3825","line":7,"column":19,"nodeType":"3826","messageId":"3827","endLine":7,"endColumn":58,"fix":"6654"},{"ruleId":"3824","severity":2,"message":"3825","line":7,"column":19,"nodeType":"3826","messageId":"3827","endLine":7,"endColumn":58,"fix":"6655"},"unicorn/prevent-abbreviations","The variable `withCtx` should be named `withContext`. A more descriptive name will do too.","Identifier","replace",{"range":"6656","text":"6657"},"The variable `ctx` should be named `context`. A more descriptive name will do too.",{"range":"6658","text":"6659"},{"range":"6660","text":"6657"},{"range":"6661","text":"6659"},"unicorn/prefer-import-meta-properties","Do not construct dirname.","CallExpression","error/calculate-dirname",{"range":"6662","text":"6663"},"jsdoc/require-param","Missing JSDoc @param \"configDir\" declaration.","Block",{"range":"6664","text":"6665"},"jsdoc/require-returns","Missing JSDoc @returns declaration.","jsdoc/check-alignment","Expected JSDoc block to be aligned.",{"range":"6666","text":"6667"},"jsdoc/require-jsdoc","Missing JSDoc comment.","FunctionDeclaration","missingJsDoc",{"range":"6668","text":"6669"},"@typescript-eslint/no-unsafe-member-access","Unsafe member access .code on an `any` value.","unsafeMemberExpression",{"range":"6670","text":"6671"},{"range":"6672","text":"6663"},"n/no-missing-import","Can't resolve '@figma/plugin-typings/plugin-api-standalone' in 'C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\src\\backend'","Literal","notFound","@typescript-eslint/restrict-template-expressions","Invalid type \"never\" of template literal expression.","invalidType","@typescript-eslint/no-base-to-string","'value' may use Object's default stringification format ('[object Object]') when stringified.","baseToString","Invalid type \"VariableValue\" of template literal expression.","unicorn/consistent-destructuring","Use destructured variables over properties.","MemberExpression","consistentDestructuring",["6673"],["6674"],["6675"],["6676"],["6677"],"prefer-const","'styles' is never reassigned. Use 'const' instead.","useConst",{"range":"6678","text":"6679"},"'paintStyles' is never reassigned. Use 'const' instead.",{"range":"6680","text":"6681"},"'textStyles' is never reassigned. Use 'const' instead.",{"range":"6682","text":"6683"},"'effectStyles' is never reassigned. Use 'const' instead.",{"range":"6684","text":"6685"},"'gridStyles' is never reassigned. Use 'const' instead.",{"range":"6686","text":"6687"},"The variable `colorStr` should be named `colorString`. A more descriptive name will do too.",{"range":"6688","text":"6689"},"The variable `handleSettingVarMessage` should be named `handleSettingVariableMessage`. A more descriptive name will do too.",{"range":"6690","text":"6691"},"The variable `cssVar` should be named `cssVariable`. A more descriptive name will do too.",{"range":"6692","text":"6693"},"Unsafe member access .cssVar on an `any` value.","@typescript-eslint/no-floating-promises","Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","ExpressionStatement","floatingVoid",["6694","6695"],"The variable `testCssVar` should be named `testCssVariable`. A more descriptive name will do too.",{"range":"6696","text":"6697"},{"range":"6698","text":"6699"},"unicorn/prefer-global-this","Prefer `globalThis` over `window`.","prefer-global-this/error",{"range":"6700","text":"6701"},{"range":"6702","text":"6701"},{"range":"6703","text":"6701"},"Unused eslint-disable directive (no problems were reported from 'no-else-return').",{"range":"6704","text":"6705"},{"range":"6706","text":"6701"},{"range":"6707","text":"6701"},"The variable `processCssVarRuleStyle` should be named `processCssVariableRuleStyle`. A more descriptive name will do too.",{"range":"6708","text":"6709"},{"range":"6710","text":"6711"},"The variable `i` should be named `index`. A more descriptive name will do too.",{"range":"6712","text":"6713"},"@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `string`.","unsafeArgument","Unsafe member access .css on an `any` value.",{"range":"6714","text":"6715"},"Unsafe argument of type `any` assigned to a parameter of type `object`.","@typescript-eslint/no-misused-promises","Promise returned in function argument where a void return was expected.","voidReturnArgument","Parsing error: C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.backend.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject.","Parsing error: C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.frontend.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject.","Parsing error: C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\figma-plugin\\css-variables\\vite.config.iframe.ts was not found by the project service. Consider either including it in the tsconfig.json or including it in allowDefaultProject.","jsdoc/tag-lines","Expected only 0 line after block description",{"range":"6716","text":"6717"},"Expected no lines between tags",{"range":"6718","text":"6719"},"jsdoc/require-yields","Missing JSDoc @yields declaration.",{"range":"6720","text":"6721"},{"range":"6722","text":"6723"},{"range":"6724","text":"6725"},{"range":"6726","text":"6727"},"vitest/prefer-to-be","Use `toBeNull()` instead","useToBeNull",{"range":"6728","text":"6729"},"@typescript-eslint/no-confusing-void-expression","Placing a void expression inside another expression is forbidden. Move it to its own statement instead.","invalidVoidExpr","Use `toBeUndefined()` instead","useToBeUndefined",{"range":"6730","text":"6731"},"vitest/padding-around-all","expect blank line before this statement","missingPadding",{"range":"6732","text":"6733"},"vitest/padding-around-expect-groups",{"range":"6734","text":"6733"},{"range":"6735","text":"6733"},{"range":"6736","text":"6733"},{"range":"6737","text":"6733"},{"range":"6738","text":"6733"},{"range":"6739","text":"6729"},{"range":"6740","text":"6733"},{"range":"6741","text":"6733"},{"range":"6742","text":"6733"},{"range":"6743","text":"6733"},{"range":"6744","text":"6729"},{"range":"6745","text":"6733"},{"range":"6746","text":"6733"},"VariableDeclaration",{"range":"6747","text":"6733"},{"range":"6748","text":"6733"},{"range":"6749","text":"6733"},{"range":"6750","text":"6733"},{"range":"6751","text":"6733"},{"range":"6752","text":"6733"},{"range":"6753","text":"6733"},{"range":"6754","text":"6733"},{"range":"6755","text":"6733"},{"range":"6756","text":"6733"},{"range":"6757","text":"6733"},{"range":"6758","text":"6733"},{"range":"6759","text":"6733"},{"range":"6760","text":"6733"},{"range":"6761","text":"6733"},{"range":"6762","text":"6733"},"vitest/no-done-callback","Return a promise instead of relying on callback parameter","ObjectPattern","noDoneCallback",{"range":"6763","text":"6733"},{"range":"6764","text":"6733"},{"range":"6765","text":"6766"},{"range":"6767","text":"6768"},"The variable `obj` should be named `object`. A more descriptive name will do too.",{"range":"6769","text":"6770"},"The variable `objType` should be named `objectType`. A more descriptive name will do too.",{"range":"6771","text":"6772"},"The variable `primitiveObjType` should be named `primitiveObjectType`. A more descriptive name will do too.",{"range":"6773","text":"6774"},"The variable `boolObj` should be named `boolObject`. A more descriptive name will do too.",{"range":"6775","text":"6776"},"The variable `numberObj` should be named `numberObject`. A more descriptive name will do too.",{"range":"6777","text":"6778"},"The variable `stringObj` should be named `stringObject`. A more descriptive name will do too.",{"range":"6779","text":"6780"},"The variable `dateObj` should be named `dateObject`. A more descriptive name will do too.",{"range":"6781","text":"6782"},"The variable `setObj` should be named `setObject`. A more descriptive name will do too.",{"range":"6783","text":"6784"},"unicorn/no-array-callback-reference","Do not pass function `toExport` directly to `.map(…)`.","error-with-name",["6785","6786","6787"],"The variable `mapObj` should be named `mapObject`. A more descriptive name will do too.",{"range":"6788","text":"6789"},"The variable `arrayObj` should be named `arrayObject`. A more descriptive name will do too.",{"range":"6790","text":"6791"},{"range":"6792","text":"6793"},"The variable `objectObj` should be named `objectObject`. A more descriptive name will do too.",{"range":"6794","text":"6795"},{"range":"6796","text":"6797"},{"range":"6798","text":"6799"},"@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an `any` value.","VariableDeclarator","anyAssignment","Unsafe member access .constructor on an `any` value.",{"range":"6800","text":"6801"},"The variable `objStringified` should be named `objectStringified`. A more descriptive name will do too.",{"range":"6802","text":"6803"},{"range":"6804","text":"6805"},{"range":"6806","text":"6807"},{"range":"6808","text":"6809"},{"range":"6810","text":"6811"},{"range":"6812","text":"6733"},{"range":"6813","text":"6733"},{"range":"6814","text":"6733"},{"range":"6815","text":"6733"},{"range":"6816","text":"6817"},{"range":"6818","text":"6819"},{"range":"6820","text":"6821"},{"range":"6822","text":"6823"},{"range":"6824","text":"6825"},{"range":"6826","text":"6827"},{"range":"6828","text":"6829"},{"range":"6830","text":"6831"},{"range":"6832","text":"6833"},{"range":"6834","text":"6835"},{"range":"6836","text":"6837"},{"range":"6838","text":"6839"},{"range":"6840","text":"6841"},{"range":"6842","text":"6843"},{"range":"6844","text":"6845"},{"range":"6846","text":"6847"},{"range":"6848","text":"6849"},{"range":"6850","text":"6851"},{"range":"6852","text":"6853"},{"range":"6854","text":"6855"},{"range":"6856","text":"6857"},{"range":"6858","text":"6859"},{"range":"6860","text":"6861"},{"range":"6862","text":"6863"},{"range":"6864","text":"6865"},{"range":"6866","text":"6867"},{"range":"6868","text":"6869"},{"range":"6870","text":"6871"},{"range":"6872","text":"6873"},{"range":"6874","text":"6875"},"@typescript-eslint/no-unsafe-call","Unsafe call of a(n) `any` typed value.","unsafeCall","Unsafe member access .valueOf on an `any` value.","@typescript-eslint/no-unnecessary-condition","Unnecessary optional chain on a non-nullish value.","neverOptionalChain",["6876"],["6877"],{"range":"6878","text":"6879"},{"range":"6880","text":"6881"},{"range":"6882","text":"6733"},{"range":"6883","text":"6733"},{"range":"6884","text":"6885"},{"range":"6886","text":"6733"},{"range":"6887","text":"6733"},{"range":"6888","text":"6885"},{"range":"6889","text":"6885"},{"range":"6890","text":"6885"},{"range":"6891","text":"6885"},{"range":"6892","text":"6733"},{"range":"6893","text":"6733"},"vitest/prefer-describe-function-title","Enforce using a function over an equivalent string","preferFunction",{"range":"6894","text":"6895"},{"range":"6896","text":"6885"},{"range":"6897","text":"6885"},{"range":"6898","text":"6885"},{"range":"6899","text":"6900"},{"range":"6901","text":"6902"},{"range":"6903","text":"6904"},"jsdoc/multiline-blocks","Should have no text on the \"0th\" line (after the `/**`).",{"range":"6905","text":"6906"},{"range":"6907","text":"6908"},{"range":"6909","text":"6910"},"Can't resolve 'type-fest' in 'C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src'",{"range":"6911","text":"6912"},{"range":"6913","text":"6914"},{"range":"6915","text":"6914"},"Unnecessary conditional, the types have no overlap.","BinaryExpression","noOverlapBooleanExpression","Please rename the variable `e`. Suggested names are: `error`, `event`. A more descriptive name will do too.","suggestion","Invalid type \"Awaited<T_callbackReturn>\" of template literal expression.",{"range":"6916","text":"6917"},{"range":"6918","text":"6919"},{"range":"6920","text":"6921"},{"range":"6922","text":"6923"},{"range":"6924","text":"6925"},{"range":"6926","text":"6927"},{"range":"6928","text":"6929"},{"range":"6930","text":"6931"},{"range":"6932","text":"6933"},{"range":"6934","text":"6935"},{"range":"6936","text":"6937"},{"range":"6938","text":"6939"},{"range":"6940","text":"6941"},{"range":"6942","text":"6943"},{"range":"6944","text":"6945"},{"range":"6946","text":"6947"},{"range":"6948","text":"6949"},{"range":"6950","text":"6951"},{"range":"6952","text":"6953"},{"range":"6954","text":"6955"},{"range":"6956","text":"6957"},{"range":"6958","text":"6959"},{"range":"6960","text":"6961"},{"range":"6962","text":"6963"},{"range":"6964","text":"6965"},{"range":"6966","text":"6967"},{"range":"6968","text":"6969"},{"range":"6970","text":"6971"},{"range":"6972","text":"6973"},{"range":"6974","text":"6975"},{"range":"6976","text":"6977"},{"range":"6978","text":"6979"},{"range":"6980","text":"6981"},{"range":"6982","text":"6983"},{"range":"6984","text":"6985"},{"range":"6986","text":"6987"},{"range":"6988","text":"6989"},{"range":"6990","text":"6991"},{"range":"6992","text":"6993"},{"range":"6994","text":"6995"},{"range":"6996","text":"6997"},{"range":"6998","text":"6999"},{"range":"7000","text":"7001"},{"range":"7002","text":"7003"},{"range":"7004","text":"7005"},{"range":"7006","text":"7007"},{"range":"7008","text":"7009"},{"range":"7010","text":"7011"},{"range":"7012","text":"7013"},{"range":"7014","text":"7015"},{"range":"7016","text":"7017"},{"range":"7018","text":"7019"},{"range":"7020","text":"7021"},{"range":"7022","text":"7023"},{"range":"7024","text":"7025"},{"range":"7026","text":"7027"},{"range":"7028","text":"7029"},{"range":"7030","text":"7031"},{"range":"7032","text":"7033"},{"range":"7034","text":"7035"},{"range":"7036","text":"7037"},{"range":"7038","text":"7039"},{"range":"7040","text":"7041"},{"range":"7042","text":"7043"},{"range":"7044","text":"7045"},{"range":"7046","text":"7047"},{"range":"7048","text":"7049"},{"range":"7050","text":"7051"},"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","invalidVoidExprArrow",{"range":"7052","text":"7053"},{"range":"7054","text":"7055"},{"range":"7056","text":"7057"},{"range":"7058","text":"7059"},{"range":"7060","text":"7061"},{"range":"7062","text":"7063"},{"range":"7064","text":"7065"},{"range":"7066","text":"7067"},{"range":"7068","text":"7069"},{"range":"7070","text":"7071"},{"range":"7072","text":"7073"},{"range":"7074","text":"7075"},{"range":"7076","text":"7077"},{"range":"7078","text":"7079"},{"range":"7080","text":"7081"},{"range":"7082","text":"7083"},{"range":"7084","text":"7085"},{"range":"7086","text":"7087"},{"range":"7088","text":"7089"},{"range":"7090","text":"7091"},{"range":"7092","text":"7093"},{"range":"7094","text":"7095"},{"range":"7096","text":"7097"},{"range":"7098","text":"7099"},{"range":"7100","text":"7101"},{"range":"7102","text":"7103"},{"range":"7104","text":"7105"},{"range":"7106","text":"7107"},{"range":"7108","text":"7109"},{"range":"7110","text":"7111"},{"range":"7112","text":"7113"},{"range":"7114","text":"7115"},{"range":"7116","text":"7117"},{"range":"7118","text":"7119"},{"range":"7120","text":"7121"},{"range":"7122","text":"7123"},"Invalid type \"Error | \"RangeError\" | \"ReferenceError\" | \"TypeError\" | \"URIError\" | (string & {}) | (() => Promisable<Error>)\" of template literal expression.","Unsafe member access .name on an `any` value.","Unsafe member access .message on an `any` value.","Invalid type \"() => any\" of template literal expression.",{"range":"7124","text":"7125"},{"range":"7126","text":"7127"},"Invalid type \"Error | \"RangeError\" | \"ReferenceError\" | \"TypeError\" | \"URIError\" | (string & {}) | (() => Error)\" of template literal expression.",{"range":"7128","text":"7129"},{"range":"7130","text":"7131"},{"range":"7132","text":"7133"},{"range":"7134","text":"7135"},{"range":"7136","text":"7137"},{"range":"7138","text":"7139"},{"range":"7140","text":"7141"},{"range":"7142","text":"7143"},{"range":"7144","text":"7145"},{"range":"7146","text":"7147"},{"range":"7148","text":"7149"},{"range":"7150","text":"7151"},{"range":"7152","text":"7153"},{"range":"7154","text":"7155"},{"range":"7156","text":"7157"},{"range":"7158","text":"7159"},{"range":"7160","text":"7161"},{"range":"7162","text":"7163"},{"range":"7164","text":"7165"},{"range":"7166","text":"7167"},{"range":"7168","text":"7169"},{"range":"7170","text":"6733"},{"range":"7171","text":"6733"},"@typescript-eslint/only-throw-error","Expected an error object to be thrown.","object",{"range":"7172","text":"7173"},{"range":"7174","text":"6733"},{"range":"7175","text":"6733"},{"range":"7176","text":"6733"},{"range":"7177","text":"6733"},"Unsafe argument of type `any` assigned to a parameter of type `Error | \"RangeError\" | \"ReferenceError\" | \"TypeError\" | \"URIError\" | (string & {}) | (() => Error)`.","TSAsExpression",{"range":"7178","text":"7179"},{"range":"7180","text":"7181"},"Can't resolve 'type-fest/source/internal' in 'C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\module\\es\\src'",{"range":"7182","text":"7183"},{"range":"7184","text":"7185"},{"range":"7186","text":"7187"},{"range":"7188","text":"7189"},{"range":"7190","text":"7191"},{"range":"7192","text":"7193"},{"range":"7194","text":"7195"},{"range":"7196","text":"7197"},{"range":"7198","text":"7199"},{"range":"7200","text":"7201"},{"range":"7202","text":"7203"},{"range":"7204","text":"7205"},"The variable `notObjOrThrow` should be named `notObjectOrThrow`. A more descriptive name will do too.","The variable `potentiallyObj` should be named `potentiallyObject`. A more descriptive name will do too.",{"range":"7206","text":"7207"},{"range":"7208","text":"7209"},{"range":"7210","text":"7211"},{"range":"7212","text":"7213"},{"range":"7214","text":"7215"},{"range":"7216","text":"7217"},{"range":"7218","text":"7219"},{"range":"7220","text":"7221"},{"range":"7222","text":"7223"},{"range":"7224","text":"7225"},{"range":"7226","text":"7227"},{"range":"7228","text":"7229"},{"range":"7230","text":"7231"},{"range":"7232","text":"7233"},{"range":"7234","text":"6733"},{"range":"7235","text":"6733"},{"range":"7236","text":"6733"},{"range":"7237","text":"6733"},{"range":"7238","text":"7239"},{"range":"7240","text":"6729"},{"range":"7241","text":"7242"},{"range":"7243","text":"6731"},{"range":"7244","text":"7245"},{"range":"7246","text":"7247"},{"range":"7248","text":"6729"},{"range":"7249","text":"6731"},{"range":"7250","text":"7251"},{"range":"7252","text":"6729"},{"range":"7253","text":"6731"},{"range":"7254","text":"7255"},{"range":"7256","text":"6729"},{"range":"7257","text":"6731"},{"range":"7258","text":"7259"},{"range":"7260","text":"6729"},{"range":"7261","text":"6731"},{"range":"7262","text":"7263"},{"range":"7264","text":"7265"},{"range":"7266","text":"6729"},{"range":"7267","text":"6731"},{"range":"7268","text":"7269"},{"range":"7270","text":"6729"},{"range":"7271","text":"6731"},{"range":"7272","text":"7273"},{"range":"7274","text":"6733"},{"range":"7275","text":"6733"},{"range":"7276","text":"6733"},{"range":"7277","text":"6733"},{"range":"7278","text":"6733"},{"range":"7279","text":"6733"},{"range":"7280","text":"7281"},{"range":"7282","text":"7283"},{"range":"7284","text":"6733"},{"range":"7285","text":"6733"},"TryStatement",{"range":"7286","text":"6733"},{"range":"7287","text":"6733"},{"range":"7288","text":"6733"},{"range":"7289","text":"6733"},{"range":"7290","text":"6733"},{"range":"7291","text":"6733"},{"range":"7292","text":"6733"},{"range":"7293","text":"6733"},{"range":"7294","text":"6733"},{"range":"7295","text":"6733"},"Unsafe member access .cause on an `any` value.",{"range":"7296","text":"6733"},{"range":"7297","text":"6733"},{"range":"7298","text":"6733"},{"range":"7299","text":"6733"},{"range":"7300","text":"6733"},{"range":"7301","text":"6733"},{"range":"7302","text":"6733"},{"range":"7303","text":"6733"},{"range":"7304","text":"6733"},{"range":"7305","text":"6733"},{"range":"7306","text":"7307"},{"range":"7308","text":"7309"},{"range":"7310","text":"7311"},{"range":"7312","text":"7313"},{"range":"7314","text":"6914"},{"range":"7315","text":"7316"},{"range":"7317","text":"7318"},{"range":"7319","text":"7320"},{"range":"7321","text":"6914"},{"range":"7322","text":"7323"},{"range":"7324","text":"7325"},{"range":"7326","text":"7327"},{"range":"7328","text":"6914"},"@typescript-eslint/require-await","Async generator function 'gen0to999Async' has no 'await' expression.","missingAwait",["7329"],{"range":"7330","text":"7316"},{"range":"7331","text":"7332"},{"range":"7333","text":"7334"},{"range":"7335","text":"6914"},"Async generator function 'gen0to999errorAsync' has no 'await' expression.",["7336"],{"range":"7337","text":"7323"},{"range":"7338","text":"7339"},{"range":"7340","text":"7341"},{"range":"7342","text":"6914"},{"range":"7343","text":"7344"},{"range":"7345","text":"7346"},{"range":"7347","text":"7348"},{"range":"7349","text":"6914"},{"range":"7350","text":"7351"},{"range":"7352","text":"7353"},{"range":"7354","text":"7355"},{"range":"7356","text":"7357"},{"range":"7358","text":"7359"},{"range":"7360","text":"7361"},{"range":"7362","text":"7363"},{"range":"7364","text":"7365"},{"range":"7366","text":"7367"},{"range":"7368","text":"7369"},{"range":"7370","text":"7371"},{"range":"7372","text":"7373"},{"range":"7374","text":"7375"},{"range":"7376","text":"7369"},{"range":"7377","text":"6914"},{"range":"7378","text":"6914"},{"range":"7379","text":"6914"},{"range":"7380","text":"6914"},{"range":"7381","text":"6733"},{"range":"7382","text":"6733"},{"range":"7383","text":"6733"},{"range":"7384","text":"6733"},{"range":"7385","text":"6733"},{"range":"7386","text":"6733"},{"range":"7387","text":"6733"},{"range":"7388","text":"6733"},{"range":"7389","text":"6914"},{"range":"7390","text":"6914"},{"range":"7391","text":"6914"},{"range":"7392","text":"6914"},{"range":"7393","text":"6914"},{"range":"7394","text":"6914"},{"range":"7395","text":"6914"},{"range":"7396","text":"6914"},{"range":"7397","text":"6914"},{"range":"7398","text":"6914"},"The variable `src` should be named `source`. A more descriptive name will do too.",{"range":"7399","text":"7400"},"The variable `dest` should be named `destination`. A more descriptive name will do too.",{"range":"7401","text":"7402"},"The variable `absSrc` should be named `absSource`. A more descriptive name will do too.",{"range":"7403","text":"7404"},"The variable `absDest` should be named `absDestination`. A more descriptive name will do too.",{"range":"7405","text":"7406"},{"range":"7407","text":"6914"},{"range":"7408","text":"6914"},{"range":"7409","text":"6914"},{"range":"7410","text":"6914"},"unicorn/prefer-export-from","Use `export…from` to re-export `createFile`.","ExportSpecifier","error",{"range":"7411","text":"7412"},"Use `export…from` to re-export `move`.",{"range":"7413","text":"7414"},"n/no-unsupported-features/node-builtins","The 'fs/promises.glob' is still an experimental feature The configured version range is '>=24.0.0'.","ImportSpecifier","not-supported-yet",{"range":"7415","text":"6914"},"Use `export…from` to re-export `access`.",{"range":"7416","text":"7417"},"Use `export…from` to re-export `appendFile`.",{"range":"7418","text":"7419"},"Use `export…from` to re-export `chmod`.",{"range":"7420","text":"7421"},"Use `export…from` to re-export `chown`.",{"range":"7422","text":"7423"},"Use `export…from` to re-export `copyFile`.",{"range":"7424","text":"7425"},"Use `export…from` to re-export `cp`.",{"range":"7426","text":"7427"},"Use `export…from` to re-export `fsConstants`.",{"range":"7428","text":"7429"},"Use `export…from` to re-export `FsStats`.",{"range":"7430","text":"7431"},"Use `export…from` to re-export `glob`.",{"range":"7432","text":"7433"},"Use `export…from` to re-export `lchown`.",{"range":"7434","text":"7435"},"Use `export…from` to re-export `link`.",{"range":"7436","text":"7437"},"Use `export…from` to re-export `lstat`.",{"range":"7438","text":"7439"},"Use `export…from` to re-export `lutimes`.",{"range":"7440","text":"7441"},"Use `export…from` to re-export `mkdir`.",{"range":"7442","text":"7443"},"Use `export…from` to re-export `mkdtemp`.",{"range":"7444","text":"7445"},"Use `export…from` to re-export `open`.",{"range":"7446","text":"7447"},"Use `export…from` to re-export `opendir`.",{"range":"7448","text":"7449"},"Use `export…from` to re-export `readdir`.",{"range":"7450","text":"7451"},"Use `export…from` to re-export `readFile`.",{"range":"7452","text":"7453"},"Use `export…from` to re-export `readlink`.",{"range":"7454","text":"7455"},"Use `export…from` to re-export `realpath`.",{"range":"7456","text":"7457"},"Use `export…from` to re-export `rename`.",{"range":"7458","text":"7459"},"Use `export…from` to re-export `rm`.",{"range":"7460","text":"7461"},"Use `export…from` to re-export `rmdir`.",{"range":"7462","text":"7463"},"Use `export…from` to re-export `stat`.",{"range":"7464","text":"7465"},"Use `export…from` to re-export `statfs`.",{"range":"7466","text":"7467"},"Use `export…from` to re-export `symlink`.",{"range":"7468","text":"7469"},"Use `export…from` to re-export `truncate`.",{"range":"7470","text":"7471"},"Use `export…from` to re-export `unlink`.",{"range":"7472","text":"7473"},"Use `export…from` to re-export `utimes`.",{"range":"7474","text":"7475"},"Use `export…from` to re-export `watch`.",{"range":"7476","text":"7477"},"Use `export…from` to re-export `writeFile`.",{"range":"7478","text":"7479"},{"range":"7480","text":"6914"},"vitest/require-hook","This should be done within a hook","useHook",{"range":"7481","text":"6914"},{"range":"7482","text":"6914"},{"range":"7483","text":"6914"},"The variable `hasExt` should be named `hasExtension`. A more descriptive name will do too.",{"range":"7484","text":"7485"},"The variable `ext` should be named `extension`. A more descriptive name will do too.",{"range":"7486","text":"7487"},{"range":"7488","text":"7489"},{"range":"7490","text":"7491"},"The variable `args` should be named `arguments_`. A more descriptive name will do too.",{"range":"7492","text":"7493"},"@typescript-eslint/no-unsafe-return","Unsafe return of a value of type `any`.","ReturnStatement","unsafeReturn",{"range":"7494","text":"7495"},{"range":"7496","text":"7497"},"The variable `arg` should be named `argument`. A more descriptive name will do too.",{"range":"7498","text":"7499"},{"range":"7500","text":"7501"},["7502","7503"],{"range":"7504","text":"7505"},["7506","7507"],{"range":"7508","text":"7509"},{"range":"7510","text":"7511"},"The variable `Args` should be named `Arguments`. A more descriptive name will do too.",{"range":"7512","text":"7513"},{"range":"7514","text":"7493"},{"range":"7515","text":"7493"},{"range":"7516","text":"7517"},{"range":"7518","text":"7519"},{"range":"7520","text":"7521"},{"range":"7522","text":"7523"},{"range":"7524","text":"7493"},{"range":"7525","text":"7493"},{"range":"7526","text":"7527"},{"range":"7528","text":"7529"},{"range":"7530","text":"6733"},{"range":"7531","text":"6733"},{"range":"7532","text":"7533"},{"range":"7534","text":"6733"},{"range":"7535","text":"6733"},{"range":"7536","text":"6733"},{"range":"7537","text":"6733"},{"range":"7538","text":"7539"},{"range":"7540","text":"7541"},{"range":"7542","text":"6914"},{"range":"7543","text":"7544"},{"range":"7545","text":"6733"},{"range":"7546","text":"6733"},{"range":"7547","text":"6733"},{"range":"7548","text":"6733"},{"range":"7549","text":"6733"},{"range":"7550","text":"6733"},{"range":"7551","text":"6733"},{"range":"7552","text":"6733"},{"range":"7553","text":"6733"},{"range":"7554","text":"6733"},{"range":"7555","text":"6733"},{"range":"7556","text":"6733"},{"range":"7557","text":"7558"},{"range":"7559","text":"7493"},{"range":"7560","text":"7493"},{"range":"7561","text":"7562"},"Missing JSDoc @param \"fn\" declaration.",{"range":"7563","text":"7564"},"Missing JSDoc @param \"errorMessage\" declaration.",{"range":"7565","text":"7566"},{"range":"7567","text":"7493"},{"range":"7568","text":"7493"},{"range":"7569","text":"7570"},{"range":"7571","text":"7572"},{"range":"7573","text":"7493"},{"range":"7574","text":"7493"},{"range":"7575","text":"7562"},{"range":"7576","text":"7577"},{"range":"7578","text":"7579"},{"range":"7580","text":"7493"},{"range":"7581","text":"7493"},{"range":"7582","text":"7570"},{"range":"7583","text":"7584"},{"range":"7585","text":"7493"},{"range":"7586","text":"7493"},{"range":"7587","text":"7588"},{"range":"7589","text":"7590"},{"range":"7591","text":"7493"},{"range":"7592","text":"7493"},{"range":"7593","text":"7594"},{"range":"7595","text":"7596"},{"range":"7597","text":"7493"},{"range":"7598","text":"7493"},{"range":"7599","text":"7588"},{"range":"7600","text":"7601"},{"range":"7602","text":"7493"},{"range":"7603","text":"7493"},{"range":"7604","text":"7594"},{"range":"7605","text":"7606"},{"range":"7607","text":"7493"},{"range":"7608","text":"7493"},{"range":"7609","text":"7588"},{"range":"7610","text":"7611"},{"range":"7612","text":"7493"},{"range":"7613","text":"7493"},{"range":"7614","text":"7594"},{"range":"7615","text":"7616"},{"range":"7617","text":"7618"},{"range":"7619","text":"7620"},"Invalid type \"T_input\" of template literal expression.","Invalid type \"unknown\" of template literal expression.",{"range":"7621","text":"7622"},{"range":"7623","text":"7624"},{"range":"7625","text":"6733"},{"range":"7626","text":"6733"},{"range":"7627","text":"7628"},{"range":"7629","text":"6733"},{"range":"7630","text":"6733"},{"range":"7631","text":"7632"},{"range":"7633","text":"6733"},{"range":"7634","text":"6733"},{"range":"7635","text":"6733"},{"range":"7636","text":"6733"},{"range":"7637","text":"6733"},{"range":"7638","text":"6733"},{"range":"7639","text":"7640"},{"range":"7641","text":"6733"},{"range":"7642","text":"6733"},{"range":"7643","text":"6733"},{"range":"7644","text":"6733"},["7645","7646"],["7647","7648"],{"range":"7649","text":"6733"},{"range":"7650","text":"6733"},["7651","7652"],{"range":"7653","text":"7654"},{"range":"7655","text":"7656"},{"range":"7657","text":"7658"},{"range":"7659","text":"7660"},{"range":"7661","text":"7662"},{"range":"7663","text":"7664"},{"range":"7665","text":"7666"},{"range":"7667","text":"6733"},{"range":"7668","text":"6733"},{"range":"7669","text":"6733"},{"range":"7670","text":"6733"},{"range":"7671","text":"6733"},{"range":"7672","text":"6733"},{"range":"7673","text":"6733"},{"range":"7674","text":"6733"},{"range":"7675","text":"7676"},{"range":"7677","text":"6733"},{"range":"7678","text":"6733"},{"range":"7679","text":"6733"},{"range":"7680","text":"6733"},{"range":"7681","text":"6733"},{"range":"7682","text":"6733"},{"range":"7683","text":"6733"},{"range":"7684","text":"6733"},{"range":"7685","text":"6733"},{"range":"7686","text":"6733"},{"range":"7687","text":"6733"},{"range":"7688","text":"6733"},{"range":"7689","text":"6733"},{"range":"7690","text":"6733"},{"range":"7691","text":"6733"},{"range":"7692","text":"6733"},{"range":"7693","text":"7694"},{"range":"7695","text":"6733"},{"range":"7696","text":"6733"},"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').",{"range":"7697","text":"6705"},{"range":"7698","text":"7699"},"AwaitExpression",{"range":"7700","text":"6733"},{"range":"7701","text":"6733"},{"range":"7702","text":"6733"},{"range":"7703","text":"6733"},{"range":"7704","text":"6705"},{"range":"7705","text":"6733"},{"range":"7706","text":"6733"},{"range":"7707","text":"7708"},"The variable `argsAlmostEqual` should be named `argumentsAlmostEqual`. A more descriptive name will do too.","The variable `args1` should be named `arguments1`. A more descriptive name will do too.",{"range":"7709","text":"7710"},"The variable `args2` should be named `arguments2`. A more descriptive name will do too.",{"range":"7711","text":"7712"},"unicorn/no-for-loop","Use a `for-of` loop instead of this `for` loop.","no-for-loop",{"range":"7713","text":"7714"},{"range":"7715","text":"7716"},{"range":"7717","text":"7718"},{"range":"7719","text":"7720"},{"range":"7721","text":"7722"},{"range":"7723","text":"7493"},{"range":"7724","text":"7493"},"The variable `lastArgs` should be named `lastArguments`. A more descriptive name will do too.",{"range":"7725","text":"7726"},{"range":"7727","text":"7728"},"vitest/require-mock-type-parameters","Missing type parameters","noTypeParameter","The variable `CanTakeRequiredArgsOrNever` should be named `CanTakeRequiredArgumentsOrNever`. A more descriptive name will do too.",{"range":"7729","text":"7493"},"The variable `ArgType` should be named `ArgumentType`. A more descriptive name will do too.",{"range":"7730","text":"7731"},{"range":"7732","text":"7733"},{"range":"7734","text":"7493"},"The variable `param1` should be named `parameter1`. A more descriptive name will do too.",{"range":"7735","text":"7736"},{"range":"7737","text":"7738"},{"range":"7739","text":"7740"},{"range":"7741","text":"7493"},{"range":"7742","text":"7736"},"The variable `param2` should be named `parameter2`. A more descriptive name will do too.",{"range":"7743","text":"7744"},{"range":"7745","text":"7746"},{"range":"7747","text":"7748"},{"range":"7749","text":"7750"},{"range":"7751","text":"7493"},{"range":"7752","text":"7736"},{"range":"7753","text":"7744"},"The variable `param3` should be named `parameter3`. A more descriptive name will do too.",{"range":"7754","text":"7755"},{"range":"7756","text":"7757"},{"range":"7758","text":"7759"},{"range":"7760","text":"7761"},{"range":"7762","text":"7763"},{"range":"7764","text":"7765"},{"range":"7766","text":"7767"},{"range":"7768","text":"6733"},{"range":"7769","text":"6733"},{"range":"7770","text":"6733"},{"range":"7771","text":"6733"},{"range":"7772","text":"6733"},{"range":"7773","text":"6733"},{"range":"7774","text":"6733"},{"range":"7775","text":"6733"},{"range":"7776","text":"6733"},{"range":"7777","text":"6733"},{"range":"7778","text":"6733"},{"range":"7779","text":"6733"},{"range":"7780","text":"6733"},{"range":"7781","text":"6733"},{"range":"7782","text":"6733"},{"range":"7783","text":"6733"},{"range":"7784","text":"6733"},{"range":"7785","text":"6733"},{"range":"7786","text":"7787"},{"range":"7788","text":"7789"},"Missing JSDoc @param \"presetInput0\" declaration.",{"range":"7790","text":"7791"},"Missing JSDoc @param \"presetInput1\" declaration.",{"range":"7792","text":"7793"},"Missing JSDoc @param \"presetInput2\" declaration.",{"range":"7794","text":"7795"},"Missing JSDoc @param \"presetInput3\" declaration.",{"range":"7796","text":"7797"},"Missing JSDoc @param \"presetInput4\" declaration.",{"range":"7798","text":"7799"},"Missing JSDoc @param \"presetInput5\" declaration.",{"range":"7800","text":"7801"},"Missing JSDoc @param \"presetInput6\" declaration.",{"range":"7802","text":"7803"},"Missing JSDoc @param \"presetInput7\" declaration.",{"range":"7804","text":"7805"},"Missing JSDoc @param \"presetInput8\" declaration.",{"range":"7806","text":"7807"},"Missing JSDoc @param \"presetInput9\" declaration.",{"range":"7808","text":"7809"},{"range":"7810","text":"6733"},{"range":"7811","text":"6733"},{"range":"7812","text":"6733"},{"range":"7813","text":"6733"},{"range":"7814","text":"6733"},{"range":"7815","text":"6733"},{"range":"7816","text":"6733"},{"range":"7817","text":"6733"},{"range":"7818","text":"6733"},{"range":"7819","text":"6733"},{"range":"7820","text":"6733"},{"range":"7821","text":"6733"},{"range":"7822","text":"6733"},{"range":"7823","text":"6733"},{"range":"7824","text":"6733"},{"range":"7825","text":"6733"},{"range":"7826","text":"6733"},{"range":"7827","text":"6733"},{"range":"7828","text":"6733"},{"range":"7829","text":"6733"},{"range":"7830","text":"6733"},{"range":"7831","text":"6733"},{"range":"7832","text":"6733"},{"range":"7833","text":"6733"},{"range":"7834","text":"6733"},{"range":"7835","text":"6733"},{"range":"7836","text":"6733"},{"range":"7837","text":"6733"},{"range":"7838","text":"6733"},{"range":"7839","text":"6733"},{"range":"7840","text":"6733"},{"range":"7841","text":"6733"},{"range":"7842","text":"6733"},{"range":"7843","text":"6733"},{"range":"7844","text":"7845"},{"range":"7846","text":"7847"},{"range":"7848","text":"7849"},{"range":"7850","text":"7851"},{"range":"7852","text":"7853"},{"range":"7854","text":"7855"},{"range":"7856","text":"7857"},{"range":"7858","text":"7859"},{"range":"7860","text":"7861"},{"range":"7862","text":"7863"},"Missing JSDoc @param \"input\" declaration.",{"range":"7864","text":"7865"},"Missing JSDoc @param \"fn1\" declaration.",{"range":"7866","text":"7867"},"Missing JSDoc @param \"fn2\" declaration.",{"range":"7868","text":"7869"},"Missing JSDoc @param \"fn3\" declaration.",{"range":"7870","text":"7871"},"Missing JSDoc @param \"fn4\" declaration.",{"range":"7872","text":"7873"},"Missing JSDoc @param \"fn5\" declaration.",{"range":"7874","text":"7875"},"Missing JSDoc @param \"fn6\" declaration.",{"range":"7876","text":"7877"},"Missing JSDoc @param \"fn7\" declaration.",{"range":"7878","text":"7879"},"Missing JSDoc @param \"fn8\" declaration.",{"range":"7880","text":"7881"},"Missing JSDoc @param \"fn9\" declaration.",{"range":"7882","text":"7883"},{"range":"7884","text":"7885"},{"range":"7886","text":"7887"},{"range":"7888","text":"7889"},{"range":"7890","text":"7891"},{"range":"7892","text":"7893"},{"range":"7894","text":"7895"},{"range":"7896","text":"7897"},{"range":"7898","text":"7899"},{"range":"7900","text":"7901"},{"range":"7902","text":"7903"},{"range":"7904","text":"7905"},{"range":"7906","text":"7907"},{"range":"7908","text":"7909"},{"range":"7910","text":"7911"},{"range":"7912","text":"7913"},{"range":"7914","text":"7915"},{"range":"7916","text":"7917"},{"range":"7918","text":"7919"},{"range":"7920","text":"7921"},{"range":"7922","text":"7923"},{"range":"7924","text":"7925"},{"range":"7926","text":"7927"},{"range":"7928","text":"7929"},{"range":"7930","text":"7931"},{"range":"7932","text":"7933"},{"range":"7934","text":"7935"},{"range":"7936","text":"7937"},{"range":"7938","text":"7939"},{"range":"7940","text":"7941"},{"range":"7942","text":"7943"},"Missing JSDoc @param \"fn0\" declaration.",{"range":"7944","text":"7945"},{"range":"7946","text":"7947"},{"range":"7948","text":"7949"},{"range":"7950","text":"7951"},{"range":"7952","text":"7953"},{"range":"7954","text":"7955"},{"range":"7956","text":"7957"},{"range":"7958","text":"7959"},{"range":"7960","text":"7961"},{"range":"7962","text":"7963"},{"range":"7964","text":"7945"},{"range":"7965","text":"7947"},{"range":"7966","text":"7949"},{"range":"7967","text":"7951"},{"range":"7968","text":"7953"},{"range":"7969","text":"7955"},{"range":"7970","text":"7957"},{"range":"7971","text":"7959"},{"range":"7972","text":"7961"},{"range":"7973","text":"7963"},"Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn0>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn1>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn2>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn3>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn4>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn5>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn6>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn7>>`.","Unsafe argument of type `any` assigned to a parameter of type `Awaited<ReturnType<T_fn8>>`.",{"range":"7974","text":"7975"},{"range":"7976","text":"7977"},{"range":"7978","text":"7979"},{"range":"7980","text":"7981"},{"range":"7982","text":"7983"},{"range":"7984","text":"7985"},{"range":"7986","text":"7987"},{"range":"7988","text":"7989"},{"range":"7990","text":"7991"},{"range":"7992","text":"7993"},{"range":"7994","text":"7995"},{"range":"7996","text":"7997"},{"range":"7998","text":"7999"},{"range":"8000","text":"8001"},{"range":"8002","text":"8003"},{"range":"8004","text":"8005"},{"range":"8006","text":"8007"},{"range":"8008","text":"8009"},{"range":"8010","text":"8011"},{"range":"8012","text":"8013"},{"range":"8014","text":"8015"},{"range":"8016","text":"6733"},{"range":"8017","text":"6733"},{"range":"8018","text":"8019"},{"range":"8020","text":"6733"},{"range":"8021","text":"6733"},{"range":"8022","text":"8023"},{"range":"8024","text":"6733"},{"range":"8025","text":"6733"},{"range":"8026","text":"6733"},{"range":"8027","text":"6733"},{"range":"8028","text":"6733"},{"range":"8029","text":"6733"},{"range":"8030","text":"6733"},{"range":"8031","text":"6733"},{"range":"8032","text":"6733"},{"range":"8033","text":"6733"},{"range":"8034","text":"6733"},{"range":"8035","text":"6733"},{"range":"8036","text":"6733"},{"range":"8037","text":"6733"},{"range":"8038","text":"6733"},{"range":"8039","text":"6733"},{"range":"8040","text":"6733"},{"range":"8041","text":"6733"},{"range":"8042","text":"6733"},{"range":"8043","text":"6733"},{"range":"8044","text":"8045"},{"range":"8046","text":"6733"},{"range":"8047","text":"6733"},{"range":"8048","text":"6733"},{"range":"8049","text":"6733"},{"range":"8050","text":"6733"},{"range":"8051","text":"6733"},{"range":"8052","text":"6733"},{"range":"8053","text":"6733"},{"range":"8054","text":"8055"},{"range":"8056","text":"8057"},{"range":"8058","text":"8059"},{"range":"8060","text":"7493"},{"range":"8061","text":"7493"},{"range":"8062","text":"8063"},{"range":"8064","text":"8065"},{"range":"8066","text":"6733"},{"range":"8067","text":"6733"},{"range":"8068","text":"6733"},{"range":"8069","text":"6733"},{"range":"8070","text":"6733"},{"range":"8071","text":"6733"},{"range":"8072","text":"6914"},{"range":"8073","text":"6914"},{"range":"8074","text":"6733"},{"range":"8075","text":"6733"},{"range":"8076","text":"6733"},{"range":"8077","text":"6733"},{"range":"8078","text":"8079"},{"range":"8080","text":"8081"},{"range":"8082","text":"6914"},{"range":"8083","text":"8084"},{"range":"8085","text":"8086"},{"range":"8087","text":"6914"},["8088"],"Unsafe return of type `any` from function with return type `Promise<T_index extends IntsNegative10to10 ? T_iterable[T_index] : T_iterable[number] | undefined>`.","unsafeReturnAssignment",["8089"],["8090"],["8091"],"@typescript-eslint/no-unnecessary-type-assertion","This assertion is unnecessary since it does not change the type of the expression.","unnecessaryAssertion",{"range":"8092","text":"8093"},["8094"],{"range":"8095","text":"6733"},{"range":"8096","text":"6733"},{"range":"8097","text":"6733"},{"range":"8098","text":"6733"},{"range":"8099","text":"6733"},{"range":"8100","text":"6733"},{"range":"8101","text":"6733"},{"range":"8102","text":"6733"},{"range":"8103","text":"6733"},{"range":"8104","text":"6733"},{"range":"8105","text":"6733"},{"range":"8106","text":"6733"},{"range":"8107","text":"6733"},{"range":"8108","text":"6733"},{"range":"8109","text":"6733"},{"range":"8110","text":"6733"},{"range":"8111","text":"6733"},{"range":"8112","text":"6733"},{"range":"8113","text":"6733"},{"range":"8114","text":"6733"},{"range":"8115","text":"6733"},{"range":"8116","text":"6733"},{"range":"8117","text":"6733"},{"range":"8118","text":"6733"},{"range":"8119","text":"6733"},{"range":"8120","text":"6733"},{"range":"8121","text":"6733"},{"range":"8122","text":"6733"},{"range":"8123","text":"8124"},{"range":"8125","text":"8126"},{"range":"8127","text":"6914"},{"range":"8128","text":"8129"},{"range":"8130","text":"8131"},{"range":"8132","text":"8133"},{"range":"8134","text":"6914"},{"range":"8135","text":"8136"},{"range":"8137","text":"8138"},{"range":"8139","text":"6914"},{"range":"8140","text":"6733"},{"range":"8141","text":"6733"},{"range":"8142","text":"8143"},{"range":"8144","text":"8145"},{"range":"8146","text":"6914"},{"range":"8147","text":"8148"},{"range":"8149","text":"8150"},{"range":"8151","text":"8152"},{"range":"8153","text":"6914"},{"range":"8154","text":"8155"},{"range":"8156","text":"6733"},{"range":"8157","text":"6733"},{"range":"8158","text":"6733"},{"range":"8159","text":"6733"},{"range":"8160","text":"8161"},{"range":"8162","text":"8163"},"The variable `arr` should be named `array`. A more descriptive name will do too.",{"range":"8164","text":"8165"},{"range":"8166","text":"8167"},{"range":"8168","text":"8169"},{"range":"8170","text":"8171"},{"range":"8172","text":"6733"},{"range":"8173","text":"6733"},{"range":"8174","text":"6733"},{"range":"8175","text":"6733"},{"range":"8176","text":"6733"},{"range":"8177","text":"6733"},{"range":"8178","text":"6733"},{"range":"8179","text":"6733"},{"range":"8180","text":"6733"},{"range":"8181","text":"6733"},{"range":"8182","text":"6733"},{"range":"8183","text":"6733"},{"range":"8184","text":"6733"},{"range":"8185","text":"6733"},{"range":"8186","text":"6733"},{"range":"8187","text":"6733"},{"range":"8188","text":"6733"},{"range":"8189","text":"6733"},{"range":"8190","text":"6733"},{"range":"8191","text":"6733"},{"range":"8192","text":"6733"},{"range":"8193","text":"6733"},{"range":"8194","text":"6733"},{"range":"8195","text":"6733"},{"range":"8196","text":"6733"},{"range":"8197","text":"6733"},{"range":"8198","text":"6733"},{"range":"8199","text":"6733"},{"range":"8200","text":"6733"},{"range":"8201","text":"6733"},{"range":"8202","text":"8203"},{"range":"8204","text":"8205"},{"range":"8206","text":"8207"},{"range":"8208","text":"8209"},{"range":"8210","text":"8211"},{"range":"8212","text":"8213"},"The variable `T_i` should be named `T_index`. A more descriptive name will do too.",{"range":"8214","text":"8215"},{"range":"8216","text":"8217"},{"range":"8218","text":"8219"},{"range":"8220","text":"8221"},{"range":"8222","text":"8223"},{"range":"8224","text":"8225"},{"range":"8226","text":"8217"},{"range":"8227","text":"8228"},{"range":"8229","text":"8230"},{"range":"8231","text":"8232"},{"range":"8233","text":"8234"},{"range":"8235","text":"8217"},{"range":"8236","text":"8237"},{"range":"8238","text":"8239"},{"range":"8240","text":"8241"},{"range":"8242","text":"8243"},{"range":"8244","text":"8217"},{"range":"8245","text":"8246"},{"range":"8247","text":"8248"},{"range":"8249","text":"8250"},{"range":"8251","text":"8234"},{"range":"8252","text":"8217"},{"range":"8253","text":"8254"},{"range":"8255","text":"8256"},{"range":"8257","text":"8258"},{"range":"8259","text":"8243"},{"range":"8260","text":"8217"},{"range":"8261","text":"8262"},{"range":"8263","text":"8264"},{"range":"8265","text":"8266"},{"range":"8267","text":"8268"},{"range":"8269","text":"8217"},{"range":"8270","text":"8271"},{"range":"8272","text":"8273"},{"range":"8274","text":"8275"},{"range":"8276","text":"8277"},{"range":"8278","text":"8217"},{"range":"8279","text":"8280"},{"range":"8281","text":"6733"},{"range":"8282","text":"6733"},{"range":"8283","text":"6733"},{"range":"8284","text":"6733"},{"range":"8285","text":"6733"},{"range":"8286","text":"6733"},{"range":"8287","text":"6733"},{"range":"8288","text":"6733"},{"range":"8289","text":"6733"},{"range":"8290","text":"6733"},{"range":"8291","text":"6733"},{"range":"8292","text":"6733"},{"range":"8293","text":"6733"},{"range":"8294","text":"6733"},{"range":"8295","text":"6733"},{"range":"8296","text":"6733"},{"range":"8297","text":"6733"},{"range":"8298","text":"6733"},{"range":"8299","text":"6733"},{"range":"8300","text":"6733"},{"range":"8301","text":"6733"},{"range":"8302","text":"6733"},{"range":"8303","text":"6733"},{"range":"8304","text":"6733"},{"range":"8305","text":"6733"},{"range":"8306","text":"6733"},{"range":"8307","text":"6733"},{"range":"8308","text":"6733"},{"range":"8309","text":"6733"},{"range":"8310","text":"6733"},{"range":"8311","text":"6733"},{"range":"8312","text":"6733"},{"range":"8313","text":"6733"},{"range":"8314","text":"6733"},{"range":"8315","text":"8316"},{"range":"8317","text":"8318"},{"range":"8319","text":"8320"},{"range":"8321","text":"8322"},"Unsafe member access [Symbol.iterator] on an `any` value.",{"range":"8323","text":"8324"},{"range":"8325","text":"8326"},"Unsafe member access [Symbol.asyncIterator] on an `any` value.",{"range":"8327","text":"8328"},{"range":"8329","text":"8330"},{"range":"8331","text":"8332"},{"range":"8333","text":"8334"},{"range":"8335","text":"8336"},{"range":"8337","text":"8338"},{"range":"8339","text":"8340"},{"range":"8341","text":"8342"},{"range":"8343","text":"8344"},{"range":"8345","text":"8346"},{"range":"8347","text":"8348"},{"range":"8349","text":"8350"},{"range":"8351","text":"8352"},{"range":"8353","text":"8354"},{"range":"8355","text":"8356"},{"range":"8357","text":"8358"},{"range":"8359","text":"8360"},{"range":"8361","text":"8362"},{"range":"8363","text":"8364"},{"range":"8365","text":"8366"},{"range":"8367","text":"8368"},{"range":"8369","text":"8370"},{"range":"8371","text":"8372"},{"range":"8373","text":"8374"},{"range":"8375","text":"8376"},{"range":"8377","text":"8378"},{"range":"8379","text":"8380"},{"range":"8381","text":"8382"},{"range":"8383","text":"8384"},{"range":"8385","text":"8386"},{"range":"8387","text":"8388"},{"range":"8389","text":"8390"},{"range":"8391","text":"8392"},"@typescript-eslint/no-redundant-type-constituents","'unknown' overrides all other types in this union type.","TSUnknownKeyword","overrides",["8393"],["8394"],"vitest/valid-title","Test title must be a string, a function or class name","titleMustBeString",{"range":"8395","text":"6733"},{"range":"8396","text":"6733"},{"range":"8397","text":"6733"},{"range":"8398","text":"6733"},{"range":"8399","text":"8400"},{"range":"8401","text":"6733"},{"range":"8402","text":"6733"},{"range":"8403","text":"6733"},{"range":"8404","text":"6733"},{"range":"8405","text":"6733"},{"range":"8406","text":"6733"},{"range":"8407","text":"6733"},{"range":"8408","text":"6733"},{"range":"8409","text":"6733"},{"range":"8410","text":"6733"},{"range":"8411","text":"6733"},{"range":"8412","text":"6733"},{"range":"8413","text":"6733"},{"range":"8414","text":"6733"},{"range":"8415","text":"6733"},{"range":"8416","text":"6733"},{"range":"8417","text":"8418"},{"range":"8419","text":"8420"},{"range":"8421","text":"8422"},{"range":"8423","text":"8424"},{"range":"8425","text":"8426"},{"range":"8427","text":"8428"},{"range":"8429","text":"8430"},{"range":"8431","text":"8432"},{"range":"8433","text":"8434"},{"range":"8435","text":"8436"},{"range":"8437","text":"8438"},{"range":"8439","text":"8440"},{"range":"8441","text":"8442"},{"range":"8443","text":"8444"},{"range":"8445","text":"8446"},{"range":"8447","text":"8448"},{"range":"8449","text":"6914"},{"range":"8450","text":"8451"},{"range":"8452","text":"8453"},{"range":"8454","text":"8455"},{"range":"8456","text":"6914"},{"range":"8457","text":"8458"},"Do not pass function `mappingFn` directly to `.map(…)`.",["8459","8460","8461"],{"range":"8462","text":"8463"},{"range":"8464","text":"8465"},{"range":"8466","text":"8467"},{"range":"8468","text":"8469"},{"range":"8470","text":"6733"},{"range":"8471","text":"6733"},{"range":"8472","text":"6733"},{"range":"8473","text":"6733"},{"range":"8474","text":"6733"},{"range":"8475","text":"6733"},{"range":"8476","text":"6733"},{"range":"8477","text":"6733"},{"range":"8478","text":"6733"},{"range":"8479","text":"6733"},{"range":"8480","text":"6733"},{"range":"8481","text":"6733"},{"range":"8482","text":"6733"},{"range":"8483","text":"6733"},{"range":"8484","text":"6733"},{"range":"8485","text":"6733"},{"range":"8486","text":"6885"},{"range":"8487","text":"6733"},{"range":"8488","text":"6733"},{"range":"8489","text":"6733"},{"range":"8490","text":"6733"},{"range":"8491","text":"6733"},{"range":"8492","text":"6733"},{"range":"8493","text":"6733"},{"range":"8494","text":"6733"},{"range":"8495","text":"8496"},{"range":"8497","text":"6733"},{"range":"8498","text":"6733"},{"range":"8499","text":"6733"},{"range":"8500","text":"6733"},{"range":"8501","text":"6733"},{"range":"8502","text":"6733"},{"range":"8503","text":"6733"},{"range":"8504","text":"6733"},{"range":"8505","text":"6733"},{"range":"8506","text":"6733"},{"range":"8507","text":"8508"},{"range":"8509","text":"6733"},{"range":"8510","text":"6733"},{"range":"8511","text":"6733"},{"range":"8512","text":"6733"},{"range":"8513","text":"6885"},{"range":"8514","text":"6733"},{"range":"8515","text":"6733"},{"range":"8516","text":"6733"},{"range":"8517","text":"6733"},{"range":"8518","text":"6733"},{"range":"8519","text":"6733"},{"range":"8520","text":"6733"},{"range":"8521","text":"6733"},{"range":"8522","text":"8523"},{"range":"8524","text":"8525"},{"range":"8526","text":"8527"},{"range":"8528","text":"8529"},{"range":"8530","text":"6914"},{"range":"8531","text":"8532"},{"range":"8533","text":"8534"},{"range":"8535","text":"8536"},{"range":"8537","text":"8538"},{"range":"8539","text":"6733"},{"range":"8540","text":"6733"},{"range":"8541","text":"6733"},{"range":"8542","text":"6733"},{"range":"8543","text":"6733"},{"range":"8544","text":"6733"},{"range":"8545","text":"6733"},{"range":"8546","text":"6733"},{"range":"8547","text":"6733"},{"range":"8548","text":"6733"},{"range":"8549","text":"6733"},{"range":"8550","text":"6733"},{"range":"8551","text":"6733"},{"range":"8552","text":"6733"},{"range":"8553","text":"6733"},{"range":"8554","text":"6733"},{"range":"8555","text":"6885"},{"range":"8556","text":"6733"},{"range":"8557","text":"6733"},{"range":"8558","text":"8559"},{"range":"8560","text":"8561"},{"range":"8562","text":"8563"},{"range":"8564","text":"8565"},{"range":"8566","text":"8567"},{"range":"8568","text":"6914"},"The variable `partitionArrAsync` should be named `partitionArrayAsync`. A more descriptive name will do too.",{"range":"8569","text":"8570"},{"range":"8571","text":"8217"},{"range":"8572","text":"8573"},{"range":"8574","text":"8575"},{"range":"8576","text":"8577"},{"range":"8578","text":"8217"},{"range":"8579","text":"8580"},{"range":"8581","text":"8582"},{"range":"8583","text":"8584"},{"range":"8585","text":"8586"},{"range":"8587","text":"8588"},{"range":"8589","text":"8217"},{"range":"8590","text":"8591"},{"range":"8592","text":"6885"},{"range":"8593","text":"8594"},{"range":"8595","text":"8596"},"Do not pass function `reducer` directly to `.reduce(…)`.",["8597","8598","8599"],{"range":"8600","text":"8601"},{"range":"8602","text":"8603"},{"range":"8604","text":"6733"},{"range":"8605","text":"6733"},{"range":"8606","text":"6733"},{"range":"8607","text":"6733"},"@typescript-eslint/restrict-plus-operands","Operands of '+' operations must be a number or string. Got `string` + `number`.","mismatched",{"range":"8608","text":"6733"},{"range":"8609","text":"6733"},{"range":"8610","text":"6733"},{"range":"8611","text":"6733"},{"range":"8612","text":"6733"},{"range":"8613","text":"6733"},{"range":"8614","text":"6733"},{"range":"8615","text":"6733"},{"range":"8616","text":"6885"},{"range":"8617","text":"6733"},{"range":"8618","text":"6733"},{"range":"8619","text":"6885"},{"range":"8620","text":"8621"},{"range":"8622","text":"8623"},{"range":"8624","text":"8625"},{"range":"8626","text":"8627"},{"range":"8628","text":"8629"},{"range":"8630","text":"8631"},{"range":"8632","text":"8633"},{"range":"8634","text":"8635"},{"range":"8636","text":"8637"},{"range":"8638","text":"8639"},{"range":"8640","text":"8641"},{"range":"8642","text":"8643"},"Do not pass function `predicateKeeps` directly to `.findIndex(…)`.",["8644","8645","8646"],["8647","8648","8649"],{"range":"8650","text":"8651"},{"range":"8652","text":"8653"},"The variable `Param1` should be named `Parameter1`. A more descriptive name will do too.",{"range":"8654","text":"8655"},{"range":"8656","text":"8657"},"The variable `Param2` should be named `Parameter2`. A more descriptive name will do too.",{"range":"8658","text":"8659"},{"range":"8660","text":"8661"},{"range":"8662","text":"8663"},"The variable `Param3` should be named `Parameter3`. A more descriptive name will do too.",{"range":"8664","text":"8665"},{"range":"8666","text":"8667"},{"range":"8668","text":"8669"},{"range":"8670","text":"8671"},"The variable `Param4` should be named `Parameter4`. A more descriptive name will do too.",{"range":"8672","text":"8673"},{"range":"8674","text":"8675"},{"range":"8676","text":"8677"},{"range":"8678","text":"8679"},{"range":"8680","text":"8681"},"The variable `Param5` should be named `Parameter5`. A more descriptive name will do too.",{"range":"8682","text":"8683"},{"range":"8684","text":"8685"},{"range":"8686","text":"8687"},{"range":"8688","text":"8689"},{"range":"8690","text":"8691"},{"range":"8692","text":"8693"},"The variable `Param6` should be named `Parameter6`. A more descriptive name will do too.",{"range":"8694","text":"8695"},{"range":"8696","text":"8697"},{"range":"8698","text":"8699"},{"range":"8700","text":"8701"},{"range":"8702","text":"8703"},{"range":"8704","text":"8705"},{"range":"8706","text":"8707"},"The variable `Param7` should be named `Parameter7`. A more descriptive name will do too.",{"range":"8708","text":"8709"},{"range":"8710","text":"8711"},{"range":"8712","text":"8713"},{"range":"8714","text":"8715"},{"range":"8716","text":"8717"},{"range":"8718","text":"8719"},{"range":"8720","text":"8721"},{"range":"8722","text":"8723"},"The variable `Param8` should be named `Parameter8`. A more descriptive name will do too.",{"range":"8724","text":"8725"},{"range":"8726","text":"8727"},{"range":"8728","text":"8729"},{"range":"8730","text":"8731"},{"range":"8732","text":"8733"},{"range":"8734","text":"8735"},{"range":"8736","text":"8737"},{"range":"8738","text":"8739"},{"range":"8740","text":"8741"},"The variable `Param9` should be named `Parameter9`. A more descriptive name will do too.",{"range":"8742","text":"8743"},{"range":"8744","text":"6914"},{"range":"8745","text":"8746"},{"range":"8747","text":"8748"},{"range":"8749","text":"8750"},{"range":"8751","text":"8752"},{"range":"8753","text":"8754"},{"range":"8755","text":"8756"},{"range":"8757","text":"8758"},{"range":"8759","text":"8760"},{"range":"8761","text":"8762"},{"range":"8763","text":"8764"},{"range":"8765","text":"8766"},{"range":"8767","text":"8768"},{"range":"8769","text":"8770"},{"range":"8771","text":"8772"},{"range":"8773","text":"8774"},{"range":"8775","text":"8776"},{"range":"8777","text":"8778"},{"range":"8779","text":"8780"},{"range":"8781","text":"8782"},{"range":"8783","text":"8784"},{"range":"8785","text":"8786"},{"range":"8787","text":"8788"},{"range":"8789","text":"8790"},{"range":"8791","text":"8792"},{"range":"8793","text":"8794"},{"range":"8795","text":"8796"},{"range":"8797","text":"8798"},{"range":"8799","text":"8800"},{"range":"8801","text":"8802"},{"range":"8803","text":"8804"},{"range":"8805","text":"8806"},{"range":"8807","text":"8808"},{"range":"8809","text":"8810"},{"range":"8811","text":"8812"},{"range":"8813","text":"8814"},{"range":"8815","text":"8816"},{"range":"8817","text":"8818"},{"range":"8819","text":"8820"},{"range":"8821","text":"8822"},{"range":"8823","text":"8824"},{"range":"8825","text":"8826"},{"range":"8827","text":"8828"},{"range":"8829","text":"8830"},{"range":"8831","text":"8832"},{"range":"8833","text":"8834"},{"range":"8835","text":"8836"},{"range":"8837","text":"8838"},{"range":"8839","text":"8840"},{"range":"8841","text":"6914"},{"range":"8842","text":"8843"},{"range":"8844","text":"8845"},{"range":"8846","text":"8847"},{"range":"8848","text":"8849"},{"range":"8850","text":"8851"},{"range":"8852","text":"8853"},{"range":"8854","text":"8855"},{"range":"8856","text":"8857"},{"range":"8858","text":"8859"},{"range":"8860","text":"8861"},{"range":"8862","text":"8863"},{"range":"8864","text":"8865"},{"range":"8866","text":"8867"},{"range":"8868","text":"8869"},{"range":"8870","text":"8871"},{"range":"8872","text":"8873"},{"range":"8874","text":"8875"},{"range":"8876","text":"8877"},{"range":"8878","text":"8879"},{"range":"8880","text":"8881"},{"range":"8882","text":"8883"},{"range":"8884","text":"8885"},{"range":"8886","text":"8887"},{"range":"8888","text":"8889"},{"range":"8890","text":"8891"},{"range":"8892","text":"8893"},{"range":"8894","text":"8895"},{"range":"8896","text":"8897"},{"range":"8898","text":"8899"},{"range":"8900","text":"8901"},{"range":"8902","text":"8903"},{"range":"8904","text":"8905"},{"range":"8906","text":"8907"},{"range":"8908","text":"8909"},{"range":"8910","text":"8911"},{"range":"8912","text":"8913"},{"range":"8914","text":"8915"},{"range":"8916","text":"8917"},{"range":"8918","text":"8919"},{"range":"8920","text":"8921"},{"range":"8922","text":"8923"},{"range":"8924","text":"8925"},{"range":"8926","text":"8927"},{"range":"8928","text":"8929"},{"range":"8930","text":"8931"},{"range":"8932","text":"8933"},{"range":"8934","text":"6914"},{"range":"8935","text":"8936"},{"range":"8937","text":"8752"},{"range":"8938","text":"8754"},{"range":"8939","text":"8940"},{"range":"8941","text":"8942"},{"range":"8943","text":"8944"},{"range":"8945","text":"8946"},{"range":"8947","text":"8764"},{"range":"8948","text":"8949"},{"range":"8950","text":"8951"},{"range":"8952","text":"8953"},{"range":"8954","text":"8772"},{"range":"8955","text":"8956"},{"range":"8957","text":"8958"},{"range":"8959","text":"8960"},{"range":"8961","text":"8962"},{"range":"8963","text":"8782"},{"range":"8964","text":"8965"},{"range":"8966","text":"8967"},{"range":"8968","text":"8969"},{"range":"8970","text":"8971"},{"range":"8972","text":"8973"},{"range":"8974","text":"8794"},{"range":"8975","text":"8976"},{"range":"8977","text":"8978"},{"range":"8979","text":"8980"},{"range":"8981","text":"8982"},{"range":"8983","text":"8984"},{"range":"8985","text":"8986"},{"range":"8987","text":"8808"},{"range":"8988","text":"8989"},{"range":"8990","text":"8991"},{"range":"8992","text":"8993"},{"range":"8994","text":"8995"},{"range":"8996","text":"8997"},{"range":"8998","text":"8999"},{"range":"9000","text":"9001"},{"range":"9002","text":"8824"},{"range":"9003","text":"9004"},{"range":"9005","text":"9006"},{"range":"9007","text":"9008"},{"range":"9009","text":"9010"},{"range":"9011","text":"9012"},{"range":"9013","text":"9014"},{"range":"9015","text":"9016"},{"range":"9017","text":"9018"},{"range":"9019","text":"6914"},{"range":"9020","text":"9021"},{"range":"9022","text":"9023"},{"range":"9024","text":"9025"},{"range":"9026","text":"9027"},{"range":"9028","text":"9029"},{"range":"9030","text":"9031"},{"range":"9032","text":"9033"},{"range":"9034","text":"9035"},{"range":"9036","text":"9037"},{"range":"9038","text":"9039"},{"range":"9040","text":"9041"},{"range":"9042","text":"9043"},{"range":"9044","text":"9045"},{"range":"9046","text":"9047"},{"range":"9048","text":"9049"},{"range":"9050","text":"9051"},{"range":"9052","text":"9053"},{"range":"9054","text":"9055"},{"range":"9056","text":"9057"},{"range":"9058","text":"9059"},{"range":"9060","text":"9061"},{"range":"9062","text":"9063"},{"range":"9064","text":"9065"},{"range":"9066","text":"9067"},{"range":"9068","text":"9069"},{"range":"9070","text":"9071"},{"range":"9072","text":"9073"},{"range":"9074","text":"9075"},{"range":"9076","text":"9077"},{"range":"9078","text":"9079"},{"range":"9080","text":"9081"},{"range":"9082","text":"9083"},{"range":"9084","text":"9085"},{"range":"9086","text":"9087"},{"range":"9088","text":"9089"},{"range":"9090","text":"9091"},{"range":"9092","text":"9093"},{"range":"9094","text":"9095"},{"range":"9096","text":"9097"},{"range":"9098","text":"9099"},{"range":"9100","text":"9101"},{"range":"9102","text":"9103"},{"range":"9104","text":"9105"},{"range":"9106","text":"9107"},{"range":"9108","text":"9109"},{"range":"9110","text":"9111"},{"range":"9112","text":"6914"},{"range":"9113","text":"9114"},{"range":"9115","text":"9116"},{"range":"9117","text":"9118"},{"range":"9119","text":"9120"},{"range":"9121","text":"9122"},{"range":"9123","text":"9124"},{"range":"9125","text":"9126"},{"range":"9127","text":"9128"},{"range":"9129","text":"9130"},{"range":"9131","text":"9132"},{"range":"9133","text":"9134"},{"range":"9135","text":"9136"},{"range":"9137","text":"9138"},{"range":"9139","text":"9140"},{"range":"9141","text":"9142"},{"range":"9143","text":"9144"},{"range":"9145","text":"9146"},{"range":"9147","text":"9148"},{"range":"9149","text":"9150"},{"range":"9151","text":"9152"},{"range":"9153","text":"9154"},{"range":"9155","text":"9156"},{"range":"9157","text":"9158"},{"range":"9159","text":"9160"},{"range":"9161","text":"9162"},{"range":"9163","text":"9164"},{"range":"9165","text":"9166"},{"range":"9167","text":"9168"},{"range":"9169","text":"9170"},{"range":"9171","text":"9172"},{"range":"9173","text":"9174"},{"range":"9175","text":"9176"},{"range":"9177","text":"9178"},{"range":"9179","text":"9180"},{"range":"9181","text":"9182"},{"range":"9183","text":"9184"},{"range":"9185","text":"9186"},{"range":"9187","text":"9188"},{"range":"9189","text":"9190"},{"range":"9191","text":"9192"},{"range":"9193","text":"9194"},{"range":"9195","text":"9196"},{"range":"9197","text":"9198"},{"range":"9199","text":"9200"},{"range":"9201","text":"9202"},{"range":"9203","text":"9204"},{"range":"9205","text":"6914"},{"range":"9206","text":"6733"},{"range":"9207","text":"6733"},{"range":"9208","text":"6733"},{"range":"9209","text":"6733"},{"range":"9210","text":"6733"},{"range":"9211","text":"6733"},{"range":"9212","text":"6733"},{"range":"9213","text":"6733"},{"range":"9214","text":"6733"},{"range":"9215","text":"6733"},{"range":"9216","text":"6733"},{"range":"9217","text":"6733"},{"range":"9218","text":"6885"},{"range":"9219","text":"6733"},{"range":"9220","text":"6733"},{"range":"9221","text":"6885"},{"range":"9222","text":"6885"},{"range":"9223","text":"6733"},{"range":"9224","text":"6733"},{"range":"9225","text":"6885"},{"range":"9226","text":"6733"},{"range":"9227","text":"6733"},{"range":"9228","text":"6885"},{"range":"9229","text":"6885"},{"range":"9230","text":"6733"},{"range":"9231","text":"6733"},{"range":"9232","text":"6733"},{"range":"9233","text":"6733"},{"range":"9234","text":"6733"},{"range":"9235","text":"6733"},{"range":"9236","text":"6733"},{"range":"9237","text":"6733"},{"range":"9238","text":"6733"},{"range":"9239","text":"6733"},{"range":"9240","text":"6733"},{"range":"9241","text":"6733"},{"range":"9242","text":"6733"},{"range":"9243","text":"6733"},{"range":"9244","text":"6733"},{"range":"9245","text":"6733"},{"range":"9246","text":"6885"},{"range":"9247","text":"6733"},{"range":"9248","text":"6733"},{"range":"9249","text":"6885"},{"range":"9250","text":"6885"},{"range":"9251","text":"6733"},{"range":"9252","text":"6733"},{"range":"9253","text":"6885"},{"range":"9254","text":"6733"},{"range":"9255","text":"6733"},{"range":"9256","text":"6885"},{"range":"9257","text":"6885"},{"range":"9258","text":"6733"},{"range":"9259","text":"6733"},{"range":"9260","text":"6733"},{"range":"9261","text":"6733"},{"range":"9262","text":"6733"},{"range":"9263","text":"6733"},"The 'navigator' is still an experimental feature The configured version range is '>=24.0.0'.",{"range":"9264","text":"6701"},{"range":"9265","text":"6701"},{"range":"9266","text":"6701"},{"range":"9267","text":"6701"},{"range":"9268","text":"6701"},{"range":"9269","text":"6701"},"Unused eslint-disable directive (no problems were reported from 'require-await').",{"range":"9270","text":"6705"},"Async function 'disposeSessionStorage' has no 'await' expression.","FunctionExpression",["9271"],{"range":"9272","text":"6701"},{"range":"9273","text":"6701"},{"range":"9274","text":"6701"},{"range":"9275","text":"6701"},{"range":"9276","text":"9277"},{"range":"9278","text":"9279"},{"range":"9280","text":"6914"},{"range":"9281","text":"6914"},{"range":"9282","text":"9283"},{"range":"9284","text":"9285"},"Promise-returning function provided to variable where a void return was expected.","voidReturnVariable",["9286"],{"range":"9287","text":"9288"},{"range":"9289","text":"9290"},"The variable `msg` should be named `message`. A more descriptive name will do too.",{"range":"9291","text":"9292"},{"range":"9293","text":"9294"},{"range":"9295","text":"9296"},{"range":"9297","text":"9298"},{"range":"9299","text":"9300"},{"range":"9301","text":"9302"},"Invalid operand for a '+' operation. Operands must each be a number or string. Got `unknown`.","invalid",["9303"],"Async function 'disposeMemorySink' has no 'await' expression.",["9304"],["9305"],{"range":"9306","text":"9307"},{"range":"9308","text":"9309"},{"range":"9310","text":"9311"},{"range":"9312","text":"9313"},"Do not pass function `addTwoNumbers` directly to `.reduce(…)`.",["9314","9315","9316"],{"range":"9317","text":"9318"},{"range":"9319","text":"9320"},{"range":"9321","text":"9322"},{"range":"9323","text":"9324"},"Do not pass function `addTwoBigints` directly to `.reduce(…)`.",["9325","9326","9327"],{"range":"9328","text":"9329"},{"range":"9330","text":"9331"},"The variable `Prev` should be named `Previous`. A more descriptive name will do too.",{"range":"9332","text":"9333"},"The variable `Curr` should be named `Current`. A more descriptive name will do too.",{"range":"9334","text":"9335"},{"range":"9336","text":"9337"},{"range":"9338","text":"9339"},"Do not pass function `addTwoNumerics` directly to `.reduce(…)`.",["9340","9341","9342"],{"range":"9343","text":"9344"},{"range":"9345","text":"9346"},{"range":"9347","text":"9348"},{"range":"9349","text":"9350"},{"range":"9351","text":"9352"},{"range":"9353","text":"9354"},{"range":"9355","text":"9356"},{"range":"9357","text":"9358"},{"range":"9359","text":"9360"},{"range":"9361","text":"9362"},{"range":"9363","text":"9364"},{"range":"9365","text":"9366"},{"range":"9367","text":"9368"},{"range":"9369","text":"6885"},{"range":"9370","text":"6733"},{"range":"9371","text":"6733"},{"range":"9372","text":"9373"},{"range":"9374","text":"9375"},{"range":"9376","text":"6885"},{"range":"9377","text":"6733"},{"range":"9378","text":"6733"},{"range":"9379","text":"9380"},{"range":"9381","text":"9382"},{"range":"9383","text":"6885"},{"range":"9384","text":"6733"},{"range":"9385","text":"6733"},{"range":"9386","text":"9387"},{"range":"9388","text":"9389"},{"range":"9390","text":"6914"},{"range":"9391","text":"9392"},{"range":"9393","text":"9394"},{"range":"9395","text":"6914"},{"range":"9396","text":"9397"},{"range":"9398","text":"9399"},{"range":"9400","text":"9401"},{"range":"9402","text":"9403"},{"range":"9404","text":"9405"},{"range":"9406","text":"9407"},{"range":"9408","text":"9409"},{"range":"9410","text":"9411"},{"range":"9412","text":"9413"},{"range":"9414","text":"9415"},{"range":"9416","text":"9417"},{"range":"9418","text":"9419"},{"range":"9420","text":"9421"},{"range":"9422","text":"9423"},{"range":"9424","text":"9425"},{"range":"9426","text":"9427"},{"range":"9428","text":"9429"},{"range":"9430","text":"6914"},{"range":"9431","text":"9432"},{"range":"9433","text":"9434"},{"range":"9435","text":"6914"},{"range":"9436","text":"9437"},{"range":"9438","text":"9439"},{"range":"9440","text":"6914"},{"range":"9441","text":"9442"},{"range":"9443","text":"9444"},{"range":"9445","text":"6914"},{"range":"9446","text":"9447"},{"range":"9448","text":"9449"},{"range":"9450","text":"6914"},"Infinity is overridden by number in this union type.","TSTypeReference","literalOverridden","-Infinity is overridden by number in this union type.",{"range":"9451","text":"9452"},{"range":"9453","text":"9454"},{"range":"9455","text":"6914"},{"range":"9456","text":"9457"},{"range":"9458","text":"9459"},{"range":"9460","text":"6914"},{"range":"9461","text":"9462"},{"range":"9463","text":"9464"},{"range":"9465","text":"6914"},{"range":"9466","text":"9467"},{"range":"9468","text":"9469"},{"range":"9470","text":"9471"},{"range":"9472","text":"9473"},{"range":"9474","text":"9475"},{"range":"9476","text":"9477"},{"range":"9478","text":"9479"},{"range":"9480","text":"9481"},"Do not pass function `isNumeric` directly to `.filter(…)`.",["9482","9483","9484"],{"range":"9485","text":"6733"},{"range":"9486","text":"6733"},{"range":"9487","text":"9488"},{"range":"9489","text":"9490"},{"range":"9491","text":"9492"},{"range":"9493","text":"9494"},{"range":"9495","text":"9496"},{"range":"9497","text":"9498"},{"range":"9499","text":"9500"},{"range":"9501","text":"9502"},{"range":"9503","text":"9504"},{"range":"9505","text":"9506"},{"range":"9507","text":"9508"},{"range":"9509","text":"9510"},{"range":"9511","text":"9512"},{"range":"9513","text":"9514"},{"range":"9515","text":"9516"},{"range":"9517","text":"9518"},"The variable `num` should be named `number_`. A more descriptive name will do too.",{"range":"9519","text":"9520"},{"range":"9521","text":"9522"},{"range":"9523","text":"9524"},{"range":"9525","text":"9526"},{"range":"9527","text":"9528"},{"range":"9529","text":"9530"},{"range":"9531","text":"9532"},{"range":"9533","text":"9534"},{"range":"9535","text":"9536"},{"range":"9537","text":"9538"},{"range":"9539","text":"9540"},{"range":"9541","text":"9542"},{"range":"9543","text":"9544"},{"range":"9545","text":"9546"},{"range":"9547","text":"9548"},{"range":"9549","text":"9550"},{"range":"9551","text":"9552"},{"range":"9553","text":"6733"},{"range":"9554","text":"6733"},{"range":"9555","text":"6733"},{"range":"9556","text":"6733"},{"range":"9557","text":"6729"},{"range":"9558","text":"6731"},{"range":"9559","text":"6733"},{"range":"9560","text":"6733"},{"range":"9561","text":"6733"},{"range":"9562","text":"6733"},{"range":"9563","text":"6733"},{"range":"9564","text":"6733"},{"range":"9565","text":"6733"},{"range":"9566","text":"6733"},{"range":"9567","text":"9568"},{"range":"9569","text":"9570"},{"range":"9571","text":"6914"},"Unsafe member access .then on an `any` value.",{"range":"9572","text":"9573"},{"range":"9574","text":"6733"},{"range":"9575","text":"6733"},{"range":"9576","text":"6733"},{"range":"9577","text":"6733"},{"range":"9578","text":"6733"},{"range":"9579","text":"6733"},{"range":"9580","text":"9581"},{"range":"9582","text":"9583"},{"range":"9584","text":"9585"},{"range":"9586","text":"9587"},{"range":"9588","text":"9589"},{"range":"9590","text":"9591"},{"range":"9592","text":"9593"},{"range":"9594","text":"9595"},{"range":"9596","text":"9597"},{"range":"9598","text":"9599"},{"range":"9600","text":"6733"},{"range":"9601","text":"6733"},{"range":"9602","text":"6733"},{"range":"9603","text":"6733"},{"range":"9604","text":"6731"},{"range":"9605","text":"6733"},{"range":"9606","text":"6733"},{"range":"9607","text":"6733"},{"range":"9608","text":"6733"},{"range":"9609","text":"9610"},"Unsafe argument of type `any[]` assigned to a parameter of type `Promisable<T>[]`.",{"range":"9611","text":"6733"},{"range":"9612","text":"6733"},"vitest/prefer-strict-boolean-matchers","Prefer using `toBe(true)` to test value is `true`","preferToBeTrue",{"range":"9613","text":"9614"},{"range":"9615","text":"6733"},{"range":"9616","text":"6733"},{"range":"9617","text":"6733"},{"range":"9618","text":"6733"},{"range":"9619","text":"9614"},{"range":"9620","text":"6733"},{"range":"9621","text":"6733"},{"range":"9622","text":"6733"},{"range":"9623","text":"6733"},{"range":"9624","text":"6885"},{"range":"9625","text":"6733"},{"range":"9626","text":"6733"},{"range":"9627","text":"9614"},{"range":"9628","text":"6733"},{"range":"9629","text":"6733"},{"range":"9630","text":"9614"},{"range":"9631","text":"6733"},{"range":"9632","text":"6733"},{"range":"9633","text":"9614"},{"range":"9634","text":"6733"},{"range":"9635","text":"6733"},{"range":"9636","text":"9614"},{"range":"9637","text":"9638"},{"range":"9639","text":"9640"},"The variable `Err` should be named `Error_`. A more descriptive name will do too.",{"range":"9641","text":"9642"},{"range":"9643","text":"9644"},{"range":"9645","text":"9646"},"The variable `str` should be named `string_`. A more descriptive name will do too.",{"range":"9647","text":"9648"},{"range":"9649","text":"9650"},{"range":"9651","text":"6914"},{"range":"9652","text":"9653"},{"range":"9654","text":"6914"},{"range":"9655","text":"9656"},{"range":"9657","text":"6914"},{"range":"9658","text":"9659"},{"range":"9660","text":"6914"},{"range":"9661","text":"9662"},{"range":"9663","text":"6914"},{"range":"9664","text":"9665"},{"range":"9666","text":"9667"},{"range":"9668","text":"9669"},"@typescript-eslint/no-misused-spread","Using the spread operator on a string can mishandle special characters, as can `.split(\"\")`.\n- `...` produces Unicode code points, which will decompose complex emojis into individual emojis\n- .split(\"\") produces UTF-16 code units, which breaks rich characters in many languages\nConsider using `Intl.Segmenter` for locale-aware string decomposition.\nOtherwise, if you don't need to preserve emojis or other non-Ascii characters, disable this lint rule on this line or configure the 'allow' rule option.","SpreadElement","noStringSpread","Do not pass function `isDigitString` directly to `.every(…)`.",["9670","9671","9672"],{"range":"9673","text":"9674"},{"range":"9675","text":"9676"},{"range":"9677","text":"9678"},{"range":"9679","text":"9680"},{"range":"9681","text":"9682"},{"range":"9683","text":"9684"},{"range":"9685","text":"9686"},{"range":"9687","text":"9688"},{"range":"9689","text":"9690"},{"range":"9691","text":"9692"},{"range":"9693","text":"9694"},{"range":"9695","text":"9696"},{"range":"9697","text":"9698"},{"range":"9699","text":"9700"},"The variable `acc` should be named `accumulator`. A more descriptive name will do too.",{"range":"9701","text":"9702"},{"range":"9703","text":"9704"},{"range":"9705","text":"9706"},["9707","9708","9709"],{"range":"9710","text":"9711"},{"range":"9712","text":"9713"},{"range":"9714","text":"9715"},{"range":"9716","text":"9717"},{"range":"9718","text":"9719"},"The variable `lGCC_handleVarFunction` should be named `lGC_handleVariableFunction`. A more descriptive name will do too.",{"range":"9720","text":"9721"},{"range":"9722","text":"9723"},"The variable `firstArg` should be named `firstArgument`. A more descriptive name will do too.",{"range":"9724","text":"9725"},{"range":"9726","text":"9727"},"Unsafe argument of type `any` assigned to a parameter of type `GroupedToken`.",{"range":"9728","text":"9729"},"The variable `lGCC_handleVarIdentifier` should be named `lGC_handleVariableIdentifier`. A more descriptive name will do too.",{"range":"9730","text":"9731"},{"range":"9732","text":"9733"},"The variable `otherArgs` should be named `otherArguments`. A more descriptive name will do too.",{"range":"9734","text":"9735"},"The variable `trimmedOtherArgs` should be named `trimmedOtherArguments`. A more descriptive name will do too.",{"range":"9736","text":"9737"},"The variable `secondArg` should be named `secondArgument`. A more descriptive name will do too.",{"range":"9738","text":"9739"},{"range":"9740","text":"9741"},"The variable `lGCC_handleVarFallback` should be named `lGC_handleVariableFallback`. A more descriptive name will do too.",{"range":"9742","text":"9743"},"The variable `fallbackArg` should be named `fallbackArgument`. A more descriptive name will do too.",{"range":"9744","text":"9745"},{"range":"9746","text":"9747"},{"range":"9748","text":"9749"},{"range":"9750","text":"9751"},"Do not pass function `lGCC_reduceTokenToString` directly to `.reduce(…)`.",["9752","9753","9754"],{"range":"9755","text":"6733"},{"range":"9756","text":"6733"},{"range":"9757","text":"6733"},{"range":"9758","text":"6733"},{"range":"9759","text":"6733"},{"range":"9760","text":"6733"},{"range":"9761","text":"6733"},{"range":"9762","text":"6733"},{"range":"9763","text":"6733"},{"range":"9764","text":"6733"},"Do not pass function `isTokenEOF` directly to `.some(…)`.",["9765","9766","9767"],{"range":"9768","text":"6733"},{"range":"9769","text":"6733"},{"range":"9770","text":"6733"},{"range":"9771","text":"6733"},{"range":"9772","text":"6733"},{"range":"9773","text":"6733"},{"range":"9774","text":"6733"},{"range":"9775","text":"6733"},{"range":"9776","text":"6733"},{"range":"9777","text":"6733"},{"range":"9778","text":"6733"},{"range":"9779","text":"6733"},{"range":"9780","text":"6733"},{"range":"9781","text":"6733"},{"range":"9782","text":"6733"},{"range":"9783","text":"6733"},{"range":"9784","text":"6733"},{"range":"9785","text":"6733"},{"range":"9786","text":"6733"},{"range":"9787","text":"6733"},{"range":"9788","text":"6733"},{"range":"9789","text":"6733"},{"range":"9790","text":"6733"},{"range":"9791","text":"6733"},{"range":"9792","text":"6733"},{"range":"9793","text":"6733"},{"range":"9794","text":"6733"},{"range":"9795","text":"6733"},{"range":"9796","text":"6733"},{"range":"9797","text":"6733"},{"range":"9798","text":"6733"},{"range":"9799","text":"6733"},{"range":"9800","text":"6733"},{"range":"9801","text":"6733"},{"range":"9802","text":"6733"},{"range":"9803","text":"6733"},{"range":"9804","text":"6733"},{"range":"9805","text":"6733"},{"range":"9806","text":"6733"},{"range":"9807","text":"6733"},{"range":"9808","text":"6733"},{"range":"9809","text":"6733"},{"range":"9810","text":"6733"},{"range":"9811","text":"6733"},{"range":"9812","text":"6733"},{"range":"9813","text":"6733"},{"range":"9814","text":"6733"},{"range":"9815","text":"6733"},{"range":"9816","text":"6733"},{"range":"9817","text":"6733"},{"range":"9818","text":"6733"},{"range":"9819","text":"6733"},{"range":"9820","text":"6733"},{"range":"9821","text":"6733"},{"range":"9822","text":"9823"},{"range":"9824","text":"9825"},{"range":"9826","text":"9827"},{"range":"9828","text":"9829"},{"range":"9830","text":"9831"},{"range":"9832","text":"9833"},{"range":"9834","text":"9835"},{"range":"9836","text":"9837"},{"range":"9838","text":"9839"},{"range":"9840","text":"9841"},{"range":"9842","text":"9843"},{"range":"9844","text":"9845"},{"range":"9846","text":"9847"},{"range":"9848","text":"9849"},{"range":"9850","text":"9851"},{"range":"9852","text":"9853"},{"range":"9854","text":"9855"},{"range":"9856","text":"9857"},{"range":"9858","text":"9859"},{"range":"9860","text":"9861"},{"range":"9862","text":"9863"},{"range":"9864","text":"9865"},{"range":"9866","text":"9867"},{"range":"9868","text":"9869"},{"range":"9870","text":"9871"},{"range":"9872","text":"9873"},{"range":"9874","text":"9875"},{"range":"9876","text":"9877"},{"range":"9878","text":"9879"},{"range":"9880","text":"9881"},{"range":"9882","text":"9883"},{"range":"9884","text":"9885"},{"range":"9886","text":"9887"},{"range":"9888","text":"9889"},{"range":"9890","text":"9891"},{"range":"9892","text":"9893"},{"range":"9894","text":"9895"},{"range":"9896","text":"9897"},{"range":"9898","text":"9899"},"Missing JSDoc @param \"separator\" declaration.",{"range":"9900","text":"9901"},"Missing JSDoc @param \"strings\" declaration.",{"range":"9902","text":"9903"},"Do not pass function `isString` directly to `.every(…)`.",["9904","9905","9906"],"'strings0' will use Object's default stringification format ('[object Object]') when stringified.","Invalid type \"Iterable<any>\" of template literal expression.",{"range":"9907","text":"9908"},{"range":"9909","text":"9910"},["9911","9912","9913"],"Invalid type \"AsyncIterable<any> | Iterable<any>\" of template literal expression.",{"range":"9914","text":"9915"},"Unsafe spread of an `any` type.","unsafeSpread",{"range":"9916","text":"9917"},{"range":"9918","text":"9919"},{"range":"9920","text":"9921"},{"range":"9922","text":"9923"},{"range":"9924","text":"9925"},"Unsafe argument of type `any` assigned to a parameter of type `Iterable<string>`.",{"range":"9926","text":"6885"},"Unsafe argument of type `any` assigned to a parameter of type `MaybeAsyncIterable<string>`.",{"range":"9927","text":"6885"},{"range":"9928","text":"6885"},{"range":"9929","text":"9930"},{"range":"9931","text":"9932"},"The variable `stringsArr` should be named `stringsArray`. A more descriptive name will do too.",{"range":"9933","text":"9934"},{"range":"9935","text":"9936"},{"range":"9937","text":"9938"},{"range":"9939","text":"9940"},{"range":"9941","text":"9942"},{"range":"9943","text":"6733"},{"range":"9944","text":"6733"},{"range":"9945","text":"6733"},{"range":"9946","text":"6733"},{"range":"9947","text":"9948"},{"range":"9949","text":"6733"},{"range":"9950","text":"6733"},{"range":"9951","text":"6733"},{"range":"9952","text":"6733"},{"range":"9953","text":"6733"},{"range":"9954","text":"6733"},{"range":"9955","text":"6733"},{"range":"9956","text":"6733"},"n/no-extraneous-import","\"@monochromatic-dev/config-vite\" is extraneous.","extraneous",{"range":"9957","text":"6663"},{"range":"9958","text":"6663"},"unicorn/relative-url-style","Remove the `./` prefix from the relative URL.","never",{"range":"9959","text":"8093"},"Unsafe assignment of type `any[]` to a variable of type `AcceptedPlugin[]`.","Property","unsafeAssignment","Unsafe call of a(n) `error` type typed value.","ArrowFunctionExpression","Parsing error: The keyword 'interface' is reserved","Parsing error: Unexpected token {","Can't resolve 'astro:content' in 'C:\\Users\\user\\Text\\Projects\\Aquaticat\\monochromatic2025MAY24-pnpmTest\\packages\\site\\astro-test\\src'","Parsing error: Unexpected token Props",{"range":"9960","text":"6914"},"Async function 'getStaticPaths' has no 'await' expression.",["9961"],{"range":"9962","text":"6914"},"Unsafe member access .lang on an `any` value.","Computed name [params.lang] resolves to an `any` value.","unsafeComputedMemberAccess","Parsing error: Unexpected token !",{"range":"9963","text":"9964"},{"range":"9965","text":"6733"},{"range":"9966","text":"6733"},{"range":"9967","text":"6733"},{"range":"9968","text":"6733"},{"range":"9969","text":"6733"},{"range":"9970","text":"6733"},{"range":"9971","text":"6733"},{"range":"9972","text":"6733"},{"range":"9973","text":"6729"},{"range":"9974","text":"6733"},{"range":"9975","text":"6733"},{"range":"9976","text":"6731"},{"range":"9977","text":"6733"},{"range":"9978","text":"6733"},{"range":"9979","text":"6733"},{"range":"9980","text":"6733"},{"range":"9981","text":"6733"},{"range":"9982","text":"6733"},{"range":"9983","text":"6733"},{"range":"9984","text":"6733"},{"range":"9985","text":"9986"},{"range":"9987","text":"6733"},{"range":"9988","text":"6733"},{"range":"9989","text":"6733"},{"range":"9990","text":"6733"},{"range":"9991","text":"6733"},{"range":"9992","text":"6733"},{"range":"9993","text":"6733"},{"range":"9994","text":"6733"},{"range":"9995","text":"6729"},{"range":"9996","text":"6733"},{"range":"9997","text":"6733"},{"range":"9998","text":"6733"},{"range":"9999","text":"6733"},{"range":"10000","text":"6733"},{"range":"10001","text":"6733"},{"range":"10002","text":"6733"},{"range":"10003","text":"6733"},{"range":"10004","text":"10005"},{"range":"10006","text":"6729"},{"range":"10007","text":"6731"},{"range":"10008","text":"6733"},{"range":"10009","text":"6733"},"Do not pass function `identity` directly to `.map(…)`.",["10010","10011","10012"],{"range":"10013","text":"6733"},{"range":"10014","text":"6733"},"Do not pass function `identity` directly to `.filter(…)`.",["10015","10016","10017"],{"range":"10018","text":"6733"},{"range":"10019","text":"6733"},{"range":"10020","text":"6885"},{"range":"10021","text":"10022"},{"range":"10023","text":"6733"},{"range":"10024","text":"6733"},{"range":"10025","text":"6733"},{"range":"10026","text":"6733"},{"range":"10027","text":"6733"},{"range":"10028","text":"6733"},{"range":"10029","text":"6733"},{"range":"10030","text":"6733"},{"range":"10031","text":"6733"},{"range":"10032","text":"6733"},{"range":"10033","text":"6733"},{"range":"10034","text":"6733"},{"range":"10035","text":"6733"},{"range":"10036","text":"6733"},{"range":"10037","text":"6733"},{"range":"10038","text":"6733"},{"range":"10039","text":"6733"},{"range":"10040","text":"6733"},{"range":"10041","text":"6733"},{"range":"10042","text":"6733"},{"range":"10043","text":"6733"},{"range":"10044","text":"6733"},{"range":"10045","text":"6733"},{"range":"10046","text":"6733"},{"range":"10047","text":"6733"},{"range":"10048","text":"6733"},{"range":"10049","text":"6733"},{"range":"10050","text":"6733"},{"range":"10051","text":"6733"},{"range":"10052","text":"6733"},{"range":"10053","text":"6733"},{"range":"10054","text":"6733"},{"range":"10055","text":"6733"},{"range":"10056","text":"6733"},{"range":"10057","text":"6733"},{"range":"10058","text":"6733"},{"range":"10059","text":"6733"},{"range":"10060","text":"6733"},{"range":"10061","text":"6733"},{"range":"10062","text":"6733"},{"range":"10063","text":"6733"},{"range":"10064","text":"6733"},{"range":"10065","text":"6733"},{"range":"10066","text":"6733"},{"range":"10067","text":"6733"},{"range":"10068","text":"6733"},{"range":"10069","text":"6733"},{"range":"10070","text":"6733"},{"range":"10071","text":"6733"},{"range":"10072","text":"6733"},{"range":"10073","text":"6733"},{"range":"10074","text":"6733"},{"range":"10075","text":"6733"},{"range":"10076","text":"6733"},{"range":"10077","text":"10078"},{"range":"10079","text":"6733"},{"range":"10080","text":"6733"},{"range":"10081","text":"6733"},{"range":"10082","text":"6733"},{"range":"10083","text":"6733"},{"range":"10084","text":"6733"},{"range":"10085","text":"6733"},{"range":"10086","text":"6733"},{"range":"10087","text":"6733"},{"range":"10088","text":"6733"},{"range":"10089","text":"6733"},{"range":"10090","text":"6733"},{"range":"10091","text":"6733"},{"range":"10092","text":"6733"},{"range":"10093","text":"10094"},{"range":"10095","text":"10096"},{"range":"10097","text":"10098"},{"range":"10099","text":"10100"},{"range":"10101","text":"10102"},{"range":"10103","text":"6733"},{"range":"10104","text":"6733"},{"range":"10105","text":"6733"},{"range":"10106","text":"6733"},{"range":"10107","text":"10108"},{"range":"10109","text":"6733"},{"range":"10110","text":"6733"},{"range":"10111","text":"6733"},{"range":"10112","text":"6733"},"jsdoc/require-returns-check","JSDoc @returns declaration present but return expression not available in function.",{"range":"10113","text":"10114"},{"range":"10115","text":"10116"},"The filename `dom.setCssFromParam.ts` should be named `dom.setCssFromParameter.ts`. A more descriptive name will do too.","Program","The variable `onLoadSetCssFromUrlParams` should be named `onLoadSetCssFromUrlParameters`. A more descriptive name will do too.","The variable `params` should be named `parameters`. A more descriptive name will do too.",{"range":"10117","text":"10118"},{"range":"10119","text":"10120"},{"range":"10121","text":"6733"},{"range":"10122","text":"6733"},{"range":"10123","text":"6733"},{"range":"10124","text":"6733"},{"range":"10125","text":"6733"},{"range":"10126","text":"6733"},{"range":"10127","text":"6733"},{"range":"10128","text":"6733"},{"range":"10129","text":"6733"},{"range":"10130","text":"6733"},{"range":"10131","text":"6733"},{"range":"10132","text":"6733"},{"range":"10133","text":"10134"},{"range":"10135","text":"6733"},{"range":"10136","text":"6733"},{"range":"10137","text":"6733"},{"range":"10138","text":"6733"},{"range":"10139","text":"6733"},{"range":"10140","text":"6733"},{"range":"10141","text":"6733"},{"range":"10142","text":"6733"},{"range":"10143","text":"6733"},{"range":"10144","text":"6733"},{"range":"10145","text":"6733"},{"range":"10146","text":"6733"},{"range":"10147","text":"10148"},{"range":"10149","text":"6733"},{"range":"10150","text":"6733"},{"range":"10151","text":"6733"},{"range":"10152","text":"6733"},{"range":"10153","text":"6733"},{"range":"10154","text":"6733"},{"range":"10155","text":"6733"},{"range":"10156","text":"6733"},{"range":"10157","text":"6733"},{"range":"10158","text":"6733"},{"range":"10159","text":"6733"},{"range":"10160","text":"6733"},{"range":"10161","text":"6733"},{"range":"10162","text":"6733"},{"range":"10163","text":"6733"},{"range":"10164","text":"6733"},{"range":"10165","text":"10166"},{"range":"10167","text":"6733"},{"range":"10168","text":"6733"},{"range":"10169","text":"6733"},{"range":"10170","text":"6733"},{"range":"10171","text":"6733"},{"range":"10172","text":"6733"},{"range":"10173","text":"6733"},{"range":"10174","text":"6733"},{"range":"10175","text":"6733"},{"range":"10176","text":"6733"},{"range":"10177","text":"6733"},{"range":"10178","text":"6733"},{"range":"10179","text":"6733"},{"range":"10180","text":"6733"},{"range":"10181","text":"6733"},{"range":"10182","text":"6733"},{"range":"10183","text":"6733"},{"range":"10184","text":"6733"},{"range":"10185","text":"10186"},{"range":"10187","text":"10188"},{"range":"10189","text":"10190"},"The filename `function.ignoreExtraArgs.ts` should be named `function.ignoreExtraArguments.ts`. A more descriptive name will do too.","The variable `ignoreExtraArgs` should be named `ignoreExtraArguments`. A more descriptive name will do too.",{"range":"10191","text":"7493"},"The variable `allArgs` should be named `allArguments`. A more descriptive name will do too.",{"range":"10192","text":"10193"},"The variable `expectedArgCount` should be named `expectedArgumentCount`. A more descriptive name will do too.",{"range":"10194","text":"10195"},{"range":"10196","text":"10197"},"The variable `argsForFn` should be named `argumentsForFn`. A more descriptive name will do too.",{"range":"10198","text":"10199"},{"range":"10200","text":"10201"},{"range":"10202","text":"6733"},{"range":"10203","text":"6733"},{"range":"10204","text":"6733"},{"range":"10205","text":"6733"},{"range":"10206","text":"6733"},{"range":"10207","text":"6733"},{"range":"10208","text":"6733"},{"range":"10209","text":"6733"},{"range":"10210","text":"6733"},{"range":"10211","text":"6733"},{"range":"10212","text":"6733"},{"range":"10213","text":"6733"},{"range":"10214","text":"6733"},{"range":"10215","text":"6733"},{"range":"10216","text":"6733"},{"range":"10217","text":"6733"},{"range":"10218","text":"6733"},{"range":"10219","text":"6733"},"@typescript-eslint/no-unnecessary-boolean-literal-compare","This expression unnecessarily compares a boolean value to a boolean instead of using it directly.","direct",{"range":"10220","text":"10221"},{"range":"10222","text":"6733"},{"range":"10223","text":"6733"},{"range":"10224","text":"10225"},{"range":"10226","text":"6733"},{"range":"10227","text":"6733"},{"range":"10228","text":"6733"},{"range":"10229","text":"6733"},{"range":"10230","text":"6733"},{"range":"10231","text":"6733"},{"range":"10232","text":"6733"},{"range":"10233","text":"6733"},{"range":"10234","text":"6733"},{"range":"10235","text":"6733"},{"range":"10236","text":"6733"},{"range":"10237","text":"6733"},{"range":"10238","text":"6733"},{"range":"10239","text":"6733"},{"range":"10240","text":"6885"},{"range":"10241","text":"6733"},{"range":"10242","text":"6733"},{"range":"10243","text":"6733"},{"range":"10244","text":"6733"},{"range":"10245","text":"6733"},{"range":"10246","text":"6733"},{"range":"10247","text":"6733"},{"range":"10248","text":"6733"},{"range":"10249","text":"10250"},{"range":"10251","text":"6733"},{"range":"10252","text":"6733"},{"range":"10253","text":"6733"},{"range":"10254","text":"6733"},{"range":"10255","text":"6733"},{"range":"10256","text":"6733"},{"range":"10257","text":"6733"},{"range":"10258","text":"6733"},{"range":"10259","text":"6733"},{"range":"10260","text":"6733"},{"range":"10261","text":"6733"},{"range":"10262","text":"6733"},{"range":"10263","text":"6733"},{"range":"10264","text":"6733"},{"range":"10265","text":"6733"},{"range":"10266","text":"6733"},{"range":"10267","text":"6733"},{"range":"10268","text":"6733"},{"range":"10269","text":"6733"},{"range":"10270","text":"6733"},{"range":"10271","text":"6733"},{"range":"10272","text":"6733"},{"range":"10273","text":"6733"},{"range":"10274","text":"6733"},{"range":"10275","text":"6733"},{"range":"10276","text":"6733"},{"range":"10277","text":"6733"},{"range":"10278","text":"6733"},{"range":"10279","text":"6733"},{"range":"10280","text":"6733"},{"range":"10281","text":"10282"},{"range":"10283","text":"6733"},{"range":"10284","text":"6733"},{"range":"10285","text":"6733"},{"range":"10286","text":"6733"},{"range":"10287","text":"6733"},{"range":"10288","text":"6733"},{"range":"10289","text":"6885"},{"range":"10290","text":"6733"},{"range":"10291","text":"6733"},{"range":"10292","text":"6733"},{"range":"10293","text":"6733"},{"range":"10294","text":"6733"},{"range":"10295","text":"6733"},{"range":"10296","text":"6733"},{"range":"10297","text":"6733"},{"range":"10298","text":"6733"},{"range":"10299","text":"6733"},{"range":"10300","text":"6885"},{"range":"10301","text":"6733"},{"range":"10302","text":"6733"},{"range":"10303","text":"6733"},{"range":"10304","text":"6733"},{"range":"10305","text":"6885"},"The variable `srcDir` should be named `sourceDir`. A more descriptive name will do too.",{"range":"10306","text":"10307"},"unicorn/prefer-top-level-await","Prefer top-level await over an async function `compileScript` call.","identifier",["10308"],{"range":"10309","text":"10310"},{"range":"10311","text":"10312"},"n/no-process-exit","Don't use process.exit(); throw an error instead.","noProcessExit","n/hashbang","This file needs shebang \"#!/usr/bin/env node\".","expectedHashbangNode",{"range":"10313","text":"10314"},"Invalid operand for a '+' operation. Operands must each be a number or string. Got `any`.","Unsafe member access .toString on an `any` value.","Unsafe argument of type `any` assigned to a parameter of type `string | Uint8Array<ArrayBufferLike>`.","Unsafe member access .includes on an `any` value.","The variable `browserDirs` should be named `browserDirectories`. A more descriptive name will do too.",{"range":"10315","text":"10316"},"unicorn/prefer-module","Do not use \"require\".","error/identifier","Unsafe member access .readdirSync on an `any` value.","Unsafe member access .some on an `any` value.","The variable `pkg` should be named `package_`. A more descriptive name will do too.",{"range":"10317","text":"10318"},{"range":"10319","text":"10318"},{"range":"10320","text":"10321"},{"range":"10322","text":"10323"},{"range":"10324","text":"6733"},{"range":"10325","text":"6733"},{"range":"10326","text":"6733"},{"range":"10327","text":"6733"},{"range":"10328","text":"6733"},{"range":"10329","text":"6733"},{"range":"10330","text":"6729"},{"range":"10331","text":"6731"},{"range":"10332","text":"6733"},{"range":"10333","text":"6733"},{"range":"10334","text":"6733"},{"range":"10335","text":"6733"},{"range":"10336","text":"6733"},{"range":"10337","text":"6733"},{"range":"10338","text":"6733"},{"range":"10339","text":"6733"},{"range":"10340","text":"6733"},{"range":"10341","text":"6733"},{"range":"10342","text":"6733"},{"range":"10343","text":"6733"},{"range":"10344","text":"6733"},{"range":"10345","text":"6733"},{"range":"10346","text":"6733"},{"range":"10347","text":"6733"},{"range":"10348","text":"6733"},{"range":"10349","text":"6733"},{"range":"10350","text":"6733"},{"range":"10351","text":"6733"},{"range":"10352","text":"6733"},{"range":"10353","text":"6733"},{"range":"10354","text":"6733"},{"range":"10355","text":"6733"},{"range":"10356","text":"6733"},{"range":"10357","text":"6733"},{"range":"10358","text":"6733"},{"range":"10359","text":"6733"},{"range":"10360","text":"6733"},{"range":"10361","text":"6733"},{"range":"10362","text":"6663"},{"range":"10363","text":"6663"},[188,195],"withContext",[196,319],"context): Promise<void> {\n  if (context.positionals.length === 0) {\n    throw new Error('No path provided');\n  }\n  const path = context",[188,195],[196,319],[204,243],"import.meta.dirname",[7301,7581],"/**\n * @param configDir\n @remarks\n Use it like this:\n\n import { getShared } from '@monochromatic-dev/config-vite';\n\n import { dirname } from 'node:path';\n import { fileURLToPath } from 'node:url';\n\n const __dirname = dirname(fileURLToPath(import.meta.url));\n\n export default getShared(__dirname);\n */",[7301,7581],"/**\n @remarks\n Use it like this:\n \n import { getShared } from '@monochromatic-dev/config-vite';\n \n import { dirname } from 'node:path';\n import { fileURLToPath } from 'node:url';\n \n const __dirname = dirname(fileURLToPath(import.meta.url));\n \n export default getShared(__dirname);\n */",[12449,12449],"/**\n                 *\n                 */\n                ",[13744,13750],"/**\n * \n * @param configDir\n */",[188,227],{"messageId":"10364","data":"10365","fix":"10366","desc":"10367"},{"messageId":"10364","data":"10368","fix":"10369","desc":"10367"},{"messageId":"10364","data":"10370","fix":"10371","desc":"10372"},{"messageId":"10364","data":"10373","fix":"10374","desc":"10375"},{"messageId":"10364","data":"10376","fix":"10377","desc":"10378"},[5675,5745],"const styles: [PaintStyle | TextStyle | EffectStyle | GridStyle][] = [];",[5746,5781],"const paintStyles: PaintStyle[] = [];",[5782,5815],"const textStyles: TextStyle[] = [];",[5816,5853],"const effectStyles: EffectStyle[] = [];",[5854,5887],"const gridStyles: GridStyle[] = [];",[6539,6778],"colorString: string): RGBA => {\n  const isRgba = colorString.startsWith('rgba(');\n  const isRgb = colorString.startsWith('rgb(');\n  if (!isRgba && !isRgb) {\n    throw new TypeError(`Invalid color format: ${colorString}`);\n  }\n  const values = colorString",[7102,9883],"handleSettingVariableMessage = ({\n  cssVar,\n  computedValue,\n  originalValue,\n  varType,\n  mode,\n  originalComputedValue,\n}: AuthoredCss): void => {\n  const getVariable = (cssVar: `--${string}`): EnhancedVariable => {\n    return enhancedVariables.find(\n      function compareVariableByTruncatedName(\n        enhancedVariable: EnhancedVariable,\n      ): boolean {\n        return enhancedVariable.name === cssVar.slice('--'.length);\n      },\n    )!;\n  };\n\n  const logVariableChange = (): void => {\n    console.log(\n      `Setting variable ${cssVar} to ${computedValue} in mode ${mode} with original computed value ${originalComputedValue}`,\n    );\n  };\n\n  const handleSimpleTypeChange = (value: string | number | boolean): void => {\n    if (String(computedValue) !== String(originalValue)) {\n      logVariableChange();\n      getVariable(cssVar).setValueByModeName(value, mode);\n    }\n  };\n\n  if (varType === 'number' || varType === 'boolean') {\n    handleSimpleTypeChange(computedValue);\n    return;\n  }\n\n  if (varType === 'color') {\n    // If color (computed color) can't parse as a color string,\n    // the code has failed, so errors aren't caught here.\n    const color = parseColorString(computedValue);\n\n    try {\n      const originalColor = parseColorString(originalValue);\n\n      if (\n        almostEqual(color.r, originalColor.r)\n        && almostEqual(color.g, originalColor.g)\n        && almostEqual(color.b, originalColor.b)\n        && almostEqual(color.a, originalColor.a)\n      ) {\n        return;\n      }\n    } catch {\n      // If originalColor can't parse as a color string,\n      // the variable needs setting.\n    }\n\n    logVariableChange();\n    getVariable(cssVar).setValueByModeName(color, mode);\n    return;\n  }\n\n  if (varType === 'string') {\n    if (computedValue !== originalValue) {\n      const valueToSet = (computedValue.startsWith(\"'\") && computedValue.endsWith(\"'\"))\n        ? computedValue.slice(\"'\".length, -\"'\".length)\n        : computedValue;\n\n      logVariableChange();\n      getVariable(cssVar).setValueByModeName(valueToSet, mode);\n    }\n    return;\n  }\n\n  throw new Error(`Unrecognized variable ${cssVar} type ${varType} in mode ${mode}`);\n};\nconst main = async (): Promise<void> => {\n  // Fill the local variable variables.\n  await populateFigmaVariables();\n\n  normalizeVariables();\n\n  const generatedCssForLocalVariables: string = enhancedVariables\n    .map((enhancedVariable) => enhancedVariable.generatedCss)\n    .join('\\n');\n\n  console.log(generatedCssForLocalVariables);\n\n  figma.showUI(__html__, { themeColors: true });\n\n  figma.ui.postMessage({ generatedCssForLocalVariables }, { origin: '*' });\n\n  figma.ui.onmessage = (message): void => {\n    console.log('got this from the UI', message);\n    if (message.cssVar) {\n      handleSettingVariableMessage",[7269,7507],"cssVariable: `--${string}`): EnhancedVariable => {\n    return enhancedVariables.find(\n      function compareVariableByTruncatedName(\n        enhancedVariable: EnhancedVariable,\n      ): boolean {\n        return enhancedVariable.name === cssVariable",{"messageId":"10379","fix":"10380","desc":"10381"},{"messageId":"10382","fix":"10383","desc":"10384"},[306,8758],"testCssVariable = async (\n  cssValue: string,\n  cssVar: `--${string}`,\n  mode: string,\n  depth = 0,\n): Promise<AuthoredCss> => {\n  if (depth > 10) {\n    throw new Error('Infinite loop detected');\n  }\n  console.log(\n    `testCssVar(cssValue: ${cssValue}, cssVar: ${cssVar}, mode: ${mode}, depth: ${depth})`,\n  );\n\n  const modeApplier: HTMLDivElement =\n    document.querySelector(`body > [data-mode=\"${mode}\"]`)\n      ?? (function createModeApplier(): HTMLDivElement {\n        const createdModeApplier = document.createElement('div');\n        createdModeApplier.dataset.mode = mode;\n        document.body.append(createdModeApplier);\n        return createdModeApplier;\n      })();\n\n  {\n    const testElementAssumeUnitfulLength = document.createElement('div');\n    testElementAssumeUnitfulLength.style.width = cssValue;\n    testElementAssumeUnitfulLength.style.height = cssValue;\n    modeApplier.append(testElementAssumeUnitfulLength);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeUnitfulLength,\n    );\n    // TODO: Also compute height.\n    const computedWidth = computedStyle.getPropertyValue(\n      'width',\n    );\n    testElementAssumeUnitfulLength.remove();\n    if (\n      computedWidth\n        === `${DEFAULT_ELEMENT_WIDTH_NUMBER}px`\n    ) {\n      /*            console.log(\n        `${cssVar} isn't a unitful length value.\n        Try treating it as a number`,\n      );*/\n    } else {\n      return {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: Number(computedWidth.slice(0, -('px'.length))),\n        varType: 'number',\n        mode,\n        error: {\n          message: outdent({ newline: ' ' })`\n            Figma doesn't support unitful length values,\n            consider using a number or string for this value.\n            If you're relying on the behavior of converting from rem to px,\n            you can safely ignore this error.`,\n          level: cssValue.includes('em') ? 'notice' : 'error',\n        },\n        originalComputedValue: computedWidth,\n      };\n    }\n  }\n  {\n    const testElementAssumeNumber = document.createElement(\n      'div',\n    );\n    testElementAssumeNumber.style.width = `${cssValue}px`;\n    testElementAssumeNumber.style.height = `${cssValue}px`;\n    modeApplier.append(testElementAssumeNumber);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeNumber,\n    );\n    const computedWidth = computedStyle.getPropertyValue(\n      'width',\n    );\n    testElementAssumeNumber.remove();\n    if (\n      computedWidth\n        === `${DEFAULT_ELEMENT_WIDTH_NUMBER}px`\n    ) {\n      /*            console.log(\n        `${cssVar} isn't a number value.\n        Try treating it as a unitful length value`,\n      );*/\n    } else {\n      return {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: Number(computedWidth.slice(0, -('px'.length))),\n        varType: 'number',\n        mode,\n        originalComputedValue: computedWidth,\n      };\n    }\n  }\n  {\n    const testElementAssumeColor = document.createElement(\n      'div',\n    );\n    testElementAssumeColor.style.backgroundColor = cssValue;\n    testElementAssumeColor.style.color = cssValue;\n    document.body.append(testElementAssumeColor);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeColor,\n    );\n    const computedBackgroundColor = computedStyle\n      .getPropertyValue(\n        'background-color',\n      );\n    const computedColor = computedStyle.getPropertyValue(\n      'color',\n    );\n    testElementAssumeColor.remove();\n    if (computedBackgroundColor === computedColor) {\n      // eslint-disable-next-line no-else-return\n      return {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: computedBackgroundColor as ComputedColor,\n        varType: 'color',\n        mode,\n        originalComputedValue: computedBackgroundColor,\n      };\n    } else {\n      /*            console.log(\n        `${cssVar} isn't a color value. Try treating it as something else.`,\n      );*/\n    }\n  }\n  {\n    const testElementAssumeBoxShadow = document.createElement(\n      'div',\n    );\n    testElementAssumeBoxShadow.style.boxShadow = cssValue;\n    document.body.append(testElementAssumeBoxShadow);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeBoxShadow,\n    );\n    const computedBoxShadow = computedStyle\n      .getPropertyValue(\n        'box-shadow',\n      );\n    testElementAssumeBoxShadow.remove();\n\n    if (\n      // If the element's background color and color are different,\n      // it means at least one of them isn't applied.\n      // It means the CSS var isn't a color value.\n      computedBoxShadow === 'none'\n    ) {\n      /*            console.log(\n        `${cssVar} isn't a box-shadow value.\n        Try treating it as something else.`,\n      );*/\n    } else {\n      return {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: computedBoxShadow,\n        varType: 'box-shadow',\n        mode,\n        originalComputedValue: computedBoxShadow,\n      };\n    }\n  }\n\n  // If all else fails, assume it's a string (CSS content value).\n  // MAYBE: Or should the code filter out the strings before they get inside the iframe?\n  //\n  // string Figma variables already export with quotes\n  // when converting to CSS in the Figma plugin backend script.\n  {\n    const testElementAssumeString = document.createElement(\n      'div',\n    );\n    testElementAssumeString.id = `testElementAssumeString${cssVar}`;\n    testElementAssumeString.style.setProperty(cssVar, cssValue);\n    const assumeStringStyleSheet = await new CSSStyleSheet().replace(\n      `#testElementAssumeString${cssVar}::before { content: ${cssValue}; }`,\n    );\n    document.adoptedStyleSheets.push(assumeStringStyleSheet);\n    document.body.append(testElementAssumeString);\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeString,\n    );\n    // This isn't the resolved content.\n    const computedContent = computedStyle\n      .getPropertyValue(\n        'content',\n      );\n    if (computedContent === 'none') {\n      console\n        .log`${cssVar} isn't a string (CSS content) value.\n              Try treating it as something else.`;\n    } else {\n      return {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: cssValue.includes('var(--')\n          // TODO: Handle the case where cssValue contains var(--)\n          ? cssValue.replaceAll('var(--', 'var(--')\n          : cssValue,\n        varType: 'string',\n        mode,\n        originalComputedValue: computedContent,\n      };\n    }\n  }\n\n  /* vale alex.Ablist = NO */\n  // If even assuming it's a string fails, return invalid.\n  return {\n    cssVar,\n    originalValue: cssValue,\n    computedValue: cssValue,\n    varType: 'invalid',\n    mode,\n    error: {\n      message: outdent({ newline: ' ' })`\n        ${cssVar}'s ${cssValue} can't be treated as a unitful length,\n        a number, a color, a box-shadow, or a string (CSS content) value.`,\n      level: 'error',\n    },\n    originalComputedValue: cssValue,\n  };\n  /* vale alex.Ablist = YES */\n};\n\nconst processCssVarRuleStyle = async (\n  ruleStyle: `--${string}`,\n  rule: CSSStyleRule & { selectorText: string; },\n  mode: string,\n): Promise<void> => {\n  const cssVar = ruleStyle;\n  const cssValue: string = rule.style.getPropertyValue(cssVar);\n\n  // low-hanging fruit:\n  // If the CSS var is a number at first glance,\n  // skip everything and send the value to the backend.\n  // noinspection JSCheckFunctionSignatures\n  if (\n    isPositiveNumberString(cssValue)\n  ) {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: Number(cssValue),\n        varType: 'number',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else if (cssValue === 'true') {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: true,\n        varType: 'boolean',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else if (cssValue === 'false') {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: false,\n        varType: 'boolean',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else {\n    // creates multiple test elements to test the CSS var\n    const authoredCss = await testCssVariable",[349,7149],"cssVariable: `--${string}`,\n  mode: string,\n  depth = 0,\n): Promise<AuthoredCss> => {\n  if (depth > 10) {\n    throw new Error('Infinite loop detected');\n  }\n  console.log(\n    `testCssVar(cssValue: ${cssValue}, cssVar: ${cssVariable}, mode: ${mode}, depth: ${depth})`,\n  );\n\n  const modeApplier: HTMLDivElement =\n    document.querySelector(`body > [data-mode=\"${mode}\"]`)\n      ?? (function createModeApplier(): HTMLDivElement {\n        const createdModeApplier = document.createElement('div');\n        createdModeApplier.dataset.mode = mode;\n        document.body.append(createdModeApplier);\n        return createdModeApplier;\n      })();\n\n  {\n    const testElementAssumeUnitfulLength = document.createElement('div');\n    testElementAssumeUnitfulLength.style.width = cssValue;\n    testElementAssumeUnitfulLength.style.height = cssValue;\n    modeApplier.append(testElementAssumeUnitfulLength);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeUnitfulLength,\n    );\n    // TODO: Also compute height.\n    const computedWidth = computedStyle.getPropertyValue(\n      'width',\n    );\n    testElementAssumeUnitfulLength.remove();\n    if (\n      computedWidth\n        === `${DEFAULT_ELEMENT_WIDTH_NUMBER}px`\n    ) {\n      /*            console.log(\n        `${cssVar} isn't a unitful length value.\n        Try treating it as a number`,\n      );*/\n    } else {\n      return {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: Number(computedWidth.slice(0, -('px'.length))),\n        varType: 'number',\n        mode,\n        error: {\n          message: outdent({ newline: ' ' })`\n            Figma doesn't support unitful length values,\n            consider using a number or string for this value.\n            If you're relying on the behavior of converting from rem to px,\n            you can safely ignore this error.`,\n          level: cssValue.includes('em') ? 'notice' : 'error',\n        },\n        originalComputedValue: computedWidth,\n      };\n    }\n  }\n  {\n    const testElementAssumeNumber = document.createElement(\n      'div',\n    );\n    testElementAssumeNumber.style.width = `${cssValue}px`;\n    testElementAssumeNumber.style.height = `${cssValue}px`;\n    modeApplier.append(testElementAssumeNumber);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeNumber,\n    );\n    const computedWidth = computedStyle.getPropertyValue(\n      'width',\n    );\n    testElementAssumeNumber.remove();\n    if (\n      computedWidth\n        === `${DEFAULT_ELEMENT_WIDTH_NUMBER}px`\n    ) {\n      /*            console.log(\n        `${cssVar} isn't a number value.\n        Try treating it as a unitful length value`,\n      );*/\n    } else {\n      return {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: Number(computedWidth.slice(0, -('px'.length))),\n        varType: 'number',\n        mode,\n        originalComputedValue: computedWidth,\n      };\n    }\n  }\n  {\n    const testElementAssumeColor = document.createElement(\n      'div',\n    );\n    testElementAssumeColor.style.backgroundColor = cssValue;\n    testElementAssumeColor.style.color = cssValue;\n    document.body.append(testElementAssumeColor);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeColor,\n    );\n    const computedBackgroundColor = computedStyle\n      .getPropertyValue(\n        'background-color',\n      );\n    const computedColor = computedStyle.getPropertyValue(\n      'color',\n    );\n    testElementAssumeColor.remove();\n    if (computedBackgroundColor === computedColor) {\n      // eslint-disable-next-line no-else-return\n      return {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: computedBackgroundColor as ComputedColor,\n        varType: 'color',\n        mode,\n        originalComputedValue: computedBackgroundColor,\n      };\n    } else {\n      /*            console.log(\n        `${cssVar} isn't a color value. Try treating it as something else.`,\n      );*/\n    }\n  }\n  {\n    const testElementAssumeBoxShadow = document.createElement(\n      'div',\n    );\n    testElementAssumeBoxShadow.style.boxShadow = cssValue;\n    document.body.append(testElementAssumeBoxShadow);\n\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeBoxShadow,\n    );\n    const computedBoxShadow = computedStyle\n      .getPropertyValue(\n        'box-shadow',\n      );\n    testElementAssumeBoxShadow.remove();\n\n    if (\n      // If the element's background color and color are different,\n      // it means at least one of them isn't applied.\n      // It means the CSS var isn't a color value.\n      computedBoxShadow === 'none'\n    ) {\n      /*            console.log(\n        `${cssVar} isn't a box-shadow value.\n        Try treating it as something else.`,\n      );*/\n    } else {\n      return {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: computedBoxShadow,\n        varType: 'box-shadow',\n        mode,\n        originalComputedValue: computedBoxShadow,\n      };\n    }\n  }\n\n  // If all else fails, assume it's a string (CSS content value).\n  // MAYBE: Or should the code filter out the strings before they get inside the iframe?\n  //\n  // string Figma variables already export with quotes\n  // when converting to CSS in the Figma plugin backend script.\n  {\n    const testElementAssumeString = document.createElement(\n      'div',\n    );\n    testElementAssumeString.id = `testElementAssumeString${cssVariable}`;\n    testElementAssumeString.style.setProperty(cssVariable, cssValue);\n    const assumeStringStyleSheet = await new CSSStyleSheet().replace(\n      `#testElementAssumeString${cssVariable}::before { content: ${cssValue}; }`,\n    );\n    document.adoptedStyleSheets.push(assumeStringStyleSheet);\n    document.body.append(testElementAssumeString);\n    const computedStyle = window.getComputedStyle(\n      testElementAssumeString,\n    );\n    // This isn't the resolved content.\n    const computedContent = computedStyle\n      .getPropertyValue(\n        'content',\n      );\n    if (computedContent === 'none') {\n      console\n        .log`${cssVariable} isn't a string (CSS content) value.\n              Try treating it as something else.`;\n    } else {\n      return {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: cssValue.includes('var(--')\n          // TODO: Handle the case where cssValue contains var(--)\n          ? cssValue.replaceAll('var(--', 'var(--')\n          : cssValue,\n        varType: 'string',\n        mode,\n        originalComputedValue: computedContent,\n      };\n    }\n  }\n\n  /* vale alex.Ablist = NO */\n  // If even assuming it's a string fails, return invalid.\n  return {\n    cssVar: cssVariable,\n    originalValue: cssValue,\n    computedValue: cssValue,\n    varType: 'invalid',\n    mode,\n    error: {\n      message: outdent({ newline: ' ' })`\n        ${cssVariable",[1260,1266],"globalThis",[2618,2624],[3547,3553],[3897,3939]," ",[4545,4551],[6136,6142],[7391,9547],"processCssVariableRuleStyle = async (\n  ruleStyle: `--${string}`,\n  rule: CSSStyleRule & { selectorText: string; },\n  mode: string,\n): Promise<void> => {\n  const cssVar = ruleStyle;\n  const cssValue: string = rule.style.getPropertyValue(cssVar);\n\n  // low-hanging fruit:\n  // If the CSS var is a number at first glance,\n  // skip everything and send the value to the backend.\n  // noinspection JSCheckFunctionSignatures\n  if (\n    isPositiveNumberString(cssValue)\n  ) {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: Number(cssValue),\n        varType: 'number',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else if (cssValue === 'true') {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: true,\n        varType: 'boolean',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else if (cssValue === 'false') {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar,\n        originalValue: cssValue,\n        computedValue: false,\n        varType: 'boolean',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else {\n    // creates multiple test elements to test the CSS var\n    const authoredCss = await testCssVar(cssValue, cssVar, mode, 0);\n\n    // Send the message to the outer iframe\n    window.parent.postMessage({ authoredCss }, '*');\n  }\n};\n\nconst processBasicRule = async (\n  rule: CSSStyleRule & { selectorText: string; },\n  mode: string,\n): Promise<void> => {\n  // console.log(rule.style);\n  const ruleStyles: string[] = [];\n\n  for (let i = 0; i < rule.style.length; i++) {\n    ruleStyles.push(rule.style.item(i));\n  }\n\n  /*  for (const ruleStyle of ruleStyles) {\n    if (ruleStyle.startsWith('--')) {\n      await processCssVarRuleStyle(ruleStyle, rule, mode);\n    } else {\n      // console.log(`non-css var: ${ruleStyle}`);\n    }\n  }*/\n  await forEachConcur(\n    async function processRuleStyle(ruleStyle: string) {\n      if (ruleStyle.startsWith('--')) {\n        await processCssVariableRuleStyle",[7548,8775],"cssVariable = ruleStyle;\n  const cssValue: string = rule.style.getPropertyValue(cssVariable);\n\n  // low-hanging fruit:\n  // If the CSS var is a number at first glance,\n  // skip everything and send the value to the backend.\n  // noinspection JSCheckFunctionSignatures\n  if (\n    isPositiveNumberString(cssValue)\n  ) {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: Number(cssValue),\n        varType: 'number',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else if (cssValue === 'true') {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: true,\n        varType: 'boolean',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else if (cssValue === 'false') {\n    window.parent.postMessage({\n      authoredCss: {\n        cssVar: cssVariable,\n        originalValue: cssValue,\n        computedValue: false,\n        varType: 'boolean',\n        mode,\n        originalComputedValue: cssValue,\n      },\n    }, '*');\n  } else {\n    // creates multiple test elements to test the CSS var\n    const authoredCss = await testCssVar(cssValue, cssVariable",[9091,9165],"index = 0; index < rule.style.length; index++) {\n    ruleStyles.push(rule.style.item(index",[10695,10760],"index = 0; index < ruleList.length; index++) {\n    rules.push(ruleList.item(index",[0,1052],"/**\n * Creates a function that always returns the same value, regardless of any arguments passed to it.\n * The constant function is a fundamental functional programming combinator that creates\n * a closure over a value, useful for providing default values or placeholder functions.\n *\n * Commonly used in functional programming scenarios where a consistent value is needed,\n * such as default parameters, mapping operations, or as a placeholder function.\n * @param x - Value to be returned by the constant function\n * @returns Function that always returns the captured value\n * @example\n * ```ts\n * const alwaysFive = constant(5);\n * alwaysFive(); // 5\n * alwaysFive(1, 2, 3); // 5 (ignores arguments)\n *\n * const alwaysHello = constant('hello');\n * alwaysHello(); // 'hello'\n *\n * // Common usage in functional programming\n * const numbers = [1, 2, 3];\n * numbers.map(constant(0)); // [0, 0, 0] (replace all with 0)\n *\n * // Useful for default functions\n * const defaultHandler = constant('default');\n * defaultHandler(); // 'default'\n * ```\n */",[0,1052],"/**\n * Creates a function that always returns the same value, regardless of any arguments passed to it.\n * The constant function is a fundamental functional programming combinator that creates\n * a closure over a value, useful for providing default values or placeholder functions.\n *\n * Commonly used in functional programming scenarios where a consistent value is needed,\n * such as default parameters, mapping operations, or as a placeholder function.\n *\n * @param x - Value to be returned by the constant function\n * @returns Function that always returns the captured value\n * @example\n * ```ts\n * const alwaysFive = constant(5);\n * alwaysFive(); // 5\n * alwaysFive(1, 2, 3); // 5 (ignores arguments)\n *\n * const alwaysHello = constant('hello');\n * alwaysHello(); // 'hello'\n *\n * // Common usage in functional programming\n * const numbers = [1, 2, 3];\n * numbers.map(constant(0)); // [0, 0, 0] (replace all with 0)\n *\n * // Useful for default functions\n * const defaultHandler = constant('default');\n * defaultHandler(); // 'default'\n * ```\n */",[0,718],"/**\n * Creates an infinite generator that repeatedly yields the same value.\n * This generator function creates an endless sequence of the provided value,\n * useful for scenarios requiring constant values in iterative contexts.\n * @param x - Value to be yielded infinitely\n * @returns Generator that yields the same value infinitely\n * @example\n * ```ts\n * const ones = echo(1);\n * const first5 = Array.from(iterable.take(ones, 5)); // [1, 1, 1, 1, 1]\n *\n * const greetings = echo('hello');\n * greetings.next().value; // 'hello'\n * greetings.next().value; // 'hello'\n *\n * // Use with iterative operations\n * for (const value of iterable.take(echo(42), 3)) {\n *   console.log(value); // 42, 42, 42\n * }\n * ```\n */",[0,718],"/**\n * Creates an infinite generator that repeatedly yields the same value.\n * This generator function creates an endless sequence of the provided value,\n * useful for scenarios requiring constant values in iterative contexts.\n *\n * @param x - Value to be yielded infinitely\n * @returns Generator that yields the same value infinitely\n * @example\n * ```ts\n * const ones = echo(1);\n * const first5 = Array.from(iterable.take(ones, 5)); // [1, 1, 1, 1, 1]\n *\n * const greetings = echo('hello');\n * greetings.next().value; // 'hello'\n * greetings.next().value; // 'hello'\n *\n * // Use with iterative operations\n * for (const value of iterable.take(echo(42), 3)) {\n *   console.log(value); // 42, 42, 42\n * }\n * ```\n */",[0,776],"/**\n * Returns its input value unchanged. The identity function is a fundamental building block\n * in functional programming, commonly used as a default transformation or placeholder function.\n *\n * Useful in scenarios where a function is required but no transformation is needed,\n * such as default parameters, filtering, or mapping operations.\n * @param x - Value to return unchanged\n * @returns Same value that was passed in\n * @example\n * ```ts\n * identity(42); // 42\n * identity('hello'); // 'hello'\n * identity([1, 2, 3]); // [1, 2, 3]\n *\n * // Common usage in functional programming\n * const numbers = [1, 2, 3, 4, 5];\n * numbers.map(identity); // [1, 2, 3, 4, 5] (no transformation)\n * numbers.filter(identity); // [1, 2, 3, 4, 5] (truthy values only)\n * ```\n */",[0,776],"/**\n * Returns its input value unchanged. The identity function is a fundamental building block\n * in functional programming, commonly used as a default transformation or placeholder function.\n *\n * Useful in scenarios where a function is required but no transformation is needed,\n * such as default parameters, filtering, or mapping operations.\n *\n * @param x - Value to return unchanged\n * @returns Same value that was passed in\n * @example\n * ```ts\n * identity(42); // 42\n * identity('hello'); // 'hello'\n * identity([1, 2, 3]); // [1, 2, 3]\n *\n * // Common usage in functional programming\n * const numbers = [1, 2, 3, 4, 5];\n * numbers.map(identity); // [1, 2, 3, 4, 5] (no transformation)\n * numbers.filter(identity); // [1, 2, 3, 4, 5] (truthy values only)\n * ```\n */",[480,489],"toBeNull(",[524,538],"toBeUndefined(",[623,623],"\n",[623,623],[737,737],[737,737],[925,925],[925,925],[1293,1302],[1430,1430],[1430,1430],[1578,1578],[1578,1578],[2137,2146],[2703,2703],[2703,2703],[4642,4642],[4642,4642],[4732,4732],[4732,4732],[5930,5930],[5930,5930],[6849,6849],[6849,6849],[7084,7084],[7084,7084],[7311,7311],[7311,7311],[7490,7490],[7490,7490],[7770,7770],[7770,7770],[8090,8090],[8090,8090],[385,1859],"/**\n * Converts any JavaScript value into its string representation as frozen export code.\n *\n * This function serializes JavaScript values into code strings that can be used\n * as export statements. It handles primitive types (boolean, string, number, date)\n * and complex data structures (Set, Map, Array, Object) by recursively converting\n * all nested values. All generated objects are wrapped with `Object.freeze()` to\n * ensure immutability.\n * @param obj - Value to convert to export string representation\n * @returns String representation of the value as frozen export code\n * @throws {TypeError} When the object type is unsupported (null, undefined, NaN, bigint, symbol)\n * @throws {TypeError} When an unknown object type is encountered\n * @example\n * ```ts\n * // Primitive types\n * toExport(true); // \"true\"\n * toExport(\"hello\"); // '\"hello\"'\n * toExport(42); // \"42\"\n * toExport(new Date('2023-01-01')); // 'new Date(\"2023-01-01T00:00:00.000Z\")'\n *\n * // Collections\n * toExport(new Set([1, 2, 3])); // \"Object.freeze(new Set([1,2,3]))\"\n * toExport(new Map([['a', 1]])); // \"Object.freeze(new Map([[\"a\",1]]))\"\n * toExport([1, 2, 3]); // \"Object.freeze([1,2,3])\"\n * toExport({ a: 1, b: 2 }); // \"Object.freeze(Object.fromEntries([[\"a\",1],[\"b\",2]]))\"\n *\n * // Nested structures\n * toExport({ users: [{ name: \"Alice\" }] });\n * // \"Object.freeze(Object.fromEntries([[\"users\",Object.freeze([Object.freeze(Object.fromEntries([[\"name\",\"Alice\"]]))])]]))\"\n * ```\n */",[385,1859],"/**\n * Converts any JavaScript value into its string representation as frozen export code.\n *\n * This function serializes JavaScript values into code strings that can be used\n * as export statements. It handles primitive types (boolean, string, number, date)\n * and complex data structures (Set, Map, Array, Object) by recursively converting\n * all nested values. All generated objects are wrapped with `Object.freeze()` to\n * ensure immutability.\n *\n * @param obj - Value to convert to export string representation\n * @returns String representation of the value as frozen export code\n * @throws {TypeError} When the object type is unsupported (null, undefined, NaN, bigint, symbol)\n * @throws {TypeError} When an unknown object type is encountered\n * @example\n * ```ts\n * // Primitive types\n * toExport(true); // \"true\"\n * toExport(\"hello\"); // '\"hello\"'\n * toExport(42); // \"42\"\n * toExport(new Date('2023-01-01')); // 'new Date(\"2023-01-01T00:00:00.000Z\")'\n *\n * // Collections\n * toExport(new Set([1, 2, 3])); // \"Object.freeze(new Set([1,2,3]))\"\n * toExport(new Map([['a', 1]])); // \"Object.freeze(new Map([[\"a\",1]]))\"\n * toExport([1, 2, 3]); // \"Object.freeze([1,2,3])\"\n * toExport({ a: 1, b: 2 }); // \"Object.freeze(Object.fromEntries([[\"a\",1],[\"b\",2]]))\"\n *\n * // Nested structures\n * toExport({ users: [{ name: \"Alice\" }] });\n * // \"Object.freeze(Object.fromEntries([[\"users\",Object.freeze([Object.freeze(Object.fromEntries([[\"name\",\"Alice\"]]))])]]))\"\n * ```\n */",[1885,4112],"object: any): string {\n  const objType = typeOf(object);\n  if (unsupported.includes(objType)) {\n    throw new TypeError(`Unsupported obj ${object} ${JSON.stringify(object)} type ${objType}`);\n  }\n  if (primitive.includes(objType)) {\n    const primitiveObjType = objType as typeof primitive[number];\n    return match(primitiveObjType)\n      .with('boolean', function handler() {\n        const boolObj = object as boolean;\n        return String(boolObj);\n      })\n      .with('number', function handler() {\n        const numberObj = object as number;\n        return String(numberObj);\n      })\n      .with('string', function handler() {\n        const stringObj = object as string;\n        return JSON.stringify(stringObj);\n      })\n      .with('date', function handler() {\n        const dateObj = object as Date;\n        return `new Date(${JSON.stringify(dateObj)})`;\n      })\n      .exhaustive();\n  }\n\n  return match(objType)\n    .with('set', function handler() {\n      const setObj = object as Set<any>;\n      return `Object.freeze(new Set([${[...setObj].map(toExport).join(',')}]))`;\n    })\n    .with('map', function handler() {\n      const mapObj = object as Map<any, any>;\n      return `Object.freeze(new Map([${\n        [...mapObj]\n          .map(function eachMapEntry([k, v]) {\n            return `[${toExport(k)},${toExport(v)}]`;\n          })\n          .join(',')\n      }]))`;\n    })\n    .with('array', function handler() {\n      const arrayObj = object as any[];\n      return `Object.freeze([${\n        arrayObj\n          .map(function eachArrayItem(i: any) {\n            return toExport(i);\n          })\n          .join(',')\n      }])`;\n    })\n    .with('object', function handler() {\n      const objectObj = object as Record<string, any>;\n      return `Object.freeze(Object.fromEntries([${\n        Object\n          .entries(objectObj)\n          .map(\n            function eachObjectEntry([k, v]) {\n              return `[${toExport(k)},${toExport(v)}]`;\n            },\n          )\n          .join(',')\n      }]))`;\n    })\n    /* v8 ignore next -- @preserve */\n    .otherwise(\n      /* v8 ignore next -- @preserve */\n      function thrower() {\n        /* v8 ignore next -- @preserve */\n        throw new TypeError(`Unknown obj ${object} ${JSON.stringify(object",[1913,4129],"objectType = typeOf(obj);\n  if (unsupported.includes(objectType)) {\n    throw new TypeError(`Unsupported obj ${obj} ${JSON.stringify(obj)} type ${objectType}`);\n  }\n  if (primitive.includes(objectType)) {\n    const primitiveObjType = objectType as typeof primitive[number];\n    return match(primitiveObjType)\n      .with('boolean', function handler() {\n        const boolObj = obj as boolean;\n        return String(boolObj);\n      })\n      .with('number', function handler() {\n        const numberObj = obj as number;\n        return String(numberObj);\n      })\n      .with('string', function handler() {\n        const stringObj = obj as string;\n        return JSON.stringify(stringObj);\n      })\n      .with('date', function handler() {\n        const dateObj = obj as Date;\n        return `new Date(${JSON.stringify(dateObj)})`;\n      })\n      .exhaustive();\n  }\n\n  return match(objectType)\n    .with('set', function handler() {\n      const setObj = obj as Set<any>;\n      return `Object.freeze(new Set([${[...setObj].map(toExport).join(',')}]))`;\n    })\n    .with('map', function handler() {\n      const mapObj = obj as Map<any, any>;\n      return `Object.freeze(new Map([${\n        [...mapObj]\n          .map(function eachMapEntry([k, v]) {\n            return `[${toExport(k)},${toExport(v)}]`;\n          })\n          .join(',')\n      }]))`;\n    })\n    .with('array', function handler() {\n      const arrayObj = obj as any[];\n      return `Object.freeze([${\n        arrayObj\n          .map(function eachArrayItem(i: any) {\n            return toExport(i);\n          })\n          .join(',')\n      }])`;\n    })\n    .with('object', function handler() {\n      const objectObj = obj as Record<string, any>;\n      return `Object.freeze(Object.fromEntries([${\n        Object\n          .entries(objectObj)\n          .map(\n            function eachObjectEntry([k, v]) {\n              return `[${toExport(k)},${toExport(v)}]`;\n            },\n          )\n          .join(',')\n      }]))`;\n    })\n    /* v8 ignore next -- @preserve */\n    .otherwise(\n      /* v8 ignore next -- @preserve */\n      function thrower() {\n        /* v8 ignore next -- @preserve */\n        throw new TypeError(`Unknown obj ${obj} ${JSON.stringify(obj)} type ${objectType",[2116,2205],"primitiveObjectType = objType as typeof primitive[number];\n    return match(primitiveObjectType",[2265,2320],"boolObject = obj as boolean;\n        return String(boolObject",[2389,2447],"numberObject = obj as number;\n        return String(numberObject",[2516,2582],"stringObject = obj as string;\n        return JSON.stringify(stringObject",[2649,2721],"dateObject = obj as Date;\n        return `new Date(${JSON.stringify(dateObject",[2836,2911],"setObject = obj as Set<any>;\n      return `Object.freeze(new Set([${[...setObject",{"messageId":"10385","data":"10386","fix":"10387","desc":"10388"},{"messageId":"10385","data":"10389","fix":"10390","desc":"10391"},{"messageId":"10385","data":"10392","fix":"10393","desc":"10394"},[3000,3089],"mapObject = obj as Map<any, any>;\n      return `Object.freeze(new Map([${\n        [...mapObject",[3298,3371],"arrayObject = obj as any[];\n      return `Object.freeze([${\n        arrayObject",[3410,3449],"index: any) {\n            return toExport(index",[3558,3692],"objectObject = obj as Record<string, any>;\n      return `Object.freeze(Object.fromEntries([${\n        Object\n          .entries(objectObject",[0,863],"/**\n * Enhanced typeof function that provides more specific type detection than JavaScript's built-in typeof operator.\n * This function distinguishes between various object types, null, undefined, NaN, and primitive types,\n * providing more granular type information for runtime type checking and debugging.\n * @param obj - Value to determine type for\n * @returns String literal representing specific type of input value\n * @example\n * ```ts\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf(NaN); // 'NaN'\n * typeOf(42); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(BigInt(123)); // 'bigint'\n * typeOf(Symbol('test')); // 'symbol'\n * typeOf('hello'); // 'string'\n * typeOf([1, 2, 3]); // 'array'\n * typeOf(new Date()); // 'date'\n * typeOf(new Set()); // 'set'\n * typeOf(new Map()); // 'map'\n * typeOf({}); // 'object'\n * ```\n */",[890,2769],"object: any,\n):\n  | 'null'\n  | 'undefined'\n  | 'NaN'\n  | 'number'\n  | 'boolean'\n  | 'bigint'\n  | 'symbol'\n  | 'string'\n  | 'array'\n  | 'date'\n  | 'set'\n  | 'map'\n  | 'object'\n{\n  // Early returns for primitives to avoid switch statement evaluation issues\n  if (object === null) return 'null';\n  if (object === undefined) return 'undefined';\n  if (typeof object === 'number' && Number.isNaN(object)) return 'NaN';\n  if (typeof object === 'number') return 'number';\n  if (typeof object === 'boolean') return 'boolean';\n  if (typeof object === 'bigint') return 'bigint';\n  if (typeof object === 'symbol') return 'symbol';\n  if (typeof object === 'string') return 'string';\n\n  // Handle special object types\n  if (Array.isArray(object)) return 'array';\n  if (object instanceof Date) return 'date';\n  if (object instanceof Set) return 'set';\n  if (object instanceof Map) return 'map';\n\n  // Handle objects with careful checking to avoid primitive conversion errors\n  if (typeof object === 'object') {\n    // Check for null-prototype objects first (like Object.create(null))\n    console.log('hello');\n    const prototype = Object.getPrototypeOf(object);\n    if (prototype === null) {\n      return 'object';\n    }\n\n    // Check for plain objects - only those with Object.prototype as prototype\n    // AND with Object as constructor (to exclude class instances)\n    if (prototype === Object.prototype) {\n      try {\n        /* v8 ignore next -- @preserve */\n        if (object.constructor === Object) {\n          return 'object';\n        }\n      } catch {\n        // If constructor access fails, but prototype is Object.prototype,\n        // it's likely a plain object\n        /* v8 ignore next -- @preserve */\n        return 'object';\n      }\n    }\n  }\n\n  // For everything else (class instances, functions, etc.), throw an error\n  const objType = typeof object;\n  let objStringified: string;\n  try {\n    objStringified = JSON.stringify(object",[2670,2931],"objectType = typeof obj;\n  let objStringified: string;\n  try {\n    objStringified = JSON.stringify(obj);\n  } catch {\n    /* v8 ignore next -- @preserve */\n    objStringified = '[object Object]';\n  }\n  throw new TypeError(\n    `Unrecognized obj with type \"${objectType",[2698,2960],"objectStringified: string;\n  try {\n    objectStringified = JSON.stringify(obj);\n  } catch {\n    /* v8 ignore next -- @preserve */\n    objectStringified = '[object Object]';\n  }\n  throw new TypeError(\n    `Unrecognized obj with type \"${objType}\" and value ${objectStringified",[0,1362],"/**\n * Creates an array from the provided elements with exact type preservation.\n * This function is similar to the built-in Array.of() but provides better type inference\n * and accepts mixed types while preserving the exact tuple type of the input elements.\n * Particularly useful when you need to maintain strict type fidelity for heterogeneous arrays.\n * @param elements - Elements used to create the array\n * @returns Array containing all provided elements with preserved tuple type\n * @remarks\n * Compared to built-in Array.of's definition in TypeScript, actually accepts mixed types.\n *\n * @example\n * ```ts\n * // Basic usage with mixed types\n * const mixed = arrayOf(1, 'hello', true, null);\n * // Type: [1, 'hello', true, null]\n *\n * // Preserves exact literal types\n * const literals = arrayOf('foo', 'bar', 42);\n * // Type: ['foo', 'bar', 42] (not string | number[])\n *\n * // Works with objects and complex types\n * const objects = arrayOf(\n *   { type: 'user', id: 1 },\n *   { type: 'admin', permissions: ['read', 'write'] }\n * );\n * // Type: [{ type: 'user', id: 1 }, { type: 'admin', permissions: ['read', 'write'] }]\n *\n * // Compare with Array.of (loses type precision)\n * const builtIn = Array.of(1, 'hello', true); // Type: (string | number | boolean)[]\n * const precise = arrayOf(1, 'hello', true);  // Type: [1, 'hello', true]\n * ```\n */",[0,1362],"/**\n * Creates an array from the provided elements with exact type preservation.\n * This function is similar to the built-in Array.of() but provides better type inference\n * and accepts mixed types while preserving the exact tuple type of the input elements.\n * Particularly useful when you need to maintain strict type fidelity for heterogeneous arrays.\n *\n * @param elements - Elements used to create the array\n * @returns Array containing all provided elements with preserved tuple type\n * @remarks\n * Compared to built-in Array.of's definition in TypeScript, actually accepts mixed types.\n *\n * @example\n * ```ts\n * // Basic usage with mixed types\n * const mixed = arrayOf(1, 'hello', true, null);\n * // Type: [1, 'hello', true, null]\n *\n * // Preserves exact literal types\n * const literals = arrayOf('foo', 'bar', 42);\n * // Type: ['foo', 'bar', 42] (not string | number[])\n *\n * // Works with objects and complex types\n * const objects = arrayOf(\n *   { type: 'user', id: 1 },\n *   { type: 'admin', permissions: ['read', 'write'] }\n * );\n * // Type: [{ type: 'user', id: 1 }, { type: 'admin', permissions: ['read', 'write'] }]\n *\n * // Compare with Array.of (loses type precision)\n * const builtIn = Array.of(1, 'hello', true); // Type: (string | number | boolean)[]\n * const precise = arrayOf(1, 'hello', true);  // Type: [1, 'hello', true]\n * ```\n */",[1485,2858],"/**\n * Creates a generator that yields each provided element in sequence.\n * This function transforms a list of arguments into a generator that yields\n * each element one at a time. Useful for creating iterables from discrete values\n * or when you need lazy evaluation of a known set of elements.\n * @param elements - Elements to be yielded by the generator\n * @returns Generator that yields each provided element in order\n * @example\n * ```ts\n * // Basic usage with mixed types\n * const gen = genOf(1, 'hello', true, null);\n * for (const value of gen) {\n *   console.log(value); // 1, then 'hello', then true, then null\n * }\n *\n * // Convert to array\n * const numbers = genOf(10, 20, 30);\n * const array = [...numbers]; // [10, 20, 30]\n *\n * // Use with iterable utilities\n * const chars = genOf('a', 'b', 'c', 'd');\n * const taken = iterable.take(chars, 2); // Takes first 2: ['a', 'b']\n *\n * // Lazy evaluation - generator doesn't execute until consumed\n * const lazy = genOf(\n *   getValue1(), // These functions only called when generator is consumed\n *   getValue2(),\n *   getValue3()\n * );\n *\n * // Works with complex types\n * const configs = genOf(\n *   { env: 'dev', port: 3000 },\n *   { env: 'staging', port: 4000 },\n *   { env: 'prod', port: 8080 }\n * );\n * for (const config of configs) {\n *   console.log(`${config.env}: ${config.port}`);\n * }\n * ```\n */",[1485,2858],"/**\n * Creates a generator that yields each provided element in sequence.\n * This function transforms a list of arguments into a generator that yields\n * each element one at a time. Useful for creating iterables from discrete values\n * or when you need lazy evaluation of a known set of elements.\n *\n * @param elements - Elements to be yielded by the generator\n * @returns Generator that yields each provided element in order\n * @example\n * ```ts\n * // Basic usage with mixed types\n * const gen = genOf(1, 'hello', true, null);\n * for (const value of gen) {\n *   console.log(value); // 1, then 'hello', then true, then null\n * }\n *\n * // Convert to array\n * const numbers = genOf(10, 20, 30);\n * const array = [...numbers]; // [10, 20, 30]\n *\n * // Use with iterable utilities\n * const chars = genOf('a', 'b', 'c', 'd');\n * const taken = iterable.take(chars, 2); // Takes first 2: ['a', 'b']\n *\n * // Lazy evaluation - generator doesn't execute until consumed\n * const lazy = genOf(\n *   getValue1(), // These functions only called when generator is consumed\n *   getValue2(),\n *   getValue3()\n * );\n *\n * // Works with complex types\n * const configs = genOf(\n *   { env: 'dev', port: 3000 },\n *   { env: 'staging', port: 4000 },\n *   { env: 'prod', port: 8080 }\n * );\n * for (const config of configs) {\n *   console.log(`${config.env}: ${config.port}`);\n * }\n * ```\n */",[765,765],[765,765],[1485,1485],[1485,1485],[69,580],"/**\n * Maps each element of an array type to a MaybeAsyncIterable of that element's type.\n * Preserves the array structure and length while transforming element types.\n * @template T_array - Array type to transform\n * @example\n * ```ts\n * type Example = MapArrayToMaybeAsyncIterables<[string, number]>;\n * // Result: [MaybeAsyncIterable<string>, MaybeAsyncIterable<number>]\n * ```\n * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-1.html#mapped-types-on-tuples-and-arrays\n */",[69,580],"/**\n * Maps each element of an array type to a MaybeAsyncIterable of that element's type.\n * Preserves the array structure and length while transforming element types.\n *\n * @template T_array - Array type to transform\n * @example\n * ```ts\n * type Example = MapArrayToMaybeAsyncIterables<[string, number]>;\n * // Result: [MaybeAsyncIterable<string>, MaybeAsyncIterable<number>]\n * ```\n * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-1.html#mapped-types-on-tuples-and-arrays\n */",[715,1187],"/**\n * Maps each element of an array type to an Iterable of that element's type.\n * Preserves the array structure and length while transforming element types.\n * @template T_array - Array type to transform\n * @example\n * ```ts\n * type Example = MapArrayToIterables<[string, number]>;\n * // Result: [Iterable<string>, Iterable<number>]\n * ```\n * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-1.html#mapped-types-on-tuples-and-arrays\n */",[715,1187],"/**\n * Maps each element of an array type to an Iterable of that element's type.\n * Preserves the array structure and length while transforming element types.\n *\n * @template T_array - Array type to transform\n * @example\n * ```ts\n * type Example = MapArrayToIterables<[string, number]>;\n * // Result: [Iterable<string>, Iterable<number>]\n * ```\n * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-1.html#mapped-types-on-tuples-and-arrays\n */",[0,617],"/**\n * Creates a fixed-length tuple type with the specified element type and count.\n * Supports tuples up to length 10, falling back to array type for larger counts.\n * For count 0, returns never[] to indicate an empty, impossible array.\n * @template T_element - Type of elements in the tuple\n * @template T_count - Length of the tuple (0-10)\n * @example\n * ```ts\n * type StringPair = Tuple<string, 2>; // [string, string]\n * type NumberTrio = Tuple<number, 3>; // [number, number, number]\n * type Empty = Tuple<any, 0>; // never[]\n * type Large = Tuple<boolean, 15>; // boolean[] (fallback to array)\n * ```\n */",[0,617],"/**\n * Creates a fixed-length tuple type with the specified element type and count.\n * Supports tuples up to length 10, falling back to array type for larger counts.\n * For count 0, returns never[] to indicate an empty, impossible array.\n *\n * @template T_element - Type of elements in the tuple\n * @template T_count - Length of the tuple (0-10)\n * @example\n * ```ts\n * type StringPair = Tuple<string, 2>; // [string, string]\n * type NumberTrio = Tuple<number, 3>; // [number, number, number]\n * type Empty = Tuple<any, 0>; // never[]\n * type Large = Tuple<boolean, 15>; // boolean[] (fallback to array)\n * ```\n */",[0,592],"/**\n * Removes the first element from an array or tuple type, returning the remaining elements.\n * Handles both mutable and readonly arrays, with fallback support for generic array types.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst<[string, number, boolean]>; // [number, boolean]\n * type Example2 = WithoutFirst<[string]>; // []\n * type Example3 = WithoutFirst<[]>; // never\n * type Example4 = WithoutFirst<string[]>; // string[]\n * type Example5 = WithoutFirst<readonly [number, string]>; // [string]\n * ```\n */",[0,592],"/**\n * Removes the first element from an array or tuple type, returning the remaining elements.\n * Handles both mutable and readonly arrays, with fallback support for generic array types.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst<[string, number, boolean]>; // [number, boolean]\n * type Example2 = WithoutFirst<[string]>; // []\n * type Example3 = WithoutFirst<[]>; // never\n * type Example4 = WithoutFirst<string[]>; // string[]\n * type Example5 = WithoutFirst<readonly [number, string]>; // [string]\n * ```\n */",[774,1327],"/**\n * Removes the first two elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst2<[string, number, boolean, object]>; // [boolean, object]\n * type Example2 = WithoutFirst2<[string, number]>; // []\n * type Example3 = WithoutFirst2<[string]>; // []\n * type Example4 = WithoutFirst2<string[]>; // string[]\n * ```\n */",[774,1327],"/**\n * Removes the first two elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst2<[string, number, boolean, object]>; // [boolean, object]\n * type Example2 = WithoutFirst2<[string, number]>; // []\n * type Example3 = WithoutFirst2<[string]>; // []\n * type Example4 = WithoutFirst2<string[]>; // string[]\n * ```\n */",[1576,2155],"/**\n * Removes the first three elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst3<[string, number, boolean, object, symbol]>; // [object, symbol]\n * type Example2 = WithoutFirst3<[string, number, boolean]>; // []\n * type Example3 = WithoutFirst3<[string, number]>; // []\n * type Example4 = WithoutFirst3<string[]>; // string[]\n * ```\n */",[1576,2155],"/**\n * Removes the first three elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst3<[string, number, boolean, object, symbol]>; // [object, symbol]\n * type Example2 = WithoutFirst3<[string, number, boolean]>; // []\n * type Example3 = WithoutFirst3<[string, number]>; // []\n * type Example4 = WithoutFirst3<string[]>; // string[]\n * ```\n */",[2478,3003],"/**\n * Removes the first four elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst4<[1, 2, 3, 4, 5, 6]>; // [5, 6]\n * type Example2 = WithoutFirst4<[1, 2, 3, 4]>; // []\n * type Example3 = WithoutFirst4<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst4<number[]>; // number[]\n * ```\n */",[2478,3003],"/**\n * Removes the first four elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst4<[1, 2, 3, 4, 5, 6]>; // [5, 6]\n * type Example2 = WithoutFirst4<[1, 2, 3, 4]>; // []\n * type Example3 = WithoutFirst4<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst4<number[]>; // number[]\n * ```\n */",[3403,3936],"/**\n * Removes the first five elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst5<[1, 2, 3, 4, 5, 6, 7]>; // [6, 7]\n * type Example2 = WithoutFirst5<[1, 2, 3, 4, 5]>; // []\n * type Example3 = WithoutFirst5<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst5<boolean[]>; // boolean[]\n * ```\n */",[3403,3936],"/**\n * Removes the first five elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst5<[1, 2, 3, 4, 5, 6, 7]>; // [6, 7]\n * type Example2 = WithoutFirst5<[1, 2, 3, 4, 5]>; // []\n * type Example3 = WithoutFirst5<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst5<boolean[]>; // boolean[]\n * ```\n */",[4418,4954],"/**\n * Removes the first six elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst6<[1, 2, 3, 4, 5, 6, 7, 8]>; // [7, 8]\n * type Example2 = WithoutFirst6<[1, 2, 3, 4, 5, 6]>; // []\n * type Example3 = WithoutFirst6<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst6<string[]>; // string[]\n * ```\n */",[4418,4954],"/**\n * Removes the first six elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst6<[1, 2, 3, 4, 5, 6, 7, 8]>; // [7, 8]\n * type Example2 = WithoutFirst6<[1, 2, 3, 4, 5, 6]>; // []\n * type Example3 = WithoutFirst6<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst6<string[]>; // string[]\n * ```\n */",[5523,6067],"/**\n * Removes the first seven elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst7<[1, 2, 3, 4, 5, 6, 7, 8, 9]>; // [8, 9]\n * type Example2 = WithoutFirst7<[1, 2, 3, 4, 5, 6, 7]>; // []\n * type Example3 = WithoutFirst7<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst7<object[]>; // object[]\n * ```\n */",[5523,6067],"/**\n * Removes the first seven elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst7<[1, 2, 3, 4, 5, 6, 7, 8, 9]>; // [8, 9]\n * type Example2 = WithoutFirst7<[1, 2, 3, 4, 5, 6, 7]>; // []\n * type Example3 = WithoutFirst7<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst7<object[]>; // object[]\n * ```\n */",[6728,7280],"/**\n * Removes the first eight elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst8<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]>; // [9, 10]\n * type Example2 = WithoutFirst8<[1, 2, 3, 4, 5, 6, 7, 8]>; // []\n * type Example3 = WithoutFirst8<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst8<symbol[]>; // symbol[]\n * ```\n */",[6728,7280],"/**\n * Removes the first eight elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst8<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]>; // [9, 10]\n * type Example2 = WithoutFirst8<[1, 2, 3, 4, 5, 6, 7, 8]>; // []\n * type Example3 = WithoutFirst8<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst8<symbol[]>; // symbol[]\n * ```\n */",[8038,8593],"/**\n * Removes the first nine elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst9<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]>; // [10, 11]\n * type Example2 = WithoutFirst9<[1, 2, 3, 4, 5, 6, 7, 8, 9]>; // []\n * type Example3 = WithoutFirst9<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst9<Date[]>; // Date[]\n * ```\n */",[8038,8593],"/**\n * Removes the first nine elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst9<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]>; // [10, 11]\n * type Example2 = WithoutFirst9<[1, 2, 3, 4, 5, 6, 7, 8, 9]>; // []\n * type Example3 = WithoutFirst9<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst9<Date[]>; // Date[]\n * ```\n */",[9453,10027],"/**\n * Removes the first ten elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst10<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]>; // [11, 12]\n * type Example2 = WithoutFirst10<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]>; // []\n * type Example3 = WithoutFirst10<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst10<Function[]>; // Function[]\n * ```\n */",[9453,10027],"/**\n * Removes the first ten elements from an array or tuple type, returning the remaining elements.\n * Uses optimized direct extraction when possible, falling back to recursive WithoutFirst calls.\n *\n * @template T - Array or tuple type to process (extends any[])\n * @example\n * ```ts\n * type Example1 = WithoutFirst10<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]>; // [11, 12]\n * type Example2 = WithoutFirst10<[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]>; // []\n * type Example3 = WithoutFirst10<[1, 2, 3]>; // []\n * type Example4 = WithoutFirst10<Function[]>; // Function[]\n * ```\n */",[652,2111],"/**\n * Determines if a value is a primitive type according to Object.is behavior.\n *\n * Checks whether the provided value is one of JavaScript's primitive types.\n * This function considers BigInt as a primitive type, which matches Object.is\n * semantics but may differ from other primitive type definitions.\n * @param value - Value to check for primitive type classification\n * @returns True if value is primitive, false if it's a complex object type\n * @remarks\n * **Warning**: BigInt is considered a primitive type by this function.\n *\n * Primitive types recognized (9 total):\n * 1. `undefined`\n * 2. `null`\n * 3. `boolean` (true/false)\n * 4. `string`\n * 5. `bigint` and BigInt object wrapper\n * 6. `symbol`\n * 7. `number`\n * 8. `NaN` (special number value)\n *\n * @example\n * ```ts\n * // Primitive values return true\n * isPrimitive(42);           // true (number)\n * isPrimitive(\"hello\");      // true (string)\n * isPrimitive(true);         // true (boolean)\n * isPrimitive(null);         // true (null)\n * isPrimitive(undefined);    // true (undefined)\n * isPrimitive(Symbol(\"s\"));  // true (symbol)\n * isPrimitive(123n);         // true (bigint)\n * isPrimitive(NaN);          // true (number, even NaN)\n *\n * // Complex objects return false\n * isPrimitive({});           // false (object)\n * isPrimitive([]);           // false (array)\n * isPrimitive(() => {});     // false (function)\n * isPrimitive(new Date());   // false (Date object)\n * ```\n */",[652,2111],"/**\n * Determines if a value is a primitive type according to Object.is behavior.\n *\n * Checks whether the provided value is one of JavaScript's primitive types.\n * This function considers BigInt as a primitive type, which matches Object.is\n * semantics but may differ from other primitive type definitions.\n *\n * @param value - Value to check for primitive type classification\n * @returns True if value is primitive, false if it's a complex object type\n * @remarks\n * **Warning**: BigInt is considered a primitive type by this function.\n *\n * Primitive types recognized (9 total):\n * 1. `undefined`\n * 2. `null`\n * 3. `boolean` (true/false)\n * 4. `string`\n * 5. `bigint` and BigInt object wrapper\n * 6. `symbol`\n * 7. `number`\n * 8. `NaN` (special number value)\n *\n * @example\n * ```ts\n * // Primitive values return true\n * isPrimitive(42);           // true (number)\n * isPrimitive(\"hello\");      // true (string)\n * isPrimitive(true);         // true (boolean)\n * isPrimitive(null);         // true (null)\n * isPrimitive(undefined);    // true (undefined)\n * isPrimitive(Symbol(\"s\"));  // true (symbol)\n * isPrimitive(123n);         // true (bigint)\n * isPrimitive(NaN);          // true (number, even NaN)\n *\n * // Complex objects return false\n * isPrimitive({});           // false (object)\n * isPrimitive([]);           // false (array)\n * isPrimitive(() => {});     // false (function)\n * isPrimitive(new Date());   // false (Date object)\n * ```\n */",[2754,5617],"/**\n * Performs deep equality comparison between two non-Promise values.\n *\n * Compares two values for deep structural equality, handling primitives, objects,\n * arrays, dates, errors, functions, generators, regular expressions, Maps, Sets,\n * and plain objects. Uses recursive comparison for nested structures. Can't handle\n * asynchronous values like Promises or AsyncGenerators - use {@link equalAsync} instead.\n * @param a - First value to compare (must not be Promise-like)\n * @param b - Second value to compare (must not be Promise-like)\n * @returns True if values are deeply equal, false otherwise\n * @throws {TypeError} When either value is a Promise, AsyncGenerator, or AsyncIterable\n * @throws {TypeError} When either value is a WeakMap or WeakSet (not enumerable)\n * @throws {TypeError} When encountering unhandled object types\n *\n * @remarks\n * **Comparison Rules:**\n * - Primitives: Uses `Object.is()` for exact equality\n * - Functions: Compares string representations (unreliable)\n * - Arrays: Recursive element-by-element comparison\n * - Objects: Recursive property comparison by keys\n * - Dates: Compares `getTime()` values\n * - Errors: Compares `name`, `message`, and `cause` properties\n * - RegExp: Compares string representations\n * - Maps/Sets: Converts to sorted arrays then compares\n * - Generators: Exhausts both and compares resulting arrays\n *\n * **Performance Notes:**\n * - Function comparison is unreliable due to string representation\n * - Generator comparison consumes the generators completely\n * - Map/Set comparison uses sorting for consistent ordering\n *\n * @example\n * ```ts\n * // Primitive comparisons\n * equal(42, 42);              // true\n * equal(\"hello\", \"hello\");    // true\n * equal(null, null);          // true\n * equal(NaN, NaN);            // true (unlike ===)\n * equal(42, \"42\");            // false\n *\n * // Object comparisons\n * equal({a: 1}, {a: 1});      // true\n * equal({a: 1}, {b: 1});      // false\n * equal([1, 2], [1, 2]);      // true\n * equal([1, 2], [2, 1]);      // false\n *\n * // Complex nested structures\n * equal(\n *   {users: [{id: 1, name: \"Alice\"}]},\n *   {users: [{id: 1, name: \"Alice\"}]}\n * );                          // true\n *\n * // Date comparisons\n * const date1 = new Date(\"2023-01-01\");\n * const date2 = new Date(\"2023-01-01\");\n * equal(date1, date2);        // true\n *\n * // Error comparisons\n * const err1 = new Error(\"Failed\");\n * const err2 = new Error(\"Failed\");\n * equal(err1, err2);          // true (same message and name)\n *\n * // Map/Set comparisons\n * equal(\n *   new Map([[\"a\", 1], [\"b\", 2]]),\n *   new Map([[\"b\", 2], [\"a\", 1]])\n * );                          // true (order doesn't matter)\n *\n * // Throws for async values\n * try {\n *   equal(Promise.resolve(1), Promise.resolve(1));\n * } catch (error) {\n *   console.log(\"Use equalAsync for Promises\");\n * }\n * ```\n */",[2754,5617],"/**\n * Performs deep equality comparison between two non-Promise values.\n *\n * Compares two values for deep structural equality, handling primitives, objects,\n * arrays, dates, errors, functions, generators, regular expressions, Maps, Sets,\n * and plain objects. Uses recursive comparison for nested structures. Can't handle\n * asynchronous values like Promises or AsyncGenerators - use {@link equalAsync} instead.\n *\n * @param a - First value to compare (must not be Promise-like)\n * @param b - Second value to compare (must not be Promise-like)\n * @returns True if values are deeply equal, false otherwise\n * @throws {TypeError} When either value is a Promise, AsyncGenerator, or AsyncIterable\n * @throws {TypeError} When either value is a WeakMap or WeakSet (not enumerable)\n * @throws {TypeError} When encountering unhandled object types\n *\n * @remarks\n * **Comparison Rules:**\n * - Primitives: Uses `Object.is()` for exact equality\n * - Functions: Compares string representations (unreliable)\n * - Arrays: Recursive element-by-element comparison\n * - Objects: Recursive property comparison by keys\n * - Dates: Compares `getTime()` values\n * - Errors: Compares `name`, `message`, and `cause` properties\n * - RegExp: Compares string representations\n * - Maps/Sets: Converts to sorted arrays then compares\n * - Generators: Exhausts both and compares resulting arrays\n *\n * **Performance Notes:**\n * - Function comparison is unreliable due to string representation\n * - Generator comparison consumes the generators completely\n * - Map/Set comparison uses sorting for consistent ordering\n *\n * @example\n * ```ts\n * // Primitive comparisons\n * equal(42, 42);              // true\n * equal(\"hello\", \"hello\");    // true\n * equal(null, null);          // true\n * equal(NaN, NaN);            // true (unlike ===)\n * equal(42, \"42\");            // false\n *\n * // Object comparisons\n * equal({a: 1}, {a: 1});      // true\n * equal({a: 1}, {b: 1});      // false\n * equal([1, 2], [1, 2]);      // true\n * equal([1, 2], [2, 1]);      // false\n *\n * // Complex nested structures\n * equal(\n *   {users: [{id: 1, name: \"Alice\"}]},\n *   {users: [{id: 1, name: \"Alice\"}]}\n * );                          // true\n *\n * // Date comparisons\n * const date1 = new Date(\"2023-01-01\");\n * const date2 = new Date(\"2023-01-01\");\n * equal(date1, date2);        // true\n *\n * // Error comparisons\n * const err1 = new Error(\"Failed\");\n * const err2 = new Error(\"Failed\");\n * equal(err1, err2);          // true (same message and name)\n *\n * // Map/Set comparisons\n * equal(\n *   new Map([[\"a\", 1], [\"b\", 2]]),\n *   new Map([[\"b\", 2], [\"a\", 1]])\n * );                          // true (order doesn't matter)\n *\n * // Throws for async values\n * try {\n *   equal(Promise.resolve(1), Promise.resolve(1));\n * } catch (error) {\n *   console.log(\"Use equalAsync for Promises\");\n * }\n * ```\n */",{"messageId":"10395","fix":"10396","desc":"10397"},{"messageId":"10395","fix":"10398","desc":"10397"},[15852,18629],"/**\n * Performs deep equality comparison between two values, including asynchronous types.\n *\n * Extends {@link equal} to handle asynchronous values like Promises, AsyncGenerators,\n * and AsyncIterables that can't be compared synchronously. For non-async values,\n * delegates to the synchronous {@link equal} function. Awaits Promise resolution\n * and exhausts async iterables before performing deep comparison.\n * @param a - First value to compare (any type including async)\n * @param b - Second value to compare (any type including async)\n * @returns Promise resolving to true if values are deeply equal, false otherwise\n * @remarks\n * **Additional Async Cases Handled:**\n * 1. **Promises**: Awaits both promises using `Promise.allSettled()` and compares settled results\n * 2. **AsyncGenerators**: Exhausts both generators with `Array.fromAsync()` and compares arrays\n * 3. **AsyncIterables**: Converts both to arrays with `Array.fromAsync()` and compares arrays\n *\n * **Important Notes:**\n * - AsyncGenerators and AsyncIterables are fully consumed during comparison\n * - Promise rejection handling: Compares settled states including rejection reasons\n * - For non-async values, behavior is identical to {@link equal}\n * - Generator comparison only succeeds if both never take parameters\n *\n * @example\n * ```ts\n * // Promise comparisons\n * const promise1 = Promise.resolve(42);\n * const promise2 = Promise.resolve(42);\n * await equalAsync(promise1, promise2);  // true\n *\n * const promise3 = Promise.reject(new Error(\"Failed\"));\n * const promise4 = Promise.reject(new Error(\"Failed\"));\n * await equalAsync(promise3, promise4);  // true (same rejection)\n *\n * // AsyncGenerator comparisons\n * async function* gen1() {\n *   yield 1;\n *   yield 2;\n * }\n * async function* gen2() {\n *   yield 1;\n *   yield 2;\n * }\n * await equalAsync(gen1(), gen2());      // true\n *\n * // AsyncIterable comparisons\n * const asyncIterable1 = {\n *   async *[Symbol.asyncIterator]() {\n *     yield \"a\";\n *     yield \"b\";\n *   }\n * };\n * const asyncIterable2 = {\n *   async *[Symbol.asyncIterator]() {\n *     yield \"a\";\n *     yield \"b\";\n *   }\n * };\n * await equalAsync(asyncIterable1, asyncIterable2);  // true\n *\n * // Mixed async/sync comparisons\n * await equalAsync({a: Promise.resolve(1)}, {a: Promise.resolve(1)});  // true\n * await equalAsync([1, 2, 3], [1, 2, 3]);                             // true (delegates to equal)\n *\n * // Generator exhaustion example\n * async function* counter() {\n *   yield 1;\n *   yield 2;\n *   yield 3;\n * }\n * const gen1 = counter();\n * const gen2 = counter();\n * await equalAsync(gen1, gen2);  // true, but generators are exhausted\n *\n * // Trying to use them again would fail:\n * // await gen1.next();  // { value: undefined, done: true }\n * ```\n */",[15852,18629],"/**\n * Performs deep equality comparison between two values, including asynchronous types.\n *\n * Extends {@link equal} to handle asynchronous values like Promises, AsyncGenerators,\n * and AsyncIterables that can't be compared synchronously. For non-async values,\n * delegates to the synchronous {@link equal} function. Awaits Promise resolution\n * and exhausts async iterables before performing deep comparison.\n *\n * @param a - First value to compare (any type including async)\n * @param b - Second value to compare (any type including async)\n * @returns Promise resolving to true if values are deeply equal, false otherwise\n * @remarks\n * **Additional Async Cases Handled:**\n * 1. **Promises**: Awaits both promises using `Promise.allSettled()` and compares settled results\n * 2. **AsyncGenerators**: Exhausts both generators with `Array.fromAsync()` and compares arrays\n * 3. **AsyncIterables**: Converts both to arrays with `Array.fromAsync()` and compares arrays\n *\n * **Important Notes:**\n * - AsyncGenerators and AsyncIterables are fully consumed during comparison\n * - Promise rejection handling: Compares settled states including rejection reasons\n * - For non-async values, behavior is identical to {@link equal}\n * - Generator comparison only succeeds if both never take parameters\n *\n * @example\n * ```ts\n * // Promise comparisons\n * const promise1 = Promise.resolve(42);\n * const promise2 = Promise.resolve(42);\n * await equalAsync(promise1, promise2);  // true\n *\n * const promise3 = Promise.reject(new Error(\"Failed\"));\n * const promise4 = Promise.reject(new Error(\"Failed\"));\n * await equalAsync(promise3, promise4);  // true (same rejection)\n *\n * // AsyncGenerator comparisons\n * async function* gen1() {\n *   yield 1;\n *   yield 2;\n * }\n * async function* gen2() {\n *   yield 1;\n *   yield 2;\n * }\n * await equalAsync(gen1(), gen2());      // true\n *\n * // AsyncIterable comparisons\n * const asyncIterable1 = {\n *   async *[Symbol.asyncIterator]() {\n *     yield \"a\";\n *     yield \"b\";\n *   }\n * };\n * const asyncIterable2 = {\n *   async *[Symbol.asyncIterator]() {\n *     yield \"a\";\n *     yield \"b\";\n *   }\n * };\n * await equalAsync(asyncIterable1, asyncIterable2);  // true\n *\n * // Mixed async/sync comparisons\n * await equalAsync({a: Promise.resolve(1)}, {a: Promise.resolve(1)});  // true\n * await equalAsync([1, 2, 3], [1, 2, 3]);                             // true (delegates to equal)\n *\n * // Generator exhaustion example\n * async function* counter() {\n *   yield 1;\n *   yield 2;\n *   yield 3;\n * }\n * const gen1 = counter();\n * const gen2 = counter();\n * await equalAsync(gen1, gen2);  // true, but generators are exhausted\n *\n * // Trying to use them again would fail:\n * // await gen1.next();  // { value: undefined, done: true }\n * ```\n */",[2160,2160],[2160,2160],[5669,5669],"/**\n     *\n     */\n    ",[5719,5719],[5719,5719],[6270,6270],[6329,6329],[6388,6388],[8685,8685],[8723,8723],[8723,8723],[10936,10948],"equalAsync",[12159,12159],[12246,12246],[12333,12333],[0,849],"/**\n * Returns the logical NOT of a value's truthiness.\n * This function applies JavaScript's truthiness rules and returns the negated boolean result.\n * Useful for converting truthy values to false and falsy values to true.\n * @param value - Value to negate\n * @returns Negated boolean representation of the value's truthiness\n * @example\n * ```ts\n * BooleanNot(true); // false\n * BooleanNot(false); // true\n * BooleanNot(1); // false (1 is truthy)\n * BooleanNot(0); // true (0 is falsy)\n * BooleanNot('hello'); // false (non-empty string is truthy)\n * BooleanNot(''); // true (empty string is falsy)\n * BooleanNot(null); // true (null is falsy)\n * BooleanNot(undefined); // true (undefined is falsy)\n * BooleanNot([]); // false (arrays are truthy, even empty ones)\n * BooleanNot({}); // false (objects are truthy, even empty ones)\n * ```\n */",[0,849],"/**\n * Returns the logical NOT of a value's truthiness.\n * This function applies JavaScript's truthiness rules and returns the negated boolean result.\n * Useful for converting truthy values to false and falsy values to true.\n *\n * @param value - Value to negate\n * @returns Negated boolean representation of the value's truthiness\n * @example\n * ```ts\n * BooleanNot(true); // false\n * BooleanNot(false); // true\n * BooleanNot(1); // false (1 is truthy)\n * BooleanNot(0); // true (0 is falsy)\n * BooleanNot('hello'); // false (non-empty string is truthy)\n * BooleanNot(''); // true (empty string is falsy)\n * BooleanNot(null); // true (null is falsy)\n * BooleanNot(undefined); // true (undefined is falsy)\n * BooleanNot([]); // false (arrays are truthy, even empty ones)\n * BooleanNot({}); // false (objects are truthy, even empty ones)\n * ```\n */",[231,243],"BooleanNot",[44,485],"/**\n  Basic testing framework\n @deprecated - Found a proper testing framework in Bun test, later Vitest.\n\n @remarks\n Not using something more sentible like Jest or Mocha because they inject their own global variables.\n Not using 'node:test' because that won't be compatible with bun or deno.\n Mocking won't be needed.\n\n The intentional overuse of the `any` type here might require fixing in the future,\n depending on how much impact it has. */",[44,485],"/** Basic testing framework\n @deprecated - Found a proper testing framework in Bun test, later Vitest.\n \n @remarks\n Not using something more sentible like Jest or Mocha because they inject their own global variables.\n Not using 'node:test' because that won't be compatible with bun or deno.\n Mocking won't be needed.\n \n The intentional overuse of the `any` type here might require fixing in the future,\n depending on how much impact it has. */",[44,485],"/** Basic testing framework\n @deprecated - Found a proper testing framework in Bun test, later Vitest.\n @remarks\n Not using something more sentible like Jest or Mocha because they inject their own global variables.\n Not using 'node:test' because that won't be compatible with bun or deno.\n Mocking won't be needed.\n\n The intentional overuse of the `any` type here might require fixing in the future,\n depending on how much impact it has. */",[2127,2225],"/**\n  Pass in an Array of test(...) or suite(...) to create a suite or a supersuite. Fails fast.\n */",[3038,3038],"/**\n *\n */\n",[5824,5824],[235,1039],"/**\n * Asserts that two values are equal using deep equality comparison for async contexts.\n * This function compares the expected and actual values and throws an error if they aren't equal.\n * Supports async values and provides detailed error messages on assertion failure.\n * @param expected - Expected value to compare against\n * @param actual - Actual value to compare\n * @throws {Error} When the values aren't equal\n * @example\n * ```ts\n * await assertAsync(42, getValue()); // Passes if getValue() returns 42\n * await assertAsync([1, 2, 3], getArray()); // Deep equality check for arrays\n * await assertAsync({ a: 1 }, getObject()); // Deep equality check for objects\n *\n * // Will throw if values don't match\n * await assertAsync('expected', 'actual'); // Throws: values not equal\n * ```\n */",[235,1039],"/**\n * Asserts that two values are equal using deep equality comparison for async contexts.\n * This function compares the expected and actual values and throws an error if they aren't equal.\n * Supports async values and provides detailed error messages on assertion failure.\n *\n * @param expected - Expected value to compare against\n * @param actual - Actual value to compare\n * @throws {Error} When the values aren't equal\n * @example\n * ```ts\n * await assertAsync(42, getValue()); // Passes if getValue() returns 42\n * await assertAsync([1, 2, 3], getArray()); // Deep equality check for arrays\n * await assertAsync({ a: 1 }, getObject()); // Deep equality check for objects\n *\n * // Will throw if values don't match\n * await assertAsync('expected', 'actual'); // Throws: values not equal\n * ```\n */",[1168,1730],"/**\n * Asserts that a value is true in async contexts.\n * Convenience function that compares the actual value against boolean true.\n * @param actual - Value to check for truthiness (exactly true, not just truthy)\n * @throws {Error} When the value isn't exactly true\n * @example\n * ```ts\n * await assertTrueAsync(Promise.resolve(true)); // Passes\n * await assertTrueAsync(isValid()); // Passes if isValid() returns true\n * await assertTrueAsync(1); // Throws - truthy but not true\n * await assertTrueAsync('true'); // Throws - string, not boolean\n * ```\n */",[1168,1730],"/**\n * Asserts that a value is true in async contexts.\n * Convenience function that compares the actual value against boolean true.\n *\n * @param actual - Value to check for truthiness (exactly true, not just truthy)\n * @throws {Error} When the value isn't exactly true\n * @example\n * ```ts\n * await assertTrueAsync(Promise.resolve(true)); // Passes\n * await assertTrueAsync(isValid()); // Passes if isValid() returns true\n * await assertTrueAsync(1); // Throws - truthy but not true\n * await assertTrueAsync('true'); // Throws - string, not boolean\n * ```\n */",[1848,2396],"/**\n * Asserts that a value is false in async contexts.\n * Convenience function that compares the actual value against boolean false.\n * @param actual - Value to check for exact false value\n * @throws {Error} When the value isn't exactly false\n * @example\n * ```ts\n * await assertFalseAsync(Promise.resolve(false)); // Passes\n * await assertFalseAsync(isInvalid()); // Passes if isInvalid() returns false\n * await assertFalseAsync(0); // Throws - falsy but not false\n * await assertFalseAsync(null); // Throws - falsy but not false\n * ```\n */",[1848,2396],"/**\n * Asserts that a value is false in async contexts.\n * Convenience function that compares the actual value against boolean false.\n *\n * @param actual - Value to check for exact false value\n * @throws {Error} When the value isn't exactly false\n * @example\n * ```ts\n * await assertFalseAsync(Promise.resolve(false)); // Passes\n * await assertFalseAsync(isInvalid()); // Passes if isInvalid() returns false\n * await assertFalseAsync(0); // Throws - falsy but not false\n * await assertFalseAsync(null); // Throws - falsy but not false\n * ```\n */",[2516,3073],"/**\n * Asserts that a value is undefined in async contexts.\n * Convenience function that compares the actual value against undefined.\n * @param actual - Value to check for undefined\n * @throws {Error} When the value isn't undefined\n * @example\n * ```ts\n * await assertUndefinedAsync(Promise.resolve(undefined)); // Passes\n * await assertUndefinedAsync(getValue()); // Passes if getValue() returns undefined\n * await assertUndefinedAsync(null); // Throws - null isn't undefined\n * await assertUndefinedAsync(0); // Throws - 0 isn't undefined\n * ```\n */",[2516,3073],"/**\n * Asserts that a value is undefined in async contexts.\n * Convenience function that compares the actual value against undefined.\n *\n * @param actual - Value to check for undefined\n * @throws {Error} When the value isn't undefined\n * @example\n * ```ts\n * await assertUndefinedAsync(Promise.resolve(undefined)); // Passes\n * await assertUndefinedAsync(getValue()); // Passes if getValue() returns undefined\n * await assertUndefinedAsync(null); // Throws - null isn't undefined\n * await assertUndefinedAsync(0); // Throws - 0 isn't undefined\n * ```\n */",[3195,3702],"/**\n * Asserts that a value is null in async contexts.\n * Convenience function that compares the actual value against null.\n * @param actual - Value to check for null\n * @throws {Error} When the value isn't null\n * @example\n * ```ts\n * await assertNullAsync(Promise.resolve(null)); // Passes\n * await assertNullAsync(getValue()); // Passes if getValue() returns null\n * await assertNullAsync(undefined); // Throws - undefined isn't null\n * await assertNullAsync(0); // Throws - 0 isn't null\n * ```\n */",[3195,3702],"/**\n * Asserts that a value is null in async contexts.\n * Convenience function that compares the actual value against null.\n *\n * @param actual - Value to check for null\n * @throws {Error} When the value isn't null\n * @example\n * ```ts\n * await assertNullAsync(Promise.resolve(null)); // Passes\n * await assertNullAsync(getValue()); // Passes if getValue() returns null\n * await assertNullAsync(undefined); // Throws - undefined isn't null\n * await assertNullAsync(0); // Throws - 0 isn't null\n * ```\n */",[3814,4373],"/**\n * Asserts that a value is an empty array in async contexts.\n * Convenience function that compares the actual value against an empty array [].\n * @param actual - Value to check for empty array\n * @throws {Error} When the value isn't an empty array\n * @example\n * ```ts\n * await assertEmptyArrayAsync(Promise.resolve([])); // Passes\n * await assertEmptyArrayAsync(getArray()); // Passes if getArray() returns []\n * await assertEmptyArrayAsync([1, 2, 3]); // Throws - not empty\n * await assertEmptyArrayAsync(null); // Throws - not an array\n * ```\n */",[3814,4373],"/**\n * Asserts that a value is an empty array in async contexts.\n * Convenience function that compares the actual value against an empty array [].\n *\n * @param actual - Value to check for empty array\n * @throws {Error} When the value isn't an empty array\n * @example\n * ```ts\n * await assertEmptyArrayAsync(Promise.resolve([])); // Passes\n * await assertEmptyArrayAsync(getArray()); // Passes if getArray() returns []\n * await assertEmptyArrayAsync([1, 2, 3]); // Throws - not empty\n * await assertEmptyArrayAsync(null); // Throws - not an array\n * ```\n */",[4489,5060],"/**\n * Asserts that a value is an empty object in async contexts.\n * Convenience function that compares the actual value against an empty object {}.\n * @param actual - Value to check for empty object\n * @throws {Error} When the value isn't an empty object\n * @example\n * ```ts\n * await assertEmptyObjectAsync(Promise.resolve({})); // Passes\n * await assertEmptyObjectAsync(getObject()); // Passes if getObject() returns {}\n * await assertEmptyObjectAsync({ a: 1 }); // Throws - not empty\n * await assertEmptyObjectAsync([]); // Throws - array, not object\n * ```\n */",[4489,5060],"/**\n * Asserts that a value is an empty object in async contexts.\n * Convenience function that compares the actual value against an empty object {}.\n *\n * @param actual - Value to check for empty object\n * @throws {Error} When the value isn't an empty object\n * @example\n * ```ts\n * await assertEmptyObjectAsync(Promise.resolve({})); // Passes\n * await assertEmptyObjectAsync(getObject()); // Passes if getObject() returns {}\n * await assertEmptyObjectAsync({ a: 1 }); // Throws - not empty\n * await assertEmptyObjectAsync([]); // Throws - array, not object\n * ```\n */",[5177,5655],"/**\n * Asserts that a value is zero in async contexts.\n * Convenience function that compares the actual value against 0.\n * @param actual - Value to check for zero\n * @throws {Error} When the value isn't zero\n * @example\n * ```ts\n * await assert0Async(Promise.resolve(0)); // Passes\n * await assert0Async(Math.floor(0.9)); // Passes\n * await assert0Async(-0); // Passes - negative zero equals zero\n * await assert0Async(false); // Throws - boolean false isn't 0\n * ```\n */",[5177,5655],"/**\n * Asserts that a value is zero in async contexts.\n * Convenience function that compares the actual value against 0.\n *\n * @param actual - Value to check for zero\n * @throws {Error} When the value isn't zero\n * @example\n * ```ts\n * await assert0Async(Promise.resolve(0)); // Passes\n * await assert0Async(Math.floor(0.9)); // Passes\n * await assert0Async(-0); // Passes - negative zero equals zero\n * await assert0Async(false); // Throws - boolean false isn't 0\n * ```\n */",[5761,6235],"/**\n * Asserts that a value is one in async contexts.\n * Convenience function that compares the actual value against 1.\n * @param actual - Value to check for one\n * @throws {Error} When the value isn't one\n * @example\n * ```ts\n * await assert1Async(Promise.resolve(1)); // Passes\n * await assert1Async(Math.floor(1.9)); // Passes\n * await assert1Async(true); // Throws - boolean true isn't 1\n * await assert1Async('1'); // Throws - string '1' isn't number 1\n * ```\n */",[5761,6235],"/**\n * Asserts that a value is one in async contexts.\n * Convenience function that compares the actual value against 1.\n *\n * @param actual - Value to check for one\n * @throws {Error} When the value isn't one\n * @example\n * ```ts\n * await assert1Async(Promise.resolve(1)); // Passes\n * await assert1Async(Math.floor(1.9)); // Passes\n * await assert1Async(true); // Throws - boolean true isn't 1\n * await assert1Async('1'); // Throws - string '1' isn't number 1\n * ```\n */",[6341,6807],"/**\n * Asserts that a value is NaN in async contexts.\n * Convenience function that compares the actual value against Number.NaN.\n * @param actual - Value to check for NaN\n * @throws {Error} When the value isn't NaN\n * @example\n * ```ts\n * await assertNanAsync(Promise.resolve(NaN)); // Passes\n * await assertNanAsync(Number.NaN); // Passes\n * await assertNanAsync(0 / 0); // Passes\n * await assertNanAsync(undefined); // Throws - undefined isn't NaN\n * ```\n */",[6341,6807],"/**\n * Asserts that a value is NaN in async contexts.\n * Convenience function that compares the actual value against Number.NaN.\n *\n * @param actual - Value to check for NaN\n * @throws {Error} When the value isn't NaN\n * @example\n * ```ts\n * await assertNanAsync(Promise.resolve(NaN)); // Passes\n * await assertNanAsync(Number.NaN); // Passes\n * await assertNanAsync(0 / 0); // Passes\n * await assertNanAsync(undefined); // Throws - undefined isn't NaN\n * ```\n */",[6924,7449],"/**\n * Asserts that a value is negative one in async contexts.\n * Convenience function that compares the actual value against -1.\n * @param actual - Value to check for negative one\n * @throws {Error} When the value isn't -1\n * @example\n * ```ts\n * await assertNegative1Async(Promise.resolve(-1)); // Passes\n * await assertNegative1Async(Math.floor(-1.9)); // Passes\n * await assertNegative1Async(1); // Throws - positive 1 isn't -1\n * await assertNegative1Async('-1'); // Throws - string '-1' isn't number -1\n * ```\n */",[6924,7449],"/**\n * Asserts that a value is negative one in async contexts.\n * Convenience function that compares the actual value against -1.\n *\n * @param actual - Value to check for negative one\n * @throws {Error} When the value isn't -1\n * @example\n * ```ts\n * await assertNegative1Async(Promise.resolve(-1)); // Passes\n * await assertNegative1Async(Math.floor(-1.9)); // Passes\n * await assertNegative1Async(1); // Throws - positive 1 isn't -1\n * await assertNegative1Async('-1'); // Throws - string '-1' isn't number -1\n * ```\n */",[7564,8274],"/**\n * Asserts that two values are equal using deep equality comparison.\n * This function compares the expected and actual values and throws an error if they aren't equal.\n * Core assertion function for synchronous contexts.\n * @param expected - Expected value to compare against\n * @param actual - Actual value to compare\n * @throws {Error} When the values aren't equal\n * @example\n * ```ts\n * assert(42, getValue()); // Passes if getValue() returns 42\n * assert([1, 2, 3], getArray()); // Deep equality check for arrays\n * assert({ a: 1 }, getObject()); // Deep equality check for objects\n *\n * // Will throw if values don't match\n * assert('expected', 'actual'); // Throws: values not equal\n * ```\n */",[7564,8274],"/**\n * Asserts that two values are equal using deep equality comparison.\n * This function compares the expected and actual values and throws an error if they aren't equal.\n * Core assertion function for synchronous contexts.\n *\n * @param expected - Expected value to compare against\n * @param actual - Actual value to compare\n * @throws {Error} When the values aren't equal\n * @example\n * ```ts\n * assert(42, getValue()); // Passes if getValue() returns 42\n * assert([1, 2, 3], getArray()); // Deep equality check for arrays\n * assert({ a: 1 }, getObject()); // Deep equality check for objects\n *\n * // Will throw if values don't match\n * assert('expected', 'actual'); // Throws: values not equal\n * ```\n */",[8410,8893],"/**\n * Asserts that a value is true.\n * Convenience function that compares the actual value against boolean true.\n * @param actual - Value to check for truthiness (exactly true, not just truthy)\n * @throws {Error} When the value isn't exactly true\n * @example\n * ```ts\n * assertTrue(true); // Passes\n * assertTrue(isValid()); // Passes if isValid() returns true\n * assertTrue(1); // Throws - truthy but not true\n * assertTrue('true'); // Throws - string, not boolean\n * ```\n */",[8410,8893],"/**\n * Asserts that a value is true.\n * Convenience function that compares the actual value against boolean true.\n *\n * @param actual - Value to check for truthiness (exactly true, not just truthy)\n * @throws {Error} When the value isn't exactly true\n * @example\n * ```ts\n * assertTrue(true); // Passes\n * assertTrue(isValid()); // Passes if isValid() returns true\n * assertTrue(1); // Throws - truthy but not true\n * assertTrue('true'); // Throws - string, not boolean\n * ```\n */",[8976,9445],"/**\n * Asserts that a value is false.\n * Convenience function that compares the actual value against boolean false.\n * @param actual - Value to check for exact false value\n * @throws {Error} When the value isn't exactly false\n * @example\n * ```ts\n * assertFalse(false); // Passes\n * assertFalse(isInvalid()); // Passes if isInvalid() returns false\n * assertFalse(0); // Throws - falsy but not false\n * assertFalse(null); // Throws - falsy but not false\n * ```\n */",[8976,9445],"/**\n * Asserts that a value is false.\n * Convenience function that compares the actual value against boolean false.\n *\n * @param actual - Value to check for exact false value\n * @throws {Error} When the value isn't exactly false\n * @example\n * ```ts\n * assertFalse(false); // Passes\n * assertFalse(isInvalid()); // Passes if isInvalid() returns false\n * assertFalse(0); // Throws - falsy but not false\n * assertFalse(null); // Throws - falsy but not false\n * ```\n */",[9530,10008],"/**\n * Asserts that a value is undefined.\n * Convenience function that compares the actual value against undefined.\n * @param actual - Value to check for undefined\n * @throws {Error} When the value isn't undefined\n * @example\n * ```ts\n * assertUndefined(undefined); // Passes\n * assertUndefined(getValue()); // Passes if getValue() returns undefined\n * assertUndefined(null); // Throws - null isn't undefined\n * assertUndefined(0); // Throws - 0 isn't undefined\n * ```\n */",[9530,10008],"/**\n * Asserts that a value is undefined.\n * Convenience function that compares the actual value against undefined.\n *\n * @param actual - Value to check for undefined\n * @throws {Error} When the value isn't undefined\n * @example\n * ```ts\n * assertUndefined(undefined); // Passes\n * assertUndefined(getValue()); // Passes if getValue() returns undefined\n * assertUndefined(null); // Throws - null isn't undefined\n * assertUndefined(0); // Throws - 0 isn't undefined\n * ```\n */",[10101,10529],"/**\n * Asserts that a value is null.\n * Convenience function that compares the actual value against null.\n * @param actual - Value to check for null\n * @throws {Error} When the value isn't null\n * @example\n * ```ts\n * assertNull(null); // Passes\n * assertNull(getValue()); // Passes if getValue() returns null\n * assertNull(undefined); // Throws - undefined isn't null\n * assertNull(0); // Throws - 0 isn't null\n * ```\n */",[10101,10529],"/**\n * Asserts that a value is null.\n * Convenience function that compares the actual value against null.\n *\n * @param actual - Value to check for null\n * @throws {Error} When the value isn't null\n * @example\n * ```ts\n * assertNull(null); // Passes\n * assertNull(getValue()); // Passes if getValue() returns null\n * assertNull(undefined); // Throws - undefined isn't null\n * assertNull(0); // Throws - 0 isn't null\n * ```\n */",[10612,11092],"/**\n * Asserts that a value is an empty array.\n * Convenience function that compares the actual value against an empty array [].\n * @param actual - Value to check for empty array\n * @throws {Error} When the value isn't an empty array\n * @example\n * ```ts\n * assertEmptyArray([]); // Passes\n * assertEmptyArray(getArray()); // Passes if getArray() returns []\n * assertEmptyArray([1, 2, 3]); // Throws - not empty\n * assertEmptyArray(null); // Throws - not an array\n * ```\n */",[10612,11092],"/**\n * Asserts that a value is an empty array.\n * Convenience function that compares the actual value against an empty array [].\n *\n * @param actual - Value to check for empty array\n * @throws {Error} When the value isn't an empty array\n * @example\n * ```ts\n * assertEmptyArray([]); // Passes\n * assertEmptyArray(getArray()); // Passes if getArray() returns []\n * assertEmptyArray([1, 2, 3]); // Throws - not empty\n * assertEmptyArray(null); // Throws - not an array\n * ```\n */",[11179,11671],"/**\n * Asserts that a value is an empty object.\n * Convenience function that compares the actual value against an empty object {}.\n * @param actual - Value to check for empty object\n * @throws {Error} When the value isn't an empty object\n * @example\n * ```ts\n * assertEmptyObject({}); // Passes\n * assertEmptyObject(getObject()); // Passes if getObject() returns {}\n * assertEmptyObject({ a: 1 }); // Throws - not empty\n * assertEmptyObject([]); // Throws - array, not object\n * ```\n */",[11179,11671],"/**\n * Asserts that a value is an empty object.\n * Convenience function that compares the actual value against an empty object {}.\n *\n * @param actual - Value to check for empty object\n * @throws {Error} When the value isn't an empty object\n * @example\n * ```ts\n * assertEmptyObject({}); // Passes\n * assertEmptyObject(getObject()); // Passes if getObject() returns {}\n * assertEmptyObject({ a: 1 }); // Throws - not empty\n * assertEmptyObject([]); // Throws - array, not object\n * ```\n */",[11759,12158],"/**\n * Asserts that a value is zero.\n * Convenience function that compares the actual value against 0.\n * @param actual - Value to check for zero\n * @throws {Error} When the value isn't zero\n * @example\n * ```ts\n * assert0(0); // Passes\n * assert0(Math.floor(0.9)); // Passes\n * assert0(-0); // Passes - negative zero equals zero\n * assert0(false); // Throws - boolean false isn't 0\n * ```\n */",[11759,12158],"/**\n * Asserts that a value is zero.\n * Convenience function that compares the actual value against 0.\n *\n * @param actual - Value to check for zero\n * @throws {Error} When the value isn't zero\n * @example\n * ```ts\n * assert0(0); // Passes\n * assert0(Math.floor(0.9)); // Passes\n * assert0(-0); // Passes - negative zero equals zero\n * assert0(false); // Throws - boolean false isn't 0\n * ```\n */",[12235,12630],"/**\n * Asserts that a value is one.\n * Convenience function that compares the actual value against 1.\n * @param actual - Value to check for one\n * @throws {Error} When the value isn't one\n * @example\n * ```ts\n * assert1(1); // Passes\n * assert1(Math.floor(1.9)); // Passes\n * assert1(true); // Throws - boolean true isn't 1\n * assert1('1'); // Throws - string '1' isn't number 1\n * ```\n */",[12235,12630],"/**\n * Asserts that a value is one.\n * Convenience function that compares the actual value against 1.\n *\n * @param actual - Value to check for one\n * @throws {Error} When the value isn't one\n * @example\n * ```ts\n * assert1(1); // Passes\n * assert1(Math.floor(1.9)); // Passes\n * assert1(true); // Throws - boolean true isn't 1\n * assert1('1'); // Throws - string '1' isn't number 1\n * ```\n */",[12707,13094],"/**\n * Asserts that a value is NaN.\n * Convenience function that compares the actual value against Number.NaN.\n * @param actual - Value to check for NaN\n * @throws {Error} When the value isn't NaN\n * @example\n * ```ts\n * assertNan(NaN); // Passes\n * assertNan(Number.NaN); // Passes\n * assertNan(0 / 0); // Passes\n * assertNan(undefined); // Throws - undefined isn't NaN\n * ```\n */",[12707,13094],"/**\n * Asserts that a value is NaN.\n * Convenience function that compares the actual value against Number.NaN.\n *\n * @param actual - Value to check for NaN\n * @throws {Error} When the value isn't NaN\n * @example\n * ```ts\n * assertNan(NaN); // Passes\n * assertNan(Number.NaN); // Passes\n * assertNan(0 / 0); // Passes\n * assertNan(undefined); // Throws - undefined isn't NaN\n * ```\n */",[13182,13628],"/**\n * Asserts that a value is negative one.\n * Convenience function that compares the actual value against -1.\n * @param actual - Value to check for negative one\n * @throws {Error} When the value isn't -1\n * @example\n * ```ts\n * assertNegative1(-1); // Passes\n * assertNegative1(Math.floor(-1.9)); // Passes\n * assertNegative1(1); // Throws - positive 1 isn't -1\n * assertNegative1('-1'); // Throws - string '-1' isn't number -1\n * ```\n */",[13182,13628],"/**\n * Asserts that a value is negative one.\n * Convenience function that compares the actual value against -1.\n *\n * @param actual - Value to check for negative one\n * @throws {Error} When the value isn't -1\n * @example\n * ```ts\n * assertNegative1(-1); // Passes\n * assertNegative1(Math.floor(-1.9)); // Passes\n * assertNegative1(1); // Throws - positive 1 isn't -1\n * assertNegative1('-1'); // Throws - string '-1' isn't number -1\n * ```\n */",[112,867],"/**\n * Asserts that type Y extends type X at compile-time.\n * Core type assertion utility that validates type relationships and compatibility.\n * Useful for ensuring type constraints are met in generic functions and type definitions.\n * @template X - Expected supertype that Y should extend\n * @template Y - Type to validate, must extend X\n * @returns Y if the assertion passes, compilation error if Y doesn't extend X\n * @example\n * ```ts\n * type StringInput = Assert<string, 'hello'>; // ✓ 'hello' extends string\n * type NumberInput = Assert<number, 42>; // ✓ 42 extends number\n * // type Invalid = Assert<string, number>; // ✗ Compilation error\n *\n * function processStringLike<T>(value: Assert<string, T>): T {\n *   return value;\n * }\n * ```\n */",[112,867],"/**\n * Asserts that type Y extends type X at compile-time.\n * Core type assertion utility that validates type relationships and compatibility.\n * Useful for ensuring type constraints are met in generic functions and type definitions.\n *\n * @template X - Expected supertype that Y should extend\n * @template Y - Type to validate, must extend X\n * @returns Y if the assertion passes, compilation error if Y doesn't extend X\n * @example\n * ```ts\n * type StringInput = Assert<string, 'hello'>; // ✓ 'hello' extends string\n * type NumberInput = Assert<number, 42>; // ✓ 42 extends number\n * // type Invalid = Assert<string, number>; // ✗ Compilation error\n *\n * function processStringLike<T>(value: Assert<string, T>): T {\n *   return value;\n * }\n * ```\n */",[910,1485],"/**\n * Asserts that type Y is exactly true at compile-time.\n * Type assertion utility for boolean literal validation in type-level programming.\n * @template Y - Type to validate, must be exactly true\n * @returns Y if the assertion passes, compilation error if Y is not true\n * @example\n * ```ts\n * type IsValid = AssertTrue<true>; // ✓ Passes\n * type IsEqual = AssertTrue<1 extends number>; // ✓ Conditional type resolves to true\n * // type Invalid = AssertTrue<false>; // ✗ Compilation error\n * // type Invalid2 = AssertTrue<boolean>; // ✗ Compilation error\n * ```\n */",[910,1485],"/**\n * Asserts that type Y is exactly true at compile-time.\n * Type assertion utility for boolean literal validation in type-level programming.\n *\n * @template Y - Type to validate, must be exactly true\n * @returns Y if the assertion passes, compilation error if Y is not true\n * @example\n * ```ts\n * type IsValid = AssertTrue<true>; // ✓ Passes\n * type IsEqual = AssertTrue<1 extends number>; // ✓ Conditional type resolves to true\n * // type Invalid = AssertTrue<false>; // ✗ Compilation error\n * // type Invalid2 = AssertTrue<boolean>; // ✗ Compilation error\n * ```\n */",[1532,2125],"/**\n * Asserts that type Y is exactly false at compile-time.\n * Type assertion utility for boolean literal validation in type-level programming.\n * @template Y - Type to validate, must be exactly false\n * @returns Y if the assertion passes, compilation error if Y is not false\n * @example\n * ```ts\n * type IsInvalid = AssertFalse<false>; // ✓ Passes\n * type IsNotEqual = AssertFalse<string extends number>; // ✓ Conditional type resolves to false\n * // type Invalid = AssertFalse<true>; // ✗ Compilation error\n * // type Invalid2 = AssertFalse<boolean>; // ✗ Compilation error\n * ```\n */",[1532,2125],"/**\n * Asserts that type Y is exactly false at compile-time.\n * Type assertion utility for boolean literal validation in type-level programming.\n *\n * @template Y - Type to validate, must be exactly false\n * @returns Y if the assertion passes, compilation error if Y is not false\n * @example\n * ```ts\n * type IsInvalid = AssertFalse<false>; // ✓ Passes\n * type IsNotEqual = AssertFalse<string extends number>; // ✓ Conditional type resolves to false\n * // type Invalid = AssertFalse<true>; // ✗ Compilation error\n * // type Invalid2 = AssertFalse<boolean>; // ✗ Compilation error\n * ```\n */",[2174,2782],"/**\n * Asserts that type Y is exactly undefined at compile-time.\n * Type assertion utility for undefined type validation in type-level programming.\n * @template Y - Type to validate, must be exactly undefined\n * @returns Y if the assertion passes, compilation error if Y is not undefined\n * @example\n * ```ts\n * type VoidReturn = AssertUndefined<undefined>; // ✓ Passes\n * type MaybeUndefined = AssertUndefined<void>; // ✓ void is equivalent to undefined\n * // type Invalid = AssertUndefined<null>; // ✗ Compilation error\n * // type Invalid2 = AssertUndefined<string>; // ✗ Compilation error\n * ```\n */",[2174,2782],"/**\n * Asserts that type Y is exactly undefined at compile-time.\n * Type assertion utility for undefined type validation in type-level programming.\n *\n * @template Y - Type to validate, must be exactly undefined\n * @returns Y if the assertion passes, compilation error if Y is not undefined\n * @example\n * ```ts\n * type VoidReturn = AssertUndefined<undefined>; // ✓ Passes\n * type MaybeUndefined = AssertUndefined<void>; // ✓ void is equivalent to undefined\n * // type Invalid = AssertUndefined<null>; // ✗ Compilation error\n * // type Invalid2 = AssertUndefined<string>; // ✗ Compilation error\n * ```\n */",[2839,3413],"/**\n * Asserts that type Y is exactly null at compile-time.\n * Type assertion utility for null type validation in type-level programming.\n * @template Y - Type to validate, must be exactly null\n * @returns Y if the assertion passes, compilation error if Y is not null\n * @example\n * ```ts\n * type NullValue = AssertNull<null>; // ✓ Passes\n * type NullableCheck = AssertNull<string | null>; // ✗ Compilation error (union type)\n * // type Invalid = AssertNull<undefined>; // ✗ Compilation error\n * // type Invalid2 = AssertNull<string>; // ✗ Compilation error\n * ```\n */",[2839,3413],"/**\n * Asserts that type Y is exactly null at compile-time.\n * Type assertion utility for null type validation in type-level programming.\n *\n * @template Y - Type to validate, must be exactly null\n * @returns Y if the assertion passes, compilation error if Y is not null\n * @example\n * ```ts\n * type NullValue = AssertNull<null>; // ✓ Passes\n * type NullableCheck = AssertNull<string | null>; // ✗ Compilation error (union type)\n * // type Invalid = AssertNull<undefined>; // ✗ Compilation error\n * // type Invalid2 = AssertNull<string>; // ✗ Compilation error\n * ```\n */",[3460,4093],"/**\n * Asserts that type Y is an empty object at compile-time.\n * Type assertion utility for validating empty object types with no enumerable properties.\n * @template Y - Type to validate, must extend Record<string, never>\n * @returns Y if the assertion passes, compilation error if Y has properties\n * @example\n * ```ts\n * type EmptyObj = AssertEmptyObject<{}>; // ✓ Passes\n * type EmptyRecord = AssertEmptyObject<Record<string, never>>; // ✓ Passes\n * // type Invalid = AssertEmptyObject<{ prop: string }>; // ✗ Compilation error\n * // type Invalid2 = AssertEmptyObject<Record<string, any>>; // ✗ Compilation error\n * ```\n */",[3460,4093],"/**\n * Asserts that type Y is an empty object at compile-time.\n * Type assertion utility for validating empty object types with no enumerable properties.\n *\n * @template Y - Type to validate, must extend Record<string, never>\n * @returns Y if the assertion passes, compilation error if Y has properties\n * @example\n * ```ts\n * type EmptyObj = AssertEmptyObject<{}>; // ✓ Passes\n * type EmptyRecord = AssertEmptyObject<Record<string, never>>; // ✓ Passes\n * // type Invalid = AssertEmptyObject<{ prop: string }>; // ✗ Compilation error\n * // type Invalid2 = AssertEmptyObject<Record<string, any>>; // ✗ Compilation error\n * ```\n */",[4168,4704],"/**\n * Asserts that type Y is exactly 0 at compile-time.\n * Type assertion utility for zero literal validation in numeric type programming.\n * @template Y - Type to validate, must be exactly 0\n * @returns Y if the assertion passes, compilation error if Y is not 0\n * @example\n * ```ts\n * type Zero = Assert0<0>; // ✓ Passes\n * type ZeroResult = Assert0<1 - 1>; // ✓ Type-level arithmetic resolves to 0\n * // type Invalid = Assert0<1>; // ✗ Compilation error\n * // type Invalid2 = Assert0<number>; // ✗ Compilation error\n * ```\n */",[4168,4704],"/**\n * Asserts that type Y is exactly 0 at compile-time.\n * Type assertion utility for zero literal validation in numeric type programming.\n *\n * @template Y - Type to validate, must be exactly 0\n * @returns Y if the assertion passes, compilation error if Y is not 0\n * @example\n * ```ts\n * type Zero = Assert0<0>; // ✓ Passes\n * type ZeroResult = Assert0<1 - 1>; // ✓ Type-level arithmetic resolves to 0\n * // type Invalid = Assert0<1>; // ✗ Compilation error\n * // type Invalid2 = Assert0<number>; // ✗ Compilation error\n * ```\n */",[4745,5278],"/**\n * Asserts that type Y is exactly 1 at compile-time.\n * Type assertion utility for one literal validation in numeric type programming.\n * @template Y - Type to validate, must be exactly 1\n * @returns Y if the assertion passes, compilation error if Y is not 1\n * @example\n * ```ts\n * type One = Assert1<1>; // ✓ Passes\n * type OneResult = Assert1<0 + 1>; // ✓ Type-level arithmetic resolves to 1\n * // type Invalid = Assert1<2>; // ✗ Compilation error\n * // type Invalid2 = Assert1<number>; // ✗ Compilation error\n * ```\n */",[4745,5278],"/**\n * Asserts that type Y is exactly 1 at compile-time.\n * Type assertion utility for one literal validation in numeric type programming.\n *\n * @template Y - Type to validate, must be exactly 1\n * @returns Y if the assertion passes, compilation error if Y is not 1\n * @example\n * ```ts\n * type One = Assert1<1>; // ✓ Passes\n * type OneResult = Assert1<0 + 1>; // ✓ Type-level arithmetic resolves to 1\n * // type Invalid = Assert1<2>; // ✗ Compilation error\n * // type Invalid2 = Assert1<number>; // ✗ Compilation error\n * ```\n */",[5319,5824],"/**\n * Asserts that type Y is exactly NaN at compile-time.\n * Type assertion utility for NaN literal validation in numeric type programming.\n * @template Y - Type to validate, must be exactly typeof Number.NaN\n * @returns Y if the assertion passes, compilation error if Y is not NaN\n * @example\n * ```ts\n * type NotANumber = AssertNan<typeof Number.NaN>; // ✓ Passes\n * // type Invalid = AssertNan<number>; // ✗ Compilation error\n * // type Invalid2 = AssertNan<0>; // ✗ Compilation error\n * ```\n */",[5319,5824],"/**\n * Asserts that type Y is exactly NaN at compile-time.\n * Type assertion utility for NaN literal validation in numeric type programming.\n *\n * @template Y - Type to validate, must be exactly typeof Number.NaN\n * @returns Y if the assertion passes, compilation error if Y is not NaN\n * @example\n * ```ts\n * type NotANumber = AssertNan<typeof Number.NaN>; // ✓ Passes\n * // type Invalid = AssertNan<number>; // ✗ Compilation error\n * // type Invalid2 = AssertNan<0>; // ✗ Compilation error\n * ```\n */",[5883,6470],"/**\n * Asserts that type Y is exactly -1 at compile-time.\n * Type assertion utility for negative one literal validation in numeric type programming.\n * @template Y - Type to validate, must be exactly -1\n * @returns Y if the assertion passes, compilation error if Y is not -1\n * @example\n * ```ts\n * type NegativeOne = AssertNegative1<-1>; // ✓ Passes\n * type NegResult = AssertNegative1<0 - 1>; // ✓ Type-level arithmetic resolves to -1\n * // type Invalid = AssertNegative1<1>; // ✗ Compilation error\n * // type Invalid2 = AssertNegative1<number>; // ✗ Compilation error\n * ```\n */",[5883,6470],"/**\n * Asserts that type Y is exactly -1 at compile-time.\n * Type assertion utility for negative one literal validation in numeric type programming.\n *\n * @template Y - Type to validate, must be exactly -1\n * @returns Y if the assertion passes, compilation error if Y is not -1\n * @example\n * ```ts\n * type NegativeOne = AssertNegative1<-1>; // ✓ Passes\n * type NegResult = AssertNegative1<0 - 1>; // ✓ Type-level arithmetic resolves to -1\n * // type Invalid = AssertNegative1<1>; // ✗ Compilation error\n * // type Invalid2 = AssertNegative1<number>; // ✗ Compilation error\n * ```\n */",[6520,7102],"/**\n * Asserts that type Y is an empty array at compile-time.\n * Type assertion utility for validating empty array types with no elements.\n * @template Y - Type to validate, must extend never[]\n * @returns Y if the assertion passes, compilation error if Y has elements\n * @example\n * ```ts\n * type EmptyArr = AssertEmptyArray<never[]>; // ✓ Passes\n * type EmptyTuple = AssertEmptyArray<[]>; // ✓ Passes ([] extends never[])\n * // type Invalid = AssertEmptyArray<[string]>; // ✗ Compilation error\n * // type Invalid2 = AssertEmptyArray<any[]>; // ✗ Compilation error\n * ```\n */",[6520,7102],"/**\n * Asserts that type Y is an empty array at compile-time.\n * Type assertion utility for validating empty array types with no elements.\n *\n * @template Y - Type to validate, must extend never[]\n * @returns Y if the assertion passes, compilation error if Y has elements\n * @example\n * ```ts\n * type EmptyArr = AssertEmptyArray<never[]>; // ✓ Passes\n * type EmptyTuple = AssertEmptyArray<[]>; // ✓ Passes ([] extends never[])\n * // type Invalid = AssertEmptyArray<[string]>; // ✗ Compilation error\n * // type Invalid2 = AssertEmptyArray<any[]>; // ✗ Compilation error\n * ```\n */",[7158,7974],"/**\n * Asserts that type Y excludes type X at compile-time.\n * Type assertion utility for validating that a type doesn't include specific values or types.\n * Uses Exclude utility type to ensure Y contains no overlap with X.\n * @template X - Type to exclude from Y\n * @template Y - Type to validate, must not include any part of X\n * @returns Y if the assertion passes, compilation error if Y includes X\n * @example\n * ```ts\n * type StringOnly = AssertNot<number, string>; // ✓ string excludes number\n * type NoNull = AssertNot<null, string>; // ✓ string excludes null\n * type NoUndefined = AssertNot<undefined, 'hello'>; // ✓ 'hello' excludes undefined\n * // type Invalid = AssertNot<string, 'hello'>; // ✗ 'hello' includes string\n * // type Invalid2 = AssertNot<number, 42>; // ✗ 42 includes number\n * ```\n */",[7158,7974],"/**\n * Asserts that type Y excludes type X at compile-time.\n * Type assertion utility for validating that a type doesn't include specific values or types.\n * Uses Exclude utility type to ensure Y contains no overlap with X.\n *\n * @template X - Type to exclude from Y\n * @template Y - Type to validate, must not include any part of X\n * @returns Y if the assertion passes, compilation error if Y includes X\n * @example\n * ```ts\n * type StringOnly = AssertNot<number, string>; // ✓ string excludes number\n * type NoNull = AssertNot<null, string>; // ✓ string excludes null\n * type NoUndefined = AssertNot<undefined, 'hello'>; // ✓ 'hello' excludes undefined\n * // type Invalid = AssertNot<string, 'hello'>; // ✗ 'hello' includes string\n * // type Invalid2 = AssertNot<number, 42>; // ✗ 42 includes number\n * ```\n */",[708,722],"{ assert(42, 42); }",[756,778],"{ assert('test', 'test'); }",[812,830],"{ assert(null, null); }",[865,879],"{ assert(42, 43); }",[909,932],"{ assert('test', 'other'); }",[1019,1035],"{ assertTrue(true); }",[1069,1086],"{ assertTrue(false); }",[1175,1193],"{ assertFalse(false); }",[1227,1244],"{ assertFalse(true); }",[1341,1367],"{ assertUndefined(undefined); }",[1401,1422],"{ assertUndefined(null); }",[1452,1470],"{ assertUndefined(0); }",[1557,1573],"{ assertNull(null); }",[1607,1628],"{ assertNull(undefined); }",[1658,1671],"{ assertNull(0); }",[1765,1785],"{ assertEmptyArray([]); }",[1819,1843],"{ assertEmptyArray([1, 2]); }",[1873,1893],"{ assertEmptyArray({}); }",[1989,2010],"{ assertEmptyObject({}); }",[2044,2071],"{ assertEmptyObject({ a: 1 }); }",[2101,2122],"{ assertEmptyObject([]); }",[2206,2216],"{ assert0(0); }",[2250,2260],"{ assert0(1); }",[2290,2302],"{ assert0('0'); }",[2385,2395],"{ assert1(1); }",[2429,2439],"{ assert1(0); }",[2469,2481],"{ assert1('1'); }",[2566,2587],"{ assertNan(Number.NaN); }",[2621,2633],"{ assertNan(0); }",[2663,2679],"{ assertNan('NaN'); }",[2769,2788],"{ assertNegative1(-1); }",[2822,2840],"{ assertNegative1(0); }",[2870,2891],"{ assertNegative1('-1'); }",[420,1047],"/**\n * Expected error types that can be used for error assertion testing.\n * Supports error class names as strings, specific Error instances, or custom error messages.\n * This type union enables flexible error matching strategies for comprehensive test scenarios.\n * @example\n * ```ts\n * // Error class names\n * const errorType1: ExpectedError = 'TypeError';\n * const errorType2: ExpectedError = 'RangeError';\n *\n * // Specific Error instances\n * const customError: ExpectedError = new Error('Custom message');\n *\n * // Custom error message strings\n * const errorMessage: ExpectedError = 'Invalid input provided';\n * ```\n */",[1166,2506],"/**\n * Asserts that a function throws a specific error in async contexts.\n * This function executes the provided function and verifies that it throws an error\n * matching the expected error type, instance, or message. Supports various error\n * matching strategies including error class names, specific Error instances, and custom messages.\n * @param error - Expected error specification. Can be:\n *   - Error class name ('TypeError', 'RangeError', etc.)\n *   - Specific Error instance for exact matching\n *   - Custom error message string\n *   - Function that returns an Error for dynamic error creation\n * @param fn - Function to execute that should throw an error\n * @throws {Error} When the function doesn't throw or throws an unexpected error\n * @example\n * ```ts\n * // Test for specific error types\n * await assertThrowAsync('TypeError', () => someInvalidOperation());\n * await assertThrowAsync('RangeError', () => arrayAccess(-1));\n *\n * // Test for specific error instances\n * const expectedError = new Error('Custom message');\n * await assertThrowAsync(expectedError, () => throwCustomError());\n *\n * // Test for custom error messages\n * await assertThrowAsync('Invalid input', () => validateInput('bad'));\n *\n * // Dynamic error creation\n * await assertThrowAsync(() => new Error('Dynamic'), () => dynamicThrow());\n * ```\n */",[1166,2506],"/**\n * Asserts that a function throws a specific error in async contexts.\n * This function executes the provided function and verifies that it throws an error\n * matching the expected error type, instance, or message. Supports various error\n * matching strategies including error class names, specific Error instances, and custom messages.\n *\n * @param error - Expected error specification. Can be:\n *   - Error class name ('TypeError', 'RangeError', etc.)\n *   - Specific Error instance for exact matching\n *   - Custom error message string\n *   - Function that returns an Error for dynamic error creation\n * @param fn - Function to execute that should throw an error\n * @throws {Error} When the function doesn't throw or throws an unexpected error\n * @example\n * ```ts\n * // Test for specific error types\n * await assertThrowAsync('TypeError', () => someInvalidOperation());\n * await assertThrowAsync('RangeError', () => arrayAccess(-1));\n *\n * // Test for specific error instances\n * const expectedError = new Error('Custom message');\n * await assertThrowAsync(expectedError, () => throwCustomError());\n *\n * // Test for custom error messages\n * await assertThrowAsync('Invalid input', () => validateInput('bad'));\n *\n * // Dynamic error creation\n * await assertThrowAsync(() => new Error('Dynamic'), () => dynamicThrow());\n * ```\n */",[3950,5177],"/**\n * Asserts that a function throws a specific error in synchronous contexts.\n * This function executes the provided function and verifies that it throws an error\n * matching the expected error type, instance, or message. Core synchronous version\n * of error throwing assertions.\n * @param error - Expected error specification. Can be:\n *   - Error class name ('TypeError', 'RangeError', etc.)\n *   - Specific Error instance for exact matching\n *   - Custom error message string\n *   - Function that returns an Error for dynamic error creation\n * @param fn - Function to execute that should throw an error\n * @throws {Error} When the function doesn't throw or throws an unexpected error\n * @example\n * ```ts\n * // Test for specific error types\n * assertThrow('TypeError', () => someInvalidOperation());\n * assertThrow('RangeError', () => arrayAccess(-1));\n *\n * // Test for specific error instances\n * const expectedError = new Error('Custom message');\n * assertThrow(expectedError, () => throwCustomError());\n *\n * // Test for custom error messages\n * assertThrow('Invalid input', () => validateInput('bad'));\n *\n * // Dynamic error creation\n * assertThrow(() => new Error('Dynamic'), () => dynamicThrow());\n * ```\n */",[3950,5177],"/**\n * Asserts that a function throws a specific error in synchronous contexts.\n * This function executes the provided function and verifies that it throws an error\n * matching the expected error type, instance, or message. Core synchronous version\n * of error throwing assertions.\n *\n * @param error - Expected error specification. Can be:\n *   - Error class name ('TypeError', 'RangeError', etc.)\n *   - Specific Error instance for exact matching\n *   - Custom error message string\n *   - Function that returns an Error for dynamic error creation\n * @param fn - Function to execute that should throw an error\n * @throws {Error} When the function doesn't throw or throws an unexpected error\n * @example\n * ```ts\n * // Test for specific error types\n * assertThrow('TypeError', () => someInvalidOperation());\n * assertThrow('RangeError', () => arrayAccess(-1));\n *\n * // Test for specific error instances\n * const expectedError = new Error('Custom message');\n * assertThrow(expectedError, () => throwCustomError());\n *\n * // Test for custom error messages\n * assertThrow('Invalid input', () => validateInput('bad'));\n *\n * // Dynamic error creation\n * assertThrow(() => new Error('Dynamic'), () => dynamicThrow());\n * ```\n */",[6566,7134],"/**\n * Asserts that a function throws any Error instance in async contexts.\n * Convenience function that tests for any Error subclass without checking the specific type.\n * @param fn - Function to execute that should throw an Error\n * @throws {Error} When the function doesn't throw or throws a non-Error value\n * @example\n * ```ts\n * await assertThrowErrorAsync(() => Promise.reject(new TypeError('Any error')));\n * await assertThrowErrorAsync(() => riskyAsyncOperation());\n * await assertThrowErrorAsync(() => { throw new Error('Generic error'); });\n * ```\n */",[6566,7134],"/**\n * Asserts that a function throws any Error instance in async contexts.\n * Convenience function that tests for any Error subclass without checking the specific type.\n *\n * @param fn - Function to execute that should throw an Error\n * @throws {Error} When the function doesn't throw or throws a non-Error value\n * @example\n * ```ts\n * await assertThrowErrorAsync(() => Promise.reject(new TypeError('Any error')));\n * await assertThrowErrorAsync(() => riskyAsyncOperation());\n * await assertThrowErrorAsync(() => { throw new Error('Generic error'); });\n * ```\n */",[7270,7805],"/**\n * Asserts that a function throws a TypeError in async contexts.\n * Convenience function for testing type-related errors in async operations.\n * @param fn - Function to execute that should throw a TypeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowTypeErrorAsync(() => callMethodOnNull());\n * await assertThrowTypeErrorAsync(() => Promise.resolve(null).property);\n * await assertThrowTypeErrorAsync(() => invalidTypeConversion());\n * ```\n */",[7270,7805],"/**\n * Asserts that a function throws a TypeError in async contexts.\n * Convenience function for testing type-related errors in async operations.\n *\n * @param fn - Function to execute that should throw a TypeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowTypeErrorAsync(() => callMethodOnNull());\n * await assertThrowTypeErrorAsync(() => Promise.resolve(null).property);\n * await assertThrowTypeErrorAsync(() => invalidTypeConversion());\n * ```\n */",[7949,8495],"/**\n * Asserts that a function throws a RangeError in async contexts.\n * Convenience function for testing range and boundary-related errors in async operations.\n * @param fn - Function to execute that should throw a RangeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowRangeErrorAsync(() => new Array(-1));\n * await assertThrowRangeErrorAsync(() => arrayAccess(outOfBoundsIndex));\n * await assertThrowRangeErrorAsync(() => invalidNumericRange());\n * ```\n */",[7949,8495],"/**\n * Asserts that a function throws a RangeError in async contexts.\n * Convenience function for testing range and boundary-related errors in async operations.\n *\n * @param fn - Function to execute that should throw a RangeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowRangeErrorAsync(() => new Array(-1));\n * await assertThrowRangeErrorAsync(() => arrayAccess(outOfBoundsIndex));\n * await assertThrowRangeErrorAsync(() => invalidNumericRange());\n * ```\n */",[8641,9223],"/**\n * Asserts that a function throws a ReferenceError in async contexts.\n * Convenience function for testing reference and variable access errors in async operations.\n * @param fn - Function to execute that should throw a ReferenceError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowReferenceErrorAsync(() => accessUndefinedVariable());\n * await assertThrowReferenceErrorAsync(() => referenceNonExistentFunction());\n * await assertThrowReferenceErrorAsync(() => strictModeViolation());\n * ```\n */",[8641,9223],"/**\n * Asserts that a function throws a ReferenceError in async contexts.\n * Convenience function for testing reference and variable access errors in async operations.\n *\n * @param fn - Function to execute that should throw a ReferenceError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowReferenceErrorAsync(() => accessUndefinedVariable());\n * await assertThrowReferenceErrorAsync(() => referenceNonExistentFunction());\n * await assertThrowReferenceErrorAsync(() => strictModeViolation());\n * ```\n */",[9377,9911],"/**\n * Asserts that a function throws a URIError in async contexts.\n * Convenience function for testing URI encoding/decoding errors in async operations.\n * @param fn - Function to execute that should throw a URIError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowURIErrorAsync(() => decodeURIComponent('%'));\n * await assertThrowURIErrorAsync(() => invalidUriOperation());\n * await assertThrowURIErrorAsync(() => malformedUriHandling());\n * ```\n */",[9377,9911],"/**\n * Asserts that a function throws a URIError in async contexts.\n * Convenience function for testing URI encoding/decoding errors in async operations.\n *\n * @param fn - Function to execute that should throw a URIError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * await assertThrowURIErrorAsync(() => decodeURIComponent('%'));\n * await assertThrowURIErrorAsync(() => invalidUriOperation());\n * await assertThrowURIErrorAsync(() => malformedUriHandling());\n * ```\n */",[10053,10560],"/**\n * Asserts that a function throws any Error instance.\n * Convenience function that tests for any Error subclass without checking the specific type.\n * @param fn - Function to execute that should throw an Error\n * @throws {Error} When the function doesn't throw or throws a non-Error value\n * @example\n * ```ts\n * assertThrowError(() => { throw new TypeError('Any error'); });\n * assertThrowError(() => riskyOperation());\n * assertThrowError(() => { throw new Error('Generic error'); });\n * ```\n */",[10053,10560],"/**\n * Asserts that a function throws any Error instance.\n * Convenience function that tests for any Error subclass without checking the specific type.\n *\n * @param fn - Function to execute that should throw an Error\n * @throws {Error} When the function doesn't throw or throws a non-Error value\n * @example\n * ```ts\n * assertThrowError(() => { throw new TypeError('Any error'); });\n * assertThrowError(() => riskyOperation());\n * assertThrowError(() => { throw new Error('Generic error'); });\n * ```\n */",[10655,11133],"/**\n * Asserts that a function throws a TypeError.\n * Convenience function for testing type-related errors in synchronous operations.\n * @param fn - Function to execute that should throw a TypeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowTypeError(() => null.property);\n * assertThrowTypeError(() => callMethodOnUndefined());\n * assertThrowTypeError(() => invalidTypeConversion());\n * ```\n */",[10655,11133],"/**\n * Asserts that a function throws a TypeError.\n * Convenience function for testing type-related errors in synchronous operations.\n *\n * @param fn - Function to execute that should throw a TypeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowTypeError(() => null.property);\n * assertThrowTypeError(() => callMethodOnUndefined());\n * assertThrowTypeError(() => invalidTypeConversion());\n * ```\n */",[11241,11742],"/**\n * Asserts that a function throws a RangeError.\n * Convenience function for testing range and boundary-related errors in synchronous operations.\n * @param fn - Function to execute that should throw a RangeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowRangeError(() => new Array(-1));\n * assertThrowRangeError(() => arrayAccess(outOfBoundsIndex));\n * assertThrowRangeError(() => invalidNumericRange());\n * ```\n */",[11241,11742],"/**\n * Asserts that a function throws a RangeError.\n * Convenience function for testing range and boundary-related errors in synchronous operations.\n *\n * @param fn - Function to execute that should throw a RangeError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowRangeError(() => new Array(-1));\n * assertThrowRangeError(() => arrayAccess(outOfBoundsIndex));\n * assertThrowRangeError(() => invalidNumericRange());\n * ```\n */",[11852,12389],"/**\n * Asserts that a function throws a ReferenceError.\n * Convenience function for testing reference and variable access errors in synchronous operations.\n * @param fn - Function to execute that should throw a ReferenceError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowReferenceError(() => accessUndefinedVariable());\n * assertThrowReferenceError(() => referenceNonExistentFunction());\n * assertThrowReferenceError(() => strictModeViolation());\n * ```\n */",[11852,12389],"/**\n * Asserts that a function throws a ReferenceError.\n * Convenience function for testing reference and variable access errors in synchronous operations.\n *\n * @param fn - Function to execute that should throw a ReferenceError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowReferenceError(() => accessUndefinedVariable());\n * assertThrowReferenceError(() => referenceNonExistentFunction());\n * assertThrowReferenceError(() => strictModeViolation());\n * ```\n */",[12507,12996],"/**\n * Asserts that a function throws a URIError.\n * Convenience function for testing URI encoding/decoding errors in synchronous operations.\n * @param fn - Function to execute that should throw a URIError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowURIError(() => decodeURIComponent('%'));\n * assertThrowURIError(() => invalidUriOperation());\n * assertThrowURIError(() => malformedUriHandling());\n * ```\n */",[12507,12996],"/**\n * Asserts that a function throws a URIError.\n * Convenience function for testing URI encoding/decoding errors in synchronous operations.\n *\n * @param fn - Function to execute that should throw a URIError\n * @throws {Error} When the function doesn't throw or throws a different error type\n * @example\n * ```ts\n * assertThrowURIError(() => decodeURIComponent('%'));\n * assertThrowURIError(() => invalidUriOperation());\n * assertThrowURIError(() => malformedUriHandling());\n * ```\n */",[519,532],"assertThrow",[1502,1502],[1502,1502],[2594,2612],"assertThrowAsync",[4338,4338],[4338,4338],[6674,6674],[6674,6674],[0,1101],"/**\n * Type guard that checks if a value is an Error instance.\n * Uses Object.prototype.toString.call for reliable error detection that works\n * across different realms and for all Error subclasses.\n *\n * Note: All Error subclasses (TypeError, RangeError, etc.) return '[object Error]'\n * when checked with Object.prototype.toString.call, making this function suitable\n * for detecting any type of Error instance.\n * @param value - Value to check for Error type\n * @returns True if the value is an Error instance, false otherwise\n * @example\n * ```ts\n * isError(new Error('test')); // true\n * isError(new TypeError('test')); // true\n * isError(new RangeError('test')); // true\n * isError('error string'); // false\n * isError(null); // false\n * isError(undefined); // false\n * isError({ message: 'fake error' }); // false\n *\n * // Type narrowing in conditional blocks\n * function handleValue(value: unknown) {\n *   if (isError(value)) {\n *     console.log(value.message); // TypeScript knows value is Error\n *     console.log(value.stack); // Access Error properties safely\n *   }\n * }\n * ```\n */",[0,1101],"/**\n * Type guard that checks if a value is an Error instance.\n * Uses Object.prototype.toString.call for reliable error detection that works\n * across different realms and for all Error subclasses.\n *\n * Note: All Error subclasses (TypeError, RangeError, etc.) return '[object Error]'\n * when checked with Object.prototype.toString.call, making this function suitable\n * for detecting any type of Error instance.\n *\n * @param value - Value to check for Error type\n * @returns True if the value is an Error instance, false otherwise\n * @example\n * ```ts\n * isError(new Error('test')); // true\n * isError(new TypeError('test')); // true\n * isError(new RangeError('test')); // true\n * isError('error string'); // false\n * isError(null); // false\n * isError(undefined); // false\n * isError({ message: 'fake error' }); // false\n *\n * // Type narrowing in conditional blocks\n * function handleValue(value: unknown) {\n *   if (isError(value)) {\n *     console.log(value.message); // TypeScript knows value is Error\n *     console.log(value.stack); // Access Error properties safely\n *   }\n * }\n * ```\n */",[300,775],"/**\n * Asserts that value is not null or undefined.\n * Throws TypeError if value is nullish, otherwise returns value with nullish types excluded.\n * @param potentiallyNullish - to validate.\n * @returns Value with null and undefined types excluded.\n * @throws {TypeError} When value is null or undefined.\n * @example\n * ```ts\n * const value: string | null = getUserInput();\n * const nonNullish = notNullishOrThrow(value);\n * // nonNullish is typed as string\n * ```\n */",[300,775],"/**\n * Asserts that value is not null or undefined.\n * Throws TypeError if value is nullish, otherwise returns value with nullish types excluded.\n * \n * @param potentiallyNullish - to validate.\n * @returns Value with null and undefined types excluded.\n * @throws {TypeError} When value is null or undefined.\n * @example\n * ```ts\n * const value: string | null = getUserInput();\n * const nonNullish = notNullishOrThrow(value);\n * // nonNullish is typed as string\n * ```\n */",[1092,1552],"/**\n * Asserts that value is not undefined.\n * Throws TypeError if value is undefined, otherwise returns value with undefined type excluded.\n * @param potentiallyUndefined - to validate.\n * @returns Value with undefined type excluded.\n * @throws {TypeError} When value is undefined.\n * @example\n * ```ts\n * const value: string | undefined = getOptionalConfig();\n * const defined = notUndefinedOrThrow(value);\n * // defined is typed as string\n * ```\n */",[1092,1552],"/**\n * Asserts that value is not undefined.\n * Throws TypeError if value is undefined, otherwise returns value with undefined type excluded.\n * \n * @param potentiallyUndefined - to validate.\n * @returns Value with undefined type excluded.\n * @throws {TypeError} When value is undefined.\n * @example\n * ```ts\n * const value: string | undefined = getOptionalConfig();\n * const defined = notUndefinedOrThrow(value);\n * // defined is typed as string\n * ```\n */",[1836,2255],"/**\n * Asserts that value is not null.\n * Throws TypeError if value is null, otherwise returns value with null type excluded.\n * @param potentiallyNull - to validate.\n * @returns Value with null type excluded.\n * @throws {TypeError} When value is null.\n * @example\n * ```ts\n * const value: string | null = getOptionalValue();\n * const notNull = notNullOrThrow(value);\n * // notNull is typed as string\n * ```\n */",[1836,2255],"/**\n * Asserts that value is not null.\n * Throws TypeError if value is null, otherwise returns value with null type excluded.\n * \n * @param potentiallyNull - to validate.\n * @returns Value with null type excluded.\n * @throws {TypeError} When value is null.\n * @example\n * ```ts\n * const value: string | null = getOptionalValue();\n * const notNull = notNullOrThrow(value);\n * // notNull is typed as string\n * ```\n */",[2697,3203],"/**\n * Asserts that value is truthy.\n * Throws TypeError if value is falsy (false, null, 0, 0n, '', undefined), otherwise returns value with falsy types excluded.\n * @param potentiallyFalsy - to validate.\n * @returns Value with all falsy types excluded.\n * @throws {TypeError} When value is falsy.\n * @example\n * ```ts\n * const value: string | null | undefined = getUserInput();\n * const truthy = notFalsyOrThrow(value);\n * // truthy is typed as string (excludes null, undefined, and '')\n * ```\n */",[2697,3203],"/**\n * Asserts that value is truthy.\n * Throws TypeError if value is falsy (false, null, 0, 0n, '', undefined), otherwise returns value with falsy types excluded.\n * \n * @param potentiallyFalsy - to validate.\n * @returns Value with all falsy types excluded.\n * @throws {TypeError} When value is falsy.\n * @example\n * ```ts\n * const value: string | null | undefined = getUserInput();\n * const truthy = notFalsyOrThrow(value);\n * // truthy is typed as string (excludes null, undefined, and '')\n * ```\n */",[3442,3868],"/**\n * Asserts that value is not false.\n * Throws TypeError if value is exactly false, otherwise returns value with false type excluded.\n * @param potentiallyFalse - to validate.\n * @returns Value with false type excluded.\n * @throws {TypeError} When value is false.\n * @example\n * ```ts\n * const value: boolean = getFeatureFlag();\n * const notFalse = notFalseOrThrow(value);\n * // notFalse is typed as true\n * ```\n */",[3442,3868],"/**\n * Asserts that value is not false.\n * Throws TypeError if value is exactly false, otherwise returns value with false type excluded.\n * \n * @param potentiallyFalse - to validate.\n * @returns Value with false type excluded.\n * @throws {TypeError} When value is false.\n * @example\n * ```ts\n * const value: boolean = getFeatureFlag();\n * const notFalse = notFalseOrThrow(value);\n * // notFalse is typed as true\n * ```\n */",[4116,4579],"/**\n * Asserts that value is not an object.\n * Throws TypeError if value is an object (excluding null), otherwise returns value with object type excluded.\n * @param potentiallyObj - to validate.\n * @returns Value with object type excluded.\n * @throws {TypeError} When value is an object.\n * @example\n * ```ts\n * const value: string | object = getPrimitiveOrObject();\n * const primitive = notObjOrThrow(value);\n * // primitive is typed as string\n * ```\n */",[4116,4579],"/**\n * Asserts that value is not an object.\n * Throws TypeError if value is an object (excluding null), otherwise returns value with object type excluded.\n * \n * @param potentiallyObj - to validate.\n * @returns Value with object type excluded.\n * @throws {TypeError} When value is an object.\n * @example\n * ```ts\n * const value: string | object = getPrimitiveOrObject();\n * const primitive = notObjOrThrow(value);\n * // primitive is typed as string\n * ```\n */",[4617,4833],"potentiallyObject: T,\n): Exclude<T, object> {\n  if (potentiallyObject !== null && typeof potentiallyObject === 'object') {\n    throw new TypeError(`${JSON.stringify(potentiallyObject)} is an object`);\n  }\n  return potentiallyObject",[4860,5278],"/**\n * Asserts that value is not true.\n * Throws TypeError if value is exactly true, otherwise returns value with true type excluded.\n * @param potentiallyTrue - to validate.\n * @returns Value with true type excluded.\n * @throws {TypeError} When value is true.\n * @example\n * ```ts\n * const value: boolean = getInverseFlag();\n * const notTrue = notTrueOrThrow(value);\n * // notTrue is typed as false\n * ```\n */",[4860,5278],"/**\n * Asserts that value is not true.\n * Throws TypeError if value is exactly true, otherwise returns value with true type excluded.\n * \n * @param potentiallyTrue - to validate.\n * @returns Value with true type excluded.\n * @throws {TypeError} When value is true.\n * @example\n * ```ts\n * const value: boolean = getInverseFlag();\n * const notTrue = notTrueOrThrow(value);\n * // notTrue is typed as false\n * ```\n */",[5962,6511],"/**\n * Asserts that value is falsy.\n * Throws TypeError if value is truthy, otherwise returns value with truthy types excluded.\n * Note: Despite the name suggesting it throws for truthy values, it actually returns falsy values.\n * @param potentiallyTruthy - to validate.\n * @returns Value confirmed to be falsy.\n * @throws {TypeError} When value is truthy.\n * @example\n * ```ts\n * const value: string | null = maybeGetString();\n * const falsy = notTruthyOrThrow(value);\n * // falsy is typed as null | '' (only falsy possibilities)\n * ```\n */",[5962,6511],"/**\n * Asserts that value is falsy.\n * Throws TypeError if value is truthy, otherwise returns value with truthy types excluded.\n * Note: Despite the name suggesting it throws for truthy values, it actually returns falsy values.\n * \n * @param potentiallyTruthy - to validate.\n * @returns Value confirmed to be falsy.\n * @throws {TypeError} When value is truthy.\n * @example\n * ```ts\n * const value: string | null = maybeGetString();\n * const falsy = notTruthyOrThrow(value);\n * // falsy is typed as null | '' (only falsy possibilities)\n * ```\n */",[6761,7360],"/**\n * Asserts that value is not empty.\n * Throws TypeError if string is empty, array has no elements, or object has no keys.\n * Returns value with appropriate non-empty type constraint.\n * @param potentiallyEmpty - String, array, or object to validate.\n * @returns Non-empty value with refined type.\n * @throws {TypeError} When value is empty.\n * @example\n * ```ts\n * const str = notEmptyOrThrow('hello'); // typed as non-empty string\n * const arr = notEmptyOrThrow([1, 2]); // typed as [number, ...number[]]\n * const obj = notEmptyOrThrow({ a: 1 }); // typed as non-empty object\n * ```\n */",[6761,7360],"/**\n * Asserts that value is not empty.\n * Throws TypeError if string is empty, array has no elements, or object has no keys.\n * Returns value with appropriate non-empty type constraint.\n * \n * @param potentiallyEmpty - String, array, or object to validate.\n * @returns Non-empty value with refined type.\n * @throws {TypeError} When value is empty.\n * @example\n * ```ts\n * const str = notEmptyOrThrow('hello'); // typed as non-empty string\n * const arr = notEmptyOrThrow([1, 2]); // typed as [number, ...number[]]\n * const obj = notEmptyOrThrow({ a: 1 }); // typed as non-empty object\n * ```\n */",[8081,8523],"/**\n * Asserts that value is not an array.\n * Throws TypeError if value is an array, otherwise returns value with array types excluded.\n * @param potentiallyArray - to validate.\n * @returns Value with array type excluded.\n * @throws {TypeError} When value is an array.\n * @example\n * ```ts\n * const value: string | string[] = getStringOrArray();\n * const notArray = notArrayOrThrow(value);\n * // notArray is typed as string\n * ```\n */",[8081,8523],"/**\n * Asserts that value is not an array.\n * Throws TypeError if value is an array, otherwise returns value with array types excluded.\n * \n * @param potentiallyArray - to validate.\n * @returns Value with array type excluded.\n * @throws {TypeError} When value is an array.\n * @example\n * ```ts\n * const value: string | string[] = getStringOrArray();\n * const notArray = notArrayOrThrow(value);\n * // notArray is typed as string\n * ```\n */",[8779,9225],"/**\n * Asserts that value is not a string.\n * Throws TypeError if value is a string, otherwise returns value with string type excluded.\n * @param potentiallyString - to validate.\n * @returns Value with string type excluded.\n * @throws {TypeError} When value is a string.\n * @example\n * ```ts\n * const value: string | number = getStringOrNumber();\n * const notString = notStringOrThrow(value);\n * // notString is typed as number\n * ```\n */",[8779,9225],"/**\n * Asserts that value is not a string.\n * Throws TypeError if value is a string, otherwise returns value with string type excluded.\n * \n * @param potentiallyString - to validate.\n * @returns Value with string type excluded.\n * @throws {TypeError} When value is a string.\n * @example\n * ```ts\n * const value: string | number = getStringOrNumber();\n * const notString = notStringOrThrow(value);\n * // notString is typed as number\n * ```\n */",[9477,10012],"/**\n * Asserts that array is not empty.\n * Throws TypeError if array has no elements, otherwise returns array typed as having at least one element.\n * @param potentiallyEmptyArray - Array to validate.\n * @returns Array typed as non-empty tuple [T, ...T[]].\n * @throws {TypeError} When array is empty.\n * @example\n * ```ts\n * const arr: number[] = getNumbers();\n * const nonEmpty = notEmptyArrayOrThrow(arr);\n * // nonEmpty is typed as [number, ...number[]]\n * const [first, ...rest] = nonEmpty; // Safe destructuring\n * ```\n */",[9477,10012],"/**\n * Asserts that array is not empty.\n * Throws TypeError if array has no elements, otherwise returns array typed as having at least one element.\n * \n * @param potentiallyEmptyArray - Array to validate.\n * @returns Array typed as non-empty tuple [T, ...T[]].\n * @throws {TypeError} When array is empty.\n * @example\n * ```ts\n * const arr: number[] = getNumbers();\n * const nonEmpty = notEmptyArrayOrThrow(arr);\n * // nonEmpty is typed as [number, ...number[]]\n * const [first, ...rest] = nonEmpty; // Safe destructuring\n * ```\n */",[454,473],"notNullishOrThrow",[889,889],[889,889],[915,915],[915,915],[982,1003],"notUndefinedOrThrow",[1223,1232],[1397,1413],"notNullOrThrow",[1613,1627],[1777,1794],"notFalsyOrThrow",[2447,2464],"notFalseOrThrow",[2664,2673],[2715,2729],[2880,2895],"notObjOrThrow",[3337,3346],[3426,3440],[3721,3737],"notTrueOrThrow",[3979,3988],[4029,4043],[4282,4300],"notTruthyOrThrow",[4955,4964],[5007,5021],[5171,5188],"notEmptyOrThrow",[5759,5776],"notArrayOrThrow",[6039,6048],[6090,6104],[6348,6366],"notStringOrThrow",[6632,6641],[6684,6698],[6950,6972],"notEmptyArrayOrThrow",[7403,7403],[7403,7403],[7439,7439],[7439,7439],[7594,7594],[7594,7594],[357,1667],"/**\n * Throws an error with flexible input formats, supporting Error instances, strings, or error descriptor objects.\n *\n * This function implements throw expressions functionality inspired by the TC39 proposal, providing\n * a convenient way to throw errors in expression contexts. It supports multiple input formats and\n * uses pattern matching to create appropriate error types based on the error name.\n * @param error - Error to throw, can be an Error instance, string message, or error descriptor object\n * @returns Never returns as this function always throws\n * @throws {Error} Always throws an error - the specific type depends on the input\n * @example\n * ```ts\n * // Throw an existing Error instance\n * throws(new TypeError('Invalid input'));\n *\n * // Throw with a string message\n * throws('Something went wrong');\n *\n * // Throw with error descriptor object\n * throws({\n *   message: 'Value out of range',\n *   name: 'RangeError',\n *   cause: previousError\n * });\n *\n * // Use in expression context\n * const value = input ?? throws('Input is required');\n *\n * // Pattern matching creates appropriate error types\n * throws({ message: 'Type mismatch', name: 'TypeError' }); // Creates TypeError\n * throws({ message: 'Invalid reference', name: 'ReferenceError' }); // Creates ReferenceError\n * ```\n */",[227,235],"throws",[340,340],[340,340],[388,388],[388,388],[587,587],[587,587],[882,882],[882,882],[1152,1152],[1152,1152],[1227,1227],[1227,1227],[1929,1929],[1929,1929],[2707,2707],[2707,2707],[3109,3109],[3109,3109],[3420,3420],[3420,3420],[3530,3530],[3530,3530],[25,2196],"/**\n * Array containing integers from 0 to 999 inclusive.\n *\n * This constant provides a comprehensive test fixture containing 1000 consecutive\n * integers. It's particularly useful for testing array operations, performance\n * benchmarking, and creating predictable test data with mixed truthiness values.\n * @remarks\n * This array is ideal as test fixture because 0 is falsy while all other values\n * are truthy, making it straightforward to test for all-truthiness or all-falsiness\n * by creating predicates that add one or subtract 999 from input values.\n *\n * The array's length (1000 elements) makes it suitable for testing performance\n * characteristics of different implementations, memory usage patterns, and\n * algorithmic efficiency comparisons.\n * @example\n * Basic usage for testing array operations:\n * ```ts\n * import { array0to999 } from '@monochromatic-dev/module-es';\n *\n * // Test array filtering\n * const evenNumbers = array0to999.filter(n => n % 2 === 0);\n * console.log(evenNumbers.length); // 500\n *\n * // Test array mapping\n * const doubled = array0to999.map(n => n * 2);\n * console.log(doubled[500]); // 1000\n * ```\n *\n * @example\n * Using for truthiness testing:\n * ```ts\n * import { array0to999 } from '@monochromatic-dev/module-es';\n *\n * // Test all-truthy predicate (adds 1 to make 0 truthy)\n * const allTruthy = array0to999.every(n => n + 1);\n * console.log(allTruthy); // true\n *\n * // Test all-falsy predicate (subtracts 999 to make only 999 truthy)\n * const allFalsy = array0to999.every(n => n - 999);\n * console.log(allFalsy); // false\n * ```\n *\n * @example\n * Performance testing scenarios:\n * ```ts\n * import { array0to999 } from '@monochromatic-dev/module-es';\n *\n * // Benchmark different sorting implementations\n * const testData = [...array0to999].reverse();\n * const start = performance.now();\n * testData.sort((a, b) => a - b);\n * const duration = performance.now() - start;\n *\n * // Test memory-intensive operations\n * const chunks = [];\n * for (let i = 0; i < array0to999.length; i += 100) {\n *   chunks.push(array0to999.slice(i, i + 100));\n * }\n * console.log(chunks.length); // 10 chunks of 100 elements each\n * ```\n */",[25,2196],"/**\n * Array containing integers from 0 to 999 inclusive.\n *\n * This constant provides a comprehensive test fixture containing 1000 consecutive\n * integers. It's particularly useful for testing array operations, performance\n * benchmarking, and creating predictable test data with mixed truthiness values.\n *\n * @remarks\n * This array is ideal as test fixture because 0 is falsy while all other values\n * are truthy, making it straightforward to test for all-truthiness or all-falsiness\n * by creating predicates that add one or subtract 999 from input values.\n *\n * The array's length (1000 elements) makes it suitable for testing performance\n * characteristics of different implementations, memory usage patterns, and\n * algorithmic efficiency comparisons.\n * @example\n * Basic usage for testing array operations:\n * ```ts\n * import { array0to999 } from '@monochromatic-dev/module-es';\n *\n * // Test array filtering\n * const evenNumbers = array0to999.filter(n => n % 2 === 0);\n * console.log(evenNumbers.length); // 500\n *\n * // Test array mapping\n * const doubled = array0to999.map(n => n * 2);\n * console.log(doubled[500]); // 1000\n * ```\n *\n * @example\n * Using for truthiness testing:\n * ```ts\n * import { array0to999 } from '@monochromatic-dev/module-es';\n *\n * // Test all-truthy predicate (adds 1 to make 0 truthy)\n * const allTruthy = array0to999.every(n => n + 1);\n * console.log(allTruthy); // true\n *\n * // Test all-falsy predicate (subtracts 999 to make only 999 truthy)\n * const allFalsy = array0to999.every(n => n - 999);\n * console.log(allFalsy); // false\n * ```\n *\n * @example\n * Performance testing scenarios:\n * ```ts\n * import { array0to999 } from '@monochromatic-dev/module-es';\n *\n * // Benchmark different sorting implementations\n * const testData = [...array0to999].reverse();\n * const start = performance.now();\n * testData.sort((a, b) => a - b);\n * const duration = performance.now() - start;\n *\n * // Test memory-intensive operations\n * const chunks = [];\n * for (let i = 0; i < array0to999.length; i += 100) {\n *   chunks.push(array0to999.slice(i, i + 100));\n * }\n * console.log(chunks.length); // 10 chunks of 100 elements each\n * ```\n */",[227,1595],"/**\n * Synchronous generator that yields integers from 0 to 999 inclusive.\n *\n * This generator provides a straightforward way to test synchronous iteration\n * patterns and generator behavior with predictable numeric sequences. It yields\n * exactly 1000 values before completing naturally.\n * @returns Generator that yields consecutive integers from 0 to 999\n * @example\n * Basic iteration with for-of loop:\n * ```ts\n * import { gen0to999 } from '@monochromatic-dev/module-es';\n *\n * for (const value of gen0to999()) {\n *   console.log(value); // 0, 1, 2, ..., 999\n *   if (value === 5) break; // Stop early if needed\n * }\n * ```\n *\n * @example\n * Manual iteration with next():\n * ```ts\n * import { gen0to999 } from '@monochromatic-dev/module-es';\n *\n * const iterator = gen0to999();\n * const first = iterator.next(); // { value: 0, done: false }\n * const second = iterator.next(); // { value: 1, done: false }\n *\n * // Skip to the end\n * let result;\n * do {\n *   result = iterator.next();\n * } while (!result.done);\n * // result is { value: undefined, done: true }\n * ```\n *\n * @example\n * Converting to array for testing:\n * ```ts\n * import { gen0to999 } from '@monochromatic-dev/module-es';\n *\n * const allValues = [...gen0to999()];\n * console.log(allValues.length); // 1000\n * console.log(allValues[0]); // 0\n * console.log(allValues[999]); // 999\n * ```\n */",[227,1595],"/**\n * Synchronous generator that yields integers from 0 to 999 inclusive.\n *\n * This generator provides a straightforward way to test synchronous iteration\n * patterns and generator behavior with predictable numeric sequences. It yields\n * exactly 1000 values before completing naturally.\n *\n * @returns Generator that yields consecutive integers from 0 to 999\n * @example\n * Basic iteration with for-of loop:\n * ```ts\n * import { gen0to999 } from '@monochromatic-dev/module-es';\n *\n * for (const value of gen0to999()) {\n *   console.log(value); // 0, 1, 2, ..., 999\n *   if (value === 5) break; // Stop early if needed\n * }\n * ```\n *\n * @example\n * Manual iteration with next():\n * ```ts\n * import { gen0to999 } from '@monochromatic-dev/module-es';\n *\n * const iterator = gen0to999();\n * const first = iterator.next(); // { value: 0, done: false }\n * const second = iterator.next(); // { value: 1, done: false }\n *\n * // Skip to the end\n * let result;\n * do {\n *   result = iterator.next();\n * } while (!result.done);\n * // result is { value: undefined, done: true }\n * ```\n *\n * @example\n * Converting to array for testing:\n * ```ts\n * import { gen0to999 } from '@monochromatic-dev/module-es';\n *\n * const allValues = [...gen0to999()];\n * console.log(allValues.length); // 1000\n * console.log(allValues[0]); // 0\n * console.log(allValues[999]); // 999\n * ```\n */",[1623,1623],[1684,1719],"index = 0; index < 1000; index++) {\n    yield index",[1728,3204],"/**\n * Synchronous generator that yields integers from 0 to 998, then throws an error.\n *\n * This generator is designed for testing error handling in synchronous iteration\n * scenarios. It yields 999 values (0 through 998) and then throws a RangeError\n * to simulate failure conditions. Essential for testing robust iteration patterns\n * and error recovery mechanisms.\n * @returns Generator that yields consecutive integers from 0 to 998, then throws\n * @throws {RangeError} Always throws when reaching the end (after yielding 999 values)\n * @example\n * Testing error handling with try-catch:\n * ```ts\n * import { gen0to999error } from '@monochromatic-dev/module-es';\n *\n * let count = 0;\n * try {\n *   for (const value of gen0to999error()) {\n *     count++;\n *     console.log(value); // 0, 1, 2, ..., 998\n *   }\n * } catch (error) {\n *   console.log(`Caught error after ${count} values`); // 999 values\n *   console.log(error.message); // \"fixture reached 999\"\n * }\n * ```\n *\n * @example\n * Manual iteration with error detection:\n * ```ts\n * import { gen0to999error } from '@monochromatic-dev/module-es';\n *\n * const iterator = gen0to999error();\n * const values: number[] = [];\n *\n * try {\n *   let result = iterator.next();\n *   while (!result.done) {\n *     values.push(result.value);\n *     result = iterator.next(); // This will eventually throw\n *   }\n * } catch (error) {\n *   console.log(`Collected ${values.length} values before error`); // 999\n * }\n * ```\n */",[1728,3204],"/**\n * Synchronous generator that yields integers from 0 to 998, then throws an error.\n *\n * This generator is designed for testing error handling in synchronous iteration\n * scenarios. It yields 999 values (0 through 998) and then throws a RangeError\n * to simulate failure conditions. Essential for testing robust iteration patterns\n * and error recovery mechanisms.\n *\n * @returns Generator that yields consecutive integers from 0 to 998, then throws\n * @throws {RangeError} Always throws when reaching the end (after yielding 999 values)\n * @example\n * Testing error handling with try-catch:\n * ```ts\n * import { gen0to999error } from '@monochromatic-dev/module-es';\n *\n * let count = 0;\n * try {\n *   for (const value of gen0to999error()) {\n *     count++;\n *     console.log(value); // 0, 1, 2, ..., 998\n *   }\n * } catch (error) {\n *   console.log(`Caught error after ${count} values`); // 999 values\n *   console.log(error.message); // \"fixture reached 999\"\n * }\n * ```\n *\n * @example\n * Manual iteration with error detection:\n * ```ts\n * import { gen0to999error } from '@monochromatic-dev/module-es';\n *\n * const iterator = gen0to999error();\n * const values: number[] = [];\n *\n * try {\n *   let result = iterator.next();\n *   while (!result.done) {\n *     values.push(result.value);\n *     result = iterator.next(); // This will eventually throw\n *   }\n * } catch (error) {\n *   console.log(`Collected ${values.length} values before error`); // 999\n * }\n * ```\n */",[3232,3232],[3298,3332],"index = 0; index < 999; index++) {\n    yield index",[3388,5089],"/**\n * Asynchronous generator that yields integers from 0 to 999 inclusive.\n *\n * This async generator provides a way to test asynchronous iteration patterns\n * and async generator behavior with predictable numeric sequences. Unlike its\n * synchronous counterpart, this can be used with for-await-of loops and other\n * async iteration utilities.\n * @returns AsyncGenerator that yields consecutive integers from 0 to 999\n * @example\n * Basic async iteration with for-await-of:\n * ```ts\n * import { gen0to999Async } from '@monochromatic-dev/module-es';\n *\n * async function processValues(): Promise<void> {\n *   for await (const value of gen0to999Async()) {\n *     console.log(value); // 0, 1, 2, ..., 999\n *     if (value === 10) break; // Stop early if needed\n *   }\n * }\n * ```\n *\n * @example\n * Manual async iteration:\n * ```ts\n * import { gen0to999Async } from '@monochromatic-dev/module-es';\n *\n * async function manualIteration(): Promise<void> {\n *   const iterator = gen0to999Async();\n *   const first = await iterator.next(); // { value: 0, done: false }\n *   const second = await iterator.next(); // { value: 1, done: false }\n *\n *   // Process remaining values\n *   let result = await iterator.next();\n *   while (!result.done) {\n *     console.log(result.value);\n *     result = await iterator.next();\n *   }\n * }\n * ```\n *\n * @example\n * Converting to array with Promise.all:\n * ```ts\n * import { gen0to999Async } from '@monochromatic-dev/module-es';\n *\n * async function collectAll(): Promise<number[]> {\n *   const values: number[] = [];\n *   for await (const value of gen0to999Async()) {\n *     values.push(value);\n *   }\n *   return values; // [0, 1, 2, ..., 999]\n * }\n * ```\n */",[3388,5089],"/**\n * Asynchronous generator that yields integers from 0 to 999 inclusive.\n *\n * This async generator provides a way to test asynchronous iteration patterns\n * and async generator behavior with predictable numeric sequences. Unlike its\n * synchronous counterpart, this can be used with for-await-of loops and other\n * async iteration utilities.\n *\n * @returns AsyncGenerator that yields consecutive integers from 0 to 999\n * @example\n * Basic async iteration with for-await-of:\n * ```ts\n * import { gen0to999Async } from '@monochromatic-dev/module-es';\n *\n * async function processValues(): Promise<void> {\n *   for await (const value of gen0to999Async()) {\n *     console.log(value); // 0, 1, 2, ..., 999\n *     if (value === 10) break; // Stop early if needed\n *   }\n * }\n * ```\n *\n * @example\n * Manual async iteration:\n * ```ts\n * import { gen0to999Async } from '@monochromatic-dev/module-es';\n *\n * async function manualIteration(): Promise<void> {\n *   const iterator = gen0to999Async();\n *   const first = await iterator.next(); // { value: 0, done: false }\n *   const second = await iterator.next(); // { value: 1, done: false }\n *\n *   // Process remaining values\n *   let result = await iterator.next();\n *   while (!result.done) {\n *     console.log(result.value);\n *     result = await iterator.next();\n *   }\n * }\n * ```\n *\n * @example\n * Converting to array with Promise.all:\n * ```ts\n * import { gen0to999Async } from '@monochromatic-dev/module-es';\n *\n * async function collectAll(): Promise<number[]> {\n *   const values: number[] = [];\n *   for await (const value of gen0to999Async()) {\n *     values.push(value);\n *   }\n *   return values; // [0, 1, 2, ..., 999]\n * }\n * ```\n */",[5117,5117],{"messageId":"10399","fix":"10400","desc":"10401"},[5198,5233],[5242,6950],"/**\n * Asynchronous generator that yields integers from 0 to 998, then throws an error.\n *\n * This async generator is designed for testing error handling in asynchronous\n * iteration scenarios. It yields 999 values (0 through 998) and then throws a\n * RangeError to simulate async failure conditions. Critical for testing robust\n * async iteration patterns and error recovery in async workflows.\n * @returns AsyncGenerator that yields consecutive integers from 0 to 998, then throws\n * @throws {RangeError} Always throws when reaching the end (after yielding 999 values)\n * @example\n * Testing async error handling:\n * ```ts\n * import { gen0to999errorAsync } from '@monochromatic-dev/module-es';\n *\n * async function testAsyncError(): Promise<void> {\n *   let count = 0;\n *   try {\n *     for await (const value of gen0to999errorAsync()) {\n *       count++;\n *       console.log(value); // 0, 1, 2, ..., 998\n *     }\n *   } catch (error) {\n *     console.log(`Caught async error after ${count} values`); // 999 values\n *     console.log(error.message); // \"fixture reached 999\"\n *   }\n * }\n * ```\n *\n * @example\n * Error handling with manual async iteration:\n * ```ts\n * import { gen0to999errorAsync } from '@monochromatic-dev/module-es';\n *\n * async function manualAsyncWithError(): Promise<void> {\n *   const iterator = gen0to999errorAsync();\n *   const results: number[] = [];\n *\n *   try {\n *     let result = await iterator.next();\n *     while (!result.done) {\n *       results.push(result.value);\n *       result = await iterator.next(); // Will eventually throw\n *     }\n *   } catch (error) {\n *     console.log(`Processed ${results.length} values before error`); // 999\n *   }\n * }\n * ```\n */",[5242,6950],"/**\n * Asynchronous generator that yields integers from 0 to 998, then throws an error.\n *\n * This async generator is designed for testing error handling in asynchronous\n * iteration scenarios. It yields 999 values (0 through 998) and then throws a\n * RangeError to simulate async failure conditions. Critical for testing robust\n * async iteration patterns and error recovery in async workflows.\n *\n * @returns AsyncGenerator that yields consecutive integers from 0 to 998, then throws\n * @throws {RangeError} Always throws when reaching the end (after yielding 999 values)\n * @example\n * Testing async error handling:\n * ```ts\n * import { gen0to999errorAsync } from '@monochromatic-dev/module-es';\n *\n * async function testAsyncError(): Promise<void> {\n *   let count = 0;\n *   try {\n *     for await (const value of gen0to999errorAsync()) {\n *       count++;\n *       console.log(value); // 0, 1, 2, ..., 998\n *     }\n *   } catch (error) {\n *     console.log(`Caught async error after ${count} values`); // 999 values\n *     console.log(error.message); // \"fixture reached 999\"\n *   }\n * }\n * ```\n *\n * @example\n * Error handling with manual async iteration:\n * ```ts\n * import { gen0to999errorAsync } from '@monochromatic-dev/module-es';\n *\n * async function manualAsyncWithError(): Promise<void> {\n *   const iterator = gen0to999errorAsync();\n *   const results: number[] = [];\n *\n *   try {\n *     let result = await iterator.next();\n *     while (!result.done) {\n *       results.push(result.value);\n *       result = await iterator.next(); // Will eventually throw\n *     }\n *   } catch (error) {\n *     console.log(`Processed ${results.length} values before error`); // 999\n *   }\n * }\n * ```\n */",[6978,6978],{"messageId":"10399","fix":"10402","desc":"10401"},[7064,7098],[7154,9742],"/**\n * Asynchronous generator that yields integers from 0 to 999 with progressive delays.\n *\n * This async generator introduces timing delays that increase with each yielded\n * value, making it perfect for testing performance characteristics, timeout\n * handling, and async iteration behavior under realistic timing conditions.\n * Each value i has a delay of i milliseconds, so the sequence becomes progressively\n * slower to emulate real-world async operations with varying response times.\n * @returns AsyncGenerator that yields consecutive integers from 0 to 999 with increasing delays\n * @example\n * Testing with progressive timing:\n * ```ts\n * import { gen0to999AsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testSlowIteration(): Promise<void> {\n *   const start = Date.now();\n *   let count = 0;\n *\n *   for await (const value of gen0to999AsyncSlow()) {\n *     count++;\n *     if (count === 10) break; // Stop early to avoid long wait\n *   }\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Processed ${count} values in ${elapsed}ms`);\n *   // Approximate total delay: 0+1+2+...+9 = 45ms plus overhead\n * }\n * ```\n *\n * @example\n * Testing timeout scenarios:\n * ```ts\n * import { gen0to999AsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testWithTimeout(): Promise<void> {\n *   const iterator = gen0to999AsyncSlow();\n *\n *   try {\n *     // Set a timeout for the first few values\n *     const timeoutPromise = new Promise((_, reject) =>\n *       setTimeout(() => reject(new Error('Timeout')), 100)\n *     );\n *\n *     const values: number[] = [];\n *     for (let i = 0; i < 20; i++) {\n *       const result = await Promise.race([\n *         iterator.next(),\n *         timeoutPromise\n *       ]);\n *       if (result.done) break;\n *       values.push(result.value);\n *     }\n *   } catch (error) {\n *     console.log('Operation timed out or failed');\n *   }\n * }\n * ```\n *\n * @example\n * Performance testing different async patterns:\n * ```ts\n * import { gen0to999AsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function performanceComparison(): Promise<void> {\n *   const iterator = gen0to999AsyncSlow();\n *   const start = Date.now();\n *\n *   // Test first 50 values to avoid excessive delay\n *   const results = [];\n *   for (let i = 0; i < 50; i++) {\n *     const result = await iterator.next();\n *     if (result.done) break;\n *     results.push(result.value);\n *   }\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Average time per value: ${elapsed / results.length}ms`);\n * }\n * ```\n */",[7154,9742],"/**\n * Asynchronous generator that yields integers from 0 to 999 with progressive delays.\n *\n * This async generator introduces timing delays that increase with each yielded\n * value, making it perfect for testing performance characteristics, timeout\n * handling, and async iteration behavior under realistic timing conditions.\n * Each value i has a delay of i milliseconds, so the sequence becomes progressively\n * slower to emulate real-world async operations with varying response times.\n *\n * @returns AsyncGenerator that yields consecutive integers from 0 to 999 with increasing delays\n * @example\n * Testing with progressive timing:\n * ```ts\n * import { gen0to999AsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testSlowIteration(): Promise<void> {\n *   const start = Date.now();\n *   let count = 0;\n *\n *   for await (const value of gen0to999AsyncSlow()) {\n *     count++;\n *     if (count === 10) break; // Stop early to avoid long wait\n *   }\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Processed ${count} values in ${elapsed}ms`);\n *   // Approximate total delay: 0+1+2+...+9 = 45ms plus overhead\n * }\n * ```\n *\n * @example\n * Testing timeout scenarios:\n * ```ts\n * import { gen0to999AsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testWithTimeout(): Promise<void> {\n *   const iterator = gen0to999AsyncSlow();\n *\n *   try {\n *     // Set a timeout for the first few values\n *     const timeoutPromise = new Promise((_, reject) =>\n *       setTimeout(() => reject(new Error('Timeout')), 100)\n *     );\n *\n *     const values: number[] = [];\n *     for (let i = 0; i < 20; i++) {\n *       const result = await Promise.race([\n *         iterator.next(),\n *         timeoutPromise\n *       ]);\n *       if (result.done) break;\n *       values.push(result.value);\n *     }\n *   } catch (error) {\n *     console.log('Operation timed out or failed');\n *   }\n * }\n * ```\n *\n * @example\n * Performance testing different async patterns:\n * ```ts\n * import { gen0to999AsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function performanceComparison(): Promise<void> {\n *   const iterator = gen0to999AsyncSlow();\n *   const start = Date.now();\n *\n *   // Test first 50 values to avoid excessive delay\n *   const results = [];\n *   for (let i = 0; i < 50; i++) {\n *     const result = await iterator.next();\n *     if (result.done) break;\n *     results.push(result.value);\n *   }\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Average time per value: ${elapsed / results.length}ms`);\n * }\n * ```\n */",[9770,9770],[9855,9952],"index = 0; index < 1000; index++) {\n    await (new Promise((resolve) => setTimeout(resolve, index)));\n    yield index",[9961,12857],"/**\n * Asynchronous generator that yields integers from 0 to 998 with progressive delays, then throws an error.\n *\n * This async generator combines the progressive timing delays of the slow variant\n * with error throwing behavior. It's designed for testing error handling under\n * realistic async conditions where operations take increasing amounts of time\n * before eventually failing. Each value i has a delay of i milliseconds before\n * being yielded, and after 999 values, it throws a RangeError.\n * @returns AsyncGenerator that yields consecutive integers from 0 to 998 with increasing delays, then throws\n * @throws {RangeError} Always throws when reaching the end (after yielding 999 values with delays)\n * @example\n * Testing async error handling with realistic timing:\n * ```ts\n * import { gen0to999errorAsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testSlowErrorHandling(): Promise<void> {\n *   let count = 0;\n *   const start = Date.now();\n *\n *   try {\n *     for await (const value of gen0to999errorAsyncSlow()) {\n *       count++;\n *       if (count === 20) break; // Stop early to avoid long delays\n *     }\n *   } catch (error) {\n *     const elapsed = Date.now() - start;\n *     console.log(`Error after ${count} values in ${elapsed}ms`);\n *     console.log(error.message); // \"fixture reached 999\"\n *   }\n * }\n * ```\n *\n * @example\n * Timeout testing with slow error generator:\n * ```ts\n * import { gen0to999errorAsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testTimeoutWithSlowError(): Promise<void> {\n *   const iterator = gen0to999errorAsyncSlow();\n *   const timeout = 1000; // 1 second timeout\n *\n *   try {\n *     let count = 0;\n *     while (true) {\n *       const timeoutPromise = new Promise((_, reject) =>\n *         setTimeout(() => reject(new Error('Timeout')), timeout)\n *       );\n *\n *       const result = await Promise.race([\n *         iterator.next(),\n *         timeoutPromise\n *       ]);\n *\n *       if (result.done) break;\n *       count++;\n *     }\n *   } catch (error) {\n *     console.log(`Stopped due to: ${error.message}`);\n *   }\n * }\n * ```\n *\n * @example\n * Performance analysis of slow failing operations:\n * ```ts\n * import { gen0to999errorAsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function analyzeSlowFailure(): Promise<void> {\n *   const iterator = gen0to999errorAsyncSlow();\n *   const timings: number[] = [];\n *\n *   try {\n *     for (let i = 0; i < 30; i++) { // Test first 30 to keep reasonable timing\n *       const start = Date.now();\n *       const result = await iterator.next();\n *       const elapsed = Date.now() - start;\n *\n *       if (result.done) break;\n *       timings.push(elapsed);\n *     }\n *   } catch (error) {\n *     console.log('Average timing per operation:',\n *       timings.reduce((a, b) => a + b, 0) / timings.length);\n *   }\n * }\n * ```\n */",[9961,12857],"/**\n * Asynchronous generator that yields integers from 0 to 998 with progressive delays, then throws an error.\n *\n * This async generator combines the progressive timing delays of the slow variant\n * with error throwing behavior. It's designed for testing error handling under\n * realistic async conditions where operations take increasing amounts of time\n * before eventually failing. Each value i has a delay of i milliseconds before\n * being yielded, and after 999 values, it throws a RangeError.\n *\n * @returns AsyncGenerator that yields consecutive integers from 0 to 998 with increasing delays, then throws\n * @throws {RangeError} Always throws when reaching the end (after yielding 999 values with delays)\n * @example\n * Testing async error handling with realistic timing:\n * ```ts\n * import { gen0to999errorAsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testSlowErrorHandling(): Promise<void> {\n *   let count = 0;\n *   const start = Date.now();\n *\n *   try {\n *     for await (const value of gen0to999errorAsyncSlow()) {\n *       count++;\n *       if (count === 20) break; // Stop early to avoid long delays\n *     }\n *   } catch (error) {\n *     const elapsed = Date.now() - start;\n *     console.log(`Error after ${count} values in ${elapsed}ms`);\n *     console.log(error.message); // \"fixture reached 999\"\n *   }\n * }\n * ```\n *\n * @example\n * Timeout testing with slow error generator:\n * ```ts\n * import { gen0to999errorAsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function testTimeoutWithSlowError(): Promise<void> {\n *   const iterator = gen0to999errorAsyncSlow();\n *   const timeout = 1000; // 1 second timeout\n *\n *   try {\n *     let count = 0;\n *     while (true) {\n *       const timeoutPromise = new Promise((_, reject) =>\n *         setTimeout(() => reject(new Error('Timeout')), timeout)\n *       );\n *\n *       const result = await Promise.race([\n *         iterator.next(),\n *         timeoutPromise\n *       ]);\n *\n *       if (result.done) break;\n *       count++;\n *     }\n *   } catch (error) {\n *     console.log(`Stopped due to: ${error.message}`);\n *   }\n * }\n * ```\n *\n * @example\n * Performance analysis of slow failing operations:\n * ```ts\n * import { gen0to999errorAsyncSlow } from '@monochromatic-dev/module-es';\n *\n * async function analyzeSlowFailure(): Promise<void> {\n *   const iterator = gen0to999errorAsyncSlow();\n *   const timings: number[] = [];\n *\n *   try {\n *     for (let i = 0; i < 30; i++) { // Test first 30 to keep reasonable timing\n *       const start = Date.now();\n *       const result = await iterator.next();\n *       const elapsed = Date.now() - start;\n *\n *       if (result.done) break;\n *       timings.push(elapsed);\n *     }\n *   } catch (error) {\n *     console.log('Average timing per operation:',\n *       timings.reduce((a, b) => a + b, 0) / timings.length);\n *   }\n * }\n * ```\n */",[12885,12885],[12975,13071],"index = 0; index < 999; index++) {\n    await (new Promise((resolve) => setTimeout(resolve, index)));\n    yield index",[175,3017],"/**\n * Manual fixture data generation utility script.\n *\n * This module provides the underlying generation logic used to create the fixture\n * data exported by other fixture modules. It demonstrates how to manually construct\n * arrays of consecutive integers and promise arrays with progressive timing delays.\n * While the pre-generated fixtures (array0to999, promises0to999) are preferred for\n * most use cases, this utility is valuable for understanding the generation patterns\n * or creating custom fixture variations.\n *\n * The generation logic here mirrors the implementation used to create the static\n * fixture exports, providing transparency into how the test data is constructed\n * and enabling developers to create similar fixtures with different parameters.\n * @example\n * Using the array generation logic:\n * ```ts\n * import { generateConsecutiveArray } from '@monochromatic-dev/module-es';\n *\n * // Generate smaller array for quick tests\n * const smallArray = generateConsecutiveArray(100); // [0, 1, 2, ..., 99]\n *\n * // Generate larger array for stress tests\n * const largeArray = generateConsecutiveArray(5000); // [0, 1, 2, ..., 4999]\n *\n * console.log(`Small array length: ${smallArray.length}`); // 100\n * console.log(`Large array length: ${largeArray.length}`); // 5000\n * ```\n * @example\n * Using the promise generation logic:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testCustomPromises(): Promise<void> {\n *   // Generate fewer promises for faster tests\n *   const fastPromises = generateProgressivePromises(50);\n *\n *   const start = Date.now();\n *   const results = await Promise.all(fastPromises);\n *   const elapsed = Date.now() - start;\n *\n *   console.log(`Processed ${results.length} promises in ${elapsed}ms`);\n *   // Expected time: ~49ms (longest delay is 49ms)\n * }\n * ```\n *\n * @example\n * Creating custom fixture variations:\n * ```ts\n * import { generateConsecutiveArray, generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * // Custom fixtures for specific test scenarios\n * const mediumArray = generateConsecutiveArray(500); // Mid-size for balanced tests\n * const quickPromises = generateProgressivePromises(20); // Fast async tests\n * const slowPromises = generateProgressivePromises(100); // Slower timing tests\n *\n * // Use in test suites with different performance characteristics\n * async function runPerformanceTests(): Promise<void> {\n *   console.log('Testing with medium array:', mediumArray.length);\n *\n *   const quickStart = Date.now();\n *   await Promise.all(quickPromises);\n *   console.log('Quick promises took:', Date.now() - quickStart);\n *\n *   const slowStart = Date.now();\n *   await Promise.all(slowPromises);\n *   console.log('Slow promises took:', Date.now() - slowStart);\n * }\n * ```\n */",[175,3017],"/**\n * Manual fixture data generation utility script.\n *\n * This module provides the underlying generation logic used to create the fixture\n * data exported by other fixture modules. It demonstrates how to manually construct\n * arrays of consecutive integers and promise arrays with progressive timing delays.\n * While the pre-generated fixtures (array0to999, promises0to999) are preferred for\n * most use cases, this utility is valuable for understanding the generation patterns\n * or creating custom fixture variations.\n *\n * The generation logic here mirrors the implementation used to create the static\n * fixture exports, providing transparency into how the test data is constructed\n * and enabling developers to create similar fixtures with different parameters.\n *\n * @example\n * Using the array generation logic:\n * ```ts\n * import { generateConsecutiveArray } from '@monochromatic-dev/module-es';\n *\n * // Generate smaller array for quick tests\n * const smallArray = generateConsecutiveArray(100); // [0, 1, 2, ..., 99]\n *\n * // Generate larger array for stress tests\n * const largeArray = generateConsecutiveArray(5000); // [0, 1, 2, ..., 4999]\n *\n * console.log(`Small array length: ${smallArray.length}`); // 100\n * console.log(`Large array length: ${largeArray.length}`); // 5000\n * ```\n * @example\n * Using the promise generation logic:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testCustomPromises(): Promise<void> {\n *   // Generate fewer promises for faster tests\n *   const fastPromises = generateProgressivePromises(50);\n *\n *   const start = Date.now();\n *   const results = await Promise.all(fastPromises);\n *   const elapsed = Date.now() - start;\n *\n *   console.log(`Processed ${results.length} promises in ${elapsed}ms`);\n *   // Expected time: ~49ms (longest delay is 49ms)\n * }\n * ```\n *\n * @example\n * Creating custom fixture variations:\n * ```ts\n * import { generateConsecutiveArray, generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * // Custom fixtures for specific test scenarios\n * const mediumArray = generateConsecutiveArray(500); // Mid-size for balanced tests\n * const quickPromises = generateProgressivePromises(20); // Fast async tests\n * const slowPromises = generateProgressivePromises(100); // Slower timing tests\n *\n * // Use in test suites with different performance characteristics\n * async function runPerformanceTests(): Promise<void> {\n *   console.log('Testing with medium array:', mediumArray.length);\n *\n *   const quickStart = Date.now();\n *   await Promise.all(quickPromises);\n *   console.log('Quick promises took:', Date.now() - quickStart);\n *\n *   const slowStart = Date.now();\n *   await Promise.all(slowPromises);\n *   console.log('Slow promises took:', Date.now() - slowStart);\n * }\n * ```\n */",[3019,4761],"/**\n * Generates an array of consecutive integers from 0 to count-1.\n *\n * This function creates an array containing consecutive integers starting from 0\n * up to but not including the specified count. It uses the same generation logic\n * as the static array0to999 fixture but allows for custom array sizes. Perfect\n * for creating test fixtures of various sizes to match specific testing needs.\n * @param count - Number of consecutive integers to generate (array length)\n * @returns Array containing integers from 0 to count-1\n * @example\n * Generating arrays of different sizes:\n * ```ts\n * import { generateConsecutiveArray } from '@monochromatic-dev/module-es';\n *\n * const tiny = generateConsecutiveArray(5);     // [0, 1, 2, 3, 4]\n * const small = generateConsecutiveArray(10);   // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * const medium = generateConsecutiveArray(100); // [0, 1, 2, ..., 99]\n *\n * console.log('Tiny:', tiny);\n * console.log('Small length:', small.length);\n * console.log('Medium range:', `${medium[0]} to ${medium[medium.length - 1]}`);\n * ```\n *\n * @example\n * Using for test parameterization:\n * ```ts\n * import { generateConsecutiveArray } from '@monochromatic-dev/module-es';\n *\n * function testArrayProcessing(size: number): void {\n *   const testData = generateConsecutiveArray(size);\n *\n *   // Test your array processing logic\n *   const sum = testData.reduce((acc, val) => acc + val, 0);\n *   const expectedSum = (size * (size - 1)) / 2; // Sum formula for 0..n-1\n *\n *   console.log(`Size ${size}: sum=${sum}, expected=${expectedSum}`);\n *   console.assert(sum === expectedSum, 'Sum calculation failed');\n * }\n *\n * // Test with different array sizes\n * [10, 100, 1000].forEach(testArrayProcessing);\n * ```\n */",[3019,4761],"/**\n * Generates an array of consecutive integers from 0 to count-1.\n *\n * This function creates an array containing consecutive integers starting from 0\n * up to but not including the specified count. It uses the same generation logic\n * as the static array0to999 fixture but allows for custom array sizes. Perfect\n * for creating test fixtures of various sizes to match specific testing needs.\n *\n * @param count - Number of consecutive integers to generate (array length)\n * @returns Array containing integers from 0 to count-1\n * @example\n * Generating arrays of different sizes:\n * ```ts\n * import { generateConsecutiveArray } from '@monochromatic-dev/module-es';\n *\n * const tiny = generateConsecutiveArray(5);     // [0, 1, 2, 3, 4]\n * const small = generateConsecutiveArray(10);   // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * const medium = generateConsecutiveArray(100); // [0, 1, 2, ..., 99]\n *\n * console.log('Tiny:', tiny);\n * console.log('Small length:', small.length);\n * console.log('Medium range:', `${medium[0]} to ${medium[medium.length - 1]}`);\n * ```\n *\n * @example\n * Using for test parameterization:\n * ```ts\n * import { generateConsecutiveArray } from '@monochromatic-dev/module-es';\n *\n * function testArrayProcessing(size: number): void {\n *   const testData = generateConsecutiveArray(size);\n *\n *   // Test your array processing logic\n *   const sum = testData.reduce((acc, val) => acc + val, 0);\n *   const expectedSum = (size * (size - 1)) / 2; // Sum formula for 0..n-1\n *\n *   console.log(`Size ${size}: sum=${sum}, expected=${expectedSum}`);\n *   console.assert(sum === expectedSum, 'Sum calculation failed');\n * }\n *\n * // Test with different array sizes\n * [10, 100, 1000].forEach(testArrayProcessing);\n * ```\n */",[4879,4886],"index) => index",[4892,8435],"/**\n * Generates an array of promises that resolve to consecutive integers with progressive delays.\n *\n * This function creates an array of promises where each promise resolves to its index\n * value after a delay equal to that index in milliseconds. It uses the same generation\n * logic as the static promises0to999 fixture but allows for custom array sizes and\n * enables creation of promise fixtures with different timing characteristics.\n *\n * Each promise at index i resolves to value i after i milliseconds, creating a\n * realistic simulation of async operations with increasing response times.\n * @param count - Number of promises to generate (array length)\n * @returns Array of promises that resolve to consecutive integers with progressive delays\n * @example\n * Generating promise arrays of different sizes:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testDifferentSizes(): Promise<void> {\n *   // Quick test with 10 promises (0-9ms delays)\n *   const quick = generateProgressivePromises(10);\n *   const quickStart = Date.now();\n *   const quickResults = await Promise.all(quick);\n *   console.log(`Quick: ${quickResults.length} promises in ${Date.now() - quickStart}ms`);\n *\n *   // Medium test with 50 promises (0-49ms delays)\n *   const medium = generateProgressivePromises(50);\n *   const mediumStart = Date.now();\n *   const mediumResults = await Promise.all(medium);\n *   console.log(`Medium: ${mediumResults.length} promises in ${Date.now() - mediumStart}ms`);\n * }\n * ```\n *\n * @example\n * Testing async concurrency patterns:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testConcurrencyPatterns(): Promise<void> {\n *   const promises = generateProgressivePromises(20);\n *\n *   // Test concurrent execution\n *   const concurrentStart = Date.now();\n *   const concurrentResults = await Promise.all(promises);\n *   const concurrentTime = Date.now() - concurrentStart;\n *\n *   // Test sequential execution\n *   const sequentialStart = Date.now();\n *   const sequentialResults: number[] = [];\n *   for (const promise of generateProgressivePromises(20)) {\n *     sequentialResults.push(await promise);\n *   }\n *   const sequentialTime = Date.now() - sequentialStart;\n *\n *   console.log(`Concurrent: ${concurrentTime}ms, Sequential: ${sequentialTime}ms`);\n *   console.log(`Results match: ${JSON.stringify(concurrentResults) === JSON.stringify(sequentialResults)}`);\n * }\n * ```\n *\n * @example\n * Creating custom timeout scenarios:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testWithCustomTimeout(timeoutMs: number): Promise<void> {\n *   const promises = generateProgressivePromises(100);\n *\n *   const resultsWithTimeout = await Promise.allSettled(\n *     promises.map(promise =>\n *       Promise.race([\n *         promise,\n *         new Promise((_, reject) =>\n *           setTimeout(() => reject(new Error('Timeout')), timeoutMs)\n *         )\n *       ])\n *     )\n *   );\n *\n *   const successful = resultsWithTimeout.filter(r => r.status === 'fulfilled').length;\n *   const timedOut = resultsWithTimeout.filter(r => r.status === 'rejected').length;\n *\n *   console.log(`Timeout ${timeoutMs}ms: ${successful} successful, ${timedOut} timed out`);\n * }\n *\n * // Test different timeout thresholds\n * testWithCustomTimeout(25);  // Should timeout ~75 promises\n * testWithCustomTimeout(50);  // Should timeout ~50 promises\n * ```\n */",[4892,8435],"/**\n * Generates an array of promises that resolve to consecutive integers with progressive delays.\n *\n * This function creates an array of promises where each promise resolves to its index\n * value after a delay equal to that index in milliseconds. It uses the same generation\n * logic as the static promises0to999 fixture but allows for custom array sizes and\n * enables creation of promise fixtures with different timing characteristics.\n *\n * Each promise at index i resolves to value i after i milliseconds, creating a\n * realistic simulation of async operations with increasing response times.\n *\n * @param count - Number of promises to generate (array length)\n * @returns Array of promises that resolve to consecutive integers with progressive delays\n * @example\n * Generating promise arrays of different sizes:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testDifferentSizes(): Promise<void> {\n *   // Quick test with 10 promises (0-9ms delays)\n *   const quick = generateProgressivePromises(10);\n *   const quickStart = Date.now();\n *   const quickResults = await Promise.all(quick);\n *   console.log(`Quick: ${quickResults.length} promises in ${Date.now() - quickStart}ms`);\n *\n *   // Medium test with 50 promises (0-49ms delays)\n *   const medium = generateProgressivePromises(50);\n *   const mediumStart = Date.now();\n *   const mediumResults = await Promise.all(medium);\n *   console.log(`Medium: ${mediumResults.length} promises in ${Date.now() - mediumStart}ms`);\n * }\n * ```\n *\n * @example\n * Testing async concurrency patterns:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testConcurrencyPatterns(): Promise<void> {\n *   const promises = generateProgressivePromises(20);\n *\n *   // Test concurrent execution\n *   const concurrentStart = Date.now();\n *   const concurrentResults = await Promise.all(promises);\n *   const concurrentTime = Date.now() - concurrentStart;\n *\n *   // Test sequential execution\n *   const sequentialStart = Date.now();\n *   const sequentialResults: number[] = [];\n *   for (const promise of generateProgressivePromises(20)) {\n *     sequentialResults.push(await promise);\n *   }\n *   const sequentialTime = Date.now() - sequentialStart;\n *\n *   console.log(`Concurrent: ${concurrentTime}ms, Sequential: ${sequentialTime}ms`);\n *   console.log(`Results match: ${JSON.stringify(concurrentResults) === JSON.stringify(sequentialResults)}`);\n * }\n * ```\n *\n * @example\n * Creating custom timeout scenarios:\n * ```ts\n * import { generateProgressivePromises } from '@monochromatic-dev/module-es';\n *\n * async function testWithCustomTimeout(timeoutMs: number): Promise<void> {\n *   const promises = generateProgressivePromises(100);\n *\n *   const resultsWithTimeout = await Promise.allSettled(\n *     promises.map(promise =>\n *       Promise.race([\n *         promise,\n *         new Promise((_, reject) =>\n *           setTimeout(() => reject(new Error('Timeout')), timeoutMs)\n *         )\n *       ])\n *     )\n *   );\n *\n *   const successful = resultsWithTimeout.filter(r => r.status === 'fulfilled').length;\n *   const timedOut = resultsWithTimeout.filter(r => r.status === 'rejected').length;\n *\n *   console.log(`Timeout ${timeoutMs}ms: ${successful} successful, ${timedOut} timed out`);\n * }\n *\n * // Test different timeout thresholds\n * testWithCustomTimeout(25);  // Should timeout ~75 promises\n * testWithCustomTimeout(50);  // Should timeout ~50 promises\n * ```\n */",[8574,8643],"index) => new Promise<number>((resolve) => setTimeout(() => resolve(index), index",[8630,8640],"{ resolve(i); }",[218,5470],"/**\n * Array of 1000 promises that resolve to consecutive integers from 0 to 999 with progressive delays.\n *\n * This fixture provides a comprehensive set of promises for testing various asynchronous\n * scenarios including concurrent execution, Promise.all/allSettled patterns, timeout\n * handling, and performance characteristics. Each promise resolves to its index value\n * after a delay equal to that index in milliseconds, creating a realistic simulation\n * of async operations with varying response times.\n *\n * Key characteristics:\n * - Promise at index 0 resolves immediately (0ms delay) to value 0\n * - Promise at index 1 resolves after 1ms to value 1\n * - Promise at index 999 resolves after 999ms to value 999\n * - Total execution time when awaited sequentially: ~499,500ms (sum of 0+1+...+999)\n * - All promises resolve successfully (no rejections)\n * @example\n * Testing concurrent promise execution with Promise.all:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testConcurrentExecution(): Promise<void> {\n *   const start = Date.now();\n *\n *   // Take first 10 promises for reasonable test duration\n *   const firstTen = promises0to999.slice(0, 10);\n *   const results = await Promise.all(firstTen);\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Results: ${results}`); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n *   console.log(`Concurrent execution took: ${elapsed}ms`); // ~9ms (longest delay)\n * }\n * ```\n * @example\n * Testing sequential promise execution:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testSequentialExecution(): Promise<void> {\n *   const start = Date.now();\n *   const results: number[] = [];\n *\n *   // Process first 10 promises sequentially\n *   for (let i = 0; i < 10; i++) {\n *     const result = await promises0to999[i];\n *     results.push(result);\n *   }\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Results: ${results}`); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n *   console.log(`Sequential execution took: ${elapsed}ms`); // ~45ms (0+1+2+...+9)\n * }\n * ```\n *\n * @example\n * Testing timeout scenarios with Promise.race:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testWithTimeout(): Promise<void> {\n *   const timeout = 50; // 50ms timeout\n *\n *   try {\n *     const results = await Promise.all(\n *       promises0to999.slice(0, 100).map(promise =>\n *         Promise.race([\n *           promise,\n *           new Promise((_, reject) =>\n *             setTimeout(() => reject(new Error('Timeout')), timeout)\n *           )\n *         ])\n *       )\n *     );\n *     console.log(`Completed ${results.length} promises within timeout`);\n *   } catch (error) {\n *     console.log('Some promises timed out');\n *   }\n * }\n * ```\n *\n * @example\n * Testing Promise.allSettled for handling mixed results:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testAllSettled(): Promise<void> {\n *   // Combine some fast promises with timeout racing\n *   const mixedPromises = promises0to999.slice(0, 20).map((promise, index) => {\n *     if (index > 15) {\n *       // Make some promises timeout by racing with 10ms timeout\n *       return Promise.race([\n *         promise,\n *         new Promise((_, reject) =>\n *           setTimeout(() => reject(new Error('Timeout')), 10)\n *         )\n *       ]);\n *     }\n *     return promise;\n *   });\n *\n *   const results = await Promise.allSettled(mixedPromises);\n *\n *   const fulfilled = results.filter(r => r.status === 'fulfilled').length;\n *   const rejected = results.filter(r => r.status === 'rejected').length;\n *\n *   console.log(`Fulfilled: ${fulfilled}, Rejected: ${rejected}`);\n * }\n * ```\n *\n * @example\n * Performance testing and benchmarking:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function benchmarkDifferentStrategies(): Promise<void> {\n *   const testPromises = promises0to999.slice(0, 50);\n *\n *   // Test concurrent execution\n *   const concurrentStart = Date.now();\n *   await Promise.all(testPromises);\n *   const concurrentTime = Date.now() - concurrentStart;\n *\n *   // Test batched execution (5 at a time)\n *   const batchedStart = Date.now();\n *   for (let i = 0; i < testPromises.length; i += 5) {\n *     const batch = testPromises.slice(i, i + 5);\n *     await Promise.all(batch);\n *   }\n *   const batchedTime = Date.now() - batchedStart;\n *\n *   console.log(`Concurrent: ${concurrentTime}ms, Batched: ${batchedTime}ms`);\n * }\n * ```\n *\n * @example\n * Testing promise resolution order and timing:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testResolutionOrder(): Promise<void> {\n *   const resolutionOrder: number[] = [];\n *\n *   // Start all promises but track completion order\n *   const trackingPromises = promises0to999.slice(0, 10).map(async (promise, index) => {\n *     const result = await promise;\n *     resolutionOrder.push(result);\n *     return result;\n *   });\n *\n *   await Promise.all(trackingPromises);\n *   console.log(`Resolution order: ${resolutionOrder}`); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * }\n * ```\n */",[218,5470],"/**\n * Array of 1000 promises that resolve to consecutive integers from 0 to 999 with progressive delays.\n *\n * This fixture provides a comprehensive set of promises for testing various asynchronous\n * scenarios including concurrent execution, Promise.all/allSettled patterns, timeout\n * handling, and performance characteristics. Each promise resolves to its index value\n * after a delay equal to that index in milliseconds, creating a realistic simulation\n * of async operations with varying response times.\n *\n * Key characteristics:\n * - Promise at index 0 resolves immediately (0ms delay) to value 0\n * - Promise at index 1 resolves after 1ms to value 1\n * - Promise at index 999 resolves after 999ms to value 999\n * - Total execution time when awaited sequentially: ~499,500ms (sum of 0+1+...+999)\n * - All promises resolve successfully (no rejections)\n *\n * @example\n * Testing concurrent promise execution with Promise.all:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testConcurrentExecution(): Promise<void> {\n *   const start = Date.now();\n *\n *   // Take first 10 promises for reasonable test duration\n *   const firstTen = promises0to999.slice(0, 10);\n *   const results = await Promise.all(firstTen);\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Results: ${results}`); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n *   console.log(`Concurrent execution took: ${elapsed}ms`); // ~9ms (longest delay)\n * }\n * ```\n * @example\n * Testing sequential promise execution:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testSequentialExecution(): Promise<void> {\n *   const start = Date.now();\n *   const results: number[] = [];\n *\n *   // Process first 10 promises sequentially\n *   for (let i = 0; i < 10; i++) {\n *     const result = await promises0to999[i];\n *     results.push(result);\n *   }\n *\n *   const elapsed = Date.now() - start;\n *   console.log(`Results: ${results}`); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n *   console.log(`Sequential execution took: ${elapsed}ms`); // ~45ms (0+1+2+...+9)\n * }\n * ```\n *\n * @example\n * Testing timeout scenarios with Promise.race:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testWithTimeout(): Promise<void> {\n *   const timeout = 50; // 50ms timeout\n *\n *   try {\n *     const results = await Promise.all(\n *       promises0to999.slice(0, 100).map(promise =>\n *         Promise.race([\n *           promise,\n *           new Promise((_, reject) =>\n *             setTimeout(() => reject(new Error('Timeout')), timeout)\n *           )\n *         ])\n *       )\n *     );\n *     console.log(`Completed ${results.length} promises within timeout`);\n *   } catch (error) {\n *     console.log('Some promises timed out');\n *   }\n * }\n * ```\n *\n * @example\n * Testing Promise.allSettled for handling mixed results:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testAllSettled(): Promise<void> {\n *   // Combine some fast promises with timeout racing\n *   const mixedPromises = promises0to999.slice(0, 20).map((promise, index) => {\n *     if (index > 15) {\n *       // Make some promises timeout by racing with 10ms timeout\n *       return Promise.race([\n *         promise,\n *         new Promise((_, reject) =>\n *           setTimeout(() => reject(new Error('Timeout')), 10)\n *         )\n *       ]);\n *     }\n *     return promise;\n *   });\n *\n *   const results = await Promise.allSettled(mixedPromises);\n *\n *   const fulfilled = results.filter(r => r.status === 'fulfilled').length;\n *   const rejected = results.filter(r => r.status === 'rejected').length;\n *\n *   console.log(`Fulfilled: ${fulfilled}, Rejected: ${rejected}`);\n * }\n * ```\n *\n * @example\n * Performance testing and benchmarking:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function benchmarkDifferentStrategies(): Promise<void> {\n *   const testPromises = promises0to999.slice(0, 50);\n *\n *   // Test concurrent execution\n *   const concurrentStart = Date.now();\n *   await Promise.all(testPromises);\n *   const concurrentTime = Date.now() - concurrentStart;\n *\n *   // Test batched execution (5 at a time)\n *   const batchedStart = Date.now();\n *   for (let i = 0; i < testPromises.length; i += 5) {\n *     const batch = testPromises.slice(i, i + 5);\n *     await Promise.all(batch);\n *   }\n *   const batchedTime = Date.now() - batchedStart;\n *\n *   console.log(`Concurrent: ${concurrentTime}ms, Batched: ${batchedTime}ms`);\n * }\n * ```\n *\n * @example\n * Testing promise resolution order and timing:\n * ```ts\n * import { promises0to999 } from '@monochromatic-dev/module-es';\n *\n * async function testResolutionOrder(): Promise<void> {\n *   const resolutionOrder: number[] = [];\n *\n *   // Start all promises but track completion order\n *   const trackingPromises = promises0to999.slice(0, 10).map(async (promise, index) => {\n *     const result = await promise;\n *     resolutionOrder.push(result);\n *     return result;\n *   });\n *\n *   await Promise.all(trackingPromises);\n *   console.log(`Resolution order: ${resolutionOrder}`); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * }\n * ```\n */",[5585,5646],"index) => new Promise((resolve) => setTimeout(() => resolve(index), index",[5633,5643],[499,499],[931,931],[1351,1351],[1652,1652],[750,750],[750,750],[916,916],[916,916],[1116,1116],[1116,1116],[1314,1314],[1314,1314],[466,466],[795,795],[1911,1911],[2511,2511],[2716,2716],[4011,4011],[4348,4348],[4684,4684],[5019,5019],[5205,5205],[5226,5385],"source: string,\n  dest: string,\n  options: { recursive: boolean; } = { recursive: false },\n): Promise<void> {\n  const absSrc = source.startsWith('/') ? source : `/${source",[5241,5445],"destination: string,\n  options: { recursive: boolean; } = { recursive: false },\n): Promise<void> {\n  const absSrc = src.startsWith('/') ? src : `/${src}`;\n  const absDest = destination.startsWith('/') ? destination : `/${destination",[5341,5510],"absSource = src.startsWith('/') ? src : `/${src}`;\n  const absDest = dest.startsWith('/') ? dest : `/${dest}`;\n  if (options.recursive) {\n    unwrapResult(await copy(absSource",[5397,5519],"absDestination = dest.startsWith('/') ? dest : `/${dest}`;\n  if (options.recursive) {\n    unwrapResult(await copy(absSrc, absDestination",[5607,5607],[6013,6013],[6523,6523],[6701,6701],[2320,7250],"\n  exists,\n  mkdir,\n  move,\n  readDir,\n  type ReadDirEntry,\n  readTextFile,\n  remove,\n  stat,\n  writeFile,\n} from 'happy-opfs';\nimport { unwrapResult } from './result.unwrap.ts';\n\nasync function myMkdir(path: string, _options: { recursive: true; }): Promise<string> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  unwrapResult(await mkdir(absPath));\n\n  return path;\n}\n\nasync function myStat(\n  path: string,\n): Promise<\n  { handle: FileSystemHandle; } & FsStats\n> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  const fsHandle = unwrapResult(await stat(absPath));\n\n  return {\n    handle: fsHandle,\n    isDirectory: () => fsHandle.kind === 'directory',\n    isFile: () => fsHandle.kind === 'file',\n  };\n}\n\ntype FsStats = { isDirectory: () => boolean; isFile: () => boolean; };\n\n/**\n * Can be very inaccurate.\n * Written here just so that fs.constants.* won't just error.\n */\nconst fsConstants = {\n  /*  UV_FS_SYMLINK_DIR: 1,\n   UV_FS_SYMLINK_JUNCTION: 2,\n   O_RDONLY: 0,\n   O_WRONLY: 1,\n   O_RDWR: 2,\n   UV_DIRENT_UNKNOWN: 0,\n   UV_DIRENT_FILE: 1,\n   UV_DIRENT_DIR: 2,\n   UV_DIRENT_LINK: 3,\n   UV_DIRENT_FIFO: 4,\n   UV_DIRENT_SOCKET: 5,\n   UV_DIRENT_CHAR: 6,\n   UV_DIRENT_BLOCK: 7,\n   S_IFMT: 61_440,\n   S_IFREG: 32_768,\n   S_IFDIR: 16_384,\n   S_IFCHR: 8192,\n   S_IFIFO: 4096,\n   S_IFLNK: 40_960,\n   O_CREAT: 64,\n   O_EXCL: 128,\n   UV_FS_O_FILEMAP: 0,\n   O_TRUNC: 512,\n   O_APPEND: 1024,*/\n  S_IRUSR: 256,\n  // S_IWUSR: 128,\n  // F_OK: 0,\n  R_OK: 4,\n  W_OK: 2,\n  /*  X_OK: 1,\n   UV_FS_COPYFILE_EXCL: 1,\n   COPYFILE_EXCL: 1,\n   UV_FS_COPYFILE_FICLONE: 2,\n   COPYFILE_FICLONE: 2,\n   UV_FS_COPYFILE_FICLONE_FORCE: 4,\n   COPYFILE_FICLONE_FORCE: 4,*/\n};\n\nasync function access(path: string, _mode: number): Promise<void> {\n  // no-op for opfs because opfs doesn't have permissions.\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  const pathExists: boolean = unwrapResult(await exists(absPath));\n\n  if (!pathExists) {\n    throw new Error(`Path ${path} does not exist.`);\n  }\n}\n\nasync function chmod(path: string, _mode: number): Promise<void> {\n  // no-op for opfs because opfs doesn't have permissions.\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  const pathExists: boolean = unwrapResult(await exists(absPath));\n\n  if (!pathExists) {\n    throw new Error(`Path ${path} does not exist.`);\n  }\n}\n\nasync function myWriteFile(path: string, data: string,\n  options: { flag: 'w' | 'wx' | 'a' | 'ax'; } = { flag: 'w' }): Promise<void>\n{\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  const append = options.flag.includes('a');\n  const create = true;\n  unwrapResult(await writeFile(absPath, data, { append, create }));\n}\n\nasync function myAppendFile(path: string, data: string): Promise<void> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  unwrapResult(await appendFile(absPath, data));\n}\n\nasync function cp(\n  src: string,\n  dest: string,\n  options: { recursive: boolean; } = { recursive: false },\n): Promise<void> {\n  const absSrc = src.startsWith('/') ? src : `/${src}`;\n  const absDest = dest.startsWith('/') ? dest : `/${dest}`;\n  if (options.recursive) {\n    unwrapResult(await copy(absSrc, absDest));\n  } else {\n    throw new Error('Copying non-recursively is not supported.');\n  }\n}\n\nasync function myExists(path: string): Promise<boolean> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  return unwrapResult(await exists(absPath));\n}\n\nasync function myReadDir(path: string,\n  options: { withFileTypes: true; recursive: boolean; }): Promise<ReadDirEntry[]>;\nasync function myReadDir(path: string,\n  options: { withFileTypes: false; recursive: boolean; }): Promise<string[]>;\nasync function myReadDir(path: string,\n  options: { withFileTypes: boolean; recursive: boolean; } = {\n    withFileTypes: false,\n    recursive: false,\n  }): Promise<string[] | ReadDirEntry[]>\n{\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  const result = unwrapResult(await readDir(absPath, { recursive: options.recursive }));\n\n  const entries = await Array.fromAsync(result);\n\n  return options.withFileTypes ? entries : entries.map(function getPathOnly(entry) {\n    return entry.path;\n  });\n}\n\nasync function myReadTextFile(path: string): Promise<string> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  return unwrapResult(await readTextFile(absPath));\n}\n\nasync function rm(path: string,\n  options: { force: boolean; recursive: true; }): Promise<void>\n{\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  try {\n    unwrapResult(await remove(absPath));\n  } catch (e) {\n    if (!options.force) {\n      throw e;\n    }\n  }\n}\n\nexport {\n  access,\n  chmod,\n  cp,\n  \n  fsConstants,\n  type FsStats,\n  move,\n  myAppendFile as appendFile,\n  myExists as exists,\n  myMkdir as mkdir,\n  myReadDir as readdir,\n  myReadTextFile as readTextFile,\n  myStat as stat,\n  myWriteFile as writeFile,\n  rm,\n};\n\nexport {createFile} from 'happy-opfs';",[2353,7250],"\n  readDir,\n  type ReadDirEntry,\n  readTextFile,\n  remove,\n  stat,\n  writeFile,\n} from 'happy-opfs';\nimport { unwrapResult } from './result.unwrap.ts';\n\nasync function myMkdir(path: string, _options: { recursive: true; }): Promise<string> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  unwrapResult(await mkdir(absPath));\n\n  return path;\n}\n\nasync function myStat(\n  path: string,\n): Promise<\n  { handle: FileSystemHandle; } & FsStats\n> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  const fsHandle = unwrapResult(await stat(absPath));\n\n  return {\n    handle: fsHandle,\n    isDirectory: () => fsHandle.kind === 'directory',\n    isFile: () => fsHandle.kind === 'file',\n  };\n}\n\ntype FsStats = { isDirectory: () => boolean; isFile: () => boolean; };\n\n/**\n * Can be very inaccurate.\n * Written here just so that fs.constants.* won't just error.\n */\nconst fsConstants = {\n  /*  UV_FS_SYMLINK_DIR: 1,\n   UV_FS_SYMLINK_JUNCTION: 2,\n   O_RDONLY: 0,\n   O_WRONLY: 1,\n   O_RDWR: 2,\n   UV_DIRENT_UNKNOWN: 0,\n   UV_DIRENT_FILE: 1,\n   UV_DIRENT_DIR: 2,\n   UV_DIRENT_LINK: 3,\n   UV_DIRENT_FIFO: 4,\n   UV_DIRENT_SOCKET: 5,\n   UV_DIRENT_CHAR: 6,\n   UV_DIRENT_BLOCK: 7,\n   S_IFMT: 61_440,\n   S_IFREG: 32_768,\n   S_IFDIR: 16_384,\n   S_IFCHR: 8192,\n   S_IFIFO: 4096,\n   S_IFLNK: 40_960,\n   O_CREAT: 64,\n   O_EXCL: 128,\n   UV_FS_O_FILEMAP: 0,\n   O_TRUNC: 512,\n   O_APPEND: 1024,*/\n  S_IRUSR: 256,\n  // S_IWUSR: 128,\n  // F_OK: 0,\n  R_OK: 4,\n  W_OK: 2,\n  /*  X_OK: 1,\n   UV_FS_COPYFILE_EXCL: 1,\n   COPYFILE_EXCL: 1,\n   UV_FS_COPYFILE_FICLONE: 2,\n   COPYFILE_FICLONE: 2,\n   UV_FS_COPYFILE_FICLONE_FORCE: 4,\n   COPYFILE_FICLONE_FORCE: 4,*/\n};\n\nasync function access(path: string, _mode: number): Promise<void> {\n  // no-op for opfs because opfs doesn't have permissions.\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  const pathExists: boolean = unwrapResult(await exists(absPath));\n\n  if (!pathExists) {\n    throw new Error(`Path ${path} does not exist.`);\n  }\n}\n\nasync function chmod(path: string, _mode: number): Promise<void> {\n  // no-op for opfs because opfs doesn't have permissions.\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  const pathExists: boolean = unwrapResult(await exists(absPath));\n\n  if (!pathExists) {\n    throw new Error(`Path ${path} does not exist.`);\n  }\n}\n\nasync function myWriteFile(path: string, data: string,\n  options: { flag: 'w' | 'wx' | 'a' | 'ax'; } = { flag: 'w' }): Promise<void>\n{\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  const append = options.flag.includes('a');\n  const create = true;\n  unwrapResult(await writeFile(absPath, data, { append, create }));\n}\n\nasync function myAppendFile(path: string, data: string): Promise<void> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n\n  unwrapResult(await appendFile(absPath, data));\n}\n\nasync function cp(\n  src: string,\n  dest: string,\n  options: { recursive: boolean; } = { recursive: false },\n): Promise<void> {\n  const absSrc = src.startsWith('/') ? src : `/${src}`;\n  const absDest = dest.startsWith('/') ? dest : `/${dest}`;\n  if (options.recursive) {\n    unwrapResult(await copy(absSrc, absDest));\n  } else {\n    throw new Error('Copying non-recursively is not supported.');\n  }\n}\n\nasync function myExists(path: string): Promise<boolean> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  return unwrapResult(await exists(absPath));\n}\n\nasync function myReadDir(path: string,\n  options: { withFileTypes: true; recursive: boolean; }): Promise<ReadDirEntry[]>;\nasync function myReadDir(path: string,\n  options: { withFileTypes: false; recursive: boolean; }): Promise<string[]>;\nasync function myReadDir(path: string,\n  options: { withFileTypes: boolean; recursive: boolean; } = {\n    withFileTypes: false,\n    recursive: false,\n  }): Promise<string[] | ReadDirEntry[]>\n{\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  const result = unwrapResult(await readDir(absPath, { recursive: options.recursive }));\n\n  const entries = await Array.fromAsync(result);\n\n  return options.withFileTypes ? entries : entries.map(function getPathOnly(entry) {\n    return entry.path;\n  });\n}\n\nasync function myReadTextFile(path: string): Promise<string> {\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  return unwrapResult(await readTextFile(absPath));\n}\n\nasync function rm(path: string,\n  options: { force: boolean; recursive: true; }): Promise<void>\n{\n  const absPath = path.startsWith('/') ? path : `/${path}`;\n  try {\n    unwrapResult(await remove(absPath));\n  } catch (e) {\n    if (!options.force) {\n      throw e;\n    }\n  }\n}\n\nexport {\n  access,\n  chmod,\n  cp,\n  createFile,\n  fsConstants,\n  type FsStats,\n  \n  myAppendFile as appendFile,\n  myExists as exists,\n  myMkdir as mkdir,\n  myReadDir as readdir,\n  myReadTextFile as readTextFile,\n  myStat as stat,\n  myWriteFile as writeFile,\n  rm,\n};\n\nexport {move} from 'happy-opfs';",[417,417],[91,893],"\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  \n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {access} from 'node:fs/promises';",[101,893],"\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  \n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {appendFile} from 'node:fs/promises';",[115,893],"\n  chown,\n  copyFile,\n  cp,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  \n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {chmod} from 'node:fs/promises';",[124,893],"\n  copyFile,\n  cp,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  \n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {chown} from 'node:fs/promises';",[133,893],"\n  cp,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  \n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {copyFile} from 'node:fs/promises';",[145,893],"\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  \n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {cp} from 'node:fs/promises';",[11,893],"\n  type Stats as FsStats,\n} from 'node:fs';\nimport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  \n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {constants as fsConstants} from 'node:fs';",[39,893],"\n} from 'node:fs';\nimport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  \n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {type Stats as FsStats} from 'node:fs';",[151,893],"\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  \n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {glob} from 'node:fs/promises';",[159,893],"\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  \n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {lchown} from 'node:fs/promises';",[169,893],"\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  \n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {link} from 'node:fs/promises';",[177,893],"\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  \n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {lstat} from 'node:fs/promises';",[186,893],"\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  \n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {lutimes} from 'node:fs/promises';",[197,893],"\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  \n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {mkdir} from 'node:fs/promises';",[206,893],"\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  \n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {mkdtemp} from 'node:fs/promises';",[217,893],"\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  \n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {open} from 'node:fs/promises';",[225,893],"\n  readdir,\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  \n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {opendir} from 'node:fs/promises';",[236,893],"\n  readFile,\n  readlink,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  \n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {readdir} from 'node:fs/promises';",[732,893],"\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {readFile} from 'node:fs/promises';",[259,893],"\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  \n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {readlink} from 'node:fs/promises';",[271,893],"\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  \n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {realpath} from 'node:fs/promises';",[283,893],"\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  \n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {rename} from 'node:fs/promises';",[293,893],"\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  \n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {rm} from 'node:fs/promises';",[299,893],"\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  \n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {rmdir} from 'node:fs/promises';",[308,893],"\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  \n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {stat} from 'node:fs/promises';",[316,893],"\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  \n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {statfs} from 'node:fs/promises';",[326,893],"\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  \n  truncate,\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {symlink} from 'node:fs/promises';",[337,893],"\n  unlink,\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  \n  unlink,\n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {truncate} from 'node:fs/promises';",[349,893],"\n  utimes,\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  \n  utimes,\n  watch,\n  writeFile,\n};\n\nexport {unlink} from 'node:fs/promises';",[359,893],"\n  watch,\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  \n  watch,\n  writeFile,\n};\n\nexport {utimes} from 'node:fs/promises';",[369,893],"\n  writeFile,\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  \n  writeFile,\n};\n\nexport {watch} from 'node:fs/promises';",[378,893],"\n} from 'node:fs/promises';\n\nasync function readTextFile(path: string): Promise<string> {\n  return await readFile(path, { encoding: 'utf8' });\n}\n\nexport {\n  access,\n  appendFile,\n  chmod,\n  chown,\n  copyFile,\n  cp,\n  fsConstants,\n  type FsStats,\n  glob,\n  lchown,\n  link,\n  lstat,\n  lutimes,\n  mkdir,\n  mkdtemp,\n  open,\n  opendir,\n  readdir,\n  readFile,\n  readlink,\n  readTextFile,\n  realpath,\n  rename,\n  rm,\n  rmdir,\n  stat,\n  statfs,\n  symlink,\n  truncate,\n  unlink,\n  utimes,\n  watch,\n  \n};\n\nexport {writeFile} from 'node:fs/promises';",[831,831],[0,0],[137,137],[46,46],[666,840],"hasExtension = lastDotIndex > 0; // Ignore if dot is first character\n\n  const base = basePart || '';\n  const ext = hasExtension ? basePart.slice(lastDotIndex) : '';\n  const name = hasExtension",[769,919],"extension = hasExt ? basePart.slice(lastDotIndex) : '';\n  const name = hasExt ? basePart.slice(0, lastDotIndex) : basePart;\n\n  return { root, dir, base, ext: extension",[0,1004],"/**\n * Transforms a function to accept its arguments as an array instead of individual parameters.\n * This function creates a wrapper that spreads an array of arguments when calling the original function.\n * Useful for scenarios where you have arguments collected in an array but need to call a function\n * that expects individual parameters.\n * @param fn - Function to transform\n * @returns New function that accepts arguments as an array and spreads them to the original function\n * @example\n * ```ts\n * function add(a: number, b: number, c: number): number {\n *   return a + b + c;\n * }\n *\n * const spreadAdd = spreadArguments(add);\n * spreadAdd([1, 2, 3]); // 6 (equivalent to add(1, 2, 3))\n *\n * // Useful with array methods\n * const numbers = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n * const results = numbers.map(spreadAdd); // [6, 15, 24]\n *\n * // Works with built-in functions too\n * const spreadMax = spreadArguments(Math.max);\n * spreadMax([10, 5, 8, 3]); // 10\n * ```\n */",[0,1004],"/**\n * Transforms a function to accept its arguments as an array instead of individual parameters.\n * This function creates a wrapper that spreads an array of arguments when calling the original function.\n * Useful for scenarios where you have arguments collected in an array but need to call a function\n * that expects individual parameters.\n *\n * @param fn - Function to transform\n * @returns New function that accepts arguments as an array and spreads them to the original function\n * @example\n * ```ts\n * function add(a: number, b: number, c: number): number {\n *   return a + b + c;\n * }\n *\n * const spreadAdd = spreadArguments(add);\n * spreadAdd([1, 2, 3]); // 6 (equivalent to add(1, 2, 3))\n *\n * // Useful with array methods\n * const numbers = [\n *   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ];\n * const results = numbers.map(spreadAdd); // [6, 15, 24]\n *\n * // Works with built-in functions too\n * const spreadMax = spreadArguments(Math.max);\n * spreadMax([10, 5, 8, 3]); // 10\n * ```\n */",[1058,1062],"arguments_",[1264,2470],"/**\n * Transforms a function that expects an array to accept individual arguments instead.\n * This function creates a wrapper that gathers individual arguments into an array\n * before calling the original function. Useful for creating variadic versions of\n * functions that normally operate on arrays.\n * @param fn - Function that expects an array as its parameter\n * @returns New function that accepts individual arguments and gathers them into an array\n * @example\n * ```ts\n * function sumArray(numbers: number[]): number {\n *   return numbers.reduce((sum, num) => sum + num, 0);\n * }\n *\n * const sum = gatherArguments(sumArray);\n * sum(1, 2, 3, 4, 5); // 15 (equivalent to sumArray([1, 2, 3, 4, 5]))\n *\n * // Create variadic versions of array functions\n * function maxFromArray(numbers: number[]): number {\n *   return Math.max(...numbers);\n * }\n *\n * const max = gatherArguments(maxFromArray);\n * max(10, 5, 8, 3); // 10\n *\n * // Useful for functional composition\n * function joinWithComma(strings: string[]): string {\n *   return strings.join(', ');\n * }\n *\n * const joinStrings = gatherArguments(joinWithComma);\n * joinStrings('apple', 'banana', 'cherry'); // 'apple, banana, cherry'\n * ```\n */",[1264,2470],"/**\n * Transforms a function that expects an array to accept individual arguments instead.\n * This function creates a wrapper that gathers individual arguments into an array\n * before calling the original function. Useful for creating variadic versions of\n * functions that normally operate on arrays.\n *\n * @param fn - Function that expects an array as its parameter\n * @returns New function that accepts individual arguments and gathers them into an array\n * @example\n * ```ts\n * function sumArray(numbers: number[]): number {\n *   return numbers.reduce((sum, num) => sum + num, 0);\n * }\n *\n * const sum = gatherArguments(sumArray);\n * sum(1, 2, 3, 4, 5); // 15 (equivalent to sumArray([1, 2, 3, 4, 5]))\n *\n * // Create variadic versions of array functions\n * function maxFromArray(numbers: number[]): number {\n *   return Math.max(...numbers);\n * }\n *\n * const max = gatherArguments(maxFromArray);\n * max(10, 5, 8, 3); // 10\n *\n * // Useful for functional composition\n * function joinWithComma(strings: string[]): string {\n *   return strings.join(', ');\n * }\n *\n * const joinStrings = gatherArguments(joinWithComma);\n * joinStrings('apple', 'banana', 'cherry'); // 'apple, banana, cherry'\n * ```\n */",[2521,2524],"argument",[255,272],"spreadArguments",{"messageId":"10379","fix":"10403","desc":"10381"},{"messageId":"10382","fix":"10404","desc":"10384"},[1946,1963],"gatherArguments",{"messageId":"10379","fix":"10405","desc":"10381"},{"messageId":"10382","fix":"10406","desc":"10384"},[99,1527],"/**\n * Transforms a function to return a boolean based on the truthiness of its original return value.\n * This higher-order function creates a new function that preserves the original function's\n * parameter signature while converting its return value to a boolean using JavaScript's\n * truthiness evaluation. Useful for creating predicate functions from existing functions\n * that return various types.\n * @param fn - Original function to transform into a boolean-returning function\n * @returns New function with same parameters but returning boolean based on original result's truthiness\n * @example\n * ```ts\n * // Transform a string length function to a boolean checker\n * const hasLength = booleanfy((str: string) => str.length);\n * hasLength('hello'); // true (5 is truthy)\n * hasLength(''); // false (0 is falsy)\n *\n * // Transform a number function to boolean\n * const isPositive = booleanfy((n: number) => n > 0 ? n : 0);\n * isPositive(5); // true (5 is truthy)\n * isPositive(-3); // false (0 is falsy)\n *\n * // Transform an object getter to existence checker\n * const hasProperty = booleanfy((obj: any, key: string) => obj[key]);\n * hasProperty({ a: 1 }, 'a'); // true (1 is truthy)\n * hasProperty({ a: 1 }, 'b'); // false (undefined is falsy)\n *\n * // Transform array methods\n * const hasElements = booleanfy((arr: any[]) => arr.length);\n * hasElements([1, 2, 3]); // true\n * hasElements([]); // false\n * ```\n */",[99,1527],"/**\n * Transforms a function to return a boolean based on the truthiness of its original return value.\n * This higher-order function creates a new function that preserves the original function's\n * parameter signature while converting its return value to a boolean using JavaScript's\n * truthiness evaluation. Useful for creating predicate functions from existing functions\n * that return various types.\n *\n * @param fn - Original function to transform into a boolean-returning function\n * @returns New function with same parameters but returning boolean based on original result's truthiness\n * @example\n * ```ts\n * // Transform a string length function to a boolean checker\n * const hasLength = booleanfy((str: string) => str.length);\n * hasLength('hello'); // true (5 is truthy)\n * hasLength(''); // false (0 is falsy)\n *\n * // Transform a number function to boolean\n * const isPositive = booleanfy((n: number) => n > 0 ? n : 0);\n * isPositive(5); // true (5 is truthy)\n * isPositive(-3); // false (0 is falsy)\n *\n * // Transform an object getter to existence checker\n * const hasProperty = booleanfy((obj: any, key: string) => obj[key]);\n * hasProperty({ a: 1 }, 'a'); // true (1 is truthy)\n * hasProperty({ a: 1 }, 'b'); // false (undefined is falsy)\n *\n * // Transform array methods\n * const hasElements = booleanfy((arr: any[]) => arr.length);\n * hasElements([1, 2, 3]); // true\n * hasElements([]); // false\n * ```\n */",[1554,1700],"Arguments extends any[], ReturnType,>(\n  fn: (...args: Arguments) => ReturnType,\n): (...args: Arguments) => boolean {\n  return function booleanfied(...args: Arguments",[1598,1602],[1632,1636],[1690,1742],"arguments_: Args): boolean {\n    const result = fn(...arguments_",[1781,3165],"/**\n * Transforms an async function to return a boolean based on the truthiness of its original return value.\n * This is the async version of booleanfy that handles functions returning promises or promisable values.\n * The resulting function awaits the original function's result before converting it to a boolean.\n * @param fn - Original async function to transform into a boolean-returning function\n * @returns New async function with same parameters but returning Promise<boolean> based on original result's truthiness\n * @example\n * ```ts\n * // Transform an async API call to boolean checker\n * const userExists = booleanfyAsync(async (id: string) => {\n *   const user = await fetchUser(id);\n *   return user; // Will be truthy if user exists, falsy if null/undefined\n * });\n * await userExists('123'); // true if user found, false otherwise\n *\n * // Transform async file operations\n * const fileExists = booleanfyAsync(async (path: string) => {\n *   try {\n *     return await fs.stat(path);\n *   } catch {\n *     return null;\n *   }\n * });\n * await fileExists('./package.json'); // true if file exists\n *\n * // Transform async validation\n * const isValidEmail = booleanfyAsync(async (email: string) => {\n *   const result = await validateEmail(email);\n *   return result.isValid ? result : null;\n * });\n * await isValidEmail('test@example.com'); // true if valid\n * ```\n */",[1781,3165],"/**\n * Transforms an async function to return a boolean based on the truthiness of its original return value.\n * This is the async version of booleanfy that handles functions returning promises or promisable values.\n * The resulting function awaits the original function's result before converting it to a boolean.\n *\n * @param fn - Original async function to transform into a boolean-returning function\n * @returns New async function with same parameters but returning Promise<boolean> based on original result's truthiness\n * @example\n * ```ts\n * // Transform an async API call to boolean checker\n * const userExists = booleanfyAsync(async (id: string) => {\n *   const user = await fetchUser(id);\n *   return user; // Will be truthy if user exists, falsy if null/undefined\n * });\n * await userExists('123'); // true if user found, false otherwise\n *\n * // Transform async file operations\n * const fileExists = booleanfyAsync(async (path: string) => {\n *   try {\n *     return await fs.stat(path);\n *   } catch {\n *     return null;\n *   }\n * });\n * await fileExists('./package.json'); // true if file exists\n *\n * // Transform async validation\n * const isValidEmail = booleanfyAsync(async (email: string) => {\n *   const result = await validateEmail(email);\n *   return result.isValid ? result : null;\n * });\n * await isValidEmail('test@example.com'); // true if valid\n * ```\n */",[3197,3389],"Arguments extends any[], ReturnType extends NotPromise,>(\n  fn: (...args: Arguments) => Promisable<ReturnType>,\n): (...args: Arguments) => Promise<boolean> {\n  return async function booleanfied(...args: Arguments",[3260,3264],[3306,3310],[3379,3446],"arguments_: Args): Promise<boolean> {\n    const result = await fn(...arguments_",[248,259],"booleanfy",[1584,1584],[1584,1584],[1725,1741],"booleanfyAsync",[3339,3339],[3339,3339],[3553,3553],[3553,3553],[0,1047],"/**\n * Transforms a multi-parameter function into a curried function that can be called with one argument at a time.\n * Currying allows partial application of function arguments, creating specialized functions by fixing some parameters.\n * Supports functions with 2 to 10 parameters.\n * @param fn - Function to curry\n * @returns Curried function that accepts parameters one at a time\n * @throws {RangeError} If function has unsupported parameter count (not 2-10)\n * @example\n * ```ts\n * // Basic currying with 2 parameters\n * const add = (a: number, b: number): number => a + b;\n * const curriedAdd = curry(add);\n * const add5 = curriedAdd(5);\n * console.log(add5(3)); // 8\n *\n * // Currying with 3 parameters\n * const multiply = (a: number, b: number, c: number): number => a * b * c;\n * const curriedMultiply = curry(multiply);\n * const multiplyBy2 = curriedMultiply(2);\n * const multiplyBy2And3 = multiplyBy2(3);\n * console.log(multiplyBy2And3(4)); // 24\n *\n * // Direct chaining\n * console.log(curriedMultiply(2)(3)(4)); // 24\n * ```\n */",[0,1047],"/**\n * Transforms a multi-parameter function into a curried function that can be called with one argument at a time.\n * Currying allows partial application of function arguments, creating specialized functions by fixing some parameters.\n * Supports functions with 2 to 10 parameters.\n *\n * @param fn - Function to curry\n * @returns Curried function that accepts parameters one at a time\n * @throws {RangeError} If function has unsupported parameter count (not 2-10)\n * @example\n * ```ts\n * // Basic currying with 2 parameters\n * const add = (a: number, b: number): number => a + b;\n * const curriedAdd = curry(add);\n * const add5 = curriedAdd(5);\n * console.log(add5(3)); // 8\n *\n * // Currying with 3 parameters\n * const multiply = (a: number, b: number, c: number): number => a * b * c;\n * const curriedMultiply = curry(multiply);\n * const multiplyBy2 = curriedMultiply(2);\n * const multiplyBy2And3 = multiplyBy2(3);\n * console.log(multiplyBy2And3(4)); // 24\n *\n * // Direct chaining\n * console.log(curriedMultiply(2)(3)(4)); // 24\n * ```\n */",[5329,5329],[226,233],"curry",[1481,1481],[1481,1481],[1863,1863],[1863,1863],[2326,2326],[2326,2326],[2788,2788],[2788,2788],[5748,5748],[5748,5748],[6254,6254],[6254,6254],[213,780],"/**\n * Wraps a function to throw an error when it returns a falsy value.\n * @param fn - Function to wrap with truthy validation\n * @param errorMessage - Custom error message when validation fails\n * @returns Wrapped function that throws if original function returns falsy value\n * @throws {Error} When wrapped function returns falsy value\n * @example\n * ```ts\n * const getPositiveNumber = ensuringTruthy((x: number) => x > 0 ? x : 0);\n * getPositiveNumber(5); // Returns 5\n * getPositiveNumber(-1); // Throws Error: \"Function must return a truthy value\"\n * ```\n */",[832,836],[934,938],[1009,1076],"arguments_: Parameters<T>): ReturnType<T> {\n    const result = fn(...arguments_",[1168,1207],"/**\n * {@inheritDoc ensuringTruthy}\n * @param fn\n * @param errorMessage\n */",[1168,1207],"/**\n * {@inheritDoc ensuringTruthy}\n * @param fn\n * @param errorMessage\n * @param fn\n * @param errorMessage\n */",[1267,1271],[1382,1386],[1486,1580],"arguments_: Parameters<T>\n  ): Promise<Awaited<ReturnType<T>>> {\n    const result = await fn(...arguments_",[1672,2237],"/**\n * Wraps a function to throw an error when it returns a truthy value.\n * @param fn - Function to wrap with falsy validation\n * @param errorMessage - Custom error message when validation fails\n * @returns Wrapped function that throws if original function returns truthy value\n * @throws {Error} When wrapped function returns truthy value\n * @example\n * ```ts\n * const ensureNoError = ensuringFalsy((code: number) => code === 0 ? 0 : code);\n * ensureNoError(0); // Returns 0\n * ensureNoError(1); // Throws Error: \"Function must return a falsy value\"\n * ```\n */",[2288,2292],[2389,2393],[2463,2530],[2621,2659],"/**\n * {@inheritDoc ensuringFalsy}\n * @param fn\n * @param errorMessage\n */",[2621,2659],"/**\n * {@inheritDoc ensuringFalsy}\n * @param fn\n * @param errorMessage\n * @param fn\n * @param errorMessage\n */",[2718,2722],[2832,2836],[2935,3029],[3120,3603],"/**\n * Wraps a function to return null instead of throwing errors.\n * @param fn - Function to wrap with null fallback\n * @returns Wrapped function that returns null on errors instead of throwing\n * @example\n * ```ts\n * const safeParseInt = nonThrowingWithNull((str: string) => {\n *   const num = parseInt(str);\n *   if (isNaN(num)) throw new Error('Invalid number');\n *   return num;\n * });\n * safeParseInt('123'); // Returns 123\n * safeParseInt('abc'); // Returns null\n * ```\n */",[3660,3664],[3706,3710],[3779,3835],"arguments_: Parameters<T>) {\n    try {\n      return fn(...arguments_",[3885,3929],"/**\n * {@inheritDoc nonThrowingWithNull}\n * @param fn\n */",[3994,3998],[4048,4052],[4145,4207],"arguments_: Parameters<T>) {\n    try {\n      return await fn(...arguments_",[4257,4743],"/**\n * Wraps a function to return false instead of throwing errors.\n * @param fn - Function to wrap with false fallback\n * @returns Wrapped function that returns false on errors instead of throwing\n * @example\n * ```ts\n * const isValidEmail = nonThrowingWithFalse((email: string) => {\n *   if (!email.includes('@')) throw new Error('Invalid email');\n *   return true;\n * });\n * isValidEmail('test@example.com'); // Returns true\n * isValidEmail('invalid'); // Returns false\n * ```\n */",[4801,4805],[4847,4851],[4921,4977],[5028,5073],"/**\n * {@inheritDoc nonThrowingWithFalse}\n * @param fn\n */",[5139,5143],[5193,5197],[5291,5353],[5404,5881],"/**\n * Wraps a function to return true instead of throwing errors.\n * @param fn - Function to wrap with true fallback\n * @returns Wrapped function that returns true on errors instead of throwing\n * @example\n * ```ts\n * const hasError = nonThrowingWithTrue((operation: () => void) => {\n *   operation();\n *   return false; // No error occurred\n * });\n * hasError(() => console.log('ok')); // Returns false\n * hasError(() => { throw new Error(); }); // Returns true\n * ```\n */",[5938,5942],[5984,5988],[6057,6113],[6163,6207],"/**\n * {@inheritDoc nonThrowingWithTrue}\n * @param fn\n */",[6272,6276],[6326,6330],[6423,6485],[62,652],"/**\n * Creates a function that performs a deep equality comparison between its input and a pre-configured value.\n * This is useful for creating reusable predicate functions.\n * @param equalTo - value to compare against.\n * @returns function that takes a value and returns boolean indicating if it's deeply equal to `equalTo`.\n * @example\n * ```ts\n * import { equals } from '@monochromatic-dev/module-es';\n *\n * const isTwo = equals(2);\n *\n * isTwo(2); // true\n * isTwo(3); // false\n *\n * const isObj = equals({ a: 1 });\n * isObj({ a: 1 }); // true\n * isObj({ a: 2 }); // false\n * ```\n */",[843,1423],"/**\n * Creates a function that performs an asynchronous deep equality comparison between its input and a pre-configured value.\n * This is useful for creating reusable asynchronous predicate functions.\n * @param equalTo - value to compare against.\n * @returns function that takes a value and returns promise resolving to boolean indicating if it's deeply equal to `equalTo`.\n * @example\n * ```ts\n * import { equalsAsync } from '@monochromatic-dev/module-es';\n *\n * const isTwoAsync = equalsAsync(2);\n *\n * await isTwoAsync(2); // true\n * await isTwoAsync(3); // false\n * ```\n */",[1654,2332],"/**\n * Creates a function that checks for deep equality between its input and a given value.\n * If the values are equal, it returns the input value, otherwise it throws an error.\n * @param equalTo - value to compare against.\n * @returns function that takes a value, and returns it if equal to `equalTo`, otherwise throws.\n * @throws {Error} If the input value differs from `equalTo`.\n * @example\n * ```ts\n * import { equalsOrThrow } from '@monochromatic-dev/module-es';\n *\n * const ensureIsTwo = equalsOrThrow(2);\n *\n * ensureIsTwo(2); // returns 2\n *\n * try {\n *   ensureIsTwo(3);\n * } catch (e) {\n *   console.error(e.message); // \"input 3 isn't equal to 2\"\n * }\n * ```\n */",[2617,3405],"/**\n * Creates a function that asynchronously checks for deep equality between its input and a given value.\n * If the values are equal, it returns a promise that resolves with the input value, otherwise it throws an error.\n * @param equalTo - value to compare against.\n * @returns function that takes a value, and returns promise resolving with it if equal to `equalTo`, otherwise throws.\n * @throws {Error} If the input value differs from `equalTo`.\n * @example\n * ```ts\n * import { equalsAsyncOrThrow } from '@monochromatic-dev/module-es';\n *\n * const ensureIsTwoAsync = equalsAsyncOrThrow(2);\n *\n * await ensureIsTwoAsync(2); // resolves with 2\n *\n * try {\n *   await ensureIsTwoAsync(3);\n * } catch (e) {\n *   console.error(e.message); // \"input 3 isn't equal to 2\"\n * }\n * ```\n */",[304,312],"equals",[410,410],[410,410],[1232,1245],"equalsAsync",[1369,1369],[1369,1369],[2103,2118],"equalsOrThrow",[2213,2213],[2213,2213],[2340,2340],[2340,2340],[2635,2635],[2635,2635],[2930,2950],"equalsAsyncOrThrow",[3056,3056],[3056,3056],[3200,3200],[3200,3200],{"messageId":"10379","fix":"10407","desc":"10381"},{"messageId":"10382","fix":"10408","desc":"10384"},{"messageId":"10379","fix":"10409","desc":"10381"},{"messageId":"10382","fix":"10410","desc":"10384"},[3516,3516],[3516,3516],{"messageId":"10379","fix":"10411","desc":"10381"},{"messageId":"10382","fix":"10412","desc":"10384"},[166,1121],"/**\n * Type guard that checks if a function is an `AsyncFunction`.\n * @remarks\n * This function uses the constructor name to determine if the function is asynchronous.\n * This may not be reliable in all JavaScript environments or with certain bundler configurations.\n * @template T_fnReturnUnwrapped - Return type of the unwrapped promise.\n * @template T_inputs - Input arguments for the function.\n * @param fn - Function to check.\n * @returns `true` if `fn` is an `AsyncFunction`, otherwise `false`.\n * @example\n * ```ts\n * import { isAsyncFunction } from '@monochromatic-dev/module-es';\n *\n * async function myAsyncFn(): Promise<string> {\n *   return 'hello';\n * }\n *\n * function mySyncFn(): string {\n *   return 'world';\n * }\n *\n * if (isAsyncFunction(myAsyncFn)) {\n *   // myAsyncFn is inferred as (...inputs: any[]) => Promise<string>\n *   const result = await myAsyncFn();\n * }\n *\n * console.log(isAsyncFunction(mySyncFn)); // false\n * ```\n */",[166,1121],"/**\n * Type guard that checks if a function is an `AsyncFunction`.\n *\n * @remarks\n * This function uses the constructor name to determine if the function is asynchronous.\n * This may not be reliable in all JavaScript environments or with certain bundler configurations.\n * @template T_fnReturnUnwrapped - Return type of the unwrapped promise.\n * @template T_inputs - Input arguments for the function.\n * @param fn - Function to check.\n * @returns `true` if `fn` is an `AsyncFunction`, otherwise `false`.\n * @example\n * ```ts\n * import { isAsyncFunction } from '@monochromatic-dev/module-es';\n *\n * async function myAsyncFn(): Promise<string> {\n *   return 'hello';\n * }\n *\n * function mySyncFn(): string {\n *   return 'world';\n * }\n *\n * if (isAsyncFunction(myAsyncFn)) {\n *   // myAsyncFn is inferred as (...inputs: any[]) => Promise<string>\n *   const result = await myAsyncFn();\n * }\n *\n * console.log(isAsyncFunction(mySyncFn)); // false\n * ```\n */",[1402,2300],"/**\n * Type guard that checks if a function is a synchronous `Function`.\n * @remarks\n * This function uses the constructor name to determine if the function is synchronous.\n * This may not be reliable in all JavaScript environments.\n * @template T_fnReturnUnwrapped - Return type of the function.\n * @template T_inputs - Input arguments for the function.\n * @param fn - Function to check.\n * @returns `true` if `fn` is a synchronous `Function`, otherwise `false`.\n * @example\n * ```ts\n * import { isSyncFunction } from '@monochromatic-dev/module-es';\n *\n * async function myAsyncFn(): Promise<string> {\n *   return 'hello';\n * }\n *\n * function mySyncFn(): string {\n *   return 'world';\n * }\n *\n * if (isSyncFunction(mySyncFn)) {\n *   // mySyncFn is inferred as (...inputs: any[]) => string\n *   const result = mySyncFn();\n * }\n *\n * console.log(isSyncFunction(myAsyncFn)); // false\n * ```\n */",[1402,2300],"/**\n * Type guard that checks if a function is a synchronous `Function`.\n *\n * @remarks\n * This function uses the constructor name to determine if the function is synchronous.\n * This may not be reliable in all JavaScript environments.\n * @template T_fnReturnUnwrapped - Return type of the function.\n * @template T_inputs - Input arguments for the function.\n * @param fn - Function to check.\n * @returns `true` if `fn` is a synchronous `Function`, otherwise `false`.\n * @example\n * ```ts\n * import { isSyncFunction } from '@monochromatic-dev/module-es';\n *\n * async function myAsyncFn(): Promise<string> {\n *   return 'hello';\n * }\n *\n * function mySyncFn(): string {\n *   return 'world';\n * }\n *\n * if (isSyncFunction(mySyncFn)) {\n *   // mySyncFn is inferred as (...inputs: any[]) => string\n *   const result = mySyncFn();\n * }\n *\n * console.log(isSyncFunction(myAsyncFn)); // false\n * ```\n */",[2566,2882],"/**\n * A function that performs no operation.\n * Useful as a default value for callbacks.\n * @example\n * ```ts\n * import { emptyFunction } from '@monochromatic-dev/module-es';\n *\n * function doSomething(callback: () => void = emptyFunction) {\n *   callback();\n * }\n *\n * doSomething(); // Does nothing.\n * ```\n */",[2937,3345],"/**\n * An asynchronous function that performs no operation and resolves immediately.\n * Useful as a default value for async callbacks.\n * @example\n * ```ts\n * import { emptyFunctionAsync } from '@monochromatic-dev/module-es';\n *\n * async function doSomethingAsync(callback: () => Promise<void> = emptyFunctionAsync) {\n *   await callback();\n * }\n *\n * await doSomethingAsync(); // Does nothing.\n * ```\n */",[293,310],"isAsyncFunction",[406,406],[406,406],[542,542],[542,542],[720,720],[720,720],[913,913],[913,913],[993,1009],"isSyncFunction",[1097,1097],[1097,1097],[1272,1272],[1272,1272],[1417,1417],[1417,1417],[1600,1600],[1600,1600],[1996,1996],[1996,1996],[2137,2137],[2137,2137],[2457,2457],[2457,2457],[2611,2611],[2611,2611],[2689,2704],"emptyFunction",[2811,2811],[2811,2811],[3133,3195],[3320,3340],"emptyFunctionAsync",[3468,3468],[3468,3468],[3588,3588],[3588,3588],[3975,4037],[4154,4154],[4154,4154],[0,315],"/**\n * Performs a shallow equality check on two arrays of arguments.\n * @param args1 - First array of arguments to compare.\n * @param args2 - Second array of arguments to compare.\n * @returns `true` if arrays have the same length and their elements are strictly equal (`===`), `false` otherwise.\n * @internal\n */",[351,537],"arguments1: readonly unknown[],\n  args2: readonly unknown[],\n): boolean {\n  if (arguments1.length !== args2.length) {\n    return false;\n  }\n  for (let i = 0; i < arguments1.length; i++) {\n    if (arguments1",[380,550],"arguments2: readonly unknown[],\n): boolean {\n  if (args1.length !== arguments2.length) {\n    return false;\n  }\n  for (let i = 0; i < args1.length; i++) {\n    if (args1[i] !== arguments2",[488,540],"const [i, element] of args1.entries()) {\n    if (element",[492,552],"index = 0; index < args1.length; index++) {\n    if (args1[index] !== args2[index",[605,1654],"/**\n * Creates a memoized version of a function that caches its last result only.\n * @remarks\n * The cache is invalidated if the arguments of subsequent calls aren't shallowly equal to the arguments of the previous call.\n * This uses a strict equality check (`===`) on arguments.\n *\n * - Throws when the inner function throws.\n * - Supports both synchronous and asynchronous functions.\n * - The properties on the original function aren't preserved.\n * @param fn - Function to memoize.\n * @returns Memoized function.\n * @example\n * ```ts\n * let i = 0;\n * const fn = () => ++i;\n * const memoizedFn = memoize(fn);\n *\n * memoizedFn(); // 1\n * memoizedFn(); // 1\n * i = 10;\n * memoizedFn(); // 1, still cached, because args are the same (`[]`)\n *\n * const fnWithArgs = (a: number, b: string) => `${a} ${b} ${++i}`;\n * const memoizedFnWithArgs = memoize(fnWithArgs);\n * memoizedFnWithArgs(1, 'a'); // '1 a 11'\n * memoizedFnWithArgs(1, 'a'); // '1 a 11'\n * memoizedFnWithArgs(2, 'b'); // '2 b 12'\n * memoizedFnWithArgs(2, 'b'); // '2 b 12'\n * ```\n */",[605,1654],"/**\n * Creates a memoized version of a function that caches its last result only.\n *\n * @remarks\n * The cache is invalidated if the arguments of subsequent calls aren't shallowly equal to the arguments of the previous call.\n * This uses a strict equality check (`===`) on arguments.\n *\n * - Throws when the inner function throws.\n * - Supports both synchronous and asynchronous functions.\n * - The properties on the original function aren't preserved.\n * @param fn - Function to memoize.\n * @returns Memoized function.\n * @example\n * ```ts\n * let i = 0;\n * const fn = () => ++i;\n * const memoizedFn = memoize(fn);\n *\n * memoizedFn(); // 1\n * memoizedFn(); // 1\n * i = 10;\n * memoizedFn(); // 1, still cached, because args are the same (`[]`)\n *\n * const fnWithArgs = (a: number, b: string) => `${a} ${b} ${++i}`;\n * const memoizedFnWithArgs = memoize(fnWithArgs);\n * memoizedFnWithArgs(1, 'a'); // '1 a 11'\n * memoizedFnWithArgs(1, 'a'); // '1 a 11'\n * memoizedFnWithArgs(2, 'b'); // '2 b 12'\n * memoizedFnWithArgs(2, 'b'); // '2 b 12'\n * ```\n */",[1685,1929],"Arguments extends readonly unknown[], Result,>(\n  fn: (...args: Arguments) => Result,\n): (...args: Arguments) => Result {\n  let lastArgs: Arguments | undefined = undefined;\n  let lastResult: Result | undefined = undefined;\n\n  return function memoized(...args: Arguments",[1738,1742],[1768,1772],[1798,2097],"lastArguments: Args | undefined = undefined;\n  let lastResult: Result | undefined = undefined;\n\n  return function memoized(...args: Args): Result {\n    if (lastArguments && argsAlmostEqual(args, lastArguments)) {\n      return lastResult as Result;\n    }\n\n    const currentResult: Result = fn(...args);\n    lastArguments",[1919,2104],"arguments_: Args): Result {\n    if (lastArgs && argsAlmostEqual(arguments_, lastArgs)) {\n      return lastResult as Result;\n    }\n\n    const currentResult: Result = fn(...arguments_);\n    lastArgs = arguments_",[136,140],[249,272],"ArgumentType\n      ? ArgumentType",[316,1355],"/**\n * Transforms a function to accept exactly one parameter, ignoring any additional arguments.\n * Creates a unary function wrapper that only passes the first argument to the original function.\n * Useful for adapting functions with multiple parameters to contexts that provide only one argument.\n * @param fn - Function to transform into unary form\n * @returns New function that accepts only one parameter and ignores additional arguments\n * @example\n * ```ts\n * const add = (a: number, b: number) => a + b;\n * const unaryAdd = unary(add);\n *\n * // Only first argument is used, second is ignored\n * const result = unaryAdd(5, 10); // Returns NaN (5 + undefined)\n * const singleResult = unaryAdd(5); // Returns NaN (5 + undefined)\n * ```\n * @example\n * ```ts\n * // Useful with array methods that pass multiple arguments\n * const numbers = ['1', '2', '3'];\n * const parseIntUnary = unary(parseInt);\n * const parsed = numbers.map(parseIntUnary); // [1, 2, 3]\n * // Without unary: numbers.map(parseInt) would pass index as radix\n * ```\n */",[1401,1405],[1469,1475],"parameter1",[1542,1587],"parameter1): ReturnType<T> {\n    return fn(parameter1",[1598,2772],"/**\n * Transforms a function to accept exactly two parameters, ignoring any additional arguments.\n * Creates a binary function wrapper that only passes the first two arguments to the original function.\n * Useful for adapting functions with multiple parameters to contexts that provide exactly two arguments.\n * @param fn - Function to transform into binary form\n * @returns New function that accepts only two parameters and ignores additional arguments\n * @example\n * ```ts\n * const sum = (a: number, b: number, c: number) => a + b + c;\n * const binarySum = binary(sum);\n *\n * // Only first two arguments are used, third is ignored\n * const result = binarySum(1, 2, 3); // Returns NaN (1 + 2 + undefined)\n * const twoArgs = binarySum(1, 2); // Returns NaN (1 + 2 + undefined)\n * ```\n * @example\n * ```ts\n * // Useful for callback functions that receive extra arguments\n * const multiply = (x: number, y: number, extra?: any) => x * y;\n * const binaryMultiply = binary(multiply);\n *\n * // Safe to use in contexts that pass additional arguments\n * const pairs = [[1, 2], [3, 4], [5, 6]];\n * const results = pairs.map(([a, b]) => binaryMultiply(a, b, 'ignored'));\n * ```\n */",[2819,2823],[2887,2893],[2913,2919],"parameter2",[2987,3040],"parameter1, param2): ReturnType<T> {\n    return fn(parameter1",[2995,3048],"parameter2): ReturnType<T> {\n    return fn(param1, parameter2",[3059,4396],"/**\n * Transforms a function to accept exactly three parameters, ignoring any additional arguments.\n * Creates a ternary function wrapper that only passes the first three arguments to the original function.\n * Useful for adapting functions with multiple parameters to contexts that provide exactly three arguments.\n * @param fn - Function to transform into ternary form\n * @returns New function that accepts only three parameters and ignores additional arguments\n * @example\n * ```ts\n * const calculate = (a: number, b: number, c: number, d: number) => a + b + c + d;\n * const ternaryCalculate = ternary(calculate);\n *\n * // Only first three arguments are used, fourth is ignored\n * const result = ternaryCalculate(1, 2, 3, 4); // Returns NaN (1 + 2 + 3 + undefined)\n * const threeArgs = ternaryCalculate(1, 2, 3); // Returns NaN (1 + 2 + 3 + undefined)\n * ```\n * @example\n * ```ts\n * // Useful for array reduce callbacks that receive extra arguments\n * const combineThree = (acc: string, curr: string, sep: string, extra?: any) =>\n *   acc + sep + curr;\n * const ternaryCombine = ternary(combineThree);\n *\n * // Safe to use with array methods that pass additional arguments\n * const words = ['hello', 'world', 'test'];\n * const combined = words.reduce((acc, curr, index) =>\n *   ternaryCombine(acc, curr, '-', index), '');\n * ```\n */",[4445,4449],[4513,4519],[4539,4545],[4567,4573],"parameter3",[4642,4703],"parameter1, param2, param3): ReturnType<T> {\n    return fn(parameter1",[4650,4711],"parameter2, param3): ReturnType<T> {\n    return fn(param1, parameter2",[4658,4719],"parameter3): ReturnType<T> {\n    return fn(param1, param2, parameter3",[243,250],"unary",[1547,1555],"binary",[2911,2920],"ternary",[4793,4793],[4793,4793],[4917,4917],[4917,4917],[5233,5233],[5233,5233],[5712,5712],[5712,5712],[5850,5850],[5850,5850],[6191,6191],[6191,6191],[7099,7099],[7099,7099],[7247,7247],[7247,7247],[7631,7631],[7631,7631],[224,1224],"/**\n * Creates a function that invokes `fn` with one or more `presetInputs`\n * prepended to the arguments it receives. This is known as\n * [partial application](https://en.wikipedia.org/wiki/Partial_application).\n *\n * This function is like `curry`, but it doesn't support placeholders and is\n * not auto-curried.\n * @param fn - function to partially apply arguments to.\n * @param presetInput0 - first argument to prepend to `fn`'s invocation.\n * @returns new partially applied function.\n * @example\n * ```ts\n * import { partial } from '@monochromatic-dev/module-es';\n *\n * const greet = (greeting: string, name: string) => `${greeting}, ${name}!`;\n *\n * const sayHelloTo = partial(greet, 'Hello');\n * console.log(sayHelloTo('Fred'));\n * // => 'Hello, Fred!'\n * ```\n * @example\n * ```ts\n * import { partial } from '@monochromatic-dev/module-es';\n *\n * const add = (a: number, b: number, c: number) => a + b + c;\n *\n * const add5 = partial(add, 2, 3);\n * console.log(add5(4));\n * // => 9\n * ```\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[4959,4975],"/**\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @param fn\n * @param presetInput0\n * @param presetInput1\n * @param presetInput2\n * @param presetInput3\n * @param presetInput4\n * @param presetInput5\n * @param presetInput6\n * @param presetInput7\n * @param presetInput8\n * @param presetInput9\n * @internal\n */",[385,385],[385,385],[573,573],[573,573],[651,651],[651,651],[864,864],[864,864],[951,951],[951,951],[1051,1051],[1051,1051],[1305,1305],[1305,1305],[1598,1598],[1598,1598],[1914,1914],[1914,1914],[2017,2017],[2017,2017],[2375,2375],[2375,2375],[2614,2614],[2614,2614],[2892,2892],[2892,2892],[2984,2984],[2984,2984],[3486,3486],[3486,3486],[3803,3803],[3803,3803],[3935,3935],[3935,3935],[267,701],"/**\n * Pipes an input value through a sequence of async functions.\n * Each function receives the output of the previous function as input.\n * All functions are awaited, making this suitable for mixed sync/async pipelines.\n * @param input - Initial value to pipe through functions\n * @returns Promise resolving to the input value when no functions provided\n * @example\n * ```ts\n * const result = await pipedAsync(5); // 5\n * ```\n */",[773,1064],"/**\n * Pipes an input value through one async function.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @returns Result after applying fn1\n * @example\n * ```ts\n * const result = await pipedAsync(5, async (x) => x * 2); // 10\n * ```\n */",[1183,1545],"/**\n * Pipes an input value through two async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @returns Result after applying fn1 then fn2\n * @example\n * ```ts\n * const result = await pipedAsync(5, async (x) => x * 2, async (x) => x + 1); // 11\n * ```\n */",[1710,2149],"/**\n * Pipes an input value through three async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @returns Result after applying fn1, fn2, then fn3\n * @example\n * ```ts\n * const result = await pipedAsync(5, async (x) => x * 2, async (x) => x + 1, async (x) => x.toString()); // \"11\"\n * ```\n */",[2360,2709],"/**\n * Pipes an input value through four async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @returns Result after applying all four functions in sequence\n */",[2966,3355],"/**\n * Pipes an input value through five async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @returns Result after applying all five functions in sequence\n */",[3658,4085],"/**\n * Pipes an input value through six async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @returns Result after applying all six functions in sequence\n */",[4434,4907],"/**\n * Pipes an input value through seven async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @param fn7 - Seventh function to apply\n * @returns Result after applying all seven functions in sequence\n */",[5302,5816],"/**\n * Pipes an input value through eight async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @param fn7 - Seventh function to apply\n * @param fn8 - Eighth function to apply\n * @returns Result after applying all eight functions in sequence\n */",[6257,6809],"/**\n * Pipes an input value through nine async functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @param fn7 - Seventh function to apply\n * @param fn8 - Eighth function to apply\n * @param fn9 - Ninth function to apply\n * @returns Result after applying all nine functions in sequence\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[7352,7408],"/**\n * Implementation for `pipedAsync`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[8844,9256],"/**\n * Pipes an input value through a sequence of synchronous functions.\n * Each function receives the output of the previous function as input.\n * All functions are executed synchronously, making this suitable for pure sync pipelines.\n * @param input - Initial value to pipe through functions\n * @returns Input value when no functions provided\n * @example\n * ```ts\n * const result = piped(5); // 5\n * ```\n */",[9308,9588],"/**\n * Pipes an input value through one synchronous function.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @returns Result after applying fn1\n * @example\n * ```ts\n * const result = piped(5, (x) => x * 2); // 10\n * ```\n */",[9674,10019],"/**\n * Pipes an input value through two synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @returns Result after applying fn1 then fn2\n * @example\n * ```ts\n * const result = piped(5, (x) => x * 2, (x) => x + 1); // 11\n * ```\n */",[10139,10555],"/**\n * Pipes an input value through three synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @returns Result after applying fn1, fn2, then fn3\n * @example\n * ```ts\n * const result = piped(5, (x) => x * 2, (x) => x + 1, (x) => x.toString()); // \"11\"\n * ```\n */",[10709,11064],"/**\n * Pipes an input value through four synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @returns Result after applying all four functions in sequence\n */",[11252,11647],"/**\n * Pipes an input value through five synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @returns Result after applying all five functions in sequence\n */",[11869,12302],"/**\n * Pipes an input value through six synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @returns Result after applying all six functions in sequence\n */",[12558,13037],"/**\n * Pipes an input value through seven synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @param fn7 - Seventh function to apply\n * @returns Result after applying all seven functions in sequence\n */",[13327,13847],"/**\n * Pipes an input value through eight synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @param fn7 - Seventh function to apply\n * @param fn8 - Eighth function to apply\n * @returns Result after applying all eight functions in sequence\n */",[14171,14729],"/**\n * Pipes an input value through nine synchronous functions.\n * @param input - Initial value to pipe through functions\n * @param fn1 - First function to apply\n * @param fn2 - Second function to apply\n * @param fn3 - Third function to apply\n * @param fn4 - Fourth function to apply\n * @param fn5 - Fifth function to apply\n * @param fn6 - Sixth function to apply\n * @param fn7 - Seventh function to apply\n * @param fn8 - Eighth function to apply\n * @param fn9 - Ninth function to apply\n * @returns Result after applying all nine functions in sequence\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[15087,15138],"/**\n * Implementation for `piped`.\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param input\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[27256,27610],"/**\n * Creates a function that composes a single async function.\n * Returns the original function unchanged for single function composition.\n * @param fn0 - Function to compose\n * @returns Composed function that applies fn0\n * @example\n * ```ts\n * const composed = pipeAsync((x: number) => x * 2);\n * const result = await composed(5); // 10\n * ```\n */",[27733,28199],"/**\n * Creates a function that composes two async functions.\n * The result of fn0 is passed to fn1, supporting mixed sync/async functions.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @returns Composed function that applies fn0 then fn1\n * @example\n * ```ts\n * const composed = pipeAsync(\n *   (x: number) => x * 2,\n *   async (x: number) => x + 1\n * );\n * const result = await composed(5); // 11\n * ```\n */",[28394,28955],"/**\n * Creates a function that composes three async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @returns Composed function that applies fn0, fn1, then fn2\n * @example\n * ```ts\n * const composed = pipeAsync(\n *   (x: number) => x * 2,\n *   async (x: number) => x + 1,\n *   (x: number) => x.toString()\n * );\n * const result = await composed(5); // \"11\"\n * ```\n */",[29196,29623],"/**\n * Creates a function that composes four async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @returns Composed function that applies all four functions in sequence\n */",[29910,30394],"/**\n * Creates a function that composes five async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @returns Composed function that applies all five functions in sequence\n */",[30727,31266],"/**\n * Creates a function that composes six async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @returns Composed function that applies all six functions in sequence\n */",[31645,32247],"/**\n * Creates a function that composes seven async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @returns Composed function that applies all seven functions in sequence\n */",[32672,33332],"/**\n * Creates a function that composes eight async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @param fn7 - Eighth function to apply to result of fn6\n * @returns Composed function that applies all eight functions in sequence\n */",[33805,34520],"/**\n * Creates a function that composes nine async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @param fn7 - Eighth function to apply to result of fn6\n * @param fn8 - Ninth function to apply to result of fn7\n * @returns Composed function that applies all nine functions in sequence\n */",[35039,35809],"/**\n * Creates a function that composes ten async functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @param fn7 - Eighth function to apply to result of fn6\n * @param fn8 - Ninth function to apply to result of fn7\n * @param fn9 - Tenth function to apply to result of fn8\n * @returns Composed function that applies all ten functions in sequence\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[36374,36429],"/**\n * Implementation for `pipeAsync`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[37135,37190],[37135,37190],[37135,37190],[37135,37190],[37135,37190],[37135,37190],[37135,37190],[37135,37190],[37135,37190],[37135,37190],[44180,44517],"/**\n * Creates a function that composes a single function.\n * Returns the original function unchanged for single function composition.\n * @param fn0 - Function to compose\n * @returns Composed function that applies fn0\n * @example\n * ```ts\n * const composed = pipe((x: number) => x * 2);\n * const result = composed(5); // 10\n * ```\n */",[44640,45069],"/**\n * Creates a function that composes two functions.\n * The result of fn0 is passed to fn1, executing synchronously.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @returns Composed function that applies fn0 then fn1\n * @example\n * ```ts\n * const composed = pipe(\n *   (x: number) => x * 2,\n *   (x: number) => x + 1\n * );\n * const result = composed(5); // 11\n * ```\n */",[45226,45764],"/**\n * Creates a function that composes three functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @returns Composed function that applies fn0, fn1, then fn2\n * @example\n * ```ts\n * const composed = pipe(\n *   (x: number) => x * 2,\n *   (x: number) => x + 1,\n *   (x: number) => x.toString()\n * );\n * const result = composed(5); // \"11\"\n * ```\n */",[45955,46376],"/**\n * Creates a function that composes four functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @returns Composed function that applies all four functions in sequence\n */",[46601,47079],"/**\n * Creates a function that composes five functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @returns Composed function that applies all five functions in sequence\n */",[47338,47871],"/**\n * Creates a function that composes six functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @returns Composed function that applies all six functions in sequence\n */",[48164,48760],"/**\n * Creates a function that composes seven functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @returns Composed function that applies all seven functions in sequence\n */",[49087,49741],"/**\n * Creates a function that composes eight functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @param fn7 - Eighth function to apply to result of fn6\n * @returns Composed function that applies all eight functions in sequence\n */",[50102,50811],"/**\n * Creates a function that composes nine functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @param fn7 - Eighth function to apply to result of fn6\n * @param fn8 - Ninth function to apply to result of fn7\n * @returns Composed function that applies all nine functions in sequence\n */",[51208,51972],"/**\n * Creates a function that composes ten functions.\n * Each function receives the output of the previous function as input.\n * @param fn0 - First function to apply\n * @param fn1 - Second function to apply to result of fn0\n * @param fn2 - Third function to apply to result of fn1\n * @param fn3 - Fourth function to apply to result of fn2\n * @param fn4 - Fifth function to apply to result of fn3\n * @param fn5 - Sixth function to apply to result of fn4\n * @param fn6 - Seventh function to apply to result of fn5\n * @param fn7 - Eighth function to apply to result of fn6\n * @param fn8 - Ninth function to apply to result of fn7\n * @param fn9 - Tenth function to apply to result of fn8\n * @returns Composed function that applies all ten functions in sequence\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[52403,52453],"/**\n * Implementation for `pipe`.\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @param fn0\n * @param fn1\n * @param fn2\n * @param fn3\n * @param fn4\n * @param fn5\n * @param fn6\n * @param fn7\n * @param fn8\n * @param fn9\n * @internal\n */",[261,268],"piped",[489,489],[489,489],[1643,1655],"pipedAsync",[1927,1927],[1927,1927],[3209,3220],"pipeAsync",[3389,3389],[3389,3389],[3695,3695],[3695,3695],[4003,4003],[4003,4003],[4049,4049],[4049,4049],[4090,4090],[4090,4090],[4386,4386],[4386,4386],[4432,4432],[4432,4432],[4473,4473],[4473,4473],[4749,4749],[4749,4749],[5089,5089],[5089,5089],[5159,5165],"pipe",[5323,5323],[5323,5323],[5637,5637],[5637,5637],[5956,5956],[5956,5956],[6302,6302],[6302,6302],[0,1170],"/**\n * Creates a thunked version of a function that preserves its signature and behavior.\n *\n * This utility wraps a function in a named wrapper function called 'thunked', maintaining\n * the exact same signature and return type as the original function. The wrapper provides\n * a consistent execution context and can be useful for debugging, function identification,\n * or creating named function references from anonymous functions.\n * @param fn - Function to wrap with thunk behavior\n * @returns Wrapped function with identical signature that delegates to original function\n * @example\n * Basic function wrapping:\n * ```ts\n * const add = (a: number, b: number) => a + b;\n * const thunkedAdd = thunk(add);\n * console.log(thunkedAdd(2, 3)); // 5\n * ```\n *\n * @example\n * Creating named function references:\n * ```ts\n * const calculate = thunk((x: number) => x * 2 + 1);\n * console.log(calculate.name); // 'thunked'\n * console.log(calculate(5)); // 11\n * ```\n *\n * @example\n * Wrapping async functions:\n * ```ts\n * const fetchData = async (id: string) => `data-${id}`;\n * const thunkedFetch = thunk(fetchData);\n * await thunkedFetch('123'); // 'data-123'\n * ```\n */",[0,1170],"/**\n * Creates a thunked version of a function that preserves its signature and behavior.\n *\n * This utility wraps a function in a named wrapper function called 'thunked', maintaining\n * the exact same signature and return type as the original function. The wrapper provides\n * a consistent execution context and can be useful for debugging, function identification,\n * or creating named function references from anonymous functions.\n *\n * @param fn - Function to wrap with thunk behavior\n * @returns Wrapped function with identical signature that delegates to original function\n * @example\n * Basic function wrapping:\n * ```ts\n * const add = (a: number, b: number) => a + b;\n * const thunkedAdd = thunk(add);\n * console.log(thunkedAdd(2, 3)); // 5\n * ```\n *\n * @example\n * Creating named function references:\n * ```ts\n * const calculate = thunk((x: number) => x * 2 + 1);\n * console.log(calculate.name); // 'thunked'\n * console.log(calculate(5)); // 11\n * ```\n *\n * @example\n * Wrapping async functions:\n * ```ts\n * const fetchData = async (id: string) => `data-${id}`;\n * const thunkedFetch = thunk(fetchData);\n * await thunkedFetch('123'); // 'data-123'\n * ```\n */",[1193,1318],"Arguments extends unknown[], T,>(\n  fn: (...args: Arguments) => T,\n): (...args: Arguments) => T => {\n  return function thunked(...args: Arguments",[1232,1236],[1257,1261],[1308,1346],"arguments_: Args): T {\n    return fn(...arguments_",[232,239],"thunk",[538,538],[538,538],[1035,1035],[1035,1035],[2191,2191],[2191,2191],[46,46],[306,306],[282,282],[282,282],[1675,1675],[1675,1675],[426,3102],"/**\n * Asynchronously retrieves element at specified index from an async iterable, supporting negative indexing.\n * This is the async equivalent of Array.prototype.at(), working with both sync and async iterables.\n * Negative integers count back from the last item in the iterable, with -1 being the last element.\n *\n * For performance optimization with arrays, uses native Array.prototype.at() when possible.\n * For other iterables, collects all elements first to enable negative indexing support.\n * @param index - Zero-based index position, supports negative values for reverse indexing\n * @param iterable - Async iterable to retrieve element from\n * @returns Element at specified index, or undefined if index is out of bounds\n * @remarks\n * **Data last parameter order**: Index comes first, then iterable for better currying support.\n * **Spec compliance**: Returns undefined for out-of-range indices instead of throwing errors.\n * **Type inference**: For arrays ≤ 22 elements, infers specific element types. For larger arrays,\n * falls back to union of all array values with undefined.\n * **Performance**: Uses native Array.at() for arrays, iterates once for other iterables.\n *\n * Original method: {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at}\n *\n * @example\n * ```ts\n * // Basic usage with arrays\n * const numbers = [10, 20, 30, 40];\n * const first = await atIterableAsync(0, numbers); // 10\n * const last = await atIterableAsync(-1, numbers); // 40\n * const outOfBounds = await atIterableAsync(10, numbers); // undefined\n *\n * // With async iterables\n * async function* asyncNumbers() {\n *   yield 1; yield 2; yield 3; yield 4;\n * }\n * const second = await atIterableAsync(1, asyncNumbers()); // 2\n * const lastAsync = await atIterableAsync(-1, asyncNumbers()); // 4\n *\n * // Negative indexing examples\n * const letters = ['a', 'b', 'c', 'd', 'e'];\n * const secondLast = await atIterableAsync(-2, letters); // 'd'\n * const thirdLast = await atIterableAsync(-3, letters); // 'c'\n *\n * // Out of bounds behavior\n * const small = [1, 2];\n * const tooHigh = await atIterableAsync(5, small); // undefined\n * const tooLow = await atIterableAsync(-5, small); // undefined\n *\n * // With Set (converted to array internally)\n * const uniqueNumbers = new Set([100, 200, 300]);\n * const firstUnique = await atIterableAsync(0, uniqueNumbers); // 100\n * const lastUnique = await atIterableAsync(-1, uniqueNumbers); // 300\n *\n * // Type safety with known-length tuples\n * const tuple: [string, number, boolean] = ['hello', 42, true];\n * const middle: number = await atIterableAsync(1, tuple); // 42, type is number\n * ```\n */",[426,3102],"/**\n * Asynchronously retrieves element at specified index from an async iterable, supporting negative indexing.\n * This is the async equivalent of Array.prototype.at(), working with both sync and async iterables.\n * Negative integers count back from the last item in the iterable, with -1 being the last element.\n *\n * For performance optimization with arrays, uses native Array.prototype.at() when possible.\n * For other iterables, collects all elements first to enable negative indexing support.\n *\n * @param index - Zero-based index position, supports negative values for reverse indexing\n * @param iterable - Async iterable to retrieve element from\n * @returns Element at specified index, or undefined if index is out of bounds\n * @remarks\n * **Data last parameter order**: Index comes first, then iterable for better currying support.\n * **Spec compliance**: Returns undefined for out-of-range indices instead of throwing errors.\n * **Type inference**: For arrays ≤ 22 elements, infers specific element types. For larger arrays,\n * falls back to union of all array values with undefined.\n * **Performance**: Uses native Array.at() for arrays, iterates once for other iterables.\n *\n * Original method: {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at}\n *\n * @example\n * ```ts\n * // Basic usage with arrays\n * const numbers = [10, 20, 30, 40];\n * const first = await atIterableAsync(0, numbers); // 10\n * const last = await atIterableAsync(-1, numbers); // 40\n * const outOfBounds = await atIterableAsync(10, numbers); // undefined\n *\n * // With async iterables\n * async function* asyncNumbers() {\n *   yield 1; yield 2; yield 3; yield 4;\n * }\n * const second = await atIterableAsync(1, asyncNumbers()); // 2\n * const lastAsync = await atIterableAsync(-1, asyncNumbers()); // 4\n *\n * // Negative indexing examples\n * const letters = ['a', 'b', 'c', 'd', 'e'];\n * const secondLast = await atIterableAsync(-2, letters); // 'd'\n * const thirdLast = await atIterableAsync(-3, letters); // 'c'\n *\n * // Out of bounds behavior\n * const small = [1, 2];\n * const tooHigh = await atIterableAsync(5, small); // undefined\n * const tooLow = await atIterableAsync(-5, small); // undefined\n *\n * // With Set (converted to array internally)\n * const uniqueNumbers = new Set([100, 200, 300]);\n * const firstUnique = await atIterableAsync(0, uniqueNumbers); // 100\n * const lastUnique = await atIterableAsync(-1, uniqueNumbers); // 300\n *\n * // Type safety with known-length tuples\n * const tuple: [string, number, boolean] = ['hello', 42, true];\n * const middle: number = await atIterableAsync(1, tuple); // 42, type is number\n * ```\n */",[4229,4229],[5146,7558],"/**\n * Synchronously retrieves element at specified index from an iterable, supporting negative indexing.\n * This is a functional programming equivalent of Array.prototype.at() that works with any iterable.\n * Negative integers count back from the last item in the iterable, with -1 being the last element.\n *\n * For performance optimization with arrays, uses native Array.prototype.at() when possible.\n * For other iterables, collects all elements first to enable negative indexing support.\n * @param index - Zero-based index position, supports negative values for reverse indexing\n * @param iterable - Iterable to retrieve element from\n * @returns Element at specified index, or undefined if index is out of bounds\n * @remarks\n * **Data last parameter order**: Index comes first, then iterable for better currying support.\n * **Spec compliance**: Returns undefined for out-of-range indices instead of throwing errors.\n * **Type inference**: For arrays with known length, provides precise type inference for valid indices.\n * **Performance**: Uses native Array.at() for arrays, single iteration for other iterables.\n *\n * {@inheritDoc atIterableAsync}\n *\n * @example\n * ```ts\n * // Basic usage with arrays\n * const numbers = [10, 20, 30, 40];\n * const first = atIterable(0, numbers); // 10\n * const last = atIterable(-1, numbers); // 40\n * const outOfBounds = atIterable(10, numbers); // undefined\n *\n * // With other iterables\n * const letters = new Set(['a', 'b', 'c', 'd']);\n * const second = atIterable(1, letters); // 'b'\n * const lastLetter = atIterable(-1, letters); // 'd'\n *\n * // String iterable\n * const word = 'hello';\n * const firstChar = atIterable(0, word); // 'h'\n * const lastChar = atIterable(-1, word); // 'o'\n *\n * // Map entries\n * const map = new Map([['key1', 'value1'], ['key2', 'value2']]);\n * const firstEntry = atIterable(0, map); // ['key1', 'value1']\n * const lastEntry = atIterable(-1, map); // ['key2', 'value2']\n *\n * // Negative indexing with various types\n * const mixed = [1, 'two', { three: 3 }, [4, 5]];\n * const secondLast = atIterable(-2, mixed); // { three: 3 }\n * const thirdLast = atIterable(-3, mixed); // 'two'\n *\n * // Type safety with tuples\n * const tuple: [string, number, boolean] = ['hello', 42, true];\n * const middle: number = atIterable(1, tuple); // 42, type is number\n * const end: boolean = atIterable(-1, tuple); // true, type is boolean\n * ```\n */",[5146,7558],"/**\n * Synchronously retrieves element at specified index from an iterable, supporting negative indexing.\n * This is a functional programming equivalent of Array.prototype.at() that works with any iterable.\n * Negative integers count back from the last item in the iterable, with -1 being the last element.\n *\n * For performance optimization with arrays, uses native Array.prototype.at() when possible.\n * For other iterables, collects all elements first to enable negative indexing support.\n *\n * @param index - Zero-based index position, supports negative values for reverse indexing\n * @param iterable - Iterable to retrieve element from\n * @returns Element at specified index, or undefined if index is out of bounds\n * @remarks\n * **Data last parameter order**: Index comes first, then iterable for better currying support.\n * **Spec compliance**: Returns undefined for out-of-range indices instead of throwing errors.\n * **Type inference**: For arrays with known length, provides precise type inference for valid indices.\n * **Performance**: Uses native Array.at() for arrays, single iteration for other iterables.\n *\n * {@inheritDoc atIterableAsync}\n *\n * @example\n * ```ts\n * // Basic usage with arrays\n * const numbers = [10, 20, 30, 40];\n * const first = atIterable(0, numbers); // 10\n * const last = atIterable(-1, numbers); // 40\n * const outOfBounds = atIterable(10, numbers); // undefined\n *\n * // With other iterables\n * const letters = new Set(['a', 'b', 'c', 'd']);\n * const second = atIterable(1, letters); // 'b'\n * const lastLetter = atIterable(-1, letters); // 'd'\n *\n * // String iterable\n * const word = 'hello';\n * const firstChar = atIterable(0, word); // 'h'\n * const lastChar = atIterable(-1, word); // 'o'\n *\n * // Map entries\n * const map = new Map([['key1', 'value1'], ['key2', 'value2']]);\n * const firstEntry = atIterable(0, map); // ['key1', 'value1']\n * const lastEntry = atIterable(-1, map); // ['key2', 'value2']\n *\n * // Negative indexing with various types\n * const mixed = [1, 'two', { three: 3 }, [4, 5]];\n * const secondLast = atIterable(-2, mixed); // { three: 3 }\n * const thirdLast = atIterable(-3, mixed); // 'two'\n *\n * // Type safety with tuples\n * const tuple: [string, number, boolean] = ['hello', 42, true];\n * const middle: number = atIterable(1, tuple); // 42, type is number\n * const end: boolean = atIterable(-1, tuple); // true, type is boolean\n * ```\n */",[8393,8393],{"kind":"10413","justification":"10414"},{"kind":"10413","justification":"10414"},{"kind":"10413","justification":"10414"},{"kind":"10413","justification":"10414"},[9042,9088],"",{"kind":"10413","justification":"10415"},[370,370],[370,370],[608,608],[608,608],[859,859],[859,859],[1082,1082],[1082,1082],[1266,1266],[1266,1266],[1463,1463],[1463,1463],[1747,1747],[1747,1747],[1923,1923],[1923,1923],[2601,2601],[2601,2601],[2869,2869],[2869,2869],[3143,3143],[3143,3143],[3353,3353],[3353,3353],[4052,4052],[4052,4052],[4882,4882],[4882,4882],[404,2621],"/**\n * Splits an array into chunks of specified size, yielding them one by one as a generator.\n * This is a memory-efficient way to process large arrays in smaller, manageable pieces.\n * Each chunk is returned as a tuple with precise type information when chunk size ≤ 10.\n * @param array - Non-empty readonly array to split into chunks\n * @param n - Chunk size, must be positive integer ≤ array length\n * @returns Generator yielding chunks as tuples of specified size\n * @throws {RangeError} When array is empty\n * @throws {RangeError} When chunk size is negative, zero, or exceeds array length\n *\n * @remarks\n * **Memory efficiency**: Generates chunks lazily, processing only what's needed.\n * **Type safety**: Returns precise tuple types for chunk sizes ≤ 10, regular arrays otherwise.\n * **Immutability**: Input array is readonly and won't be modified during processing.\n * **Performance**: Uses array slicing for optimal chunk creation.\n *\n * Original implementation from {@link https://stackoverflow.com/a/55435856}\n * by {@link https://stackoverflow.com/users/10328101/ikechukwu-eze} with CC BY-SA 4.0\n *\n * @example\n * ```ts\n * // Basic chunking\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8] as const;\n * const chunks = chunksArray(numbers, 3);\n *\n * for (const chunk of chunks) {\n *   console.log(chunk); // [1, 2, 3], [4, 5, 6], [7, 8]\n * }\n *\n * // Convert to array\n * const allChunks = [...chunksArray(numbers, 2)];\n * // [[1, 2], [3, 4], [5, 6], [7, 8]]\n *\n * // Type-safe tuple chunks (n ≤ 10)\n * const letters = ['a', 'b', 'c', 'd', 'e', 'f'] as const;\n * const pairs = chunksArray(letters, 2);\n * // Each chunk has type: [string, string] | [string]\n *\n * // Processing in batches\n * const data = Array.from({ length: 1000 }, (_, i) => i);\n * for (const batch of chunksArray(data, 100)) {\n *   // Process 100 items at a time\n *   console.log(`Processing batch of ${batch.length} items`);\n * }\n *\n * // Error cases\n * try {\n *   chunksArray([], 2); // RangeError: array is empty\n * } catch (error) {\n *   console.error(error.message);\n * }\n *\n * try {\n *   chunksArray([1, 2], 5); // RangeError: chunk size exceeds array length\n * } catch (error) {\n *   console.error(error.message);\n * }\n * ```\n */",[404,2621],"/**\n * Splits an array into chunks of specified size, yielding them one by one as a generator.\n * This is a memory-efficient way to process large arrays in smaller, manageable pieces.\n * Each chunk is returned as a tuple with precise type information when chunk size ≤ 10.\n *\n * @param array - Non-empty readonly array to split into chunks\n * @param n - Chunk size, must be positive integer ≤ array length\n * @returns Generator yielding chunks as tuples of specified size\n * @throws {RangeError} When array is empty\n * @throws {RangeError} When chunk size is negative, zero, or exceeds array length\n *\n * @remarks\n * **Memory efficiency**: Generates chunks lazily, processing only what's needed.\n * **Type safety**: Returns precise tuple types for chunk sizes ≤ 10, regular arrays otherwise.\n * **Immutability**: Input array is readonly and won't be modified during processing.\n * **Performance**: Uses array slicing for optimal chunk creation.\n *\n * Original implementation from {@link https://stackoverflow.com/a/55435856}\n * by {@link https://stackoverflow.com/users/10328101/ikechukwu-eze} with CC BY-SA 4.0\n *\n * @example\n * ```ts\n * // Basic chunking\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8] as const;\n * const chunks = chunksArray(numbers, 3);\n *\n * for (const chunk of chunks) {\n *   console.log(chunk); // [1, 2, 3], [4, 5, 6], [7, 8]\n * }\n *\n * // Convert to array\n * const allChunks = [...chunksArray(numbers, 2)];\n * // [[1, 2], [3, 4], [5, 6], [7, 8]]\n *\n * // Type-safe tuple chunks (n ≤ 10)\n * const letters = ['a', 'b', 'c', 'd', 'e', 'f'] as const;\n * const pairs = chunksArray(letters, 2);\n * // Each chunk has type: [string, string] | [string]\n *\n * // Processing in batches\n * const data = Array.from({ length: 1000 }, (_, i) => i);\n * for (const batch of chunksArray(data, 100)) {\n *   // Process 100 items at a time\n *   console.log(`Processing batch of ${batch.length} items`);\n * }\n *\n * // Error cases\n * try {\n *   chunksArray([], 2); // RangeError: array is empty\n * } catch (error) {\n *   console.error(error.message);\n * }\n *\n * try {\n *   chunksArray([1, 2], 5); // RangeError: chunk size exceeds array length\n * } catch (error) {\n *   console.error(error.message);\n * }\n * ```\n */",[2650,2650],[3257,3318],"index = 0; index < array.length; index += n) {\n    yield array.slice(index, index",[3427,6005],"/**\n * Splits an iterable into chunks of specified size, yielding them one by one as a generator.\n * This provides memory-efficient processing of any iterable sequence, including infinite iterables.\n * Unlike array chunking, this works with any iterable and doesn't require knowing the total length.\n * @param arrayLike - Iterable sequence to split into chunks\n * @param n - Chunk size, must be positive integer\n * @returns Generator yielding arrays of elements with specified chunk size\n * @throws {RangeError} When iterable is empty\n * @throws {RangeError} When chunk size is negative, zero, or exceeds iterable length (for sized iterables)\n *\n * @remarks\n * **Memory efficiency**: Processes iterables lazily without loading entire sequence into memory.\n * **Infinite iterables**: Works with infinite sequences, yielding chunks as needed.\n * **Type preservation**: Maintains element types from the original iterable.\n * **Flexible input**: Accepts any iterable (arrays, sets, maps, generators, etc.).\n * **Performance note**: Currently converts iterable to array internally - future versions will be fully lazy.\n *\n * @example\n * ```ts\n * // Basic iterable chunking\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8];\n * const chunks = chunksIterable(numbers, 3);\n *\n * for (const chunk of chunks) {\n *   console.log(chunk); // [1, 2, 3], [4, 5, 6], [7, 8]\n * }\n *\n * // Working with Sets\n * const uniqueValues = new Set(['a', 'b', 'c', 'd', 'e']);\n * const setChunks = [...chunksIterable(uniqueValues, 2)];\n * // [['a', 'b'], ['c', 'd'], ['e']]\n *\n * // Processing Map entries\n * const map = new Map([['x', 1], ['y', 2], ['z', 3], ['w', 4]]);\n * for (const chunk of chunksIterable(map, 2)) {\n *   console.log(chunk); // [['x', 1], ['y', 2]], [['z', 3], ['w', 4]]\n * }\n *\n * // Working with generators\n * function* fibonacci() {\n *   let a = 0, b = 1;\n *   while (true) {\n *     yield a;\n *     [a, b] = [b, a + b];\n *   }\n * }\n *\n * const fibChunks = chunksIterable(fibonacci(), 5);\n * const firstChunk = fibChunks.next().value;\n * // [0, 1, 1, 2, 3]\n *\n * // String chunking (strings are iterable)\n * const text = \"Hello World\";\n * const charChunks = [...chunksIterable(text, 3)];\n * // [['H', 'e', 'l'], ['l', 'o', ' '], ['W', 'o', 'r'], ['l', 'd']]\n *\n * // Error cases\n * try {\n *   chunksIterable([], 0); // RangeError: chunk size must be positive\n * } catch (error) {\n *   console.error(error.message);\n * }\n *\n * try {\n *   chunksIterable([1, 2, 3], -1); // RangeError: chunk size must be positive\n * } catch (error) {\n *   console.error(error.message);\n * }\n * ```\n */",[3427,6005],"/**\n * Splits an iterable into chunks of specified size, yielding them one by one as a generator.\n * This provides memory-efficient processing of any iterable sequence, including infinite iterables.\n * Unlike array chunking, this works with any iterable and doesn't require knowing the total length.\n *\n * @param arrayLike - Iterable sequence to split into chunks\n * @param n - Chunk size, must be positive integer\n * @returns Generator yielding arrays of elements with specified chunk size\n * @throws {RangeError} When iterable is empty\n * @throws {RangeError} When chunk size is negative, zero, or exceeds iterable length (for sized iterables)\n *\n * @remarks\n * **Memory efficiency**: Processes iterables lazily without loading entire sequence into memory.\n * **Infinite iterables**: Works with infinite sequences, yielding chunks as needed.\n * **Type preservation**: Maintains element types from the original iterable.\n * **Flexible input**: Accepts any iterable (arrays, sets, maps, generators, etc.).\n * **Performance note**: Currently converts iterable to array internally - future versions will be fully lazy.\n *\n * @example\n * ```ts\n * // Basic iterable chunking\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8];\n * const chunks = chunksIterable(numbers, 3);\n *\n * for (const chunk of chunks) {\n *   console.log(chunk); // [1, 2, 3], [4, 5, 6], [7, 8]\n * }\n *\n * // Working with Sets\n * const uniqueValues = new Set(['a', 'b', 'c', 'd', 'e']);\n * const setChunks = [...chunksIterable(uniqueValues, 2)];\n * // [['a', 'b'], ['c', 'd'], ['e']]\n *\n * // Processing Map entries\n * const map = new Map([['x', 1], ['y', 2], ['z', 3], ['w', 4]]);\n * for (const chunk of chunksIterable(map, 2)) {\n *   console.log(chunk); // [['x', 1], ['y', 2]], [['z', 3], ['w', 4]]\n * }\n *\n * // Working with generators\n * function* fibonacci() {\n *   let a = 0, b = 1;\n *   while (true) {\n *     yield a;\n *     [a, b] = [b, a + b];\n *   }\n * }\n *\n * const fibChunks = chunksIterable(fibonacci(), 5);\n * const firstChunk = fibChunks.next().value;\n * // [0, 1, 1, 2, 3]\n *\n * // String chunking (strings are iterable)\n * const text = \"Hello World\";\n * const charChunks = [...chunksIterable(text, 3)];\n * // [['H', 'e', 'l'], ['l', 'o', ' '], ['W', 'o', 'r'], ['l', 'd']]\n *\n * // Error cases\n * try {\n *   chunksIterable([], 0); // RangeError: chunk size must be positive\n * } catch (error) {\n *   console.error(error.message);\n * }\n *\n * try {\n *   chunksIterable([1, 2, 3], -1); // RangeError: chunk size must be positive\n * } catch (error) {\n *   console.error(error.message);\n * }\n * ```\n */",[6724,6724],[8376,11380],"/**\n * Splits an async iterable into chunks of specified size, yielding them one by one as an async generator.\n * This provides memory-efficient processing of async iterable sequences, including async generators and streams.\n * Handles both sync and async iterables, making it versatile for various data sources.\n * @param arrayLike - Async iterable sequence to split into chunks\n * @param n - Chunk size, must be positive integer\n * @returns AsyncGenerator yielding arrays of elements with specified chunk size\n * @throws {RangeError} When iterable is empty after consumption\n * @throws {RangeError} When chunk size is negative, zero, or exceeds iterable length (for sized iterables)\n *\n * @remarks\n * **Async processing**: Handles async iterables, promises, and async generators seamlessly.\n * **Memory efficiency**: Processes async sequences without loading entire dataset into memory.\n * **Type preservation**: Maintains element types from the original async iterable.\n * **Flexible input**: Accepts any async iterable (async generators, streams, etc.).\n * **Performance note**: Currently converts async iterable to array internally - future versions will be fully lazy.\n *\n * @example\n * ```ts\n * // Basic async iterable chunking\n * async function* asyncNumbers() {\n *   for (let i = 1; i <= 8; i++) {\n *     yield i;\n *   }\n * }\n *\n * const chunks = chunksIterableAsync(asyncNumbers(), 3);\n * for await (const chunk of chunks) {\n *   console.log(chunk); // [1, 2, 3], [4, 5, 6], [7, 8]\n * }\n *\n * // Working with async generators from APIs\n * async function* fetchData() {\n *   const response = await fetch('/api/data');\n *   const data = await response.json();\n *   for (const item of data) {\n *     yield item;\n *   }\n * }\n *\n * const dataChunks = chunksIterableAsync(fetchData(), 5);\n * for await (const batch of dataChunks) {\n *   // Process 5 items at a time\n *   console.log(`Processing batch of ${batch.length} items`);\n * }\n *\n * // Working with streams\n * async function* streamProcessor(stream: ReadableStream) {\n *   const reader = stream.getReader();\n *   try {\n *     while (true) {\n *       const { done, value } = await reader.read();\n *       if (done) break;\n *       yield value;\n *     }\n *   } finally {\n *     reader.releaseLock();\n *   }\n * }\n *\n * const streamChunks = chunksIterableAsync(streamProcessor(someStream), 10);\n * for await (const chunk of streamChunks) {\n *   console.log(`Stream chunk: ${chunk.length} items`);\n * }\n *\n * // Mixed sync/async iterables\n * const mixedData = [Promise.resolve(1), 2, Promise.resolve(3), 4];\n * const mixedChunks = chunksIterableAsync(mixedData, 2);\n * for await (const chunk of mixedChunks) {\n *   console.log(chunk); // [1, 2], [3, 4] (promises resolved)\n * }\n *\n * // Error cases\n * try {\n *   const emptyAsync = async function*() {}();\n *   const chunks = chunksIterableAsync(emptyAsync, 2);\n *   await chunks.next(); // RangeError: iterable is empty\n * } catch (error) {\n *   console.error(error.message);\n * }\n * ```\n */",[8376,11380],"/**\n * Splits an async iterable into chunks of specified size, yielding them one by one as an async generator.\n * This provides memory-efficient processing of async iterable sequences, including async generators and streams.\n * Handles both sync and async iterables, making it versatile for various data sources.\n *\n * @param arrayLike - Async iterable sequence to split into chunks\n * @param n - Chunk size, must be positive integer\n * @returns AsyncGenerator yielding arrays of elements with specified chunk size\n * @throws {RangeError} When iterable is empty after consumption\n * @throws {RangeError} When chunk size is negative, zero, or exceeds iterable length (for sized iterables)\n *\n * @remarks\n * **Async processing**: Handles async iterables, promises, and async generators seamlessly.\n * **Memory efficiency**: Processes async sequences without loading entire dataset into memory.\n * **Type preservation**: Maintains element types from the original async iterable.\n * **Flexible input**: Accepts any async iterable (async generators, streams, etc.).\n * **Performance note**: Currently converts async iterable to array internally - future versions will be fully lazy.\n *\n * @example\n * ```ts\n * // Basic async iterable chunking\n * async function* asyncNumbers() {\n *   for (let i = 1; i <= 8; i++) {\n *     yield i;\n *   }\n * }\n *\n * const chunks = chunksIterableAsync(asyncNumbers(), 3);\n * for await (const chunk of chunks) {\n *   console.log(chunk); // [1, 2, 3], [4, 5, 6], [7, 8]\n * }\n *\n * // Working with async generators from APIs\n * async function* fetchData() {\n *   const response = await fetch('/api/data');\n *   const data = await response.json();\n *   for (const item of data) {\n *     yield item;\n *   }\n * }\n *\n * const dataChunks = chunksIterableAsync(fetchData(), 5);\n * for await (const batch of dataChunks) {\n *   // Process 5 items at a time\n *   console.log(`Processing batch of ${batch.length} items`);\n * }\n *\n * // Working with streams\n * async function* streamProcessor(stream: ReadableStream) {\n *   const reader = stream.getReader();\n *   try {\n *     while (true) {\n *       const { done, value } = await reader.read();\n *       if (done) break;\n *       yield value;\n *     }\n *   } finally {\n *     reader.releaseLock();\n *   }\n * }\n *\n * const streamChunks = chunksIterableAsync(streamProcessor(someStream), 10);\n * for await (const chunk of streamChunks) {\n *   console.log(`Stream chunk: ${chunk.length} items`);\n * }\n *\n * // Mixed sync/async iterables\n * const mixedData = [Promise.resolve(1), 2, Promise.resolve(3), 4];\n * const mixedChunks = chunksIterableAsync(mixedData, 2);\n * for await (const chunk of mixedChunks) {\n *   console.log(chunk); // [1, 2], [3, 4] (promises resolved)\n * }\n *\n * // Error cases\n * try {\n *   const emptyAsync = async function*() {}();\n *   const chunks = chunksIterableAsync(emptyAsync, 2);\n *   await chunks.next(); // RangeError: iterable is empty\n * } catch (error) {\n *   console.error(error.message);\n * }\n * ```\n */",[12075,12075],[1991,1991],[1991,1991],[69,3022],"/**\n * Creates index-value pairs from an async iterable, similar to Array.prototype.entries().\n * Each element is paired with its zero-based index position in the sequence.\n * Provides lazy evaluation for memory-efficient processing of async sequences.\n * @param arrayLike - Async iterable sequence to enumerate with indices\n * @returns AsyncGenerator yielding [index, element] tuples for each element\n * @remarks\n * **Async processing**: Handles async iterables, promises, and async generators seamlessly.\n * **Memory efficiency**: Processes async sequences without loading entire dataset into memory.\n * **Type preservation**: Maintains element types from the original async iterable.\n * **Index tracking**: Provides zero-based indexing similar to Array.prototype.entries().\n * **Lazy evaluation**: Elements are processed one at a time as needed.\n *\n * Based on https://stackoverflow.com/a/10179849 with CC BY-SA 4.0 written by Ry-\n *\n * @example\n * ```ts\n * // Basic async iterable enumeration\n * async function* asyncNumbers() {\n *   for (let i = 10; i <= 13; i++) {\n *     yield i;\n *   }\n * }\n *\n * const entries = entriesIterableAsync(asyncNumbers());\n * for await (const [index, value] of entries) {\n *   console.log(`[${index}]: ${value}`);\n * }\n * // Output: [0]: 10, [1]: 11, [2]: 12, [3]: 13\n *\n * // Working with async generators from APIs\n * async function* fetchUserData() {\n *   const users = ['alice', 'bob', 'charlie'];\n *   for (const user of users) {\n *     const response = await fetch(`/api/users/${user}`);\n *     yield await response.json();\n *   }\n * }\n *\n * const userEntries = entriesIterableAsync(fetchUserData());\n * for await (const [index, userData] of userEntries) {\n *   console.log(`User ${index + 1}:`, userData.name);\n * }\n *\n * // Processing streams with index tracking\n * async function* streamProcessor(stream: ReadableStream) {\n *   const reader = stream.getReader();\n *   try {\n *     while (true) {\n *       const { done, value } = await reader.read();\n *       if (done) break;\n *       yield value;\n *     }\n *   } finally {\n *     reader.releaseLock();\n *   }\n * }\n *\n * const streamEntries = entriesIterableAsync(streamProcessor(someStream));\n * for await (const [index, chunk] of streamEntries) {\n *   console.log(`Chunk ${index}: ${chunk.length} bytes`);\n * }\n *\n * // Mixed sync/async iterables\n * const mixedData = [Promise.resolve('a'), 'b', Promise.resolve('c')];\n * const mixedEntries = entriesIterableAsync(mixedData);\n * for await (const [index, value] of mixedEntries) {\n *   console.log(`[${index}]: ${value}`); // [0]: a, [1]: b, [2]: c\n * }\n *\n * // Working with async Set-like structures\n * const asyncSet = new Set([\n *   Promise.resolve('first'),\n *   Promise.resolve('second'),\n *   Promise.resolve('third')\n * ]);\n *\n * const setEntries = entriesIterableAsync(asyncSet);\n * for await (const [index, value] of setEntries) {\n *   console.log(`Item ${index}: ${value}`);\n * }\n * ```\n */",[69,3022],"/**\n * Creates index-value pairs from an async iterable, similar to Array.prototype.entries().\n * Each element is paired with its zero-based index position in the sequence.\n * Provides lazy evaluation for memory-efficient processing of async sequences.\n *\n * @param arrayLike - Async iterable sequence to enumerate with indices\n * @returns AsyncGenerator yielding [index, element] tuples for each element\n * @remarks\n * **Async processing**: Handles async iterables, promises, and async generators seamlessly.\n * **Memory efficiency**: Processes async sequences without loading entire dataset into memory.\n * **Type preservation**: Maintains element types from the original async iterable.\n * **Index tracking**: Provides zero-based indexing similar to Array.prototype.entries().\n * **Lazy evaluation**: Elements are processed one at a time as needed.\n *\n * Based on https://stackoverflow.com/a/10179849 with CC BY-SA 4.0 written by Ry-\n *\n * @example\n * ```ts\n * // Basic async iterable enumeration\n * async function* asyncNumbers() {\n *   for (let i = 10; i <= 13; i++) {\n *     yield i;\n *   }\n * }\n *\n * const entries = entriesIterableAsync(asyncNumbers());\n * for await (const [index, value] of entries) {\n *   console.log(`[${index}]: ${value}`);\n * }\n * // Output: [0]: 10, [1]: 11, [2]: 12, [3]: 13\n *\n * // Working with async generators from APIs\n * async function* fetchUserData() {\n *   const users = ['alice', 'bob', 'charlie'];\n *   for (const user of users) {\n *     const response = await fetch(`/api/users/${user}`);\n *     yield await response.json();\n *   }\n * }\n *\n * const userEntries = entriesIterableAsync(fetchUserData());\n * for await (const [index, userData] of userEntries) {\n *   console.log(`User ${index + 1}:`, userData.name);\n * }\n *\n * // Processing streams with index tracking\n * async function* streamProcessor(stream: ReadableStream) {\n *   const reader = stream.getReader();\n *   try {\n *     while (true) {\n *       const { done, value } = await reader.read();\n *       if (done) break;\n *       yield value;\n *     }\n *   } finally {\n *     reader.releaseLock();\n *   }\n * }\n *\n * const streamEntries = entriesIterableAsync(streamProcessor(someStream));\n * for await (const [index, chunk] of streamEntries) {\n *   console.log(`Chunk ${index}: ${chunk.length} bytes`);\n * }\n *\n * // Mixed sync/async iterables\n * const mixedData = [Promise.resolve('a'), 'b', Promise.resolve('c')];\n * const mixedEntries = entriesIterableAsync(mixedData);\n * for await (const [index, value] of mixedEntries) {\n *   console.log(`[${index}]: ${value}`); // [0]: a, [1]: b, [2]: c\n * }\n *\n * // Working with async Set-like structures\n * const asyncSet = new Set([\n *   Promise.resolve('first'),\n *   Promise.resolve('second'),\n *   Promise.resolve('third')\n * ]);\n *\n * const setEntries = entriesIterableAsync(asyncSet);\n * for await (const [index, value] of setEntries) {\n *   console.log(`Item ${index}: ${value}`);\n * }\n * ```\n */",[3050,3050],[3315,3441],"index = 0;\n\n  for await (const arrayLikeElement of arrayLike as AsyncIterable<T_element>) {\n    yield [index, arrayLikeElement];\n    index",[3452,6465],"/**\n * Creates index-value pairs from a sync iterable, similar to Array.prototype.entries().\n * Each element is paired with its zero-based index position in the sequence.\n * Provides lazy evaluation for memory-efficient processing of iterable sequences.\n * @param arrayLike - Iterable sequence to enumerate with indices\n * @returns Generator yielding [index, element] tuples for each element\n * @remarks\n * **Sync processing**: Handles sync iterables including arrays, sets, maps, strings, and generators.\n * **Memory efficiency**: Processes sequences without loading entire dataset into memory.\n * **Type preservation**: Maintains element types from the original iterable.\n * **Index tracking**: Provides zero-based indexing similar to Array.prototype.entries().\n * **Lazy evaluation**: Elements are processed one at a time as needed.\n *\n * @example\n * ```ts\n * // Basic array enumeration\n * const numbers = [10, 20, 30];\n * const entries = entriesIterable(numbers);\n * for (const [index, value] of entries) {\n *   console.log(`[${index}]: ${value}`);\n * }\n * // Output: [0]: 10, [1]: 20, [2]: 30\n *\n * // Working with Sets\n * const uniqueItems = new Set(['apple', 'banana', 'cherry']);\n * const setEntries = entriesIterable(uniqueItems);\n * for (const [index, item] of setEntries) {\n *   console.log(`Item ${index + 1}: ${item}`);\n * }\n * // Output: Item 1: apple, Item 2: banana, Item 3: cherry\n *\n * // Working with Maps\n * const userRoles = new Map([\n *   ['alice', 'admin'],\n *   ['bob', 'user'],\n *   ['charlie', 'moderator']\n * ]);\n *\n * const mapEntries = entriesIterable(userRoles);\n * for (const [index, [username, role]] of mapEntries) {\n *   console.log(`User ${index}: ${username} (${role})`);\n * }\n * // Output: User 0: alice (admin), User 1: bob (user), User 2: charlie (moderator)\n *\n * // Working with strings\n * const text = \"hello\";\n * const charEntries = entriesIterable(text);\n * for (const [index, char] of charEntries) {\n *   console.log(`Character ${index}: '${char}'`);\n * }\n * // Output: Character 0: 'h', Character 1: 'e', Character 2: 'l', Character 3: 'l', Character 4: 'o'\n *\n * // Working with generators\n * function* fibonacci() {\n *   let a = 0, b = 1;\n *   while (a < 100) {\n *     yield a;\n *     [a, b] = [b, a + b];\n *   }\n * }\n *\n * const fibEntries = entriesIterable(fibonacci());\n * for (const [index, value] of fibEntries) {\n *   console.log(`Fibonacci[${index}]: ${value}`);\n * }\n * // Output: Fibonacci[0]: 0, Fibonacci[1]: 1, Fibonacci[2]: 1, Fibonacci[3]: 2, etc.\n *\n * // Collecting entries into array\n * const colors = ['red', 'green', 'blue'];\n * const colorEntries = Array.from(entriesIterable(colors));\n * console.log(colorEntries); // [[0, 'red'], [1, 'green'], [2, 'blue']]\n *\n * // Using with destructuring\n * const items = ['first', 'second', 'third'];\n * const [[firstIndex, firstItem], [secondIndex, secondItem]] = entriesIterable(items);\n * console.log(`${firstIndex}: ${firstItem}, ${secondIndex}: ${secondItem}`); // 0: first, 1: second\n * ```\n */",[3452,6465],"/**\n * Creates index-value pairs from a sync iterable, similar to Array.prototype.entries().\n * Each element is paired with its zero-based index position in the sequence.\n * Provides lazy evaluation for memory-efficient processing of iterable sequences.\n *\n * @param arrayLike - Iterable sequence to enumerate with indices\n * @returns Generator yielding [index, element] tuples for each element\n * @remarks\n * **Sync processing**: Handles sync iterables including arrays, sets, maps, strings, and generators.\n * **Memory efficiency**: Processes sequences without loading entire dataset into memory.\n * **Type preservation**: Maintains element types from the original iterable.\n * **Index tracking**: Provides zero-based indexing similar to Array.prototype.entries().\n * **Lazy evaluation**: Elements are processed one at a time as needed.\n *\n * @example\n * ```ts\n * // Basic array enumeration\n * const numbers = [10, 20, 30];\n * const entries = entriesIterable(numbers);\n * for (const [index, value] of entries) {\n *   console.log(`[${index}]: ${value}`);\n * }\n * // Output: [0]: 10, [1]: 20, [2]: 30\n *\n * // Working with Sets\n * const uniqueItems = new Set(['apple', 'banana', 'cherry']);\n * const setEntries = entriesIterable(uniqueItems);\n * for (const [index, item] of setEntries) {\n *   console.log(`Item ${index + 1}: ${item}`);\n * }\n * // Output: Item 1: apple, Item 2: banana, Item 3: cherry\n *\n * // Working with Maps\n * const userRoles = new Map([\n *   ['alice', 'admin'],\n *   ['bob', 'user'],\n *   ['charlie', 'moderator']\n * ]);\n *\n * const mapEntries = entriesIterable(userRoles);\n * for (const [index, [username, role]] of mapEntries) {\n *   console.log(`User ${index}: ${username} (${role})`);\n * }\n * // Output: User 0: alice (admin), User 1: bob (user), User 2: charlie (moderator)\n *\n * // Working with strings\n * const text = \"hello\";\n * const charEntries = entriesIterable(text);\n * for (const [index, char] of charEntries) {\n *   console.log(`Character ${index}: '${char}'`);\n * }\n * // Output: Character 0: 'h', Character 1: 'e', Character 2: 'l', Character 3: 'l', Character 4: 'o'\n *\n * // Working with generators\n * function* fibonacci() {\n *   let a = 0, b = 1;\n *   while (a < 100) {\n *     yield a;\n *     [a, b] = [b, a + b];\n *   }\n * }\n *\n * const fibEntries = entriesIterable(fibonacci());\n * for (const [index, value] of fibEntries) {\n *   console.log(`Fibonacci[${index}]: ${value}`);\n * }\n * // Output: Fibonacci[0]: 0, Fibonacci[1]: 1, Fibonacci[2]: 1, Fibonacci[3]: 2, etc.\n *\n * // Collecting entries into array\n * const colors = ['red', 'green', 'blue'];\n * const colorEntries = Array.from(entriesIterable(colors));\n * console.log(colorEntries); // [[0, 'red'], [1, 'green'], [2, 'blue']]\n *\n * // Using with destructuring\n * const items = ['first', 'second', 'third'];\n * const [[firstIndex, firstItem], [secondIndex, secondItem]] = entriesIterable(items);\n * console.log(`${firstIndex}: ${firstItem}, ${secondIndex}: ${secondItem}`); // 0: first, 1: second\n * ```\n */",[6493,6493],[6738,6830],"index = 0;\n\n  for (const arrayLikeElement of arrayLike) {\n    yield [index, arrayLikeElement];\n    index",[569,569],[569,569],[1693,1693],[1693,1693],[588,3528],"/**\n * Asynchronously tests whether all elements in an async iterable satisfy a predicate function.\n * This is the async equivalent of Array.prototype.every(), supporting both sync and async iterables\n * with sync or async testing functions. Uses parallel processing with Promise.any for efficient execution.\n *\n * The function fails fast when encountering the first false result, immediately returning false.\n * Due to parallel processing, the order of predicate evaluation isn't guaranteed, and the function\n * may return false or throw an error depending on which promise resolves first.\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param iterable - Async iterable to test elements from\n * @returns True if all elements satisfy the predicate, false if any element fails the test\n * @throws {Error} When testingFn throws errors during execution\n * @remarks\n * **Fail-fast behavior**: Returns false immediately when encountering the first false result.\n * **Error propagation**: Throws errors when testingFn throws errors.\n * **Parallel processing**: Uses Promise.any for concurrent execution, so evaluation order isn't guaranteed.\n * **Compatibility**: Matches the behavior of Array.prototype.every() for consistency.\n *\n * Because of the fail-fast behavior, this function can't be used to assert that testingFn\n * won't throw errors when called on every element of the entire iterable.\n * For guaranteed evaluation of all elements with error handling, see noneIterableAsync.\n *\n * @example\n * ```ts\n * // Test if all numbers are positive\n * const numbers = [1, 2, 3, 4, 5];\n * const allPositive = await everyIterableAsync(x => x > 0, numbers); // true\n *\n * // With async predicate function\n * const users = [{ id: 1, active: true }, { id: 2, active: true }];\n * const allActive = await everyIterableAsync(\n *   async user => {\n *     // Simulate API call\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     return user.active;\n *   },\n *   users\n * ); // true\n *\n * // Using index and array parameters\n * const items = ['a', 'b', 'c'];\n * const validIndexes = await everyIterableAsync(\n *   async (element, index, array) => {\n *     return index < array.length && element.length > 0;\n *   },\n *   items\n * ); // true\n *\n * // Fail-fast behavior demonstration\n * const mixed = [2, 4, 3, 6, 8]; // 3 is odd\n * const allEven = await everyIterableAsync(x => x % 2 === 0, mixed); // false\n *\n * // With async iterable\n * async function* asyncNumbers() {\n *   yield 2; yield 4; yield 6;\n * }\n * const allEvenAsync = await everyIterableAsync(x => x % 2 === 0, asyncNumbers()); // true\n *\n * // Error handling\n * try {\n *   await everyIterableAsync(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [5, 2, 0, 1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[588,3528],"/**\n * Asynchronously tests whether all elements in an async iterable satisfy a predicate function.\n * This is the async equivalent of Array.prototype.every(), supporting both sync and async iterables\n * with sync or async testing functions. Uses parallel processing with Promise.any for efficient execution.\n *\n * The function fails fast when encountering the first false result, immediately returning false.\n * Due to parallel processing, the order of predicate evaluation isn't guaranteed, and the function\n * may return false or throw an error depending on which promise resolves first.\n *\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param iterable - Async iterable to test elements from\n * @returns True if all elements satisfy the predicate, false if any element fails the test\n * @throws {Error} When testingFn throws errors during execution\n * @remarks\n * **Fail-fast behavior**: Returns false immediately when encountering the first false result.\n * **Error propagation**: Throws errors when testingFn throws errors.\n * **Parallel processing**: Uses Promise.any for concurrent execution, so evaluation order isn't guaranteed.\n * **Compatibility**: Matches the behavior of Array.prototype.every() for consistency.\n *\n * Because of the fail-fast behavior, this function can't be used to assert that testingFn\n * won't throw errors when called on every element of the entire iterable.\n * For guaranteed evaluation of all elements with error handling, see noneIterableAsync.\n *\n * @example\n * ```ts\n * // Test if all numbers are positive\n * const numbers = [1, 2, 3, 4, 5];\n * const allPositive = await everyIterableAsync(x => x > 0, numbers); // true\n *\n * // With async predicate function\n * const users = [{ id: 1, active: true }, { id: 2, active: true }];\n * const allActive = await everyIterableAsync(\n *   async user => {\n *     // Simulate API call\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     return user.active;\n *   },\n *   users\n * ); // true\n *\n * // Using index and array parameters\n * const items = ['a', 'b', 'c'];\n * const validIndexes = await everyIterableAsync(\n *   async (element, index, array) => {\n *     return index < array.length && element.length > 0;\n *   },\n *   items\n * ); // true\n *\n * // Fail-fast behavior demonstration\n * const mixed = [2, 4, 3, 6, 8]; // 3 is odd\n * const allEven = await everyIterableAsync(x => x % 2 === 0, mixed); // false\n *\n * // With async iterable\n * async function* asyncNumbers() {\n *   yield 2; yield 4; yield 6;\n * }\n * const allEvenAsync = await everyIterableAsync(x => x % 2 === 0, asyncNumbers()); // true\n *\n * // Error handling\n * try {\n *   await everyIterableAsync(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [5, 2, 0, 1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[3875,4678],"array: T_element[] = await Array.fromAsync(iterable);\n\n  /*\n   We invert the approach from noneIterableAsync:\n   - Create promises that reject with a sentinel value when predicates return true\n   - And resolve with a signal value when predicates return false\n   - Using Promise.any to detect first false result\n   - Propagate any actual errors from predicates\n   */\n\n  const promises: Promise<'result is false' | Error>[] = array.map(\n    function mapper(element, index): Promise<'result is false' | Error> {\n      return (async function inner(): Promise<'result is false' | Error> {\n        // Propagate predicate errors\n        const result: boolean | Error =\n          await (async function throwing(): Promise<boolean | Error> {\n            try {\n              return await testingFn(element, index, array",[5630,8010],"/**\n * Synchronously tests whether all elements in an iterable satisfy a predicate function.\n * This is a functional programming equivalent of Array.prototype.every() that works with any iterable.\n * Supports testing functions that receive element, index, and/or array parameters for flexibility.\n *\n * The function fails fast when encountering the first false result, immediately returning false.\n * This provides efficient short-circuit evaluation for performance optimization.\n * @param testingFn - Predicate function to test each element, receives (element, index?, array?)\n * @param iterable - Iterable to test elements from\n * @returns True if all elements satisfy the predicate, false if any element fails the test\n * @throws {Error} When testingFn throws errors during execution\n * @example\n * ```ts\n * // Test if all numbers are positive\n * const numbers = [1, 2, 3, 4, 5];\n * const allPositive = everyIterable(x => x > 0, numbers); // true\n *\n * // Using index parameter\n * const items = ['first', 'second', 'third'];\n * const validOrder = everyIterable(\n *   (element, index) => element.includes(['first', 'second', 'third'][index]),\n *   items\n * ); // true\n *\n * // Using all parameters (element, index, array)\n * const scores = [85, 90, 78, 92];\n * const aboveAverage = everyIterable(\n *   (score, index, array) => {\n *     const average = array.reduce((sum, s) => sum + s, 0) / array.length;\n *     return score >= average * 0.8; // At least 80% of average\n *   },\n *   scores\n * ); // true\n *\n * // Works with any iterable\n * const setResult = everyIterable(x => x > 0, new Set([1, 2, 3])); // true\n * const mapResult = everyIterable(\n *   ([key, value]) => key.length > 0 && value > 0,\n *   new Map([['a', 1], ['b', 2]])\n * ); // true\n *\n * // Fail-fast behavior\n * const mixed = [2, 4, 3, 6, 8]; // 3 is odd\n * const allEven = everyIterable(x => {\n *   console.log(`Testing ${x}`); // Only logs until 3\n *   return x % 2 === 0;\n * }, mixed); // false\n *\n * // String iterable\n * const chars = 'HELLO';\n * const allUppercase = everyIterable(char => char === char.toUpperCase(), chars); // true\n *\n * // Error handling\n * try {\n *   everyIterable(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [5, 2, 0, 1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[5630,8010],"/**\n * Synchronously tests whether all elements in an iterable satisfy a predicate function.\n * This is a functional programming equivalent of Array.prototype.every() that works with any iterable.\n * Supports testing functions that receive element, index, and/or array parameters for flexibility.\n *\n * The function fails fast when encountering the first false result, immediately returning false.\n * This provides efficient short-circuit evaluation for performance optimization.\n *\n * @param testingFn - Predicate function to test each element, receives (element, index?, array?)\n * @param iterable - Iterable to test elements from\n * @returns True if all elements satisfy the predicate, false if any element fails the test\n * @throws {Error} When testingFn throws errors during execution\n * @example\n * ```ts\n * // Test if all numbers are positive\n * const numbers = [1, 2, 3, 4, 5];\n * const allPositive = everyIterable(x => x > 0, numbers); // true\n *\n * // Using index parameter\n * const items = ['first', 'second', 'third'];\n * const validOrder = everyIterable(\n *   (element, index) => element.includes(['first', 'second', 'third'][index]),\n *   items\n * ); // true\n *\n * // Using all parameters (element, index, array)\n * const scores = [85, 90, 78, 92];\n * const aboveAverage = everyIterable(\n *   (score, index, array) => {\n *     const average = array.reduce((sum, s) => sum + s, 0) / array.length;\n *     return score >= average * 0.8; // At least 80% of average\n *   },\n *   scores\n * ); // true\n *\n * // Works with any iterable\n * const setResult = everyIterable(x => x > 0, new Set([1, 2, 3])); // true\n * const mapResult = everyIterable(\n *   ([key, value]) => key.length > 0 && value > 0,\n *   new Map([['a', 1], ['b', 2]])\n * ); // true\n *\n * // Fail-fast behavior\n * const mixed = [2, 4, 3, 6, 8]; // 3 is odd\n * const allEven = everyIterable(x => {\n *   console.log(`Testing ${x}`); // Only logs until 3\n *   return x % 2 === 0;\n * }, mixed); // false\n *\n * // String iterable\n * const chars = 'HELLO';\n * const allUppercase = everyIterable(char => char === char.toUpperCase(), chars); // true\n *\n * // Error handling\n * try {\n *   everyIterable(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [5, 2, 0, 1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[8317,8446],"array: T_element[] = [...iterable];\n  for (const [index, element] of entriesIterable(array)) {\n    if (!testingFn(element, index, array",[378,378],[378,378],[558,558],[558,558],[865,865],[865,865],[1038,1038],[1038,1038],[1256,1256],[1256,1256],[1480,1480],[1480,1480],[1599,1599],[1599,1599],[1760,1760],[1760,1760],[1869,1869],[1869,1869],[2050,2050],[2050,2050],[2445,2445],[2445,2445],[2661,2661],[2661,2661],[2901,2901],[2901,2901],[3167,3167],[3167,3167],[4029,4029],[4029,4029],[198,2869],"/**\n * Asynchronously tests whether all elements in an async iterable fail a predicate function.\n * This is the inverse of everyIterableAsync - it returns true when ALL elements fail the test\n * (predicate returns false for all elements), and false when ANY element passes the test.\n *\n * The function fails fast when encountering the first passing result, immediately returning false.\n * This provides efficient short-circuit evaluation for performance optimization.\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Async iterable to test elements from\n * @returns True if all elements fail the predicate (all return false), false if any element passes\n * @throws {Error} When testingFn throws errors during execution\n * @example\n * ```ts\n * // Test if all numbers aren't positive (all are zero or negative)\n * const numbers = [-1, -2, 0, -4];\n * const allNonPositive = await everyFailIterableAsync(x => x > 0, numbers); // true\n *\n * // With mixed values - fails fast when finding a positive number\n * const mixed = [-1, -2, 3, -4]; // 3 is positive\n * const allNegative = await everyFailIterableAsync(x => x > 0, mixed); // false\n *\n * // With async predicate function\n * const users = [{ id: 1, active: false }, { id: 2, active: false }];\n * const allInactive = await everyFailIterableAsync(\n *   async user => {\n *     // Simulate API call\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     return user.active;\n *   },\n *   users\n * ); // true (all users are inactive, so predicate fails for all)\n *\n * // Using index and array parameters\n * const items = ['', '', ''];\n * const allEmpty = await everyFailIterableAsync(\n *   async (element, index, array) => {\n *     return element.length > 0 && index < array.length;\n *   },\n *   items\n * ); // true (all strings are empty, so predicate fails for all)\n *\n * // With async iterable\n * async function* asyncNumbers() {\n *   yield -2; yield -4; yield -6;\n * }\n * const allNegativeAsync = await everyFailIterableAsync(x => x > 0, asyncNumbers()); // true\n *\n * // Validation use case - ensure no invalid items\n * const emails = ['invalid', 'also-invalid', 'not-email'];\n * const noValidEmails = await everyFailIterableAsync(\n *   async email => email.includes('@') && email.includes('.'),\n *   emails\n * ); // true (no valid emails found)\n *\n * // Error handling\n * try {\n *   await everyFailIterableAsync(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [-5, -2, 0, -1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[198,2869],"/**\n * Asynchronously tests whether all elements in an async iterable fail a predicate function.\n * This is the inverse of everyIterableAsync - it returns true when ALL elements fail the test\n * (predicate returns false for all elements), and false when ANY element passes the test.\n *\n * The function fails fast when encountering the first passing result, immediately returning false.\n * This provides efficient short-circuit evaluation for performance optimization.\n *\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Async iterable to test elements from\n * @returns True if all elements fail the predicate (all return false), false if any element passes\n * @throws {Error} When testingFn throws errors during execution\n * @example\n * ```ts\n * // Test if all numbers aren't positive (all are zero or negative)\n * const numbers = [-1, -2, 0, -4];\n * const allNonPositive = await everyFailIterableAsync(x => x > 0, numbers); // true\n *\n * // With mixed values - fails fast when finding a positive number\n * const mixed = [-1, -2, 3, -4]; // 3 is positive\n * const allNegative = await everyFailIterableAsync(x => x > 0, mixed); // false\n *\n * // With async predicate function\n * const users = [{ id: 1, active: false }, { id: 2, active: false }];\n * const allInactive = await everyFailIterableAsync(\n *   async user => {\n *     // Simulate API call\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     return user.active;\n *   },\n *   users\n * ); // true (all users are inactive, so predicate fails for all)\n *\n * // Using index and array parameters\n * const items = ['', '', ''];\n * const allEmpty = await everyFailIterableAsync(\n *   async (element, index, array) => {\n *     return element.length > 0 && index < array.length;\n *   },\n *   items\n * ); // true (all strings are empty, so predicate fails for all)\n *\n * // With async iterable\n * async function* asyncNumbers() {\n *   yield -2; yield -4; yield -6;\n * }\n * const allNegativeAsync = await everyFailIterableAsync(x => x > 0, asyncNumbers()); // true\n *\n * // Validation use case - ensure no invalid items\n * const emails = ['invalid', 'also-invalid', 'not-email'];\n * const noValidEmails = await everyFailIterableAsync(\n *   async email => email.includes('@') && email.includes('.'),\n *   emails\n * ); // true (no valid emails found)\n *\n * // Error handling\n * try {\n *   await everyFailIterableAsync(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [-5, -2, 0, -1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[3444,6498],"/**\n * Synchronously tests whether all elements in an iterable fail a predicate function.\n * This is the inverse of everyIterable - it returns true when ALL elements fail the test\n * (predicate returns false for all elements), and false when ANY element passes the test.\n *\n * The function fails fast when encountering the first passing result, immediately returning false.\n * This provides efficient short-circuit evaluation for performance optimization.\n * @param testingFn - Predicate function to test each element, receives (element, index?, arrayLike?)\n * @param arrayLike - Iterable to test elements from\n * @returns True if all elements fail the predicate (all return false), false if any element passes\n * @throws {Error} When testingFn throws errors during execution\n * @example\n * ```ts\n * // Test if all numbers aren't positive (all are zero or negative)\n * const numbers = [-1, -2, 0, -4];\n * const allNonPositive = everyFailIterable(x => x > 0, numbers); // true\n *\n * // With mixed values - fails fast when finding a positive number\n * const mixed = [-1, -2, 3, -4]; // 3 is positive\n * const allNegative = everyFailIterable(x => x > 0, mixed); // false\n *\n * // Using index parameter\n * const items = ['', '', ''];\n * const allEmpty = everyFailIterable(\n *   (element, index) => element.length > index, // All fail: empty strings can't be longer than their index\n *   items\n * ); // true\n *\n * // Using all parameters (element, index, arrayLike)\n * const scores = [45, 30, 25, 40]; // All below 50\n * const allBelowThreshold = everyFailIterable(\n *   (score, index, array) => {\n *     const threshold = 50;\n *     return score >= threshold; // Test if score meets threshold\n *   },\n *   scores\n * ); // true (all scores fail to meet threshold)\n *\n * // Works with any iterable\n * const setResult = everyFailIterable(x => x > 0, new Set([-1, -2, -3])); // true\n * const mapResult = everyFailIterable(\n *   ([key, value]) => key.length === 0 || value <= 0,\n *   new Map([['a', 1], ['b', 2]]) // All entries have non-empty keys and positive values\n * ); // true (predicate fails for all entries)\n *\n * // Fail-fast behavior demonstration\n * const mixed2 = [-2, -4, 3, -6, -8]; // 3 is positive\n * const allNegative2 = everyFailIterable(x => {\n *   console.log(`Testing ${x}`); // Only logs until 3\n *   return x > 0;\n * }, mixed2); // false\n *\n * // String iterable\n * const chars = 'hello';\n * const allUppercase = everyFailIterable(char => char === char.toUpperCase(), chars); // true\n *\n * // Validation use case - ensure no valid items\n * const invalidEmails = ['invalid', 'also-invalid', 'not-email'];\n * const noValidEmails = everyFailIterable(\n *   email => email.includes('@') && email.includes('.'),\n *   invalidEmails\n * ); // true (no valid emails found)\n *\n * // Error handling\n * try {\n *   everyFailIterable(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [-5, -2, 0, -1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[3444,6498],"/**\n * Synchronously tests whether all elements in an iterable fail a predicate function.\n * This is the inverse of everyIterable - it returns true when ALL elements fail the test\n * (predicate returns false for all elements), and false when ANY element passes the test.\n *\n * The function fails fast when encountering the first passing result, immediately returning false.\n * This provides efficient short-circuit evaluation for performance optimization.\n *\n * @param testingFn - Predicate function to test each element, receives (element, index?, arrayLike?)\n * @param arrayLike - Iterable to test elements from\n * @returns True if all elements fail the predicate (all return false), false if any element passes\n * @throws {Error} When testingFn throws errors during execution\n * @example\n * ```ts\n * // Test if all numbers aren't positive (all are zero or negative)\n * const numbers = [-1, -2, 0, -4];\n * const allNonPositive = everyFailIterable(x => x > 0, numbers); // true\n *\n * // With mixed values - fails fast when finding a positive number\n * const mixed = [-1, -2, 3, -4]; // 3 is positive\n * const allNegative = everyFailIterable(x => x > 0, mixed); // false\n *\n * // Using index parameter\n * const items = ['', '', ''];\n * const allEmpty = everyFailIterable(\n *   (element, index) => element.length > index, // All fail: empty strings can't be longer than their index\n *   items\n * ); // true\n *\n * // Using all parameters (element, index, arrayLike)\n * const scores = [45, 30, 25, 40]; // All below 50\n * const allBelowThreshold = everyFailIterable(\n *   (score, index, array) => {\n *     const threshold = 50;\n *     return score >= threshold; // Test if score meets threshold\n *   },\n *   scores\n * ); // true (all scores fail to meet threshold)\n *\n * // Works with any iterable\n * const setResult = everyFailIterable(x => x > 0, new Set([-1, -2, -3])); // true\n * const mapResult = everyFailIterable(\n *   ([key, value]) => key.length === 0 || value <= 0,\n *   new Map([['a', 1], ['b', 2]]) // All entries have non-empty keys and positive values\n * ); // true (predicate fails for all entries)\n *\n * // Fail-fast behavior demonstration\n * const mixed2 = [-2, -4, 3, -6, -8]; // 3 is positive\n * const allNegative2 = everyFailIterable(x => {\n *   console.log(`Testing ${x}`); // Only logs until 3\n *   return x > 0;\n * }, mixed2); // false\n *\n * // String iterable\n * const chars = 'hello';\n * const allUppercase = everyFailIterable(char => char === char.toUpperCase(), chars); // true\n *\n * // Validation use case - ensure no valid items\n * const invalidEmails = ['invalid', 'also-invalid', 'not-email'];\n * const noValidEmails = everyFailIterable(\n *   email => email.includes('@') && email.includes('.'),\n *   invalidEmails\n * ); // true (no valid emails found)\n *\n * // Error handling\n * try {\n *   everyFailIterable(x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 10 / x > 1;\n *   }, [-5, -2, 0, -1]);\n * } catch (error) {\n *   console.log('Predicate threw an error:', error.message);\n * }\n * ```\n */",[114,1722],"/**\n * Asynchronously filters an iterable or async iterable based on a predicate function.\n *\n * Processes elements sequentially, testing each against the predicate and collecting those that pass.\n * Supports both synchronous and asynchronous iterables, as well as sync and async predicates.\n * Memory-efficient processing for large datasets through streaming iteration.\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean indicating whether to keep element\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Array containing elements that satisfy the predicate\n * @example\n * Basic async filtering:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const evens = await filterIterableAsync(\n *   async (n) => n % 2 === 0,\n *   numbers\n * );\n * console.log(evens); // [2, 4]\n * ```\n *\n * @example\n * Working with async iterables:\n * ```ts\n * async function* generateNumbers() {\n *   for (let i = 1; i <= 10; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield i;\n *   }\n * }\n *\n * const largeNumbers = await filterIterableAsync(\n *   async (n) => n > 5,\n *   generateNumbers()\n * );\n * console.log(largeNumbers); // [6, 7, 8, 9, 10]\n * ```\n *\n * @example\n * Async predicate with API calls:\n * ```ts\n * const userIds = ['user1', 'user2', 'user3'];\n * const activeUsers = await filterIterableAsync(\n *   async (userId) => {\n *     const response = await fetch(`/api/users/${userId}`);\n *     const user = await response.json();\n *     return user.isActive;\n *   },\n *   userIds\n * );\n * ```\n */",[114,1722],"/**\n * Asynchronously filters an iterable or async iterable based on a predicate function.\n *\n * Processes elements sequentially, testing each against the predicate and collecting those that pass.\n * Supports both synchronous and asynchronous iterables, as well as sync and async predicates.\n * Memory-efficient processing for large datasets through streaming iteration.\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean indicating whether to keep element\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Array containing elements that satisfy the predicate\n * @example\n * Basic async filtering:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const evens = await filterIterableAsync(\n *   async (n) => n % 2 === 0,\n *   numbers\n * );\n * console.log(evens); // [2, 4]\n * ```\n *\n * @example\n * Working with async iterables:\n * ```ts\n * async function* generateNumbers() {\n *   for (let i = 1; i <= 10; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield i;\n *   }\n * }\n *\n * const largeNumbers = await filterIterableAsync(\n *   async (n) => n > 5,\n *   generateNumbers()\n * );\n * console.log(largeNumbers); // [6, 7, 8, 9, 10]\n * ```\n *\n * @example\n * Async predicate with API calls:\n * ```ts\n * const userIds = ['user1', 'user2', 'user3'];\n * const activeUsers = await filterIterableAsync(\n *   async (userId) => {\n *     const response = await fetch(`/api/users/${userId}`);\n *     const user = await response.json();\n *     return user.isActive;\n *   },\n *   userIds\n * );\n * ```\n */",[1765,1892],"T_index,>(\n  predicate: (i: T_index) => Promisable<boolean>,\n  arrayLike: MaybeAsyncIterable<T_index>,\n): Promise<T_index[]> {\n  const yes: T_index",[1786,1787],"index",[1921,1985],"index of arrayLike) {\n    if (await predicate(index)) {\n      yes.push(index",[2150,3297],"/**\n * Filters a synchronous iterable based on a predicate function.\n *\n * {@inheritDoc filterIterableAsync}\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean indicating whether to keep element\n * @param arrayLike - Synchronous iterable to filter\n * @returns Array containing elements that satisfy the predicate\n * @example\n * Basic array filtering:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const evens = filterIterable((n) => n % 2 === 0, numbers);\n * console.log(evens); // [2, 4]\n * ```\n *\n * @example\n * Working with Sets:\n * ```ts\n * const words = new Set(['apple', 'banana', 'cherry', 'date']);\n * const longWords = filterIterable((word) => word.length > 5, words);\n * console.log(longWords); // ['banana', 'cherry']\n * ```\n *\n * @example\n * Object property filtering:\n * ```ts\n * const users = [\n *   { id: 1, name: 'Alice', active: true },\n *   { id: 2, name: 'Bob', active: false },\n *   { id: 3, name: 'Charlie', active: true }\n * ];\n * const activeUsers = filterIterable((user) => user.active, users);\n * console.log(activeUsers); // [Alice, Charlie objects]\n * ```\n */",[2150,3297],"/**\n * Filters a synchronous iterable based on a predicate function.\n *\n * {@inheritDoc filterIterableAsync}\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean indicating whether to keep element\n * @param arrayLike - Synchronous iterable to filter\n * @returns Array containing elements that satisfy the predicate\n * @example\n * Basic array filtering:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const evens = filterIterable((n) => n % 2 === 0, numbers);\n * console.log(evens); // [2, 4]\n * ```\n *\n * @example\n * Working with Sets:\n * ```ts\n * const words = new Set(['apple', 'banana', 'cherry', 'date']);\n * const longWords = filterIterable((word) => word.length > 5, words);\n * console.log(longWords); // ['banana', 'cherry']\n * ```\n *\n * @example\n * Object property filtering:\n * ```ts\n * const users = [\n *   { id: 1, name: 'Alice', active: true },\n *   { id: 2, name: 'Bob', active: false },\n *   { id: 3, name: 'Charlie', active: true }\n * ];\n * const activeUsers = filterIterable((user) => user.active, users);\n * console.log(activeUsers); // [Alice, Charlie objects]\n * ```\n */",[3329,3425],"T_index,>(\n  predicate: (i: T_index) => boolean,\n  arrayLike: Iterable<T_index>,\n): T_index[] {\n  const yes: T_index",[3350,3351],[3448,3506],"index of arrayLike) {\n    if (predicate(index)) {\n      yes.push(index",[3537,5326],"/**\n * Asynchronously filters an iterable yielding elements that satisfy the predicate as they're processed.\n *\n * Generator version of filterIterableAsync that provides streaming results without collecting all elements in memory.\n * Ideal for processing large datasets or infinite streams where memory efficiency is important.\n * Yields elements immediately as they pass the predicate test.\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean indicating whether to keep element\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Async generator yielding elements that satisfy the predicate\n * @example\n * Streaming filter with immediate results:\n * ```ts\n * async function* generateNumbers() {\n *   for (let i = 1; i <= 1000; i++) {\n *     yield i;\n *   }\n * }\n *\n * // Process results as they come\n * for await (const even of filterIterableAsyncGen(\n *   async (n) => n % 2 === 0,\n *   generateNumbers()\n * )) {\n *   console.log(even); // Prints 2, 4, 6, 8... as they're found\n *   if (even > 20) break; // Can stop early\n * }\n * ```\n *\n * @example\n * Memory-efficient processing:\n * ```ts\n * async function* fetchLargeDataset() {\n *   // Simulate fetching large dataset in chunks\n *   for (let page = 1; page <= 100; page++) {\n *     const response = await fetch(`/api/data?page=${page}`);\n *     const items = await response.json();\n *     for (const item of items) yield item;\n *   }\n * }\n *\n * // Filter without loading entire dataset into memory\n * const validItems = filterIterableAsyncGen(\n *   async (item) => item.isValid && item.score > 0.8,\n *   fetchLargeDataset()\n * );\n *\n * for await (const item of validItems) {\n *   await processItem(item); // Process one at a time\n * }\n * ```\n */",[3537,5326],"/**\n * Asynchronously filters an iterable yielding elements that satisfy the predicate as they're processed.\n *\n * Generator version of filterIterableAsync that provides streaming results without collecting all elements in memory.\n * Ideal for processing large datasets or infinite streams where memory efficiency is important.\n * Yields elements immediately as they pass the predicate test.\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean indicating whether to keep element\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Async generator yielding elements that satisfy the predicate\n * @example\n * Streaming filter with immediate results:\n * ```ts\n * async function* generateNumbers() {\n *   for (let i = 1; i <= 1000; i++) {\n *     yield i;\n *   }\n * }\n *\n * // Process results as they come\n * for await (const even of filterIterableAsyncGen(\n *   async (n) => n % 2 === 0,\n *   generateNumbers()\n * )) {\n *   console.log(even); // Prints 2, 4, 6, 8... as they're found\n *   if (even > 20) break; // Can stop early\n * }\n * ```\n *\n * @example\n * Memory-efficient processing:\n * ```ts\n * async function* fetchLargeDataset() {\n *   // Simulate fetching large dataset in chunks\n *   for (let page = 1; page <= 100; page++) {\n *     const response = await fetch(`/api/data?page=${page}`);\n *     const items = await response.json();\n *     for (const item of items) yield item;\n *   }\n * }\n *\n * // Filter without loading entire dataset into memory\n * const validItems = filterIterableAsyncGen(\n *   async (item) => item.isValid && item.score > 0.8,\n *   fetchLargeDataset()\n * );\n *\n * for await (const item of validItems) {\n *   await processItem(item); // Process one at a time\n * }\n * ```\n */",[5373,5485],"T_index,>(\n  predicate: (i: T_index) => Promisable<boolean>,\n  arrayLike: MaybeAsyncIterable<T_index>,\n): AsyncGenerator<T_index",[5394,5395],[5525,5586],"index of arrayLike) {\n    if (await predicate(index)) {\n      yield index",[5601,7007],"/**\n * Filters a synchronous iterable yielding elements that satisfy the predicate as they're processed.\n *\n * Generator version of filterIterable that provides streaming results without collecting all elements in memory.\n * {@inheritDoc filterIterableAsyncGen}\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean indicating whether to keep element\n * @param arrayLike - Synchronous iterable to filter\n * @returns Generator yielding elements that satisfy the predicate\n * @example\n * Streaming filter for large arrays:\n * ```ts\n * function* generateNumbers(max: number) {\n *   for (let i = 1; i <= max; i++) {\n *     yield i;\n *   }\n * }\n *\n * // Process results lazily\n * for (const even of filterIterableGen(\n *   (n) => n % 2 === 0,\n *   generateNumbers(1000)\n * )) {\n *   console.log(even); // Prints 2, 4, 6, 8...\n *   if (even > 20) break; // Can stop early without processing remaining\n * }\n * ```\n *\n * @example\n * Memory-efficient text processing:\n * ```ts\n * function* readLines(text: string) {\n *   for (const line of text.split('\\n')) {\n *     yield line;\n *   }\n * }\n *\n * const nonEmptyLines = filterIterableGen(\n *   (line) => line.trim().length > 0,\n *   readLines(largeTextFile)\n * );\n *\n * // Process only non-empty lines without storing all in memory\n * for (const line of nonEmptyLines) {\n *   processLine(line);\n * }\n * ```\n */",[5601,7007],"/**\n * Filters a synchronous iterable yielding elements that satisfy the predicate as they're processed.\n *\n * Generator version of filterIterable that provides streaming results without collecting all elements in memory.\n * {@inheritDoc filterIterableAsyncGen}\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean indicating whether to keep element\n * @param arrayLike - Synchronous iterable to filter\n * @returns Generator yielding elements that satisfy the predicate\n * @example\n * Streaming filter for large arrays:\n * ```ts\n * function* generateNumbers(max: number) {\n *   for (let i = 1; i <= max; i++) {\n *     yield i;\n *   }\n * }\n *\n * // Process results lazily\n * for (const even of filterIterableGen(\n *   (n) => n % 2 === 0,\n *   generateNumbers(1000)\n * )) {\n *   console.log(even); // Prints 2, 4, 6, 8...\n *   if (even > 20) break; // Can stop early without processing remaining\n * }\n * ```\n *\n * @example\n * Memory-efficient text processing:\n * ```ts\n * function* readLines(text: string) {\n *   for (const line of text.split('\\n')) {\n *     yield line;\n *   }\n * }\n *\n * const nonEmptyLines = filterIterableGen(\n *   (line) => line.trim().length > 0,\n *   readLines(largeTextFile)\n * );\n *\n * // Process only non-empty lines without storing all in memory\n * for (const line of nonEmptyLines) {\n *   processLine(line);\n * }\n * ```\n */",[7043,7128],"T_index,>(\n  predicate: (i: T_index) => boolean,\n  arrayLike: Iterable<T_index>,\n): Generator<T_index",[7064,7065],[7162,7217],"index of arrayLike) {\n    if (predicate(index)) {\n      yield index",[7232,9034],"/**\n * Asynchronously filters an iterable yielding elements that fail the predicate test as they're processed.\n *\n * Generator version that yields elements that return false from the predicate function.\n * Useful for collecting rejected items, validation failures, or inverse filtering operations.\n * Provides streaming results for memory-efficient processing of large datasets.\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean (elements returning false will be yielded)\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Async generator yielding elements that don't satisfy the predicate\n * @example\n * Collecting validation failures:\n * ```ts\n * async function* generateUsers() {\n *   yield { id: 1, email: 'valid@example.com', age: 25 };\n *   yield { id: 2, email: 'invalid-email', age: 17 };\n *   yield { id: 3, email: 'another@example.com', age: 30 };\n * }\n *\n * const invalidUsers = filterFailIterableAsyncGen(\n *   async (user) => user.email.includes('@') && user.age >= 18,\n *   generateUsers()\n * );\n *\n * for await (const user of invalidUsers) {\n *   console.log('Invalid user:', user); // Logs user with invalid email or underage\n * }\n * ```\n *\n * @example\n * Processing errors in data stream:\n * ```ts\n * async function* processDataStream() {\n *   const items = await fetchDataBatch();\n *   for (const item of items) yield item;\n * }\n *\n * const failedItems = filterFailIterableAsyncGen(\n *   async (item) => {\n *     try {\n *       await validateItem(item);\n *       return true;\n *     } catch {\n *       return false;\n *     }\n *   },\n *   processDataStream()\n * );\n *\n * // Handle failed items separately\n * for await (const failed of failedItems) {\n *   await logError(failed);\n * }\n * ```\n */",[7232,9034],"/**\n * Asynchronously filters an iterable yielding elements that fail the predicate test as they're processed.\n *\n * Generator version that yields elements that return false from the predicate function.\n * Useful for collecting rejected items, validation failures, or inverse filtering operations.\n * Provides streaming results for memory-efficient processing of large datasets.\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean (elements returning false will be yielded)\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Async generator yielding elements that don't satisfy the predicate\n * @example\n * Collecting validation failures:\n * ```ts\n * async function* generateUsers() {\n *   yield { id: 1, email: 'valid@example.com', age: 25 };\n *   yield { id: 2, email: 'invalid-email', age: 17 };\n *   yield { id: 3, email: 'another@example.com', age: 30 };\n * }\n *\n * const invalidUsers = filterFailIterableAsyncGen(\n *   async (user) => user.email.includes('@') && user.age >= 18,\n *   generateUsers()\n * );\n *\n * for await (const user of invalidUsers) {\n *   console.log('Invalid user:', user); // Logs user with invalid email or underage\n * }\n * ```\n *\n * @example\n * Processing errors in data stream:\n * ```ts\n * async function* processDataStream() {\n *   const items = await fetchDataBatch();\n *   for (const item of items) yield item;\n * }\n *\n * const failedItems = filterFailIterableAsyncGen(\n *   async (item) => {\n *     try {\n *       await validateItem(item);\n *       return true;\n *     } catch {\n *       return false;\n *     }\n *   },\n *   processDataStream()\n * );\n *\n * // Handle failed items separately\n * for await (const failed of failedItems) {\n *   await logError(failed);\n * }\n * ```\n */",[9085,9197],[9106,9107],[9237,9301],"index of arrayLike) {\n    if (!(await predicate(index))) {\n      yield index",[9316,10560],"/**\n * Filters a synchronous iterable yielding elements that fail the predicate test as they're processed.\n *\n * Generator version that yields elements that return false from the predicate function.\n * {@inheritDoc filterFailIterableAsyncGen}\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean (elements returning false will be yielded)\n * @param arrayLike - Synchronous iterable to filter\n * @returns Generator yielding elements that don't satisfy the predicate\n * @example\n * Collecting invalid data:\n * ```ts\n * const numbers = [1, 2, 'invalid', 4, null, 6];\n * const invalidNumbers = filterFailIterableGen(\n *   (item) => typeof item === 'number' && item > 0,\n *   numbers\n * );\n *\n * for (const invalid of invalidNumbers) {\n *   console.log('Invalid number:', invalid); // 'invalid', null\n * }\n * ```\n *\n * @example\n * Separating failed validations:\n * ```ts\n * const emails = ['valid@test.com', 'invalid-email', 'another@test.com', 'bad@'];\n * const invalidEmails = filterFailIterableGen(\n *   (email) => email.includes('@') && email.includes('.'),\n *   emails\n * );\n *\n * const failedList = [...invalidEmails];\n * console.log(failedList); // ['invalid-email', 'bad@']\n * ```\n */",[9316,10560],"/**\n * Filters a synchronous iterable yielding elements that fail the predicate test as they're processed.\n *\n * Generator version that yields elements that return false from the predicate function.\n * {@inheritDoc filterFailIterableAsyncGen}\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean (elements returning false will be yielded)\n * @param arrayLike - Synchronous iterable to filter\n * @returns Generator yielding elements that don't satisfy the predicate\n * @example\n * Collecting invalid data:\n * ```ts\n * const numbers = [1, 2, 'invalid', 4, null, 6];\n * const invalidNumbers = filterFailIterableGen(\n *   (item) => typeof item === 'number' && item > 0,\n *   numbers\n * );\n *\n * for (const invalid of invalidNumbers) {\n *   console.log('Invalid number:', invalid); // 'invalid', null\n * }\n * ```\n *\n * @example\n * Separating failed validations:\n * ```ts\n * const emails = ['valid@test.com', 'invalid-email', 'another@test.com', 'bad@'];\n * const invalidEmails = filterFailIterableGen(\n *   (email) => email.includes('@') && email.includes('.'),\n *   emails\n * );\n *\n * const failedList = [...invalidEmails];\n * console.log(failedList); // ['invalid-email', 'bad@']\n * ```\n */",[10600,10685],[10621,10622],[10719,10777],"index of arrayLike) {\n    if (!(predicate(index))) {\n      yield index",[10792,12376],"/**\n * Asynchronously filters an iterable collecting elements that fail the predicate test.\n *\n * Processes all elements and returns an array of those that return false from the predicate function.\n * Useful for collecting rejected items, validation failures, or performing inverse filtering operations.\n * Supports both synchronous and asynchronous iterables and predicates.\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean (elements returning false will be collected)\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Array containing elements that don't satisfy the predicate\n * @example\n * Collecting validation failures:\n * ```ts\n * const users = [\n *   { name: 'Alice', age: 25, email: 'alice@test.com' },\n *   { name: 'Bob', age: 17, email: 'invalid-email' },\n *   { name: 'Charlie', age: 30, email: 'charlie@test.com' }\n * ];\n *\n * const invalidUsers = await filterFailIterableAsync(\n *   async (user) => user.age >= 18 && user.email.includes('@'),\n *   users\n * );\n * console.log(invalidUsers); // [Bob object - underage and invalid email]\n * ```\n *\n * @example\n * Processing API responses:\n * ```ts\n * const urls = ['/api/valid', '/api/broken', '/api/working'];\n * const failedRequests = await filterFailIterableAsync(\n *   async (url) => {\n *     try {\n *       const response = await fetch(url);\n *       return response.ok;\n *     } catch {\n *       return false;\n *     }\n *   },\n *   urls\n * );\n * console.log(failedRequests); // URLs that failed or returned errors\n * ```\n */",[10792,12376],"/**\n * Asynchronously filters an iterable collecting elements that fail the predicate test.\n *\n * Processes all elements and returns an array of those that return false from the predicate function.\n * Useful for collecting rejected items, validation failures, or performing inverse filtering operations.\n * Supports both synchronous and asynchronous iterables and predicates.\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns promisable boolean (elements returning false will be collected)\n * @param arrayLike - Iterable or async iterable to filter\n * @returns Array containing elements that don't satisfy the predicate\n * @example\n * Collecting validation failures:\n * ```ts\n * const users = [\n *   { name: 'Alice', age: 25, email: 'alice@test.com' },\n *   { name: 'Bob', age: 17, email: 'invalid-email' },\n *   { name: 'Charlie', age: 30, email: 'charlie@test.com' }\n * ];\n *\n * const invalidUsers = await filterFailIterableAsync(\n *   async (user) => user.age >= 18 && user.email.includes('@'),\n *   users\n * );\n * console.log(invalidUsers); // [Bob object - underage and invalid email]\n * ```\n *\n * @example\n * Processing API responses:\n * ```ts\n * const urls = ['/api/valid', '/api/broken', '/api/working'];\n * const failedRequests = await filterFailIterableAsync(\n *   async (url) => {\n *     try {\n *       const response = await fetch(url);\n *       return response.ok;\n *     } catch {\n *       return false;\n *     }\n *   },\n *   urls\n * );\n * console.log(failedRequests); // URLs that failed or returned errors\n * ```\n */",[12423,12549],"T_index,>(\n  predicate: (i: T_index) => Promisable<boolean>,\n  arrayLike: MaybeAsyncIterable<T_index>,\n): Promise<T_index[]> {\n  const no: T_index",[12444,12445],[12578,12644],"index of arrayLike) {\n    if (!(await predicate(index))) {\n      no.push(index",[12674,13698],"/**\n * Filters a synchronous iterable collecting elements that fail the predicate test.\n *\n * {@inheritDoc filterFailIterableAsync}\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean (elements returning false will be collected)\n * @param arrayLike - Synchronous iterable to filter\n * @returns Array containing elements that don't satisfy the predicate\n * @example\n * Collecting invalid data:\n * ```ts\n * const mixedData = [1, 'text', 2, null, 3, undefined, 4];\n * const nonNumbers = filterFailIterable(\n *   (item) => typeof item === 'number',\n *   mixedData\n * );\n * console.log(nonNumbers); // ['text', null, undefined]\n * ```\n *\n * @example\n * Validation error collection:\n * ```ts\n * const passwords = ['abc123', 'password', 'StrongP@ss1', '123'];\n * const weakPasswords = filterFailIterable(\n *   (pwd) => pwd.length >= 8 && /[A-Z]/.test(pwd) && /[0-9]/.test(pwd),\n *   passwords\n * );\n * console.log(weakPasswords); // ['abc123', 'password', '123']\n * ```\n */",[12674,13698],"/**\n * Filters a synchronous iterable collecting elements that fail the predicate test.\n *\n * {@inheritDoc filterFailIterableAsync}\n *\n * @template T_i - Type of elements in the iterable\n * @param predicate - Function that returns boolean (elements returning false will be collected)\n * @param arrayLike - Synchronous iterable to filter\n * @returns Array containing elements that don't satisfy the predicate\n * @example\n * Collecting invalid data:\n * ```ts\n * const mixedData = [1, 'text', 2, null, 3, undefined, 4];\n * const nonNumbers = filterFailIterable(\n *   (item) => typeof item === 'number',\n *   mixedData\n * );\n * console.log(nonNumbers); // ['text', null, undefined]\n * ```\n *\n * @example\n * Validation error collection:\n * ```ts\n * const passwords = ['abc123', 'password', 'StrongP@ss1', '123'];\n * const weakPasswords = filterFailIterable(\n *   (pwd) => pwd.length >= 8 && /[A-Z]/.test(pwd) && /[0-9]/.test(pwd),\n *   passwords\n * );\n * console.log(weakPasswords); // ['abc123', 'password', '123']\n * ```\n */",[13734,13829],"T_index,>(\n  predicate: (i: T_index) => boolean,\n  arrayLike: Iterable<T_index>,\n): T_index[] {\n  const no: T_index",[13755,13756],[13852,13912],"index of arrayLike) {\n    if (!(predicate(index))) {\n      no.push(index",[489,489],[489,489],[667,667],[667,667],[858,858],[858,858],[1055,1055],[1055,1055],[1276,1276],[1276,1276],[1559,1559],[1559,1559],[1770,1770],[1770,1770],[1977,1977],[1977,1977],[2365,2365],[2365,2365],[2615,2615],[2615,2615],[2800,2800],[2800,2800],[2994,2994],[2994,2994],[3194,3194],[3194,3194],[3484,3484],[3484,3484],[3702,3702],[3702,3702],[3913,3913],[3913,3913],[4308,4308],[4308,4308],[49,513],"/**\n * Type guard that checks if a value is an array.\n * This is a re-export of the native Array.isArray method for consistency with other type guards.\n * @param value - Value to check\n * @returns True if value is an array, false otherwise\n * @example\n * ```ts\n * const arr = [1, 2, 3];\n * const notArr = 'hello';\n *\n * console.log(isArray(arr)); // true\n * console.log(isArray(notArr)); // false\n * console.log(isArray(new Set([1, 2]))); // false\n * ```\n */",[49,513],"/**\n * Type guard that checks if a value is an array.\n * This is a re-export of the native Array.isArray method for consistency with other type guards.\n *\n * @param value - Value to check\n * @returns True if value is an array, false otherwise\n * @example\n * ```ts\n * const arr = [1, 2, 3];\n * const notArr = 'hello';\n *\n * console.log(isArray(arr)); // true\n * console.log(isArray(notArr)); // false\n * console.log(isArray(new Set([1, 2]))); // false\n * ```\n */",[575,1495],"/**\n * Tests if a value is an Iterable but not an AsyncIterable.\n * This function specifically checks for synchronous iterables by looking for the Symbol.iterator method.\n * It will return false for AsyncIterables even though they may also have Symbol.iterator.\n * @param value - Value to check for Iterable interface\n * @returns True if value implements Iterable<any>, false otherwise\n * @example\n * ```ts\n * // Arrays are iterable\n * console.log(isIterable([1, 2, 3])); // true\n * console.log(isIterable('hello')); // true\n * console.log(isIterable(new Set([1, 2]))); // true\n * console.log(isIterable(new Map([['a', 1]]))); // true\n *\n * // Non-iterables\n * console.log(isIterable(42)); // false\n * console.log(isIterable({})); // false\n * console.log(isIterable(null)); // false\n *\n * // Generator functions return iterables\n * function* gen() { yield 1; }\n * console.log(isIterable(gen())); // true\n * ```\n */",[575,1495],"/**\n * Tests if a value is an Iterable but not an AsyncIterable.\n * This function specifically checks for synchronous iterables by looking for the Symbol.iterator method.\n * It will return false for AsyncIterables even though they may also have Symbol.iterator.\n *\n * @param value - Value to check for Iterable interface\n * @returns True if value implements Iterable<any>, false otherwise\n * @example\n * ```ts\n * // Arrays are iterable\n * console.log(isIterable([1, 2, 3])); // true\n * console.log(isIterable('hello')); // true\n * console.log(isIterable(new Set([1, 2]))); // true\n * console.log(isIterable(new Map([['a', 1]]))); // true\n *\n * // Non-iterables\n * console.log(isIterable(42)); // false\n * console.log(isIterable({})); // false\n * console.log(isIterable(null)); // false\n *\n * // Generator functions return iterables\n * function* gen() { yield 1; }\n * console.log(isIterable(gen())); // true\n * ```\n */",[1626,2616],"/**\n * Tests if a value is an AsyncIterable.\n * This function checks for the Symbol.asyncIterator method to determine if a value\n * can be used in async iteration contexts like `for await...of` loops.\n * @param value - Value to check for AsyncIterable interface\n * @returns True if value implements AsyncIterable<any>, false otherwise\n * @example\n * ```ts\n * // Async generators are async iterable\n * async function* asyncGen() { yield 1; yield 2; }\n * console.log(isAsyncIterable(asyncGen())); // true\n *\n * // Regular iterables aren't async iterable\n * console.log(isAsyncIterable([1, 2, 3])); // false\n * console.log(isAsyncIterable('hello')); // false\n *\n * // Non-iterables\n * console.log(isAsyncIterable(42)); // false\n * console.log(isAsyncIterable({})); // false\n *\n * // Custom async iterable\n * const customAsyncIterable = {\n *   async *[Symbol.asyncIterator]() {\n *     yield 1; yield 2;\n *   }\n * };\n * console.log(isAsyncIterable(customAsyncIterable)); // true\n * ```\n */",[1626,2616],"/**\n * Tests if a value is an AsyncIterable.\n * This function checks for the Symbol.asyncIterator method to determine if a value\n * can be used in async iteration contexts like `for await...of` loops.\n *\n * @param value - Value to check for AsyncIterable interface\n * @returns True if value implements AsyncIterable<any>, false otherwise\n * @example\n * ```ts\n * // Async generators are async iterable\n * async function* asyncGen() { yield 1; yield 2; }\n * console.log(isAsyncIterable(asyncGen())); // true\n *\n * // Regular iterables aren't async iterable\n * console.log(isAsyncIterable([1, 2, 3])); // false\n * console.log(isAsyncIterable('hello')); // false\n *\n * // Non-iterables\n * console.log(isAsyncIterable(42)); // false\n * console.log(isAsyncIterable({})); // false\n *\n * // Custom async iterable\n * const customAsyncIterable = {\n *   async *[Symbol.asyncIterator]() {\n *     yield 1; yield 2;\n *   }\n * };\n * console.log(isAsyncIterable(customAsyncIterable)); // true\n * ```\n */",[2762,3938],"/**\n * Tests if a value is either an Iterable or an AsyncIterable.\n * This function checks for both Symbol.iterator and Symbol.asyncIterator methods,\n * making it useful for functions that can handle both sync and async iteration.\n * @param value - Value to check for either Iterable or AsyncIterable interface\n * @returns True if value implements Iterable<any> or AsyncIterable<any>, false otherwise\n * @example\n * ```ts\n * // Sync iterables\n * console.log(isMaybeAsyncIterable([1, 2, 3])); // true\n * console.log(isMaybeAsyncIterable('hello')); // true\n * console.log(isMaybeAsyncIterable(new Set([1]))); // true\n *\n * // Async iterables\n * async function* asyncGen() { yield 1; }\n * console.log(isMaybeAsyncIterable(asyncGen())); // true\n *\n * // Non-iterables\n * console.log(isMaybeAsyncIterable(42)); // false\n * console.log(isMaybeAsyncIterable({})); // false\n * console.log(isMaybeAsyncIterable(null)); // false\n *\n * // Useful for generic iteration functions\n * function processIterable(data: unknown) {\n *   if (isMaybeAsyncIterable(data)) {\n *     // Can safely iterate over data\n *     return data;\n *   }\n *   throw new Error('Not iterable');\n * }\n * ```\n */",[2762,3938],"/**\n * Tests if a value is either an Iterable or an AsyncIterable.\n * This function checks for both Symbol.iterator and Symbol.asyncIterator methods,\n * making it useful for functions that can handle both sync and async iteration.\n *\n * @param value - Value to check for either Iterable or AsyncIterable interface\n * @returns True if value implements Iterable<any> or AsyncIterable<any>, false otherwise\n * @example\n * ```ts\n * // Sync iterables\n * console.log(isMaybeAsyncIterable([1, 2, 3])); // true\n * console.log(isMaybeAsyncIterable('hello')); // true\n * console.log(isMaybeAsyncIterable(new Set([1]))); // true\n *\n * // Async iterables\n * async function* asyncGen() { yield 1; }\n * console.log(isMaybeAsyncIterable(asyncGen())); // true\n *\n * // Non-iterables\n * console.log(isMaybeAsyncIterable(42)); // false\n * console.log(isMaybeAsyncIterable({})); // false\n * console.log(isMaybeAsyncIterable(null)); // false\n *\n * // Useful for generic iteration functions\n * function processIterable(data: unknown) {\n *   if (isMaybeAsyncIterable(data)) {\n *     // Can safely iterate over data\n *     return data;\n *   }\n *   throw new Error('Not iterable');\n * }\n * ```\n */",[4159,5057],"/**\n * Tests if a value is a Map instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n * Special handling in includesArrayLike for performance optimization.\n * @param value - Value to check for Map type\n * @returns True if value is a Map instance, false otherwise\n * @example\n * ```ts\n * const map = new Map([['key', 'value']]);\n * const weakMap = new WeakMap();\n * const obj = { key: 'value' };\n *\n * console.log(isMap(map)); // true\n * console.log(isMap(weakMap)); // false\n * console.log(isMap(obj)); // false\n * console.log(isMap([])); // false\n * console.log(isMap(new Set())); // false\n *\n * // Works with Maps from different contexts\n * const iframe = document.createElement('iframe');\n * document.body.appendChild(iframe);\n * const iframeMap = new iframe.contentWindow.Map();\n * console.log(isMap(iframeMap)); // true\n * ```\n */",[4159,5057],"/**\n * Tests if a value is a Map instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n * Special handling in includesArrayLike for performance optimization.\n *\n * @param value - Value to check for Map type\n * @returns True if value is a Map instance, false otherwise\n * @example\n * ```ts\n * const map = new Map([['key', 'value']]);\n * const weakMap = new WeakMap();\n * const obj = { key: 'value' };\n *\n * console.log(isMap(map)); // true\n * console.log(isMap(weakMap)); // false\n * console.log(isMap(obj)); // false\n * console.log(isMap([])); // false\n * console.log(isMap(new Set())); // false\n *\n * // Works with Maps from different contexts\n * const iframe = document.createElement('iframe');\n * document.body.appendChild(iframe);\n * const iframeMap = new iframe.contentWindow.Map();\n * console.log(isMap(iframeMap)); // true\n * ```\n */",[5188,5873],"/**\n * Tests if a value is a WeakMap instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n * @param value - Value to check for WeakMap type\n * @returns True if value is a WeakMap instance, false otherwise\n * @example\n * ```ts\n * const weakMap = new WeakMap();\n * const map = new Map();\n * const obj = {};\n *\n * console.log(isWeakMap(weakMap)); // true\n * console.log(isWeakMap(map)); // false\n * console.log(isWeakMap(obj)); // false\n * console.log(isWeakMap(null)); // false\n *\n * // WeakMaps can only have object keys\n * const key = {};\n * weakMap.set(key, 'value');\n * console.log(isWeakMap(weakMap)); // true\n * ```\n */",[5188,5873],"/**\n * Tests if a value is a WeakMap instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n *\n * @param value - Value to check for WeakMap type\n * @returns True if value is a WeakMap instance, false otherwise\n * @example\n * ```ts\n * const weakMap = new WeakMap();\n * const map = new Map();\n * const obj = {};\n *\n * console.log(isWeakMap(weakMap)); // true\n * console.log(isWeakMap(map)); // false\n * console.log(isWeakMap(obj)); // false\n * console.log(isWeakMap(null)); // false\n *\n * // WeakMaps can only have object keys\n * const key = {};\n * weakMap.set(key, 'value');\n * console.log(isWeakMap(weakMap)); // true\n * ```\n */",[6021,6763],"/**\n * Tests if a value is a Set instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n * Special handling in includesArrayLike for performance optimization.\n * @param value - Value to check for Set type\n * @returns True if value is a Set instance, false otherwise\n * @example\n * ```ts\n * const set = new Set([1, 2, 3]);\n * const weakSet = new WeakSet();\n * const arr = [1, 2, 3];\n *\n * console.log(isSet(set)); // true\n * console.log(isSet(weakSet)); // false\n * console.log(isSet(arr)); // false\n * console.log(isSet({})); // false\n *\n * // Sets are iterable\n * console.log(isIterable(set)); // true\n * for (const item of set) {\n *   console.log(item); // 1, 2, 3\n * }\n * ```\n */",[6021,6763],"/**\n * Tests if a value is a Set instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n * Special handling in includesArrayLike for performance optimization.\n *\n * @param value - Value to check for Set type\n * @returns True if value is a Set instance, false otherwise\n * @example\n * ```ts\n * const set = new Set([1, 2, 3]);\n * const weakSet = new WeakSet();\n * const arr = [1, 2, 3];\n *\n * console.log(isSet(set)); // true\n * console.log(isSet(weakSet)); // false\n * console.log(isSet(arr)); // false\n * console.log(isSet({})); // false\n *\n * // Sets are iterable\n * console.log(isIterable(set)); // true\n * for (const item of set) {\n *   console.log(item); // 1, 2, 3\n * }\n * ```\n */",[6889,7562],"/**\n * Tests if a value is a WeakSet instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n * @param value - Value to check for WeakSet type\n * @returns True if value is a WeakSet instance, false otherwise\n * @example\n * ```ts\n * const weakSet = new WeakSet();\n * const set = new Set();\n * const arr = [];\n *\n * console.log(isWeakSet(weakSet)); // true\n * console.log(isWeakSet(set)); // false\n * console.log(isWeakSet(arr)); // false\n * console.log(isWeakSet({})); // false\n *\n * // WeakSets can only contain objects\n * const obj = {};\n * weakSet.add(obj);\n * console.log(isWeakSet(weakSet)); // true\n * ```\n */",[6889,7562],"/**\n * Tests if a value is a WeakSet instance.\n * Uses Object.prototype.toString for reliable type checking that works across different contexts.\n *\n * @param value - Value to check for WeakSet type\n * @returns True if value is a WeakSet instance, false otherwise\n * @example\n * ```ts\n * const weakSet = new WeakSet();\n * const set = new Set();\n * const arr = [];\n *\n * console.log(isWeakSet(weakSet)); // true\n * console.log(isWeakSet(set)); // false\n * console.log(isWeakSet(arr)); // false\n * console.log(isWeakSet({})); // false\n *\n * // WeakSets can only contain objects\n * const obj = {};\n * weakSet.add(obj);\n * console.log(isWeakSet(weakSet)); // true\n * ```\n */",[7700,8620],"/**\n * Tests if a value is a plain object (not an array, function, or other object type).\n * Uses Object.prototype.toString to check for '[object Object]' which indicates a plain object.\n * @param value - Value to check for plain object type\n * @returns True if value is a plain object, false otherwise\n * @example\n * ```ts\n * const plainObj = { key: 'value' };\n * const arr = [1, 2, 3];\n * const func = () => {};\n * const date = new Date();\n *\n * console.log(isObject(plainObj)); // true\n * console.log(isObject(arr)); // false\n * console.log(isObject(func)); // false\n * console.log(isObject(date)); // false\n * console.log(isObject(null)); // false\n * console.log(isObject(undefined)); // false\n *\n * // Object literals and Object.create(null)\n * console.log(isObject({})); // true\n * console.log(isObject(Object.create(null))); // false (no prototype)\n * console.log(isObject(new Object())); // true\n * ```\n */",[7700,8620],"/**\n * Tests if a value is a plain object (not an array, function, or other object type).\n * Uses Object.prototype.toString to check for '[object Object]' which indicates a plain object.\n *\n * @param value - Value to check for plain object type\n * @returns True if value is a plain object, false otherwise\n * @example\n * ```ts\n * const plainObj = { key: 'value' };\n * const arr = [1, 2, 3];\n * const func = () => {};\n * const date = new Date();\n *\n * console.log(isObject(plainObj)); // true\n * console.log(isObject(arr)); // false\n * console.log(isObject(func)); // false\n * console.log(isObject(date)); // false\n * console.log(isObject(null)); // false\n * console.log(isObject(undefined)); // false\n *\n * // Object literals and Object.create(null)\n * console.log(isObject({})); // true\n * console.log(isObject(Object.create(null))); // false (no prototype)\n * console.log(isObject(new Object())); // true\n * ```\n */",[8757,9663],"/**\n * Tests if a value is an AsyncGenerator instance.\n * AsyncGenerators are created by async generator functions and can be used with `for await...of`.\n * @param value - Value to check for AsyncGenerator type\n * @returns True if value is an AsyncGenerator instance, false otherwise\n * @example\n * ```ts\n * async function* asyncGenFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * function* syncGenFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * const asyncGen = asyncGenFunc();\n * const syncGen = syncGenFunc();\n *\n * console.log(isAsyncGenerator(asyncGen)); // true\n * console.log(isAsyncGenerator(syncGen)); // false\n * console.log(isAsyncGenerator([1, 2])); // false\n *\n * // AsyncGenerators are also async iterable\n * console.log(isAsyncIterable(asyncGen)); // true\n *\n * // Usage with for await...of\n * for await (const value of asyncGenFunc()) {\n *   console.log(value); // 1, 2\n * }\n * ```\n */",[8757,9663],"/**\n * Tests if a value is an AsyncGenerator instance.\n * AsyncGenerators are created by async generator functions and can be used with `for await...of`.\n *\n * @param value - Value to check for AsyncGenerator type\n * @returns True if value is an AsyncGenerator instance, false otherwise\n * @example\n * ```ts\n * async function* asyncGenFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * function* syncGenFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * const asyncGen = asyncGenFunc();\n * const syncGen = syncGenFunc();\n *\n * console.log(isAsyncGenerator(asyncGen)); // true\n * console.log(isAsyncGenerator(syncGen)); // false\n * console.log(isAsyncGenerator([1, 2])); // false\n *\n * // AsyncGenerators are also async iterable\n * console.log(isAsyncIterable(asyncGen)); // true\n *\n * // Usage with for await...of\n * for await (const value of asyncGenFunc()) {\n *   console.log(value); // 1, 2\n * }\n * ```\n */",[9822,10673],"/**\n * Tests if a value is a Generator instance.\n * Generators are created by generator functions and can be used with `for...of` loops.\n * @param value - Value to check for Generator type\n * @returns True if value is a Generator instance, false otherwise\n * @example\n * ```ts\n * function* genFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * async function* asyncGenFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * const gen = genFunc();\n * const asyncGen = asyncGenFunc();\n *\n * console.log(isGenerator(gen)); // true\n * console.log(isGenerator(asyncGen)); // false\n * console.log(isGenerator([1, 2])); // false\n * console.log(isGenerator('hello')); // false\n *\n * // Generators are iterable\n * console.log(isIterable(gen)); // true\n *\n * // Usage with for...of\n * for (const value of genFunc()) {\n *   console.log(value); // 1, 2\n * }\n * ```\n */",[9822,10673],"/**\n * Tests if a value is a Generator instance.\n * Generators are created by generator functions and can be used with `for...of` loops.\n *\n * @param value - Value to check for Generator type\n * @returns True if value is a Generator instance, false otherwise\n * @example\n * ```ts\n * function* genFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * async function* asyncGenFunc() {\n *   yield 1;\n *   yield 2;\n * }\n *\n * const gen = genFunc();\n * const asyncGen = asyncGenFunc();\n *\n * console.log(isGenerator(gen)); // true\n * console.log(isGenerator(asyncGen)); // false\n * console.log(isGenerator([1, 2])); // false\n * console.log(isGenerator('hello')); // false\n *\n * // Generators are iterable\n * console.log(isIterable(gen)); // true\n *\n * // Usage with for...of\n * for (const value of genFunc()) {\n *   console.log(value); // 1, 2\n * }\n * ```\n */",[10817,11565],"/**\n * Tests if a value is an empty array.\n * This is a type guard that narrows the type to never[] when true.\n * @param value - Value to check for empty array\n * @returns True if value is an array with length 0, false otherwise\n * @example\n * ```ts\n * const empty = [];\n * const notEmpty = [1, 2, 3];\n * const notArray = 'hello';\n *\n * console.log(isEmptyArray(empty)); // true\n * console.log(isEmptyArray(notEmpty)); // false\n * console.log(isEmptyArray(notArray)); // false\n * console.log(isEmptyArray(null)); // false\n *\n * // Type narrowing\n * function processArray(arr: unknown) {\n *   if (isEmptyArray(arr)) {\n *     // arr is now typed as never[]\n *     console.log('Empty array with length:', arr.length); // 0\n *   }\n * }\n * ```\n */",[10817,11565],"/**\n * Tests if a value is an empty array.\n * This is a type guard that narrows the type to never[] when true.\n *\n * @param value - Value to check for empty array\n * @returns True if value is an array with length 0, false otherwise\n * @example\n * ```ts\n * const empty = [];\n * const notEmpty = [1, 2, 3];\n * const notArray = 'hello';\n *\n * console.log(isEmptyArray(empty)); // true\n * console.log(isEmptyArray(notEmpty)); // false\n * console.log(isEmptyArray(notArray)); // false\n * console.log(isEmptyArray(null)); // false\n *\n * // Type narrowing\n * function processArray(arr: unknown) {\n *   if (isEmptyArray(arr)) {\n *     // arr is now typed as never[]\n *     console.log('Empty array with length:', arr.length); // 0\n *   }\n * }\n * ```\n */",[11677,12454],"/**\n * Tests if an array is empty.\n * This function assumes the input is already known to be an array and checks its length.\n * @param value - Array to check for emptiness\n * @returns True if array has length 0, false otherwise\n * @example\n * ```ts\n * const empty: number[] = [];\n * const notEmpty = [1, 2, 3];\n * const mixed: (string | number)[] = [];\n *\n * console.log(isArrayEmpty(empty)); // true\n * console.log(isArrayEmpty(notEmpty)); // false\n * console.log(isArrayEmpty(mixed)); // true\n *\n * // Useful for array processing\n * function processKnownArray(arr: readonly any[]) {\n *   if (isArrayEmpty(arr)) {\n *     console.log('Nothing to process');\n *     return;\n *   }\n *   // Process non-empty array\n *   arr.forEach(item => console.log(item));\n * }\n * ```\n */",[11677,12454],"/**\n * Tests if an array is empty.\n * This function assumes the input is already known to be an array and checks its length.\n *\n * @param value - Array to check for emptiness\n * @returns True if array has length 0, false otherwise\n * @example\n * ```ts\n * const empty: number[] = [];\n * const notEmpty = [1, 2, 3];\n * const mixed: (string | number)[] = [];\n *\n * console.log(isArrayEmpty(empty)); // true\n * console.log(isArrayEmpty(notEmpty)); // false\n * console.log(isArrayEmpty(mixed)); // true\n *\n * // Useful for array processing\n * function processKnownArray(arr: readonly any[]) {\n *   if (isArrayEmpty(arr)) {\n *     console.log('Nothing to process');\n *     return;\n *   }\n *   // Process non-empty array\n *   arr.forEach(item => console.log(item));\n * }\n * ```\n */",[12564,13481],"/**\n * Tests if an array is non-empty and narrows the type to a tuple with at least one element.\n * This is a type guard that ensures the array has at least one element.\n * @param value - Array to check for non-emptiness\n * @returns True if array has length > 0, false otherwise\n * @example\n * ```ts\n * const empty: number[] = [];\n * const notEmpty = [1, 2, 3];\n * const single = ['hello'];\n *\n * console.log(isArrayNonEmpty(empty)); // false\n * console.log(isArrayNonEmpty(notEmpty)); // true\n * console.log(isArrayNonEmpty(single)); // true\n *\n * // Type narrowing to [T, ...T[]]\n * function processArray(arr: readonly number[]) {\n *   if (isArrayNonEmpty(arr)) {\n *     // arr is now typed as [number, ...number[]]\n *     const first = arr[0]; // Safe access to first element\n *     const rest = arr.slice(1); // Rest of the elements\n *     console.log('First:', first, 'Rest:', rest);\n *   }\n * }\n * ```\n */",[12564,13481],"/**\n * Tests if an array is non-empty and narrows the type to a tuple with at least one element.\n * This is a type guard that ensures the array has at least one element.\n *\n * @param value - Array to check for non-emptiness\n * @returns True if array has length > 0, false otherwise\n * @example\n * ```ts\n * const empty: number[] = [];\n * const notEmpty = [1, 2, 3];\n * const single = ['hello'];\n *\n * console.log(isArrayNonEmpty(empty)); // false\n * console.log(isArrayNonEmpty(notEmpty)); // true\n * console.log(isArrayNonEmpty(single)); // true\n *\n * // Type narrowing to [T, ...T[]]\n * function processArray(arr: readonly number[]) {\n *   if (isArrayNonEmpty(arr)) {\n *     // arr is now typed as [number, ...number[]]\n *     const first = arr[0]; // Safe access to first element\n *     const rest = arr.slice(1); // Rest of the elements\n *     console.log('First:', first, 'Rest:', rest);\n *   }\n * }\n * ```\n */",[13628,14515],"/**\n * Tests if a value is a non-empty array and narrows the type accordingly.\n * This function first checks if the value is an array, then checks if it's non-empty.\n * @param value - Value to check for non-empty array\n * @returns True if value is an array with length > 0, false otherwise\n * @example\n * ```ts\n * const arr = [1, 2, 3];\n * const empty: number[] = [];\n * const notArray = 'hello';\n *\n * console.log(isNonEmptyArray(arr)); // true\n * console.log(isNonEmptyArray(empty)); // false\n * console.log(isNonEmptyArray(notArray)); // false\n * console.log(isNonEmptyArray(null)); // false\n *\n * // Type narrowing from unknown\n * function processUnknown(value: unknown) {\n *   if (isNonEmptyArray(value)) {\n *     // value is now typed as [Element, ...Element[]]\n *     const first = value[0]; // Safe access\n *     console.log('First element:', first);\n *   }\n * }\n * ```\n */",[13628,14515],"/**\n * Tests if a value is a non-empty array and narrows the type accordingly.\n * This function first checks if the value is an array, then checks if it's non-empty.\n *\n * @param value - Value to check for non-empty array\n * @returns True if value is an array with length > 0, false otherwise\n * @example\n * ```ts\n * const arr = [1, 2, 3];\n * const empty: number[] = [];\n * const notArray = 'hello';\n *\n * console.log(isNonEmptyArray(arr)); // true\n * console.log(isNonEmptyArray(empty)); // false\n * console.log(isNonEmptyArray(notArray)); // false\n * console.log(isNonEmptyArray(null)); // false\n *\n * // Type narrowing from unknown\n * function processUnknown(value: unknown) {\n *   if (isNonEmptyArray(value)) {\n *     // value is now typed as [Element, ...Element[]]\n *     const first = value[0]; // Safe access\n *     console.log('First element:', first);\n *   }\n * }\n * ```\n */",[14880,15800],"/**\n * Tests if a value is a non-empty array with enhanced type inference.\n * Similar to isNonEmptyArray but with different generic constraints for better type inference.\n * @param value - Value to check for non-empty array\n * @returns True if value is an array with length > 0, false otherwise\n * @example\n * ```ts\n * const numbers = [1, 2, 3];\n * const strings = ['a', 'b'];\n * const empty: string[] = [];\n * const notArray = { length: 1 };\n *\n * console.log(arrayIsNonEmpty(numbers)); // true\n * console.log(arrayIsNonEmpty(strings)); // true\n * console.log(arrayIsNonEmpty(empty)); // false\n * console.log(arrayIsNonEmpty(notArray)); // false\n *\n * // Enhanced type inference\n * function processValue<T extends readonly any[]>(value: T | unknown) {\n *   if (arrayIsNonEmpty(value)) {\n *     // Better type inference for the array elements\n *     value.forEach(item => console.log(item));\n *   }\n * }\n * ```\n */",[14880,15800],"/**\n * Tests if a value is a non-empty array with enhanced type inference.\n * Similar to isNonEmptyArray but with different generic constraints for better type inference.\n *\n * @param value - Value to check for non-empty array\n * @returns True if value is an array with length > 0, false otherwise\n * @example\n * ```ts\n * const numbers = [1, 2, 3];\n * const strings = ['a', 'b'];\n * const empty: string[] = [];\n * const notArray = { length: 1 };\n *\n * console.log(arrayIsNonEmpty(numbers)); // true\n * console.log(arrayIsNonEmpty(strings)); // true\n * console.log(arrayIsNonEmpty(empty)); // false\n * console.log(arrayIsNonEmpty(notArray)); // false\n *\n * // Enhanced type inference\n * function processValue<T extends readonly any[]>(value: T | unknown) {\n *   if (arrayIsNonEmpty(value)) {\n *     // Better type inference for the array elements\n *     value.forEach(item => console.log(item));\n *   }\n * }\n * ```\n */",[16186,16937],"/**\n * Type utility that checks if a type is a tuple array (fixed-length array).\n * Returns true for empty arrays and arrays with known fixed length, false for variable-length arrays.\n * @example\n * ```ts\n * type Test1 = IsTupleArray<[]>; // true\n * type Test2 = IsTupleArray<[number]>; // true\n * type Test3 = IsTupleArray<[string, number]>; // true\n * type Test4 = IsTupleArray<number[]>; // false\n * type Test5 = IsTupleArray<readonly [1, 2, 3]>; // true\n * type Test6 = IsTupleArray<Array<string>>; // false\n *\n * // Usage in generic constraints\n * function processTuple<T extends readonly unknown[]>(\n *   arr: T\n * ): IsTupleArray<T> extends true ? 'tuple' : 'array' {\n *   return (arr.length >= 0 ? 'tuple' : 'array') as any;\n * }\n * ```\n */",[17073,17775],"/**\n * Type utility that extracts tuple arrays from a union type.\n * Returns the type if it's a tuple with at least one element, never otherwise.\n * @example\n * ```ts\n * type Test1 = TupleArray<[number, string]>; // [number, string]\n * type Test2 = TupleArray<number[]>; // never\n * type Test3 = TupleArray<[]>; // never (empty tuple)\n * type Test4 = TupleArray<readonly [1, 2]>; // readonly [1, 2]\n *\n * // Usage in conditional types\n * type ProcessArray<T> = TupleArray<T> extends never\n *   ? 'not a non-empty tuple'\n *   : 'is a non-empty tuple';\n *\n * type Result1 = ProcessArray<[1, 2]>; // 'is a non-empty tuple'\n * type Result2 = ProcessArray<number[]>; // 'not a non-empty tuple'\n * ```\n */",[17873,18571],"/**\n * Type utility that extracts variable-length arrays from a type.\n * Returns the type if it's an array with variable length, never if it's a fixed-length tuple.\n * @example\n * ```ts\n * type Test1 = ArrayNonFixedLengthOrNever<number[]>; // number[]\n * type Test2 = ArrayNonFixedLengthOrNever<[1, 2, 3]>; // never\n * type Test3 = ArrayNonFixedLengthOrNever<Array<string>>; // Array<string>\n * type Test4 = ArrayNonFixedLengthOrNever<readonly number[]>; // readonly number[]\n * type Test5 = ArrayNonFixedLengthOrNever<string>; // never\n *\n * // Usage for function overloads\n * function processArray<T>(arr: T):\n *   ArrayNonFixedLengthOrNever<T> extends never ? 'fixed' : 'variable';\n * ```\n */",[18703,19406],"/**\n * Type utility that extracts fixed-length arrays (tuples) from a type.\n * Returns the type if it's a tuple with fixed length, never if it's a variable-length array.\n * @example\n * ```ts\n * type Test1 = ArrayFixedLengthOrNever<[1, 2, 3]>; // [1, 2, 3]\n * type Test2 = ArrayFixedLengthOrNever<number[]>; // never\n * type Test3 = ArrayFixedLengthOrNever<readonly [string, number]>; // readonly [string, number]\n * type Test4 = ArrayFixedLengthOrNever<Array<boolean>>; // never\n * type Test5 = ArrayFixedLengthOrNever<[]>; // []\n *\n * // Usage for tuple-specific operations\n * function processTuple<T>(arr: T):\n *   ArrayFixedLengthOrNever<T> extends never ? 'not a tuple' : 'is a tuple';\n * ```\n */",[19616,20369],"/**\n * Type utility that determines if an array type has a fixed length.\n * Returns true for tuples and fixed-length arrays, false for variable-length arrays.\n * @example\n * ```ts\n * type Test1 = IsArrayFixedLength<[1, 2, 3]>; // true\n * type Test2 = IsArrayFixedLength<number[]>; // false\n * type Test3 = IsArrayFixedLength<readonly [string]>; // true\n * type Test4 = IsArrayFixedLength<Array<boolean>>; // false\n * type Test5 = IsArrayFixedLength<[]>; // true\n *\n * // Usage in conditional logic\n * function handleArray<T extends readonly unknown[]>(\n *   arr: T\n * ): IsArrayFixedLength<T> extends true ? 'fixed length' : 'variable length' {\n *   return (typeof arr.length === 'number' ? 'fixed length' : 'variable length') as any;\n * }\n * ```\n */",[20482,21506],"/**\n * Tests if an array has exactly one element.\n * This is a type guard that narrows the type to a single-element tuple.\n * @param value - Array to check for single element\n * @returns True if array has exactly one element, false otherwise\n * @example\n * ```ts\n * const single = ['hello'];\n * const empty: string[] = [];\n * const multiple = [1, 2, 3];\n *\n * console.log(isArrayOfLength1(single)); // true\n * console.log(isArrayOfLength1(empty)); // false\n * console.log(isArrayOfLength1(multiple)); // false\n *\n * // Type narrowing to [T]\n * function processSingleItem<T>(arr: readonly T[]) {\n *   if (isArrayOfLength1(arr)) {\n *     // arr is now typed as readonly [T]\n *     const onlyItem = arr[0]; // Safe access to the single element\n *     console.log('Single item:', onlyItem);\n *   }\n * }\n *\n * // Useful for validation\n * function requireSingleValue<T>(values: T[]): T {\n *   if (isArrayOfLength1(values)) {\n *     return values[0];\n *   }\n *   throw new Error('Expected exactly one value');\n * }\n * ```\n */",[20482,21506],"/**\n * Tests if an array has exactly one element.\n * This is a type guard that narrows the type to a single-element tuple.\n *\n * @param value - Array to check for single element\n * @returns True if array has exactly one element, false otherwise\n * @example\n * ```ts\n * const single = ['hello'];\n * const empty: string[] = [];\n * const multiple = [1, 2, 3];\n *\n * console.log(isArrayOfLength1(single)); // true\n * console.log(isArrayOfLength1(empty)); // false\n * console.log(isArrayOfLength1(multiple)); // false\n *\n * // Type narrowing to [T]\n * function processSingleItem<T>(arr: readonly T[]) {\n *   if (isArrayOfLength1(arr)) {\n *     // arr is now typed as readonly [T]\n *     const onlyItem = arr[0]; // Safe access to the single element\n *     console.log('Single item:', onlyItem);\n *   }\n * }\n *\n * // Useful for validation\n * function requireSingleValue<T>(values: T[]): T {\n *   if (isArrayOfLength1(values)) {\n *     return values[0];\n *   }\n *   throw new Error('Expected exactly one value');\n * }\n * ```\n */",{"kind":"10413","justification":"10416"},{"kind":"10413","justification":"10416"},[4586,4586],[4586,4586],[5772,5772],[5772,5772],[6636,6647],"isWeakMap",[6754,6754],[6754,6754],[6825,6825],[6825,6825],[7758,7758],[7758,7758],[7818,7818],[7818,7818],[8898,8898],[8898,8898],[9057,9057],[9057,9057],[9442,9442],[9442,9442],[9596,9596],[9596,9596],[349,857],"/**\n * Mapping function that receives only the element parameter.\n * This is the simplest form of mapping function, suitable for transformations\n * that only need the element value itself.\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const doubler: MappingFunctionWithElement<number, number> = x => x * 2;\n * const toString: MappingFunctionWithElement<number, string> = x => x.toString();\n * ```\n */",[349,857],"/**\n * Mapping function that receives only the element parameter.\n * This is the simplest form of mapping function, suitable for transformations\n * that only need the element value itself.\n *\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const doubler: MappingFunctionWithElement<number, number> = x => x * 2;\n * const toString: MappingFunctionWithElement<number, string> = x => x.toString();\n * ```\n */",[975,1572],"/**\n * Mapping function that receives element and index parameters.\n * Useful for transformations that need to know the position of each element\n * in the iteration sequence.\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const withIndex: MappingFunctionWithElementAndIndex<string, string> =\n *   (element, index) => `${index}: ${element}`;\n * const skipEvens: MappingFunctionWithElementAndIndex<number, number | null> =\n *   (element, index) => index % 2 === 0 ? element : null;\n * ```\n */",[975,1572],"/**\n * Mapping function that receives element and index parameters.\n * Useful for transformations that need to know the position of each element\n * in the iteration sequence.\n *\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const withIndex: MappingFunctionWithElementAndIndex<string, string> =\n *   (element, index) => `${index}: ${element}`;\n * const skipEvens: MappingFunctionWithElementAndIndex<number, number | null> =\n *   (element, index) => index % 2 === 0 ? element : null;\n * ```\n */",[1715,2359],"/**\n * Mapping function that receives element, index, and array parameters.\n * Provides full context including access to the complete array being processed.\n * Most comprehensive mapping function signature for complex transformations.\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const withContext: MappingFunctionWithElementAndIndexAndArray<number, object> =\n *   (element, index, array) => ({\n *     value: element,\n *     position: index + 1,\n *     total: array.length,\n *     isLast: index === array.length - 1\n *   });\n * ```\n */",[1715,2359],"/**\n * Mapping function that receives element, index, and array parameters.\n * Provides full context including access to the complete array being processed.\n * Most comprehensive mapping function signature for complex transformations.\n *\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const withContext: MappingFunctionWithElementAndIndexAndArray<number, object> =\n *   (element, index, array) => ({\n *     value: element,\n *     position: index + 1,\n *     total: array.length,\n *     isLast: index === array.length - 1\n *   });\n * ```\n */",[2532,3172],"/**\n * Union type representing any synchronous mapping function signature.\n * Accepts functions with element-only, element+index, or element+index+array parameters.\n * Used by synchronous mapping operations like `mapIterable`.\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const simpleMap: MappingFunction<number, string> = x => x.toString();\n * const indexedMap: MappingFunction<number, string> = (x, i) => `${i}: ${x}`;\n * const contextMap: MappingFunction<number, string> = (x, i, arr) =>\n *   `${x} of ${arr.length}`;\n * ```\n */",[2532,3172],"/**\n * Union type representing any synchronous mapping function signature.\n * Accepts functions with element-only, element+index, or element+index+array parameters.\n * Used by synchronous mapping operations like `mapIterable`.\n *\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const simpleMap: MappingFunction<number, string> = x => x.toString();\n * const indexedMap: MappingFunction<number, string> = (x, i) => `${i}: ${x}`;\n * const contextMap: MappingFunction<number, string> = (x, i, arr) =>\n *   `${x} of ${arr.length}`;\n * ```\n */",[3435,4073],"/**\n * Union type representing any asynchronous mapping function signature.\n * Accepts functions that can return promises, supporting async transformations.\n * Used by asynchronous mapping operations like `mapIterableAsync`.\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const asyncMap: MappingFunctionPromisable<number, string> =\n *   async x => (await fetch(`/api/${x}`)).text();\n * const mixedMap: MappingFunctionPromisable<number, string> =\n *   (x, i) => i % 2 === 0 ? Promise.resolve(x.toString()) : x.toString();\n * ```\n */",[3435,4073],"/**\n * Union type representing any asynchronous mapping function signature.\n * Accepts functions that can return promises, supporting async transformations.\n * Used by asynchronous mapping operations like `mapIterableAsync`.\n *\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const asyncMap: MappingFunctionPromisable<number, string> =\n *   async x => (await fetch(`/api/${x}`)).text();\n * const mixedMap: MappingFunctionPromisable<number, string> =\n *   (x, i) => i % 2 === 0 ? Promise.resolve(x.toString()) : x.toString();\n * ```\n */",[4414,5043],"/**\n * Union type for mapping functions without array parameter access.\n * Used by generator-based mapping functions where the full array isn't available\n * due to lazy evaluation. Supports element-only and element+index signatures.\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const lazyMap: MappingFunctionNoArray<number, string> = x => x.toString();\n * const indexedLazyMap: MappingFunctionNoArray<number, string> =\n *   (x, i) => `Item ${i}: ${x}`;\n * // Note: Can't access full array in generator context\n * ```\n */",[4414,5043],"/**\n * Union type for mapping functions without array parameter access.\n * Used by generator-based mapping functions where the full array isn't available\n * due to lazy evaluation. Supports element-only and element+index signatures.\n *\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const lazyMap: MappingFunctionNoArray<number, string> = x => x.toString();\n * const indexedLazyMap: MappingFunctionNoArray<number, string> =\n *   (x, i) => `Item ${i}: ${x}`;\n * // Note: Can't access full array in generator context\n * ```\n */",[5238,5919],"/**\n * Union type for async mapping functions without array parameter access.\n * Used by async generator-based mapping functions where the full array isn't available\n * due to streaming/lazy evaluation. Supports both sync and async transformations.\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const asyncLazyMap: MappingFunctionNoArrayPromisable<number, string> =\n *   async x => (await processAsync(x)).toString();\n * const streamMap: MappingFunctionNoArrayPromisable<number, string> =\n *   (x, i) => i % 2 === 0 ? Promise.resolve(`Even: ${x}`) : `Odd: ${x}`;\n * ```\n */",[5238,5919],"/**\n * Union type for async mapping functions without array parameter access.\n * Used by async generator-based mapping functions where the full array isn't available\n * due to streaming/lazy evaluation. Supports both sync and async transformations.\n *\n * @template T_element - Type of input elements\n * @template T_mappedElement - Type of output elements after transformation\n * @example\n * ```ts\n * const asyncLazyMap: MappingFunctionNoArrayPromisable<number, string> =\n *   async x => (await processAsync(x)).toString();\n * const streamMap: MappingFunctionNoArrayPromisable<number, string> =\n *   (x, i) => i % 2 === 0 ? Promise.resolve(`Even: ${x}`) : `Odd: ${x}`;\n * ```\n */",[6164,7649],"/**\n * Asynchronously maps an async iterable using a transformation function that can return promises.\n * This is the async equivalent of Array.prototype.map(), supporting both sync and async iterables\n * with sync or async mapping functions. Uses Promise.all for efficient concurrent execution.\n * @param mappingFn - Function to transform each element, can return Promise<T> or T\n * @param arrayLike - Iterable or async iterable to transform elements from\n * @returns Array of transformed elements, preserves tuple length when input has known length\n * @example\n * ```ts\n * // Transform numbers with async function\n * const numbers = [1, 2, 3, 4];\n * const doubled = await mapIterableAsync(async x => x * 2, numbers); // [2, 4, 6, 8]\n *\n * // With async iterable and complex transformation\n * async function* asyncNumbers() {\n *   yield 1; yield 2; yield 3;\n * }\n * const strings = await mapIterableAsync(\n *   async x => `Number: ${x}`,\n *   asyncNumbers()\n * ); // [\"Number: 1\", \"Number: 2\", \"Number: 3\"]\n *\n * // Using index and array parameters\n * const indexed = await mapIterableAsync(\n *   async (element, index, array) => ({ element, index, total: array.length }),\n *   [10, 20, 30]\n * );\n * // [{ element: 10, index: 0, total: 3 }, ...]\n *\n * // Length-preserving tuple types for known-length arrays\n * const tuple: [string, string] = await mapIterableAsync(\n *   x => x.toString(),\n *   [1, 2] as const\n * ); // TypeScript knows result is exactly 2 elements\n * ```\n */",[6164,7649],"/**\n * Asynchronously maps an async iterable using a transformation function that can return promises.\n * This is the async equivalent of Array.prototype.map(), supporting both sync and async iterables\n * with sync or async mapping functions. Uses Promise.all for efficient concurrent execution.\n *\n * @param mappingFn - Function to transform each element, can return Promise<T> or T\n * @param arrayLike - Iterable or async iterable to transform elements from\n * @returns Array of transformed elements, preserves tuple length when input has known length\n * @example\n * ```ts\n * // Transform numbers with async function\n * const numbers = [1, 2, 3, 4];\n * const doubled = await mapIterableAsync(async x => x * 2, numbers); // [2, 4, 6, 8]\n *\n * // With async iterable and complex transformation\n * async function* asyncNumbers() {\n *   yield 1; yield 2; yield 3;\n * }\n * const strings = await mapIterableAsync(\n *   async x => `Number: ${x}`,\n *   asyncNumbers()\n * ); // [\"Number: 1\", \"Number: 2\", \"Number: 3\"]\n *\n * // Using index and array parameters\n * const indexed = await mapIterableAsync(\n *   async (element, index, array) => ({ element, index, total: array.length }),\n *   [10, 20, 30]\n * );\n * // [{ element: 10, index: 0, total: 3 }, ...]\n *\n * // Length-preserving tuple types for known-length arrays\n * const tuple: [string, string] = await mapIterableAsync(\n *   x => x.toString(),\n *   [1, 2] as const\n * ); // TypeScript knows result is exactly 2 elements\n * ```\n */",[8236,8236],[8510,8598],"array: T_element[] = await Array.fromAsync(arrayLike);\n  return await Promise.all(\n    array",[8799,10247],"/**\n * Synchronously maps an iterable using a transformation function.\n * This is a functional programming equivalent of Array.prototype.map() that works with any iterable.\n * Supports mapping functions that receive element, index, and/or array parameters for flexibility.\n * @param mappingFn - Function to transform each element, receives (element, index?, array?)\n * @param arrayLike - Iterable to transform elements from\n * @returns Array of transformed elements, preserves tuple length when input has known length\n * @example\n * ```ts\n * // Basic transformation\n * const numbers = [1, 2, 3, 4];\n * const doubled = mapIterable(x => x * 2, numbers); // [2, 4, 6, 8]\n *\n * // Using index parameter\n * const indexed = mapIterable(\n *   (element, index) => `${index}: ${element}`,\n *   ['a', 'b', 'c']\n * ); // [\"0: a\", \"1: b\", \"2: c\"]\n *\n * // Using all parameters (element, index, array)\n * const withContext = mapIterable(\n *   (element, index, array) => ({\n *     value: element,\n *     position: index + 1,\n *     total: array.length\n *   }),\n *   [10, 20, 30]\n * );\n * // [{ value: 10, position: 1, total: 3 }, ...]\n *\n * // Works with any iterable\n * const setResult = mapIterable(x => x.toUpperCase(), new Set(['a', 'b'])); // ['A', 'B']\n *\n * // Length-preserving tuple types\n * const tuple: [string, string] = mapIterable(\n *   x => x.toString(),\n *   [1, 2] as const\n * ); // TypeScript knows result is exactly 2 elements\n * ```\n */",[8799,10247],"/**\n * Synchronously maps an iterable using a transformation function.\n * This is a functional programming equivalent of Array.prototype.map() that works with any iterable.\n * Supports mapping functions that receive element, index, and/or array parameters for flexibility.\n *\n * @param mappingFn - Function to transform each element, receives (element, index?, array?)\n * @param arrayLike - Iterable to transform elements from\n * @returns Array of transformed elements, preserves tuple length when input has known length\n * @example\n * ```ts\n * // Basic transformation\n * const numbers = [1, 2, 3, 4];\n * const doubled = mapIterable(x => x * 2, numbers); // [2, 4, 6, 8]\n *\n * // Using index parameter\n * const indexed = mapIterable(\n *   (element, index) => `${index}: ${element}`,\n *   ['a', 'b', 'c']\n * ); // [\"0: a\", \"1: b\", \"2: c\"]\n *\n * // Using all parameters (element, index, array)\n * const withContext = mapIterable(\n *   (element, index, array) => ({\n *     value: element,\n *     position: index + 1,\n *     total: array.length\n *   }),\n *   [10, 20, 30]\n * );\n * // [{ value: 10, position: 1, total: 3 }, ...]\n *\n * // Works with any iterable\n * const setResult = mapIterable(x => x.toUpperCase(), new Set(['a', 'b'])); // ['A', 'B']\n *\n * // Length-preserving tuple types\n * const tuple: [string, string] = mapIterable(\n *   x => x.toString(),\n *   [1, 2] as const\n * ); // TypeScript knows result is exactly 2 elements\n * ```\n */",[10750,10750],[11034,11081],"array: T_element[] = [...arrayLike];\n  return array",{"messageId":"10385","data":"10417","fix":"10418","desc":"10419"},{"messageId":"10385","data":"10420","fix":"10421","desc":"10422"},{"messageId":"10385","data":"10423","fix":"10424","desc":"10425"},[11101,12753],"/**\n * Lazily maps an iterable using a transformation function, yielding results one at a time.\n * This is a memory-efficient generator version that doesn't require loading all elements into memory.\n * Useful for processing large datasets or infinite iterables where you only need elements on demand.\n * Note: Array parameter isn't available in mapping function due to lazy evaluation.\n * @param mappingFn - Function to transform each element, receives (element, index)\n * @param arrayLike - Iterable to transform elements from\n * @yields Transformed elements one at a time as generator progresses\n * @example\n * ```ts\n * // Memory-efficient processing of large datasets\n * const numbers = [1, 2, 3, 4, 5];\n * const doubled = mapIterableGen(x => x * 2, numbers);\n *\n * // Consume lazily - only processes elements as needed\n * for (const value of doubled) {\n *   console.log(value); // 2, 4, 6, 8, 10\n *   if (value > 6) break; // Early termination possible\n * }\n *\n * // Using index parameter\n * const indexed = mapIterableGen(\n *   (element, index) => `Item ${index}: ${element}`,\n *   ['apple', 'banana', 'cherry']\n * );\n * console.log([...indexed]); // [\"Item 0: apple\", \"Item 1: banana\", \"Item 2: cherry\"]\n *\n * // Works with infinite generators\n * function* infiniteNumbers() {\n *   let n = 1;\n *   while (true) yield n++;\n * }\n * const squares = mapIterableGen(x => x * x, infiniteNumbers());\n * const firstFiveSquares = Array.from({ length: 5 }, () => squares.next().value);\n * // [1, 4, 9, 16, 25]\n *\n * // Convert to array only when needed\n * const result = [...mapIterableGen(x => x.toUpperCase(), ['a', 'b'])]; // ['A', 'B']\n * ```\n */",[11101,12753],"/**\n * Lazily maps an iterable using a transformation function, yielding results one at a time.\n * This is a memory-efficient generator version that doesn't require loading all elements into memory.\n * Useful for processing large datasets or infinite iterables where you only need elements on demand.\n * Note: Array parameter isn't available in mapping function due to lazy evaluation.\n *\n * @param mappingFn - Function to transform each element, receives (element, index)\n * @param arrayLike - Iterable to transform elements from\n * @yields Transformed elements one at a time as generator progresses\n * @example\n * ```ts\n * // Memory-efficient processing of large datasets\n * const numbers = [1, 2, 3, 4, 5];\n * const doubled = mapIterableGen(x => x * 2, numbers);\n *\n * // Consume lazily - only processes elements as needed\n * for (const value of doubled) {\n *   console.log(value); // 2, 4, 6, 8, 10\n *   if (value > 6) break; // Early termination possible\n * }\n *\n * // Using index parameter\n * const indexed = mapIterableGen(\n *   (element, index) => `Item ${index}: ${element}`,\n *   ['apple', 'banana', 'cherry']\n * );\n * console.log([...indexed]); // [\"Item 0: apple\", \"Item 1: banana\", \"Item 2: cherry\"]\n *\n * // Works with infinite generators\n * function* infiniteNumbers() {\n *   let n = 1;\n *   while (true) yield n++;\n * }\n * const squares = mapIterableGen(x => x * x, infiniteNumbers());\n * const firstFiveSquares = Array.from({ length: 5 }, () => squares.next().value);\n * // [1, 4, 9, 16, 25]\n *\n * // Convert to array only when needed\n * const result = [...mapIterableGen(x => x.toUpperCase(), ['a', 'b'])]; // ['A', 'B']\n * ```\n */",[13059,15631],"/**\n * Lazily maps an async iterable using a transformation function that can return promises.\n * This is a streaming async generator that processes elements as they arrive from the source.\n * Supports both sync and async transformation functions, making it versatile for complex async workflows.\n * Results are yielded individually as they complete, enabling real-time processing of async data streams.\n * Note: Array parameter isn't available in mapping function due to streaming nature.\n * @param mappingFn - Function to transform each element, can be sync or async, receives (element, index)\n * @param arrayLike - Async iterable to transform elements from (can be async generators, Promise arrays, etc.)\n * @yields Transformed elements one at a time as they're processed\n * @example\n * ```ts\n * // Processing async data streams with async transformations\n * async function* fetchUserData() {\n *   yield { id: 1, name: 'Alice' };\n *   await new Promise(resolve => setTimeout(resolve, 100));\n *   yield { id: 2, name: 'Bob' };\n *   await new Promise(resolve => setTimeout(resolve, 100));\n *   yield { id: 3, name: 'Charlie' };\n * }\n *\n * // Async transformation function\n * async function enrichUser(user, index) {\n *   // Simulate API call\n *   await new Promise(resolve => setTimeout(resolve, 50));\n *   return { ...user, processed: true, order: index };\n * }\n *\n * const enriched = mapIterableAsyncGen(enrichUser, fetchUserData());\n *\n * // Process results as they arrive\n * for await (const user of enriched) {\n *   console.log(`Processed user ${user.order}: ${user.name}`);\n * }\n *\n * // Sync transformation with async iterable\n * const uppercased = mapIterableAsyncGen(\n *   (user, index) => ({ ...user, name: user.name.toUpperCase(), index }),\n *   fetchUserData()\n * );\n *\n * // Convert async iterable to array when needed\n * const results = [];\n * for await (const item of uppercased) {\n *   results.push(item);\n * }\n *\n * // Real-world example: Processing API responses\n * async function* fetchPages() {\n *   for (let page = 1; page <= 3; page++) {\n *     yield fetch(`/api/data?page=${page}`).then(r => r.json());\n *   }\n * }\n *\n * const processedData = mapIterableAsyncGen(\n *   async (responsePromise, index) => {\n *     const data = await responsePromise;\n *     return { page: index + 1, items: data.items.length };\n *   },\n *   fetchPages()\n * );\n *\n * // Stream processing without loading everything into memory\n * for await (const pageInfo of processedData) {\n *   console.log(`Page ${pageInfo.page} has ${pageInfo.items} items`);\n * }\n * ```\n */",[13059,15631],"/**\n * Lazily maps an async iterable using a transformation function that can return promises.\n * This is a streaming async generator that processes elements as they arrive from the source.\n * Supports both sync and async transformation functions, making it versatile for complex async workflows.\n * Results are yielded individually as they complete, enabling real-time processing of async data streams.\n * Note: Array parameter isn't available in mapping function due to streaming nature.\n *\n * @param mappingFn - Function to transform each element, can be sync or async, receives (element, index)\n * @param arrayLike - Async iterable to transform elements from (can be async generators, Promise arrays, etc.)\n * @yields Transformed elements one at a time as they're processed\n * @example\n * ```ts\n * // Processing async data streams with async transformations\n * async function* fetchUserData() {\n *   yield { id: 1, name: 'Alice' };\n *   await new Promise(resolve => setTimeout(resolve, 100));\n *   yield { id: 2, name: 'Bob' };\n *   await new Promise(resolve => setTimeout(resolve, 100));\n *   yield { id: 3, name: 'Charlie' };\n * }\n *\n * // Async transformation function\n * async function enrichUser(user, index) {\n *   // Simulate API call\n *   await new Promise(resolve => setTimeout(resolve, 50));\n *   return { ...user, processed: true, order: index };\n * }\n *\n * const enriched = mapIterableAsyncGen(enrichUser, fetchUserData());\n *\n * // Process results as they arrive\n * for await (const user of enriched) {\n *   console.log(`Processed user ${user.order}: ${user.name}`);\n * }\n *\n * // Sync transformation with async iterable\n * const uppercased = mapIterableAsyncGen(\n *   (user, index) => ({ ...user, name: user.name.toUpperCase(), index }),\n *   fetchUserData()\n * );\n *\n * // Convert async iterable to array when needed\n * const results = [];\n * for await (const item of uppercased) {\n *   results.push(item);\n * }\n *\n * // Real-world example: Processing API responses\n * async function* fetchPages() {\n *   for (let page = 1; page <= 3; page++) {\n *     yield fetch(`/api/data?page=${page}`).then(r => r.json());\n *   }\n * }\n *\n * const processedData = mapIterableAsyncGen(\n *   async (responsePromise, index) => {\n *     const data = await responsePromise;\n *     return { page: index + 1, items: data.items.length };\n *   },\n *   fetchPages()\n * );\n *\n * // Stream processing without loading everything into memory\n * for await (const pageInfo of processedData) {\n *   console.log(`Page ${pageInfo.page} has ${pageInfo.items} items`);\n * }\n * ```\n */",[417,417],[417,417],[735,735],[735,735],[943,943],[943,943],[1124,1124],[1124,1124],[1321,1321],[1321,1321],[1463,1463],[1463,1463],[1687,1687],[1687,1687],[1919,1919],[1919,1919],[2021,2021],[2178,2178],[2178,2178],[2390,2390],[2390,2390],[2604,2604],[2604,2604],[2770,2770],[2770,2770],[2823,2839],"mapIterableGen",[2969,2969],[2969,2969],[3316,3316],[3316,3316],[3618,3618],[3618,3618],[3905,3905],[3905,3905],[4178,4178],[4178,4178],[4239,4260],"mapIterableAsyncGen",[4416,4416],[4416,4416],[4774,4774],[4774,4774],[5047,5047],[5204,5204],[5204,5204],[5549,5549],[5549,5549],[5886,5886],[5886,5886],[6190,6190],[6190,6190],[0,1094],"/**\n @deprecated Use jsr:@rebeccastevens/deepmerge instead. This library can never match its quality.\n \n @remarks\n \n See https://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects\n \n Because { ...obj1, ...obj2 } isn't a deep merge.\n Because\n mergeConfig(\n createBaseConfig(configDir),\n vitestOnlyConfigWorkspace,\n );\n is elegant but\n const createBackendConfig = (configDir: string): UserConfig => {\n const base = createBaseConfig(configDir);\n return {\n ...base,\n esbuild: {\n ...base.esbuild,\n supported: {\n 'dynamic-import': false,\n 'object-rest-spread': false,\n 'top-level-await': false,\n },\n },\n build: {\n ...base.build,\n target: 'es2019',\n outDir: 'dist/final/backend',\n lib: {\n entry: resolve(configDir, 'src/backend/index.ts'),\n name: 'index',\n fileName: 'index',\n formats: ['iife'],\n },\n rollupOptions: {\n output: {\n inlineDynamicImports: true,\n },\n },\n },\n };\n };\n is ugly.\n \n Because mergeConfig is imported from Vite and not a general purpose utility.\n \n Because mergeConfig only supports UnknownRecord and not Arrays or Maps or whatever arrayLikes.\n */",[0,1094],"/**\n @deprecated Use jsr:@rebeccastevens/deepmerge instead. This library can never match its quality.\n @remarks\n\n See https://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects\n\n Because { ...obj1, ...obj2 } isn't a deep merge.\n Because\n mergeConfig(\n createBaseConfig(configDir),\n vitestOnlyConfigWorkspace,\n );\n is elegant but\n const createBackendConfig = (configDir: string): UserConfig => {\n const base = createBaseConfig(configDir);\n return {\n ...base,\n esbuild: {\n ...base.esbuild,\n supported: {\n 'dynamic-import': false,\n 'object-rest-spread': false,\n 'top-level-await': false,\n },\n },\n build: {\n ...base.build,\n target: 'es2019',\n outDir: 'dist/final/backend',\n lib: {\n entry: resolve(configDir, 'src/backend/index.ts'),\n name: 'index',\n fileName: 'index',\n formats: ['iife'],\n },\n rollupOptions: {\n output: {\n inlineDynamicImports: true,\n },\n },\n },\n };\n };\n is ugly.\n\n Because mergeConfig is imported from Vite and not a general purpose utility.\n\n Because mergeConfig only supports UnknownRecord and not Arrays or Maps or whatever arrayLikes.\n */",[408,2280],"/**\n * Tests if no elements in an async iterable satisfy a predicate function.\n * This is the async equivalent of Array.prototype.every() with negated logic - returns true only if ALL elements fail the test.\n * Uses Promise.any for efficient short-circuiting: stops as soon as any element passes the test.\n * Handles predicate errors gracefully by treating them as false (element fails the test).\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Async iterable to test elements from\n * @returns True if no elements satisfy the predicate, false if any element satisfies it\n * @example\n * ```ts\n * // Test that no numbers are negative\n * const numbers = [1, 2, 3, 4, 5];\n * const noNegatives = await noneIterableAsync(x => x < 0, numbers); // true\n *\n * // With async iterable and async predicate\n * async function* asyncNumbers() {\n *   yield 1; yield -2; yield 3;\n * }\n * const hasNegative = await noneIterableAsync(\n *   async x => x < 0,\n *   asyncNumbers()\n * ); // false (because -2 < 0)\n *\n * // Error handling - predicate errors count as false\n * const safeTest = await noneIterableAsync(\n *   x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 1 / x > 0.5;\n *   },\n *   [0, 1, 2, 3]\n * ); // true (error on 0 counts as false, others don't satisfy > 0.5)\n *\n * // Validation use case\n * const users = [\n *   { name: 'Alice', age: 25 },\n *   { name: 'Bob', age: 30 },\n *   { name: 'Charlie', age: 35 }\n * ];\n * const noMinors = await noneIterableAsync(\n *   user => user.age < 18,\n *   users\n * ); // true\n *\n * // Short-circuiting behavior\n * const shortCircuit = await noneIterableAsync(\n *   async x => {\n *     console.log(`Testing ${x}`);\n *     return x === 2;\n *   },\n *   [1, 2, 3, 4] // Only logs \"Testing 1\" and \"Testing 2\"\n * ); // false\n * ```\n */",[408,2280],"/**\n * Tests if no elements in an async iterable satisfy a predicate function.\n * This is the async equivalent of Array.prototype.every() with negated logic - returns true only if ALL elements fail the test.\n * Uses Promise.any for efficient short-circuiting: stops as soon as any element passes the test.\n * Handles predicate errors gracefully by treating them as false (element fails the test).\n *\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Async iterable to test elements from\n * @returns True if no elements satisfy the predicate, false if any element satisfies it\n * @example\n * ```ts\n * // Test that no numbers are negative\n * const numbers = [1, 2, 3, 4, 5];\n * const noNegatives = await noneIterableAsync(x => x < 0, numbers); // true\n *\n * // With async iterable and async predicate\n * async function* asyncNumbers() {\n *   yield 1; yield -2; yield 3;\n * }\n * const hasNegative = await noneIterableAsync(\n *   async x => x < 0,\n *   asyncNumbers()\n * ); // false (because -2 < 0)\n *\n * // Error handling - predicate errors count as false\n * const safeTest = await noneIterableAsync(\n *   x => {\n *     if (x === 0) throw new Error('Division by zero');\n *     return 1 / x > 0.5;\n *   },\n *   [0, 1, 2, 3]\n * ); // true (error on 0 counts as false, others don't satisfy > 0.5)\n *\n * // Validation use case\n * const users = [\n *   { name: 'Alice', age: 25 },\n *   { name: 'Bob', age: 30 },\n *   { name: 'Charlie', age: 35 }\n * ];\n * const noMinors = await noneIterableAsync(\n *   user => user.age < 18,\n *   users\n * ); // true\n *\n * // Short-circuiting behavior\n * const shortCircuit = await noneIterableAsync(\n *   async x => {\n *     console.log(`Testing ${x}`);\n *     return x === 2;\n *   },\n *   [1, 2, 3, 4] // Only logs \"Testing 1\" and \"Testing 2\"\n * ); // false\n * ```\n */",[2308,2308],[2532,3271],"array: T_element[] = await Array.fromAsync(arrayLike);\n\n  /*\n   We want the modified predicate to throw (causing a rejected promise) as long as it doesn't satisfy.\n   Then we feed the array of (rejectingPromise|true)[] into Promise.any.\n   When Promise.any resolves, it means that at least one of the predicates returned true,\n   which means the whole noneArray test should return false.\n   Otherwise, Promise.any rejects, which means all the predicates rejected,\n   so the whole noneArray test should return true.\n   */\n  const ensuredTruthyAsync = ensuringTruthyAsync(testingFn);\n  const results = array.map(\n    function toPromise(element: T_element, index: number): Promisable<boolean> {\n      return ensuredTruthyAsync(element, index, array",[3380,5410],"/**\n * Tests if no elements in an iterable satisfy a predicate function.\n * This is the synchronous version that returns true only if ALL elements fail the test.\n * Provides short-circuiting: stops as soon as any element passes the test.\n * Handles predicate errors gracefully by treating them as false (element fails the test).\n * @param testingFn - Predicate function to test each element, receives (element, index?, array?)\n * @param arrayLike - Iterable to test elements from\n * @returns True if no elements satisfy the predicate, false if any element satisfies it\n * @example\n * ```ts\n * // Basic usage - test that no numbers are even\n * const numbers = [1, 3, 5, 7];\n * const noEvens = noneIterable(x => x % 2 === 0, numbers); // true\n *\n * // With mixed data - test that no elements are strings\n * const mixed = [1, 2, 3, 4];\n * const noStrings = noneIterable(x => typeof x === 'string', mixed); // true\n *\n * // Using index parameter\n * const items = ['a', 'b', 'c'];\n * const noFirstIndex = noneIterable(\n *   (element, index) => index === 0,\n *   items\n * ); // false (first element has index 0)\n *\n * // Error handling - predicate errors count as false\n * const safeTest = noneIterable(\n *   x => {\n *     if (x === 0) throw new Error('Can't process zero');\n *     return x > 10;\n *   },\n *   [0, 5, 8] // Error on 0 counts as false, others don't satisfy > 10\n * ); // true\n *\n * // Validation use case\n * const passwords = ['abc123', 'password123', 'secure456'];\n * const noWeakPasswords = noneIterable(\n *   pwd => pwd.length < 6,\n *   passwords\n * ); // true (all passwords are 6+ characters)\n *\n * // Works with any iterable\n * const setTest = noneIterable(x => x < 0, new Set([1, 2, 3])); // true\n * const stringTest = noneIterable(char => char === 'z', 'hello'); // true\n *\n * // Short-circuiting behavior\n * const shortCircuit = noneIterable(\n *   x => {\n *     console.log(`Testing ${x}`);\n *     return x === 2;\n *   },\n *   [1, 2, 3, 4] // Only logs \"Testing 1\" and \"Testing 2\"\n * ); // false\n * ```\n */",[3380,5410],"/**\n * Tests if no elements in an iterable satisfy a predicate function.\n * This is the synchronous version that returns true only if ALL elements fail the test.\n * Provides short-circuiting: stops as soon as any element passes the test.\n * Handles predicate errors gracefully by treating them as false (element fails the test).\n *\n * @param testingFn - Predicate function to test each element, receives (element, index?, array?)\n * @param arrayLike - Iterable to test elements from\n * @returns True if no elements satisfy the predicate, false if any element satisfies it\n * @example\n * ```ts\n * // Basic usage - test that no numbers are even\n * const numbers = [1, 3, 5, 7];\n * const noEvens = noneIterable(x => x % 2 === 0, numbers); // true\n *\n * // With mixed data - test that no elements are strings\n * const mixed = [1, 2, 3, 4];\n * const noStrings = noneIterable(x => typeof x === 'string', mixed); // true\n *\n * // Using index parameter\n * const items = ['a', 'b', 'c'];\n * const noFirstIndex = noneIterable(\n *   (element, index) => index === 0,\n *   items\n * ); // false (first element has index 0)\n *\n * // Error handling - predicate errors count as false\n * const safeTest = noneIterable(\n *   x => {\n *     if (x === 0) throw new Error('Can't process zero');\n *     return x > 10;\n *   },\n *   [0, 5, 8] // Error on 0 counts as false, others don't satisfy > 10\n * ); // true\n *\n * // Validation use case\n * const passwords = ['abc123', 'password123', 'secure456'];\n * const noWeakPasswords = noneIterable(\n *   pwd => pwd.length < 6,\n *   passwords\n * ); // true (all passwords are 6+ characters)\n *\n * // Works with any iterable\n * const setTest = noneIterable(x => x < 0, new Set([1, 2, 3])); // true\n * const stringTest = noneIterable(char => char === 'z', 'hello'); // true\n *\n * // Short-circuiting behavior\n * const shortCircuit = noneIterable(\n *   x => {\n *     console.log(`Testing ${x}`);\n *     return x === 2;\n *   },\n *   [1, 2, 3, 4] // Only logs \"Testing 1\" and \"Testing 2\"\n * ); // false\n * ```\n */",[5591,5781],"array: T_element[] = [...arrayLike];\n  const nonThrowingFn = nonThrowingWithFalse(testingFn);\n  for (const [index, element] of entriesIterable(array)) {\n    if (nonThrowingFn(element, index, array",[415,415],[415,415],[604,604],[604,604],[1012,1012],[1012,1012],[1200,1200],[1200,1200],[1685,1685],[1685,1685],[1897,1897],[1897,1897],[2067,2067],[2067,2067],[2241,2241],[2241,2241],[2602,2602],[2802,2802],[2802,2802],[304,2662],"/**\n * Tests if no elements in an async iterable fail a predicate function.\n * This is the inverse of `noneIterableAsync` - returns true only if ALL elements pass the test.\n * Unlike `everyIterableAsync`, this function continues testing all elements even after finding failures,\n * making it useful for validation scenarios where you need to process all items.\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Async iterable to test elements from\n * @returns True if no elements fail the predicate (all pass), false if any element fails\n * @example\n * ```ts\n * // Validation: ensure all users have valid email addresses\n * const users = [\n *   { name: 'Alice', email: 'alice@example.com' },\n *   { name: 'Bob', email: 'bob@example.com' },\n *   { name: 'Charlie', email: 'charlie@example.com' }\n * ];\n * const allValidEmails = await noneFailIterableAsync(\n *   async user => user.email.includes('@'),\n *   users\n * ); // true (no users fail the email validation)\n *\n * // With async iterable and async validation\n * async function* asyncUsers() {\n *   yield { name: 'Alice', age: 25 };\n *   yield { name: 'Bob', age: 17 }; // Minor\n *   yield { name: 'Charlie', age: 30 };\n * }\n * const allAdults = await noneFailIterableAsync(\n *   async user => user.age >= 18,\n *   asyncUsers()\n * ); // false (Bob fails the age check)\n *\n * // Data processing: ensure all numbers are positive\n * const numbers = [1, 2, 3, 4, 5];\n * const allPositive = await noneFailIterableAsync(\n *   x => x > 0,\n *   numbers\n * ); // true\n *\n * // Complex validation with error handling\n * const items = ['valid', 'data', 'test'];\n * const allProcessable = await noneFailIterableAsync(\n *   async item => {\n *     try {\n *       // Simulate async processing\n *       await new Promise(resolve => setTimeout(resolve, 10));\n *       return item.length > 0;\n *     } catch {\n *       return false; // Failed processing counts as failure\n *     }\n *   },\n *   items\n * ); // true\n *\n * // Continues processing all elements unlike everyIterableAsync\n * let processedCount = 0;\n * const result = await noneFailIterableAsync(\n *   async x => {\n *     processedCount++;\n *     return x !== 2; // 2 will fail\n *   },\n *   [1, 2, 3, 4] // Processes all 4 elements\n * ); // false, but processedCount === 4\n * ```\n */",[304,2662],"/**\n * Tests if no elements in an async iterable fail a predicate function.\n * This is the inverse of `noneIterableAsync` - returns true only if ALL elements pass the test.\n * Unlike `everyIterableAsync`, this function continues testing all elements even after finding failures,\n * making it useful for validation scenarios where you need to process all items.\n *\n * @param testingFn - Predicate function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Async iterable to test elements from\n * @returns True if no elements fail the predicate (all pass), false if any element fails\n * @example\n * ```ts\n * // Validation: ensure all users have valid email addresses\n * const users = [\n *   { name: 'Alice', email: 'alice@example.com' },\n *   { name: 'Bob', email: 'bob@example.com' },\n *   { name: 'Charlie', email: 'charlie@example.com' }\n * ];\n * const allValidEmails = await noneFailIterableAsync(\n *   async user => user.email.includes('@'),\n *   users\n * ); // true (no users fail the email validation)\n *\n * // With async iterable and async validation\n * async function* asyncUsers() {\n *   yield { name: 'Alice', age: 25 };\n *   yield { name: 'Bob', age: 17 }; // Minor\n *   yield { name: 'Charlie', age: 30 };\n * }\n * const allAdults = await noneFailIterableAsync(\n *   async user => user.age >= 18,\n *   asyncUsers()\n * ); // false (Bob fails the age check)\n *\n * // Data processing: ensure all numbers are positive\n * const numbers = [1, 2, 3, 4, 5];\n * const allPositive = await noneFailIterableAsync(\n *   x => x > 0,\n *   numbers\n * ); // true\n *\n * // Complex validation with error handling\n * const items = ['valid', 'data', 'test'];\n * const allProcessable = await noneFailIterableAsync(\n *   async item => {\n *     try {\n *       // Simulate async processing\n *       await new Promise(resolve => setTimeout(resolve, 10));\n *       return item.length > 0;\n *     } catch {\n *       return false; // Failed processing counts as failure\n *     }\n *   },\n *   items\n * ); // true\n *\n * // Continues processing all elements unlike everyIterableAsync\n * let processedCount = 0;\n * const result = await noneFailIterableAsync(\n *   async x => {\n *     processedCount++;\n *     return x !== 2; // 2 will fail\n *   },\n *   [1, 2, 3, 4] // Processes all 4 elements\n * ); // false, but processedCount === 4\n * ```\n */",[3162,5732],"/**\n * Tests if no elements in an iterable fail a predicate function.\n * This is the synchronous inverse of `noneIterable` - returns true only if ALL elements pass the test.\n * Unlike `everyIterable`, this function continues testing all elements even after finding failures,\n * making it useful for validation scenarios where you need to process all items.\n * @param testingFn - Predicate function to test each element, receives (element, index?, array?)\n * @param arrayLike - Iterable to test elements from\n * @returns True if no elements fail the predicate (all pass), false if any element fails\n * @example\n * ```ts\n * // Basic validation - ensure all numbers are within range\n * const numbers = [1, 5, 8, 3, 9];\n * const allInRange = noneFailIterable(x => x >= 1 && x <= 10, numbers); // true\n *\n * // String validation - ensure all strings are non-empty\n * const strings = ['hello', 'world', 'test'];\n * const allNonEmpty = noneFailIterable(s => s.length > 0, strings); // true\n *\n * // Using index parameter for position-based validation\n * const items = ['first', 'second', 'third'];\n * const validPositions = noneFailIterable(\n *   (item, index) => index !== undefined && index < 5,\n *   items\n * ); // true (all indices are < 5)\n *\n * // Mixed data type validation\n * const mixed = [1, 'hello', true, 42];\n * const allTruthy = noneFailIterable(x => Boolean(x), mixed); // true\n *\n * // Validation with failure case\n * const ages = [25, 30, 15, 40]; // 15 is under 18\n * const allAdults = noneFailIterable(age => age >= 18, ages); // false\n *\n * // Works with any iterable type\n * const setValidation = noneFailIterable(x => x > 0, new Set([1, 2, 3])); // true\n * const stringValidation = noneFailIterable(char => char !== 'x', 'hello'); // true\n * const mapValidation = noneFailIterable(\n *   ([key, value]) => key.length > 0,\n *   new Map([['a', 1], ['b', 2]])\n * ); // true\n *\n * // Continues processing all elements unlike everyIterable\n * let processedCount = 0;\n * const result = noneFailIterable(\n *   x => {\n *     processedCount++;\n *     return x !== 3; // 3 will fail\n *   },\n *   [1, 2, 3, 4, 5] // Processes all 5 elements\n * ); // false, but processedCount === 5\n *\n * // Complex object validation\n * const products = [\n *   { name: 'Laptop', price: 999, inStock: true },\n *   { name: 'Mouse', price: 25, inStock: true },\n *   { name: 'Keyboard', price: 75, inStock: false }\n * ];\n * const allAvailable = noneFailIterable(\n *   product => product.inStock && product.price > 0,\n *   products\n * ); // false (keyboard isn't in stock)\n * ```\n */",[3162,5732],"/**\n * Tests if no elements in an iterable fail a predicate function.\n * This is the synchronous inverse of `noneIterable` - returns true only if ALL elements pass the test.\n * Unlike `everyIterable`, this function continues testing all elements even after finding failures,\n * making it useful for validation scenarios where you need to process all items.\n *\n * @param testingFn - Predicate function to test each element, receives (element, index?, array?)\n * @param arrayLike - Iterable to test elements from\n * @returns True if no elements fail the predicate (all pass), false if any element fails\n * @example\n * ```ts\n * // Basic validation - ensure all numbers are within range\n * const numbers = [1, 5, 8, 3, 9];\n * const allInRange = noneFailIterable(x => x >= 1 && x <= 10, numbers); // true\n *\n * // String validation - ensure all strings are non-empty\n * const strings = ['hello', 'world', 'test'];\n * const allNonEmpty = noneFailIterable(s => s.length > 0, strings); // true\n *\n * // Using index parameter for position-based validation\n * const items = ['first', 'second', 'third'];\n * const validPositions = noneFailIterable(\n *   (item, index) => index !== undefined && index < 5,\n *   items\n * ); // true (all indices are < 5)\n *\n * // Mixed data type validation\n * const mixed = [1, 'hello', true, 42];\n * const allTruthy = noneFailIterable(x => Boolean(x), mixed); // true\n *\n * // Validation with failure case\n * const ages = [25, 30, 15, 40]; // 15 is under 18\n * const allAdults = noneFailIterable(age => age >= 18, ages); // false\n *\n * // Works with any iterable type\n * const setValidation = noneFailIterable(x => x > 0, new Set([1, 2, 3])); // true\n * const stringValidation = noneFailIterable(char => char !== 'x', 'hello'); // true\n * const mapValidation = noneFailIterable(\n *   ([key, value]) => key.length > 0,\n *   new Map([['a', 1], ['b', 2]])\n * ); // true\n *\n * // Continues processing all elements unlike everyIterable\n * let processedCount = 0;\n * const result = noneFailIterable(\n *   x => {\n *     processedCount++;\n *     return x !== 3; // 3 will fail\n *   },\n *   [1, 2, 3, 4, 5] // Processes all 5 elements\n * ); // false, but processedCount === 5\n *\n * // Complex object validation\n * const products = [\n *   { name: 'Laptop', price: 999, inStock: true },\n *   { name: 'Mouse', price: 25, inStock: true },\n *   { name: 'Keyboard', price: 75, inStock: false }\n * ];\n * const allAvailable = noneFailIterable(\n *   product => product.inStock && product.price > 0,\n *   products\n * ); // false (keyboard isn't in stock)\n * ```\n */",[291,904],"/**\n * Partitions an iterable into two arrays based on an async predicate function.\n * @deprecated Naming change. Use [`partitionIterableAsync()`](./iterable.partition.ts:28) instead. No need to write tests for it.\n * @param predicate - Function to test each element (can be sync or async)\n * @param arrayLike - Iterable to partition\n * @returns Tuple containing [matching elements, non-matching elements]\n * @example\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const [evens, odds] = await partitionArrAsync(\n *   async (n) => n % 2 === 0,\n *   numbers\n * );\n * // evens: [2, 4], odds: [1, 3, 5]\n * ```\n */",[932,932],[972,1139],"T_index,>(\n  predicate: (i: T_index) => Promise<boolean> | boolean,\n  arrayLike: MaybeAsyncIterable<T_index>,\n): Promise<[T_index[], T_index[]]> {\n  const yes: T_index[] = [];\n  const no: T_index",[993,994],[1168,1263],"index of arrayLike) {\n    if (await predicate(index)) {\n      yes.push(index);\n    } else {\n      no.push(index",[1300,2412],"/**\n * Partitions an iterable into two arrays based on an async predicate function.\n * Processes all elements concurrently for optimal performance.\n * @param predicate - Function to test each element (can be sync or async)\n * @param arrayLike - Iterable or async iterable to partition\n * @returns Tuple containing [matching elements, non-matching elements]\n * @example\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const [evens, odds] = await partitionIterableAsync(\n *   async (n) => n % 2 === 0,\n *   numbers\n * );\n * // evens: [2, 4], odds: [1, 3, 5]\n * ```\n * @example\n * ```ts\n * // Works with async iterables\n * async function* asyncNumbers() {\n *   yield 1; yield 2; yield 3;\n * }\n *\n * const [evens, odds] = await partitionIterableAsync(\n *   async (n) => n % 2 === 0,\n *   asyncNumbers()\n * );\n * ```\n * @example\n * ```ts\n * // Concurrent processing for better performance\n * const urls = ['url1', 'url2', 'url3'];\n * const [valid, invalid] = await partitionIterableAsync(\n *   async (url) => {\n *     const response = await fetch(url);\n *     return response.ok;\n *   },\n *   urls\n * );\n * ```\n */",[2458,2783],"T_index,>(\n  predicate: (i: T_index) => Promisable<boolean>,\n  arrayLike: MaybeAsyncIterable<T_index>,\n): Promise<[T_index[], T_index[]]> {\n  const yes: T_index[] = [];\n  const no: T_index[] = [];\n  const arr = await Array.fromAsync(arrayLike);\n\n  const pairPromises: Promise<[T_index, boolean]>[] = arr.map(\n    function toPairPromise(i: T_index): Promise<[T_index",[2479,2480],[2635,2729],"array = await Array.fromAsync(arrayLike);\n\n  const pairPromises: Promise<[T_i, boolean]>[] = array",[2762,2878],"index: T_i): Promise<[T_i, boolean]> {\n      return (async function pairPromise() {\n        return [index, await predicate(index",[2971,3057],"index, isYes] of pairs) {\n    if (isYes) {\n      yes.push(index);\n    } else {\n      no.push(index",[3094,4010],"/**\n * Partitions an iterable into two arrays based on a predicate function.\n * Synchronous version that processes elements sequentially.\n * @param predicate - Function to test each element\n * @param arrayLike - Iterable to partition\n * @returns Tuple containing [matching elements, non-matching elements]\n * @example\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const [evens, odds] = partitionIterable((n) => n % 2 === 0, numbers);\n * // evens: [2, 4], odds: [1, 3, 5]\n * ```\n * @example\n * ```ts\n * // Works with any iterable\n * const set = new Set([1, 2, 3, 4, 5]);\n * const [evens, odds] = partitionIterable((n) => n % 2 === 0, set);\n * ```\n * @example\n * ```ts\n * // Works with objects\n * const users = [\n *   { id: 1, active: true },\n *   { id: 2, active: false },\n *   { id: 3, active: true }\n * ];\n * const [active, inactive] = partitionIterable(\n *   (user) => user.active,\n *   users\n * );\n * ```\n */",[4045,4174],"T_index,>(\n  predicate: (i: T_index) => boolean,\n  arrayLike: Iterable<T_index>,\n): [T_index[], T_index[]] {\n  const yes: T_index[] = [];\n  const no: T_index",[4066,4067],[4197,4286],"index of arrayLike) {\n    if (predicate(index)) {\n      yes.push(index);\n    } else {\n      no.push(index",[3201,3201],[3768,4688],"/**\n * Reduces an async iterable to a single value using an async reducer function.\n * Processes elements sequentially to maintain reduce semantics.\n * @template T_accumulated - Type of accumulated value\n * @template T_element - Type of iterable elements\n * @param initialValue - Starting value for accumulation\n * @param reducer - Async function to combine accumulator with each element\n * @param arrayLike - Async iterable to reduce\n * @returns Accumulated result after processing all elements\n * @example\n * ```ts\n * const numbers = [1, 2, 3, 4];\n * const sum = await reduceIterableAsync(0, async (acc, val) => acc + val, numbers);\n * // Result: 10\n *\n * const asyncSum = await reduceIterableAsync(\n *   0,\n *   async (acc, val, index) => {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     return acc + val * index;\n *   },\n *   numbers\n * );\n * // Result: 20 (0*0 + 1*1 + 2*2 + 3*3)\n * ```\n */",[5619,6392],"/**\n * Reduces an iterable to a single value using a synchronous reducer function.\n * {@inheritDoc reduceIterableAsync}\n * @template T_accumulated - Type of accumulated value\n * @template T_element - Type of iterable elements\n * @param initialValue - Starting value for accumulation\n * @param reducer - Function to combine accumulator with each element\n * @param arrayLike - Iterable to reduce\n * @returns Accumulated result after processing all elements\n * @example\n * ```ts\n * const numbers = [1, 2, 3, 4];\n * const sum = reduceIterable(0, (acc, val) => acc + val, numbers);\n * // Result: 10\n *\n * const product = reduceIterable(1, (acc, val, index) => acc * (val + index), numbers);\n * // Result: 1 * (1+0) * (2+1) * (3+2) * (4+3) = 1 * 1 * 3 * 5 * 7 = 105\n * ```\n */",{"messageId":"10385","data":"10426","fix":"10427","desc":"10428"},{"messageId":"10385","data":"10429","fix":"10430","desc":"10431"},{"messageId":"10385","data":"10432","fix":"10433","desc":"10434"},[6853,7769],"/**\n * Generates intermediate reduction values while processing an iterable.\n * Yields initial value first, then each accumulated result after processing each element.\n * @template T_accumulated - Type of accumulated value\n * @template T_element - Type of iterable elements\n * @param initialValue - Starting value for accumulation\n * @param reducer - Function to combine accumulator with each element (no array parameter)\n * @param arrayLike - Iterable to reduce\n * @returns Generator yielding accumulated values at each step\n * @example\n * ```ts\n * const numbers = [1, 2, 3, 4];\n * const runningSum = [...reduceIterableGen(0, (acc, val) => acc + val, numbers)];\n * // Result: [0, 1, 3, 6, 10] (initial + cumulative sums)\n *\n * const runningProduct = [...reduceIterableGen(1, (acc, val, index) => acc * (val + index), numbers)];\n * // Result: [1, 1, 3, 15, 105] (1, 1*(1+0), 1*(2+1), 3*(3+2), 15*(4+3))\n * ```\n */",[8285,9501],"/**\n * Generates intermediate reduction values while processing an async iterable.\n * Yields initial value first, then each accumulated result after processing each element.\n * {@inheritDoc reduceIterableGen}\n * @template T_accumulated - Type of accumulated value\n * @template T_element - Type of iterable elements\n * @param initialValue - Starting value for accumulation\n * @param reducer - Function to combine accumulator with each element (no array parameter, supports promises)\n * @param arrayLike - Async iterable to reduce\n * @returns Async generator yielding accumulated values at each step\n * @example\n * ```ts\n * async function* asyncNumbers() {\n *   yield 1; yield 2; yield 3; yield 4;\n * }\n *\n * const runningSum: number[] = [];\n * for await (const sum of reduceIterableAsyncGen(0, (acc, val) => acc + val, asyncNumbers())) {\n *   runningSum.push(sum);\n * }\n * // Result: [0, 1, 3, 6, 10] (initial + cumulative sums)\n *\n * const runningProduct: number[] = [];\n * for await (const product of reduceIterableAsyncGen(1, (acc, val, index) => acc * (val + index), asyncNumbers())) {\n *   runningProduct.push(product);\n * }\n * // Result: [1, 1, 3, 15, 105] (1, 1*(1+0), 1*(2+1), 3*(3+2), 15*(4+3))\n * ```\n */",[493,493],[493,493],[683,683],[683,683],[902,902],[902,902],[1113,1113],[1113,1113],[1397,1397],[1397,1397],[1616,1616],[1616,1616],[1704,1704],[1901,1901],[1901,1901],[4191,4191],[165,1425],"/**\n * Tests whether at least one element in an async iterable satisfies the provided predicate.\n * This is the async equivalent of Array.prototype.some(), supporting both sync and async iterables\n * with sync or async predicates. Uses efficient promise handling for optimal performance.\n * @param predicate - Function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Iterable or async iterable to test elements from\n * @returns True if at least one element satisfies the predicate, false otherwise\n * @example\n * ```ts\n * // Check if any number is greater than 5\n * const numbers = [1, 3, 7, 2];\n * const hasLarge = await someIterableAsync(x => x > 5, numbers); // true\n *\n * // With async predicate and async iterable\n * async function* asyncNumbers() {\n *   yield 1; yield 3; yield 7; yield 2;\n * }\n * const hasEven = await someIterableAsync(\n *   async x => (x % 2) === 0,\n *   asyncNumbers()\n * ); // true\n *\n * // Empty iterable returns false\n * const empty = await someIterableAsync(x => true, []); // false\n *\n * // Short-circuits on first true result\n * const shortCircuit = await someIterableAsync(\n *   x => { console.log(x); return x > 5; },\n *   [1, 3, 7, 2] // Only logs 1, 3, 7 then stops\n * );\n * ```\n */",[165,1425],"/**\n * Tests whether at least one element in an async iterable satisfies the provided predicate.\n * This is the async equivalent of Array.prototype.some(), supporting both sync and async iterables\n * with sync or async predicates. Uses efficient promise handling for optimal performance.\n *\n * @param predicate - Function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Iterable or async iterable to test elements from\n * @returns True if at least one element satisfies the predicate, false otherwise\n * @example\n * ```ts\n * // Check if any number is greater than 5\n * const numbers = [1, 3, 7, 2];\n * const hasLarge = await someIterableAsync(x => x > 5, numbers); // true\n *\n * // With async predicate and async iterable\n * async function* asyncNumbers() {\n *   yield 1; yield 3; yield 7; yield 2;\n * }\n * const hasEven = await someIterableAsync(\n *   async x => (x % 2) === 0,\n *   asyncNumbers()\n * ); // true\n *\n * // Empty iterable returns false\n * const empty = await someIterableAsync(x => true, []); // false\n *\n * // Short-circuits on first true result\n * const shortCircuit = await someIterableAsync(\n *   x => { console.log(x); return x > 5; },\n *   [1, 3, 7, 2] // Only logs 1, 3, 7 then stops\n * );\n * ```\n */",[1657,2911],"/**\n * Tests whether at least one element in an async iterable fails the provided predicate.\n * Returns true if any element doesn't satisfy the predicate, effectively the inverse\n * of someIterableAsync. Useful for validation scenarios where you need to detect failures.\n * @param predicate - Function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Iterable or async iterable to test elements from\n * @returns True if at least one element fails the predicate, false if all pass\n * @example\n * ```ts\n * // Check if any number fails to be positive\n * const numbers = [1, 3, -1, 2];\n * const hasNegative = await someFailIterableAsync(x => x > 0, numbers); // true\n *\n * // Validation: check if any user fails age requirement\n * const users = [\n *   { name: 'Alice', age: 25 },\n *   { name: 'Bob', age: 17 },\n *   { name: 'Charlie', age: 30 }\n * ];\n * const hasMinor = await someFailIterableAsync(\n *   user => user.age >= 18,\n *   users\n * ); // true (Bob is under 18)\n *\n * // All elements pass\n * const allValid = await someFailIterableAsync(x => x > 0, [1, 2, 3]); // false\n *\n * // Empty iterable returns false (no failures)\n * const noFailures = await someFailIterableAsync(x => false, []); // false\n * ```\n */",[1657,2911],"/**\n * Tests whether at least one element in an async iterable fails the provided predicate.\n * Returns true if any element doesn't satisfy the predicate, effectively the inverse\n * of someIterableAsync. Useful for validation scenarios where you need to detect failures.\n *\n * @param predicate - Function to test each element, can return Promise<boolean> or boolean\n * @param arrayLike - Iterable or async iterable to test elements from\n * @returns True if at least one element fails the predicate, false if all pass\n * @example\n * ```ts\n * // Check if any number fails to be positive\n * const numbers = [1, 3, -1, 2];\n * const hasNegative = await someFailIterableAsync(x => x > 0, numbers); // true\n *\n * // Validation: check if any user fails age requirement\n * const users = [\n *   { name: 'Alice', age: 25 },\n *   { name: 'Bob', age: 17 },\n *   { name: 'Charlie', age: 30 }\n * ];\n * const hasMinor = await someFailIterableAsync(\n *   user => user.age >= 18,\n *   users\n * ); // true (Bob is under 18)\n *\n * // All elements pass\n * const allValid = await someFailIterableAsync(x => x > 0, [1, 2, 3]); // false\n *\n * // Empty iterable returns false (no failures)\n * const noFailures = await someFailIterableAsync(x => false, []); // false\n * ```\n */",[69,2693],"/**\n * Converts synchronous string iterable into compact formatted representation using Intl.ListFormat.\n *\n * Uses narrow style formatting with unit type configuration, producing seamless concatenation\n * without separators or delimiters. This approach leverages browser internationalization APIs\n * for consistent string formatting behavior across different environments.\n * Ideal for creating compact identifiers, tokens, or joined text streams.\n * @param iterable - Synchronous string iterable to format into compact representation\n * @returns Compact string with all iterable elements joined without separators\n * @example\n * Basic array concatenation:\n * ```ts\n * const items = ['apple', 'banana', 'cherry'];\n * const result = toStringIterable(items);\n * console.log(result); // \"applebananacherry\"\n * ```\n *\n * @example\n * Working with Sets for unique values:\n * ```ts\n * const uniqueColors = new Set(['red', 'green', 'blue', 'red']);\n * const colors = toStringIterable(uniqueColors);\n * console.log(colors); // \"redgreenblue\"\n * ```\n *\n * @example\n * Processing generator output:\n * ```ts\n * function* generatePrefixes() {\n *   yield 'pre';\n *   yield 'fix';\n *   yield 'ed';\n * }\n *\n * const word = toStringIterable(generatePrefixes());\n * console.log(word); // \"prefixed\"\n * ```\n *\n * @example\n * Creating compact identifiers:\n * ```ts\n * const idParts = ['user', '12345', 'temp'];\n * const identifier = toStringIterable(idParts);\n * console.log(identifier); // \"user12345temp\"\n *\n * // Compare with manual joining\n * const manual = idParts.join(''); // \"user12345temp\"\n * ```\n *\n * @example\n * Building CSS class names:\n * ```ts\n * const classModifiers = ['btn', 'primary', 'large'];\n * const className = toStringIterable(classModifiers);\n * console.log(className); // \"btnprimarylarge\"\n *\n * // For space-separated classes, use strings.join instead\n * ```\n *\n * @example\n * Text processing workflows:\n * ```ts\n * const wordParts = ['un', 'predict', 'able'];\n * const compound = toStringIterable(wordParts);\n * console.log(compound); // \"unpredictable\"\n *\n * const abbreviations = new Set(['HTTP', 'API', 'JSON']);\n * const acronym = toStringIterable(abbreviations);\n * console.log(acronym); // \"HTTPAPIJSON\"\n * ```\n *\n * @example\n * Performance comparison with alternatives:\n * ```ts\n * const parts = ['a', 'b', 'c', 'd', 'e'];\n *\n * // Using toStringIterable (Intl.ListFormat)\n * const result1 = toStringIterable(parts); // \"abcde\"\n *\n * // Using Array.join (more direct)\n * const result2 = Array.from(parts).join(''); // \"abcde\"\n *\n * // Both produce identical results, choose based on context\n * ```\n */",[69,2693],"/**\n * Converts synchronous string iterable into compact formatted representation using Intl.ListFormat.\n *\n * Uses narrow style formatting with unit type configuration, producing seamless concatenation\n * without separators or delimiters. This approach leverages browser internationalization APIs\n * for consistent string formatting behavior across different environments.\n * Ideal for creating compact identifiers, tokens, or joined text streams.\n *\n * @param iterable - Synchronous string iterable to format into compact representation\n * @returns Compact string with all iterable elements joined without separators\n * @example\n * Basic array concatenation:\n * ```ts\n * const items = ['apple', 'banana', 'cherry'];\n * const result = toStringIterable(items);\n * console.log(result); // \"applebananacherry\"\n * ```\n *\n * @example\n * Working with Sets for unique values:\n * ```ts\n * const uniqueColors = new Set(['red', 'green', 'blue', 'red']);\n * const colors = toStringIterable(uniqueColors);\n * console.log(colors); // \"redgreenblue\"\n * ```\n *\n * @example\n * Processing generator output:\n * ```ts\n * function* generatePrefixes() {\n *   yield 'pre';\n *   yield 'fix';\n *   yield 'ed';\n * }\n *\n * const word = toStringIterable(generatePrefixes());\n * console.log(word); // \"prefixed\"\n * ```\n *\n * @example\n * Creating compact identifiers:\n * ```ts\n * const idParts = ['user', '12345', 'temp'];\n * const identifier = toStringIterable(idParts);\n * console.log(identifier); // \"user12345temp\"\n *\n * // Compare with manual joining\n * const manual = idParts.join(''); // \"user12345temp\"\n * ```\n *\n * @example\n * Building CSS class names:\n * ```ts\n * const classModifiers = ['btn', 'primary', 'large'];\n * const className = toStringIterable(classModifiers);\n * console.log(className); // \"btnprimarylarge\"\n *\n * // For space-separated classes, use strings.join instead\n * ```\n *\n * @example\n * Text processing workflows:\n * ```ts\n * const wordParts = ['un', 'predict', 'able'];\n * const compound = toStringIterable(wordParts);\n * console.log(compound); // \"unpredictable\"\n *\n * const abbreviations = new Set(['HTTP', 'API', 'JSON']);\n * const acronym = toStringIterable(abbreviations);\n * console.log(acronym); // \"HTTPAPIJSON\"\n * ```\n *\n * @example\n * Performance comparison with alternatives:\n * ```ts\n * const parts = ['a', 'b', 'c', 'd', 'e'];\n *\n * // Using toStringIterable (Intl.ListFormat)\n * const result1 = toStringIterable(parts); // \"abcde\"\n *\n * // Using Array.join (more direct)\n * const result2 = Array.from(parts).join(''); // \"abcde\"\n *\n * // Both produce identical results, choose based on context\n * ```\n */",[2893,6520],"/**\n * Converts async string iterable into compact formatted representation using Intl.ListFormat.\n *\n * Asynchronously processes string iterables (both sync and async) using narrow style formatting\n * with unit type configuration for seamless concatenation. Leverages Array.fromAsync for efficient\n * async iteration handling, then applies Intl.ListFormat for consistent output formatting.\n * Essential for processing streaming text data, async generators, and Promise-based string sources.\n * @param iterable - Async or sync string iterable to format into compact representation\n * @returns Compact string with all iterable elements joined without separators\n * @example\n * Basic async array processing:\n * ```ts\n * const items = ['apple', 'banana', 'cherry'];\n * const result = await toStringIterableAsync(items);\n * console.log(result); // \"applebananacherry\"\n * ```\n *\n * @example\n * Processing async generators:\n * ```ts\n * async function* generateWords() {\n *   const words = ['hello', 'async', 'world'];\n *   for (const word of words) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield word;\n *   }\n * }\n *\n * const greeting = await toStringIterableAsync(generateWords());\n * console.log(greeting); // \"helloasyncworld\"\n * ```\n *\n * @example\n * Streaming data concatenation:\n * ```ts\n * async function* fetchTextChunks() {\n *   const urls = ['/api/chunk1', '/api/chunk2', '/api/chunk3'];\n *   for (const url of urls) {\n *     const response = await fetch(url);\n *     const text = await response.text();\n *     yield text;\n *   }\n * }\n *\n * const concatenated = await toStringIterableAsync(fetchTextChunks());\n * console.log(concatenated); // Combined text from all chunks\n * ```\n *\n * @example\n * Processing Promise-based string sources:\n * ```ts\n * async function* generateTokens() {\n *   const promises = [\n *     Promise.resolve('auth'),\n *     Promise.resolve('token'),\n *     Promise.resolve('abc123')\n *   ];\n *\n *   for (const promise of promises) {\n *     yield await promise;\n *   }\n * }\n *\n * const token = await toStringIterableAsync(generateTokens());\n * console.log(token); // \"authtokenabc123\"\n * ```\n *\n * @example\n * Building dynamic content from async sources:\n * ```ts\n * async function* getPageSections() {\n *   const sections = ['header', 'content', 'footer'];\n *   for (const section of sections) {\n *     // Simulate async template loading\n *     await new Promise(resolve => setTimeout(resolve, 50));\n *     yield `<${section}>...</${section}>`;\n *   }\n * }\n *\n * const html = await toStringIterableAsync(getPageSections());\n * console.log(html); // \"<header>...</header><content>...</content><footer>...</footer>\"\n * ```\n *\n * @example\n * Working with mixed sync/async iterables:\n * ```ts\n * // Function works with both sync and async iterables\n * const syncResult = await toStringIterableAsync(['a', 'b', 'c']);\n * console.log(syncResult); // \"abc\"\n *\n * async function* asyncGen() {\n *   yield 'x'; yield 'y'; yield 'z';\n * }\n * const asyncResult = await toStringIterableAsync(asyncGen());\n * console.log(asyncResult); // \"xyz\"\n * ```\n *\n * @example\n * Error handling with async processing:\n * ```ts\n * async function* maybeFailingGenerator() {\n *   yield 'start';\n *   yield 'middle';\n *   // If this throws, the entire operation fails\n *   if (Math.random() > 0.5) throw new Error('Random failure');\n *   yield 'end';\n * }\n *\n * try {\n *   const result = await toStringIterableAsync(maybeFailingGenerator());\n *   console.log(result); // \"startmiddleend\" or throws\n * } catch (error) {\n *   console.error('Processing failed:', error.message);\n * }\n * ```\n */",[2893,6520],"/**\n * Converts async string iterable into compact formatted representation using Intl.ListFormat.\n *\n * Asynchronously processes string iterables (both sync and async) using narrow style formatting\n * with unit type configuration for seamless concatenation. Leverages Array.fromAsync for efficient\n * async iteration handling, then applies Intl.ListFormat for consistent output formatting.\n * Essential for processing streaming text data, async generators, and Promise-based string sources.\n *\n * @param iterable - Async or sync string iterable to format into compact representation\n * @returns Compact string with all iterable elements joined without separators\n * @example\n * Basic async array processing:\n * ```ts\n * const items = ['apple', 'banana', 'cherry'];\n * const result = await toStringIterableAsync(items);\n * console.log(result); // \"applebananacherry\"\n * ```\n *\n * @example\n * Processing async generators:\n * ```ts\n * async function* generateWords() {\n *   const words = ['hello', 'async', 'world'];\n *   for (const word of words) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield word;\n *   }\n * }\n *\n * const greeting = await toStringIterableAsync(generateWords());\n * console.log(greeting); // \"helloasyncworld\"\n * ```\n *\n * @example\n * Streaming data concatenation:\n * ```ts\n * async function* fetchTextChunks() {\n *   const urls = ['/api/chunk1', '/api/chunk2', '/api/chunk3'];\n *   for (const url of urls) {\n *     const response = await fetch(url);\n *     const text = await response.text();\n *     yield text;\n *   }\n * }\n *\n * const concatenated = await toStringIterableAsync(fetchTextChunks());\n * console.log(concatenated); // Combined text from all chunks\n * ```\n *\n * @example\n * Processing Promise-based string sources:\n * ```ts\n * async function* generateTokens() {\n *   const promises = [\n *     Promise.resolve('auth'),\n *     Promise.resolve('token'),\n *     Promise.resolve('abc123')\n *   ];\n *\n *   for (const promise of promises) {\n *     yield await promise;\n *   }\n * }\n *\n * const token = await toStringIterableAsync(generateTokens());\n * console.log(token); // \"authtokenabc123\"\n * ```\n *\n * @example\n * Building dynamic content from async sources:\n * ```ts\n * async function* getPageSections() {\n *   const sections = ['header', 'content', 'footer'];\n *   for (const section of sections) {\n *     // Simulate async template loading\n *     await new Promise(resolve => setTimeout(resolve, 50));\n *     yield `<${section}>...</${section}>`;\n *   }\n * }\n *\n * const html = await toStringIterableAsync(getPageSections());\n * console.log(html); // \"<header>...</header><content>...</content><footer>...</footer>\"\n * ```\n *\n * @example\n * Working with mixed sync/async iterables:\n * ```ts\n * // Function works with both sync and async iterables\n * const syncResult = await toStringIterableAsync(['a', 'b', 'c']);\n * console.log(syncResult); // \"abc\"\n *\n * async function* asyncGen() {\n *   yield 'x'; yield 'y'; yield 'z';\n * }\n * const asyncResult = await toStringIterableAsync(asyncGen());\n * console.log(asyncResult); // \"xyz\"\n * ```\n *\n * @example\n * Error handling with async processing:\n * ```ts\n * async function* maybeFailingGenerator() {\n *   yield 'start';\n *   yield 'middle';\n *   // If this throws, the entire operation fails\n *   if (Math.random() > 0.5) throw new Error('Random failure');\n *   yield 'end';\n * }\n *\n * try {\n *   const result = await toStringIterableAsync(maybeFailingGenerator());\n *   console.log(result); // \"startmiddleend\" or throws\n * } catch (error) {\n *   console.error('Processing failed:', error.message);\n * }\n * ```\n */",[0,958],"/**\n * Removes falsy elements from the beginning and end of an iterable, keeping all elements\n * between the first and last truthy values. This is similar to string trim() but operates\n * on iterables with truthy/falsy semantics.\n * @param iterable - Sequence to process by removing leading and trailing falsy elements\n * @returns New array with falsy elements trimmed from both ends, empty if all elements are falsy\n * @example\n * ```ts\n * // Remove falsy values from ends\n * const result = trimIterable([0, false, 1, 2, 0, 3, null, '']);\n * // [1, 2, 0, 3] - keeps truthy values and falsy values between them\n *\n * // Works with any iterable\n * const set = new Set([null, 'hello', '', 'world', undefined]);\n * const trimmed = trimIterable(set); // ['hello', '', 'world']\n *\n * // All falsy returns empty\n * const empty = trimIterable([0, false, null, '']); // []\n *\n * // Already trimmed\n * const clean = trimIterable([1, 2, 3]); // [1, 2, 3]\n * ```\n */",[1036,1300],"array = [...iterable];\n  const firstNonEmptyIndex = array.findIndex(Boolean);\n  if (firstNonEmptyIndex === -1) {\n    return [];\n  }\n\n  const lastNonEmptyIndex = array.toReversed().findIndex(Boolean);\n\n  const lastIndex = array.length - lastNonEmptyIndex - 1;\n\n  return array",[1346,2743],"/**\n * Removes elements from the beginning and end of an iterable based on a custom predicate,\n * keeping all elements between the first and last elements that satisfy the predicate.\n * This provides flexible trimming logic beyond simple truthy/falsy checks.\n * @param predicateKeeps - Function to test each element, returns true to keep element from trimming\n * @param iterable - Sequence to process by removing leading and trailing elements that fail predicate\n * @returns New array with elements trimmed from both ends based on predicate, empty if no elements satisfy predicate\n * @example\n * ```ts\n * // Trim whitespace-like strings\n * const strings = ['  ', '', 'hello', '  ', 'world', '', '   '];\n * const trimmed = trimIterableWith(s => s.trim() !== '', strings);\n * // ['hello', '  ', 'world'] - keeps content and spaces between\n *\n * // Trim numbers below threshold\n * const numbers = [1, 0, 5, 2, 1, 8, 0, 1];\n * const filtered = trimIterableWith(n => n >= 2, numbers);\n * // [5, 2, 1, 8] - keeps numbers >= 2 and all between first/last match\n *\n * // Trim non-alphabetical characters\n * const chars = ['!', '@', 'a', '1', 'b', 'c', '#', '$'];\n * const letters = trimIterableWith(c => /[a-zA-Z]/.test(c), chars);\n * // ['a', '1', 'b', 'c'] - keeps letters and anything between\n *\n * // No matches returns empty\n * const none = trimIterableWith(x => false, [1, 2, 3]); // []\n * ```\n */",[2874,3151],"array = [...iterable];\n  const firstNonEmptyIndex = array.findIndex(predicateKeeps);\n  if (firstNonEmptyIndex === -1) {\n    return [];\n  }\n  const lastNonEmptyIndex = array.toReversed().findIndex(predicateKeeps);\n\n  const lastIndex = array.length - lastNonEmptyIndex - 1;\n\n  return array",{"messageId":"10385","data":"10435","fix":"10436","desc":"10437"},{"messageId":"10385","data":"10438","fix":"10439","desc":"10440"},{"messageId":"10385","data":"10441","fix":"10442","desc":"10443"},{"messageId":"10385","data":"10444","fix":"10445","desc":"10437"},{"messageId":"10385","data":"10446","fix":"10447","desc":"10440"},{"messageId":"10385","data":"10448","fix":"10449","desc":"10443"},[0,554],"/**\n * Represents a value that can be either an asynchronous or synchronous iterable of elements.\n * This type is useful for scenarios where a function or method needs to accept or return an iterable\n * that may produce elements synchronously or asynchronously.\n *\n * The type combines both [AsyncIterable] and [Iterable] interfaces, allowing developers to work\n * with a unified abstraction regardless of the iteration mechanism.\n * @template element - The type of elements yielded by the iterable, consistent across both sync and async variants.\n */",[241,1818],"/**\n * Creates a new Set containing the intersection of all input iterables, preserving only elements\n * that exist in every provided iterable. Uses precise type intersection (T & U & V...) to ensure\n * type safety across multiple sources, making it perfect for finding common elements across datasets.\n *\n * The function optimizes performance with early short-circuiting: if any iterable is empty, the\n * result is immediately empty. Uses extensive overloads to maintain precise type information for\n * up to 9 iterables with intersection types.\n * @param arrays - Variable number of iterables to find common elements across\n * @returns Set containing elements present in all input iterables, with precise intersection typing\n * @template T - Intersection of element types from all input iterables\n * @example\n * ```ts\n * // Basic intersection of arrays\n * const common = intersectionIterables([1, 2, 3], [2, 3, 4]); // Set(2) {2, 3}\n *\n * // Intersection with multiple arrays\n * const shared = intersectionIterables([1, 2, 3], [2, 3, 4], [3, 4, 5]); // Set(1) {3}\n *\n * // Works with any iterables\n * const set1 = new Set([1, 2, 3]);\n * const set2 = new Set([2, 3, 4]);\n * const common2 = intersectionIterables(set1, set2); // Set(2) {2, 3}\n *\n * // String characters\n * const chars = intersectionIterables('abc', 'bcd'); // Set(2) {'b', 'c'}\n *\n * // Edge cases\n * const empty = intersectionIterables(); // Set(0) {}\n * const single = intersectionIterables([1, 2, 3]); // Set(3) {1, 2, 3}\n * const noCommon = intersectionIterables([1, 2], [3, 4]); // Set(0) {}\n * ```\n */",[1934,1989],"Parameter1,>(\n  ...arrays: [Iterable<Parameter1>]\n): Set<Parameter1",[2036,2123],"Parameter1, const Param2,>(\n  ...arrays: [Iterable<Parameter1>, Iterable<Param2>]\n): Set<Parameter1",[2050,2132],"Parameter2,>(\n  ...arrays: [Iterable<Param1>, Iterable<Parameter2>]\n): Set<Param1 & Parameter2",[2179,2298],"Parameter1, const Param2, const Param3,>(\n  ...arrays: [Iterable<Parameter1>, Iterable<Param2>, Iterable<Param3>]\n): Set<Parameter1",[2193,2307],"Parameter2, const Param3,>(\n  ...arrays: [Iterable<Param1>, Iterable<Parameter2>, Iterable<Param3>]\n): Set<Param1 & Parameter2",[2207,2316],"Parameter3,>(\n  ...arrays: [Iterable<Param1>, Iterable<Param2>, Iterable<Parameter3>]\n): Set<Param1 & Param2 & Parameter3",[2363,2516],"Parameter1, const Param2, const Param3,\n  const Param4,>(\n  ...arrays: [Iterable<Parameter1>, Iterable<Param2>, Iterable<Param3>, Iterable<Param4>]\n): Set<Parameter1",[2377,2525],"Parameter2, const Param3,\n  const Param4,>(\n  ...arrays: [Iterable<Param1>, Iterable<Parameter2>, Iterable<Param3>, Iterable<Param4>]\n): Set<Param1 & Parameter2",[2391,2534],"Parameter3,\n  const Param4,>(\n  ...arrays: [Iterable<Param1>, Iterable<Param2>, Iterable<Parameter3>, Iterable<Param4>]\n): Set<Param1 & Param2 & Parameter3",[2407,2543],"Parameter4,>(\n  ...arrays: [Iterable<Param1>, Iterable<Param2>, Iterable<Param3>, Iterable<Parameter4>]\n): Set<Param1 & Param2 & Param3 & Parameter4",[2590,2800],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5,>(\n  ...arrays: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Set<Parameter1",[2604,2809],"Parameter2, const Param3,\n  const Param4, const Param5,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Set<Param1 & Parameter2",[2618,2818],"Parameter3,\n  const Param4, const Param5,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Set<Param1 & Param2 & Parameter3",[2634,2827],"Parameter4, const Param5,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n  ]\n): Set<Param1 & Param2 & Param3 & Parameter4",[2648,2836],"Parameter5,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[2883,3129],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6,>(\n  ...arrays: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Parameter1",[2897,3138],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 & Parameter2",[2911,3147],"Parameter3,\n  const Param4, const Param5, const Param6,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 & Param2 & Parameter3",[2927,3156],"Parameter4, const Param5, const Param6,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 & Param2 & Param3 & Parameter4",[2941,3165],"Parameter5, const Param6,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[2955,3174],"Parameter6,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[3221,3503],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...arrays: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Parameter1",[3235,3512],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 & Parameter2",[3249,3521],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 & Param2 & Parameter3",[3265,3530],"Parameter4, const Param5, const Param6, const Param7,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 & Param2 & Param3 & Parameter4",[3279,3539],"Parameter5, const Param6, const Param7,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[3293,3548],"Parameter6, const Param7,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[3307,3557],"Parameter7,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Parameter7",[3604,3922],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...arrays: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Parameter1",[3618,3931],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 & Parameter2",[3632,3940],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 & Param2 & Parameter3",[3648,3949],"Parameter4, const Param5, const Param6, const Param7, const Param8,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 & Param2 & Param3 & Parameter4",[3662,3958],"Parameter5, const Param6, const Param7, const Param8,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[3676,3967],"Parameter6, const Param7, const Param8,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[3690,3976],"Parameter7, const Param8,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Parameter7",[3704,3985],"Parameter8,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Parameter8>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Param7 & Parameter8",[4032,4386],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...arrays: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Parameter1",[4046,4395],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 & Parameter2",[4060,4404],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 & Param2 & Parameter3",[4076,4413],"Parameter4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 & Param2 & Param3 & Parameter4",[4090,4422],"Parameter5, const Param6, const Param7, const Param8, const Param9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[4104,4431],"Parameter6, const Param7, const Param8, const Param9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[4118,4440],"Parameter7, const Param8, const Param9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Parameter7",[4132,4449],"Parameter8, const Param9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Parameter8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Param7 & Parameter8",[4146,4458],"Parameter9,>(\n  ...arrays: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Parameter9>,\n  ]\n): Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Param7 & Param8 & Parameter9",[4544,4544],[5531,6638],"/**\n * Converts any iterable to a Set, efficiently deduplicating elements while preserving the original\n * element type. This utility function provides a simple way to create Sets from various iterable\n * sources with full type safety and optimal performance.\n * @param iterable - Any iterable to convert to a Set\n * @returns Set containing all unique elements from the input iterable\n * @template T - Element type of the input iterable, preserved in the output Set\n * @example\n * ```ts\n * // Array to Set\n * const numbers = setOfIterable([1, 2, 2, 3]); // Set(3) {1, 2, 3}\n *\n * // String to Set of characters\n * const chars = setOfIterable('hello'); // Set(4) {'h', 'e', 'l', 'o'}\n *\n * // Generator to Set\n * function* range(n: number) {\n *   for (let i = 0; i < n; i++) yield i;\n * }\n * const rangeSet = setOfIterable(range(5)); // Set(5) {0, 1, 2, 3, 4}\n *\n * // Empty iterable\n * const empty = setOfIterable([]); // Set(0) {}\n *\n * // Already a Set (creates new instance)\n * const original = new Set([1, 2, 3]);\n * const copy = setOfIterable(original); // Set(3) {1, 2, 3} (new instance)\n * ```\n */",[6818,8137],"/**\n * Asynchronously converts any iterable or async iterable to a Set, handling both synchronous and\n * asynchronous data sources. Perfect for processing async generators, streams, or mixed sync/async\n * iterables while maintaining type safety and efficient deduplication.\n * @param iterable - Any iterable or async iterable to convert to a Set\n * @returns Promise resolving to Set containing all unique elements from the input iterable\n * @template T - Element type of the input iterable, preserved in the output Set\n * @example\n * ```ts\n * // Array to Set (async)\n * const numbers = await setOfIterableAsync([1, 2, 2, 3]); // Set(3) {1, 2, 3}\n *\n * // Async generator to Set\n * async function* asyncRange(n: number) {\n *   for (let i = 0; i < n; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 10)); // Simulate delay\n *     yield i;\n *   }\n * }\n * const rangeSet = await setOfIterableAsync(asyncRange(5)); // Set(5) {0, 1, 2, 3, 4}\n *\n * // Mixed sync and async processing\n * const syncSet = await setOfIterableAsync('hello'); // Set(4) {'h', 'e', 'l', 'o'}\n *\n * // Stream processing\n * async function* dataStream() {\n *   yield 'item1';\n *   yield 'item2';\n *   yield 'item1'; // Duplicate\n * }\n * const streamSet = await setOfIterableAsync(dataStream()); // Set(2) {'item1', 'item2'}\n * ```\n */",[8353,10614],"/**\n * Asynchronously creates a new Set containing the intersection of all input iterables and async\n * iterables, finding elements present in every provided source. Handles both synchronous and\n * asynchronous data sources efficiently using concurrent processing for optimal performance.\n *\n * Processes all iterables concurrently using Promise.all to convert them to Sets, then performs\n * intersection logic with early short-circuiting for empty sets. Perfect for finding common\n * elements across async data streams or mixed sync/async sources.\n * @param iterables - Variable number of iterables or async iterables to find intersection across\n * @returns Promise resolving to Set containing elements present in all input sources\n * @template ParamTypes - Intersection of element types from all input iterables\n * @example\n * ```ts\n * // Basic async intersection\n * const common = await intersectionIterablesAsync([1, 2, 3], [2, 3, 4]);\n * // Set(2) {2, 3}\n *\n * // Mix of sync and async iterables\n * async function* asyncNumbers() {\n *   yield 2;\n *   yield 3;\n *   yield 4;\n * }\n * const mixed = await intersectionIterablesAsync([1, 2, 3], asyncNumbers());\n * // Set(2) {2, 3}\n *\n * // Multiple async generators\n * async function* gen1() { yield 'a'; yield 'b'; yield 'c'; }\n * async function* gen2() { yield 'b'; yield 'c'; yield 'd'; }\n * async function* gen3() { yield 'c'; yield 'd'; yield 'e'; }\n * const chars = await intersectionIterablesAsync(gen1(), gen2(), gen3());\n * // Set(1) {'c'}\n *\n * // Edge cases\n * const empty = await intersectionIterablesAsync(); // Set(0) {}\n * const single = await intersectionIterablesAsync(asyncNumbers()); // Set(3) {2, 3, 4}\n *\n * // Real-world: Finding common items across data streams\n * async function* fetchUserPreferences(userId: string) {\n *   // Simulate fetching user preferences\n *   yield 'sports';\n *   yield 'music';\n *   yield 'technology';\n * }\n * async function* fetchAvailableContent() {\n *   // Simulate fetching available content categories\n *   yield 'music';\n *   yield 'technology';\n *   yield 'movies';\n * }\n * const commonCategories = await intersectionIterablesAsync(\n *   fetchUserPreferences('user123'),\n *   fetchAvailableContent()\n * ); // Set(2) {'music', 'technology'}\n * ```\n */",[10768,10844],"Parameter1,>(\n  ...iterables: [MaybeAsyncIterable<Parameter1>]\n): Promise<Set<Parameter1",[10903,11021],"Parameter1, const Param2,>(\n  ...iterables: [MaybeAsyncIterable<Parameter1>, MaybeAsyncIterable<Param2>]\n): Promise<Set<Parameter1",[10917,11030],"Parameter2,>(\n  ...iterables: [MaybeAsyncIterable<Param1>, MaybeAsyncIterable<Parameter2>]\n): Promise<Set<Param1 & Parameter2",[11089,11268],"Parameter1, const Param2,\n  const Param3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n  ]\n): Promise<Set<Parameter1",[11103,11277],"Parameter2,\n  const Param3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n  ]\n): Promise<Set<Param1 & Parameter2",[11119,11286],"Parameter3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n  ]\n): Promise<Set<Param1 & Param2 & Parameter3",[11345,11570],"Parameter1, const Param2, const Param3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): Promise<Set<Parameter1",[11359,11579],"Parameter2, const Param3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): Promise<Set<Param1 & Parameter2",[11373,11588],"Parameter3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): Promise<Set<Param1 & Param2 & Parameter3",[11389,11597],"Parameter4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Parameter4",[11656,11927],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): Promise<Set<Parameter1",[11670,11936],"Parameter2, const Param3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): Promise<Set<Param1 & Parameter2",[11684,11945],"Parameter3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): Promise<Set<Param1 & Param2 & Parameter3",[11700,11954],"Parameter4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Parameter4",[11714,11963],"Parameter5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[12022,12339],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Parameter1",[12036,12348],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 & Parameter2",[12050,12357],"Parameter3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 & Param2 & Parameter3",[12066,12366],"Parameter4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Parameter4",[12080,12375],"Parameter5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[12094,12384],"Parameter6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[12443,12806],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Parameter1",[12457,12815],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 & Parameter2",[12471,12824],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 & Param2 & Parameter3",[12487,12833],"Parameter4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Parameter4",[12501,12842],"Parameter5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[12515,12851],"Parameter6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[12529,12860],"Parameter7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Parameter7",[12919,13328],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Parameter1",[12933,13337],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 & Parameter2",[12947,13346],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 & Param2 & Parameter3",[12963,13355],"Parameter4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Parameter4",[12977,13364],"Parameter5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[12991,13373],"Parameter6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[13005,13382],"Parameter7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Parameter7",[13019,13391],"Parameter8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Parameter8>,\n  ]\n): Promise<Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Param7 & Parameter8",[13450,13908],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Parameter1",[13464,13917],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 & Parameter2",[13478,13926],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 & Param2 & Parameter3",[13494,13935],"Parameter4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 & Param2 & Param3 & Parameter4",[13508,13944],"Parameter5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 & Param2 & Param3 & Param4 & Parameter5",[13522,13953],"Parameter6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 & Param2 & Param3 & Param4 & Param5 & Parameter6",[13536,13962],"Parameter7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Parameter7",[13550,13971],"Parameter8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Parameter8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Param7 & Parameter8",[13564,13980],"Parameter9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Parameter9>,\n  ]\n): Promise<\n  Set<Param1 & Param2 & Param3 & Param4 & Param5 & Param6 & Param7 & Param8 & Parameter9",[14105,14105],[69,1478],"/**\n * Creates a new Set containing the union of all input iterables, preserving type safety across\n * multiple iterable sources. Combines elements from all iterables while automatically deduplicating\n * using Set semantics, making it perfect for merging data from different sources.\n *\n * The function uses extensive overloads to maintain precise type information for up to 9 iterables,\n * with union types that capture all possible element types from the input sources.\n * @param iterables - Variable number of iterables to combine into a union set\n * @returns Set containing all unique elements from input iterables, with precise union typing\n * @template ParamTypes - Union of element types from all input iterables\n * @example\n * ```ts\n * // Basic union of arrays\n * const numbers = unionIterables([1, 2, 3], [3, 4, 5]); // Set(5) {1, 2, 3, 4, 5}\n *\n * // Union with different types\n * const mixed = unionIterables(['a', 'b'], [1, 2]); // Set<string | number>\n *\n * // Works with any iterables\n * const set1 = new Set([1, 2, 3]);\n * const set2 = new Set([3, 4, 5]);\n * const combined = unionIterables(set1, set2); // Set(5) {1, 2, 3, 4, 5}\n *\n * // String characters\n * const chars = unionIterables('abc', 'bcd'); // Set(4) {'a', 'b', 'c', 'd'}\n *\n * // Empty and single iterables\n * const empty = unionIterables(); // Set(0) {}\n * const single = unionIterables([1, 2, 2]); // Set(2) {1, 2}\n * ```\n */",[1583,1641],"Parameter1,>(\n  ...iterables: [Iterable<Parameter1>]\n): Set<Parameter1",[1681,1771],"Parameter1, const Param2,>(\n  ...iterables: [Iterable<Parameter1>, Iterable<Param2>]\n): Set<Parameter1",[1695,1780],"Parameter2,>(\n  ...iterables: [Iterable<Param1>, Iterable<Parameter2>]\n): Set<Param1 | Parameter2",[1820,1942],"Parameter1, const Param2, const Param3,>(\n  ...iterables: [Iterable<Parameter1>, Iterable<Param2>, Iterable<Param3>]\n): Set<Parameter1",[1834,1951],"Parameter2, const Param3,>(\n  ...iterables: [Iterable<Param1>, Iterable<Parameter2>, Iterable<Param3>]\n): Set<Param1 | Parameter2",[1848,1960],"Parameter3,>(\n  ...iterables: [Iterable<Param1>, Iterable<Param2>, Iterable<Parameter3>]\n): Set<Param1 | Param2 | Parameter3",[2000,2154],"Parameter1, const Param2, const Param3, const Param4,>(\n  ...iterables: [Iterable<Parameter1>, Iterable<Param2>, Iterable<Param3>, Iterable<Param4>]\n): Set<Parameter1",[2014,2163],"Parameter2, const Param3, const Param4,>(\n  ...iterables: [Iterable<Param1>, Iterable<Parameter2>, Iterable<Param3>, Iterable<Param4>]\n): Set<Param1 | Parameter2",[2028,2172],"Parameter3, const Param4,>(\n  ...iterables: [Iterable<Param1>, Iterable<Param2>, Iterable<Parameter3>, Iterable<Param4>]\n): Set<Param1 | Param2 | Parameter3",[2042,2181],"Parameter4,>(\n  ...iterables: [Iterable<Param1>, Iterable<Param2>, Iterable<Param3>, Iterable<Parameter4>]\n): Set<Param1 | Param2 | Param3 | Parameter4",[2221,2434],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Set<Parameter1",[2235,2443],"Parameter2, const Param3, const Param4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Set<Param1 | Parameter2",[2249,2452],"Parameter3, const Param4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Set<Param1 | Param2 | Parameter3",[2263,2461],"Parameter4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n  ]\n): Set<Param1 | Param2 | Param3 | Parameter4",[2279,2470],"Parameter5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[2510,2759],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Parameter1",[2524,2768],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 | Parameter2",[2538,2777],"Parameter3, const Param4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 | Param2 | Parameter3",[2552,2786],"Parameter4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 | Param2 | Param3 | Parameter4",[2568,2795],"Parameter5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[2582,2804],"Parameter6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[2844,3129],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Parameter1",[2858,3138],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 | Parameter2",[2872,3147],"Parameter3, const Param4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 | Param2 | Parameter3",[2886,3156],"Parameter4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 | Param2 | Param3 | Parameter4",[2902,3165],"Parameter5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[2916,3174],"Parameter6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[2930,3183],"Parameter7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[3223,3544],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Parameter1",[3237,3553],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 | Parameter2",[3251,3562],"Parameter3, const Param4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 | Param2 | Parameter3",[3265,3571],"Parameter4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 | Param2 | Param3 | Parameter4",[3281,3580],"Parameter5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[3295,3589],"Parameter6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[3309,3598],"Parameter7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n    Iterable<Param8>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[3323,3607],"Parameter8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Parameter8>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[3647,4004],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Parameter1",[3661,4013],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 | Parameter2",[3675,4022],"Parameter3, const Param4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 | Param2 | Parameter3",[3689,4031],"Parameter4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 | Param2 | Param3 | Parameter4",[3705,4040],"Parameter5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[3719,4049],"Parameter6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[3733,4058],"Parameter7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[3747,4067],"Parameter8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Parameter8>,\n    Iterable<Param9>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[3761,4076],"Parameter9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Parameter9>,\n  ]\n): Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Param8 | Parameter9",[4158,4158],[4557,5998],"/**\n * Asynchronously creates a new Set containing the union of all input iterables and async iterables,\n * handling both synchronous and asynchronous data sources. Perfect for combining data streams,\n * async generators, or mixed sync/async iterables while maintaining type safety.\n *\n * Processes all iterables concurrently using Promise.all for optimal performance, then combines\n * all elements into a single deduplicated Set.\n * @param iterables - Variable number of iterables or async iterables to combine\n * @returns Promise resolving to Set containing all unique elements from input sources\n * @template ParamTypes - Union of element types from all input iterables\n * @example\n * ```ts\n * // Basic async union\n * const result1 = await unionIterablesAsync([1, 2, 3], [3, 4, 5]);\n * // Set(5) {1, 2, 3, 4, 5}\n *\n * // Mix of sync and async iterables\n * async function* asyncNumbers() {\n *   yield 10;\n *   yield 20;\n * }\n * const mixed = await unionIterablesAsync([1, 2], asyncNumbers());\n * // Set(4) {1, 2, 10, 20}\n *\n * // Multiple async generators\n * async function* gen1() { yield 'a'; yield 'b'; }\n * async function* gen2() { yield 'b'; yield 'c'; }\n * const chars = await unionIterablesAsync(gen1(), gen2());\n * // Set(3) {'a', 'b', 'c'}\n *\n * // Empty and single async cases\n * const empty = await unionIterablesAsync(); // Set(0) {}\n * const single = await unionIterablesAsync(asyncNumbers()); // Set(2) {10, 20}\n * ```\n */",[6138,6214],[6266,6384],[6280,6393],"Parameter2,>(\n  ...iterables: [MaybeAsyncIterable<Param1>, MaybeAsyncIterable<Parameter2>]\n): Promise<Set<Param1 | Parameter2",[6445,6622],"Parameter1, const Param2, const Param3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n  ]\n): Promise<Set<Parameter1",[6459,6631],"Parameter2, const Param3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n  ]\n): Promise<Set<Param1 | Parameter2",[6473,6640],"Parameter3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n  ]\n): Promise<Set<Param1 | Param2 | Parameter3",[6692,6917],[6706,6926],"Parameter2, const Param3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): Promise<Set<Param1 | Parameter2",[6720,6935],"Parameter3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): Promise<Set<Param1 | Param2 | Parameter3",[6736,6944],"Parameter4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Parameter4",[6996,7267],[7010,7276],"Parameter2, const Param3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): Promise<Set<Param1 | Parameter2",[7024,7285],"Parameter3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): Promise<Set<Param1 | Param2 | Parameter3",[7040,7294],"Parameter4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Parameter4",[7054,7303],"Parameter5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[7355,7672],[7369,7681],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 | Parameter2",[7383,7690],"Parameter3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 | Param2 | Parameter3",[7399,7699],"Parameter4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Parameter4",[7413,7708],"Parameter5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[7427,7717],"Parameter6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[7769,8132],[7783,8141],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 | Parameter2",[7797,8150],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 | Param2 | Parameter3",[7813,8159],"Parameter4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Parameter4",[7827,8168],"Parameter5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[7841,8177],"Parameter6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[7855,8186],"Parameter7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[8238,8647],[8252,8656],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 | Parameter2",[8266,8665],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 | Param2 | Parameter3",[8282,8674],"Parameter4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Parameter4",[8296,8683],"Parameter5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[8310,8692],"Parameter6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[8324,8701],"Parameter7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[8338,8710],"Parameter8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Parameter8>,\n  ]\n): Promise<Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[8762,9220],[8776,9229],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 | Parameter2",[8790,9238],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 | Param2 | Parameter3",[8806,9247],"Parameter4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 | Param2 | Param3 | Parameter4",[8820,9256],"Parameter5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 | Param2 | Param3 | Param4 | Parameter5",[8834,9265],"Parameter6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[8848,9274],"Parameter7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[8862,9283],"Parameter8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Parameter8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): Promise<\n  Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[8876,9292],"Parameter9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Parameter9>,\n  ]\n): Promise<\n  Set<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Param8 | Parameter9",[9410,9410],[10174,11817],"/**\n * Creates a memory-efficient generator that yields the union of all input iterables in encounter\n * order. Elements are yielded as soon as they're discovered and only once, making this perfect\n * for processing large datasets without loading everything into memory at once.\n *\n * Uses a Set internally to track yielded elements for deduplication while maintaining the\n * lazy evaluation benefits of generators. Elements appear in the order they're first encountered\n * across the input iterables.\n * @param iterables - Variable number of iterables to process in union fashion\n * @returns Generator yielding unique elements in encounter order\n * @template ParamTypes - Union of element types from all input iterables\n * @example\n * ```ts\n * // Basic generator union\n * const gen = unionIterablesGen([1, 2, 3], [3, 4, 5]);\n * for (const item of gen) {\n *   console.log(item); // 1, 2, 3, 4, 5 (in encounter order)\n * }\n *\n * // Memory-efficient processing of large datasets\n * function* largeDataset1() { for(let i = 0; i < 1000000; i++) yield i; }\n * function* largeDataset2() { for(let i = 500000; i < 1500000; i++) yield i; }\n * const union = unionIterablesGen(largeDataset1(), largeDataset2());\n * // Processes without loading all data into memory\n *\n * // String processing\n * const chars = unionIterablesGen('abc', 'bcd', 'cde');\n * console.log([...chars]); // ['a', 'b', 'c', 'd', 'e']\n *\n * // Early termination\n * const gen2 = unionIterablesGen([1, 2, 3], [4, 5, 6]);\n * const first3 = [];\n * for (const item of gen2) {\n *   first3.push(item);\n *   if (first3.length === 3) break; // Only processes what's needed\n * }\n * ```\n */",[11955,12019],"Parameter1,>(\n  ...iterables: [Iterable<Parameter1>]\n): Generator<Parameter1",[12079,12175],"Parameter1, const Param2,>(\n  ...iterables: [Iterable<Parameter1>, Iterable<Param2>]\n): Generator<Parameter1",[12093,12184],"Parameter2,>(\n  ...iterables: [Iterable<Param1>, Iterable<Parameter2>]\n): Generator<Param1 | Parameter2",[12244,12372],"Parameter1, const Param2, const Param3,>(\n  ...iterables: [Iterable<Parameter1>, Iterable<Param2>, Iterable<Param3>]\n): Generator<Parameter1",[12258,12381],"Parameter2, const Param3,>(\n  ...iterables: [Iterable<Param1>, Iterable<Parameter2>, Iterable<Param3>]\n): Generator<Param1 | Parameter2",[12272,12390],"Parameter3,>(\n  ...iterables: [Iterable<Param1>, Iterable<Param2>, Iterable<Parameter3>]\n): Generator<Param1 | Param2 | Parameter3",[12450,12612],"Parameter1, const Param2, const Param3,\n  const Param4,>(\n  ...iterables: [Iterable<Parameter1>, Iterable<Param2>, Iterable<Param3>, Iterable<Param4>]\n): Generator<Parameter1",[12464,12621],"Parameter2, const Param3,\n  const Param4,>(\n  ...iterables: [Iterable<Param1>, Iterable<Parameter2>, Iterable<Param3>, Iterable<Param4>]\n): Generator<Param1 | Parameter2",[12478,12630],"Parameter3,\n  const Param4,>(\n  ...iterables: [Iterable<Param1>, Iterable<Param2>, Iterable<Parameter3>, Iterable<Param4>]\n): Generator<Param1 | Param2 | Parameter3",[12494,12639],"Parameter4,>(\n  ...iterables: [Iterable<Param1>, Iterable<Param2>, Iterable<Param3>, Iterable<Parameter4>]\n): Generator<Param1 | Param2 | Param3 | Parameter4",[12699,12918],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Generator<Parameter1",[12713,12927],"Parameter2, const Param3, const Param4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Generator<Param1 | Parameter2",[12727,12936],"Parameter3, const Param4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n  ]\n): Generator<Param1 | Param2 | Parameter3",[12741,12945],"Parameter4,\n  const Param5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Parameter4",[12757,12954],"Parameter5,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Param4 | Parameter5",[13014,13269],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Generator<Parameter1",[13028,13278],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Generator<Param1 | Parameter2",[13042,13287],"Parameter3, const Param4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Generator<Param1 | Param2 | Parameter3",[13056,13296],"Parameter4,\n  const Param5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Parameter4",[13072,13305],"Parameter5, const Param6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Param4 | Parameter5",[13086,13314],"Parameter6,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[13374,13665],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Generator<Parameter1",[13388,13674],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Generator<Param1 | Parameter2",[13402,13683],"Parameter3, const Param4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Generator<Param1 | Param2 | Parameter3",[13416,13692],"Parameter4,\n  const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Parameter4",[13432,13701],"Parameter5, const Param6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Param4 | Parameter5",[13446,13710],"Parameter6, const Param7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[13460,13719],"Parameter7,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n  ]\n): Generator<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[13781,14111],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Generator<\n  Parameter1",[13795,14120],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Generator<\n  Param1 | Parameter2",[13809,14129],"Parameter3, const Param4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Generator<\n  Param1 | Param2 | Parameter3",[13823,14138],"Parameter4,\n  const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Parameter4",[13839,14147],"Parameter5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Parameter5",[13853,14156],"Parameter6, const Param7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[13867,14165],"Parameter7, const Param8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n    Iterable<Param8>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[13881,14174],"Parameter8,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Parameter8>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[14239,14605],"Parameter1, const Param2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Parameter1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Parameter1",[14253,14614],"Parameter2, const Param3, const Param4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Parameter2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Param1 | Parameter2",[14267,14623],"Parameter3, const Param4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Parameter3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Param1 | Param2 | Parameter3",[14281,14632],"Parameter4,\n  const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Parameter4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Parameter4",[14297,14641],"Parameter5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Parameter5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Parameter5",[14311,14650],"Parameter6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Parameter6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[14325,14659],"Parameter7, const Param8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Parameter7>,\n    Iterable<Param8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[14339,14668],"Parameter8, const Param9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Parameter8>,\n    Iterable<Param9>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[14353,14677],"Parameter9,>(\n  ...iterables: [\n    Iterable<Param1>,\n    Iterable<Param2>,\n    Iterable<Param3>,\n    Iterable<Param4>,\n    Iterable<Param5>,\n    Iterable<Param6>,\n    Iterable<Param7>,\n    Iterable<Param8>,\n    Iterable<Parameter9>,\n  ]\n): Generator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Param8 | Parameter9",[14811,14811],[15144,17199],"/**\n * Creates a memory-efficient async generator that yields the union of all input iterables and\n * async iterables in encounter order. Handles both synchronous and asynchronous data sources\n * while maintaining lazy evaluation and memory efficiency for large or infinite data streams.\n *\n * Processes iterables sequentially (not concurrently) to maintain encounter order, using a Set\n * for deduplication. Elements are yielded as soon as they're discovered and only once.\n * @param iterables - Variable number of iterables or async iterables to process\n * @returns AsyncGenerator yielding unique elements in encounter order\n * @template ParamTypes - Union of element types from all input iterables\n * @example\n * ```ts\n * // Basic async generator union\n * async function* gen1() { yield 1; yield 2; }\n * async function* gen2() { yield 2; yield 3; }\n * const union = unionIterablesAsyncGen(gen1(), gen2());\n * for await (const item of union) {\n *   console.log(item); // 1, 2, 3 (in encounter order)\n * }\n *\n * // Mix of sync and async sources\n * async function* asyncData() { yield 'async1'; yield 'async2'; }\n * const mixed = unionIterablesAsyncGen(['sync1', 'sync2'], asyncData());\n * const result = [];\n * for await (const item of mixed) {\n *   result.push(item); // ['sync1', 'sync2', 'async1', 'async2']\n * }\n *\n * // Streaming data processing\n * async function* dataStream1() {\n *   for (let i = 0; i < 1000; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 1)); // Simulate delay\n *     yield `stream1-${i}`;\n *   }\n * }\n * async function* dataStream2() {\n *   for (let i = 500; i < 1500; i++) {\n *     yield `stream2-${i}`;\n *   }\n * }\n * const streamUnion = unionIterablesAsyncGen(dataStream1(), dataStream2());\n * // Memory-efficient processing of streaming data\n *\n * // Early termination with async\n * const asyncGen = unionIterablesAsyncGen(gen1(), gen2());\n * const first2 = [];\n * for await (const item of asyncGen) {\n *   first2.push(item);\n *   if (first2.length === 2) break; // Stops processing early\n * }\n * ```\n */",[17352,17431],"Parameter1,>(\n  ...iterables: [MaybeAsyncIterable<Parameter1>]\n): AsyncGenerator<Parameter1",[17496,17617],"Parameter1, const Param2,>(\n  ...iterables: [MaybeAsyncIterable<Parameter1>, MaybeAsyncIterable<Param2>]\n): AsyncGenerator<Parameter1",[17510,17626],"Parameter2,>(\n  ...iterables: [MaybeAsyncIterable<Param1>, MaybeAsyncIterable<Parameter2>]\n): AsyncGenerator<Param1 | Parameter2",[17691,17871],"Parameter1, const Param2, const Param3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n  ]\n): AsyncGenerator<Parameter1",[17705,17880],"Parameter2, const Param3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n  ]\n): AsyncGenerator<Param1 | Parameter2",[17719,17889],"Parameter3,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Parameter3",[17954,18182],"Parameter1, const Param2, const Param3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): AsyncGenerator<Parameter1",[17968,18191],"Parameter2, const Param3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): AsyncGenerator<Param1 | Parameter2",[17982,18200],"Parameter3,\n  const Param4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Parameter3",[17998,18209],"Parameter4,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Parameter4",[18274,18548],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): AsyncGenerator<Parameter1",[18288,18557],"Parameter2, const Param3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): AsyncGenerator<Param1 | Parameter2",[18302,18566],"Parameter3,\n  const Param4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Parameter3",[18318,18575],"Parameter4, const Param5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Parameter4",[18332,18584],"Parameter5,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Param4 | Parameter5",[18649,18969],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): AsyncGenerator<Parameter1",[18663,18978],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): AsyncGenerator<Param1 | Parameter2",[18677,18987],"Parameter3,\n  const Param4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Parameter3",[18693,18996],"Parameter4, const Param5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Parameter4",[18707,19005],"Parameter5, const Param6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Param4 | Parameter5",[18721,19014],"Parameter6,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[19079,19445],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): AsyncGenerator<Parameter1",[19093,19454],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): AsyncGenerator<Param1 | Parameter2",[19107,19463],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Parameter3",[19123,19472],"Parameter4, const Param5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Parameter4",[19137,19481],"Parameter5, const Param6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Param4 | Parameter5",[19151,19490],"Parameter6, const Param7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[19165,19499],"Parameter7,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n  ]\n): AsyncGenerator<Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[19566,19981],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): AsyncGenerator<\n  Parameter1",[19580,19990],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): AsyncGenerator<\n  Param1 | Parameter2",[19594,19999],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Parameter3",[19610,20008],"Parameter4, const Param5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Parameter4",[19624,20017],"Parameter5, const Param6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Parameter5",[19638,20026],"Parameter6, const Param7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[19652,20035],"Parameter7, const Param8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n    MaybeAsyncIterable<Param8>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[19666,20044],"Parameter8,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Parameter8>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[20114,20575],"Parameter1, const Param2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Parameter1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Parameter1",[20128,20584],"Parameter2, const Param3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Parameter2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Param1 | Parameter2",[20142,20593],"Parameter3,\n  const Param4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Parameter3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Parameter3",[20158,20602],"Parameter4, const Param5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Parameter4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Parameter4",[20172,20611],"Parameter5, const Param6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Parameter5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Parameter5",[20186,20620],"Parameter6, const Param7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Parameter6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Parameter6",[20200,20629],"Parameter7, const Param8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Parameter7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Parameter7",[20214,20638],"Parameter8, const Param9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Parameter8>,\n    MaybeAsyncIterable<Param9>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Parameter8",[20228,20647],"Parameter9,>(\n  ...iterables: [\n    MaybeAsyncIterable<Param1>,\n    MaybeAsyncIterable<Param2>,\n    MaybeAsyncIterable<Param3>,\n    MaybeAsyncIterable<Param4>,\n    MaybeAsyncIterable<Param5>,\n    MaybeAsyncIterable<Param6>,\n    MaybeAsyncIterable<Param7>,\n    MaybeAsyncIterable<Param8>,\n    MaybeAsyncIterable<Parameter9>,\n  ]\n): AsyncGenerator<\n  Param1 | Param2 | Param3 | Param4 | Param5 | Param6 | Param7 | Param8 | Parameter9",[20801,20801],[344,344],[344,344],[551,551],[551,551],[743,743],[743,743],[1005,1005],[1005,1005],[1162,1162],[1162,1162],[2225,2225],[2225,2225],[2394,2394],[2598,2598],[2598,2598],[2739,2739],[2814,2814],[2974,2974],[2974,2974],[3133,3133],[3268,3268],[3268,3268],[3403,3403],[3471,3471],[4313,4313],[4313,4313],[4486,4486],[4486,4486],[4683,4683],[4683,4683],[4948,4948],[4948,4948],[5108,5108],[5108,5108],[5892,5892],[5892,5892],[5934,5934],[5934,5934],[6246,6246],[6246,6246],[6373,6373],[6640,6640],[6640,6640],[6775,6775],[6850,6850],[7088,7088],[7088,7088],[7242,7242],[7440,7440],[7440,7440],[7570,7570],[7638,7638],[8354,8354],[8354,8354],[8495,8495],[8495,8495],[8650,8650],[8650,8650],[1133,1139],[1186,1192],[1235,1241],[1414,1420],[1478,1484],[1556,1562],[1752,1866],{"messageId":"10399","fix":"10450","desc":"10401"},[2022,2028],[2233,2239],[2307,2313],[2423,2429],[2877,5078],"/**\n * Creates a logtape configuration object optimized for browser environments.\n *\n * This function provides a complete logging configuration that automatically\n * handles different browser storage mechanisms. It attempts to use OPFS (Origin Private File System)\n * first, falls back to sessionStorage, and finally uses in-memory storage if neither is available.\n * The configuration includes proper sinks, formatters, and disposal mechanisms for each storage type.\n * @param appName - Application name used for log file naming and storage keys (defaults to 'monochromatic')\n * @returns Configuration object compatible with logtape's configure function\n * @example\n * Basic usage with default app name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration());\n * ```\n *\n * @example\n * Custom application name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration, logtapeGetLogger, logtapeId } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration('my-app'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * logger.info('Application started');\n * ```\n *\n * @example\n * Complete setup in main application file:\n * ```ts\n * import {\n *   logtapeConfiguration,\n *   logtapeId,\n *   logtapeGetLogger,\n *   logtapeConfigure,\n * } from '@monochromatic-dev/module-es';\n *\n * // Initialize logging\n * await logtapeConfigure(await logtapeConfiguration('my-app'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * // Logger categories: 'a' (app), 'm' (module), 't' (test)\n * logger.debug('Debug message', { category: 'a' });\n * ```\n *\n * @remarks\n * Storage fallback hierarchy:\n * 1. **OPFS (Origin Private File System)** - Persistent file storage (preferred)\n * 2. **SessionStorage** - Session-scoped browser storage\n * 3. **Memory** - In-memory array storage (fallback)\n *\n * Logger category abbreviations are used to save terminal space:\n * - `a` = app (application-level logging)\n * - `m` = module (module-level logging)\n * - `t` = test (testing-related logging)\n */",[2877,5078],"/**\n * Creates a logtape configuration object optimized for browser environments.\n *\n * This function provides a complete logging configuration that automatically\n * handles different browser storage mechanisms. It attempts to use OPFS (Origin Private File System)\n * first, falls back to sessionStorage, and finally uses in-memory storage if neither is available.\n * The configuration includes proper sinks, formatters, and disposal mechanisms for each storage type.\n *\n * @param appName - Application name used for log file naming and storage keys (defaults to 'monochromatic')\n * @returns Configuration object compatible with logtape's configure function\n * @example\n * Basic usage with default app name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration());\n * ```\n *\n * @example\n * Custom application name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration, logtapeGetLogger, logtapeId } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration('my-app'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * logger.info('Application started');\n * ```\n *\n * @example\n * Complete setup in main application file:\n * ```ts\n * import {\n *   logtapeConfiguration,\n *   logtapeId,\n *   logtapeGetLogger,\n *   logtapeConfigure,\n * } from '@monochromatic-dev/module-es';\n *\n * // Initialize logging\n * await logtapeConfigure(await logtapeConfiguration('my-app'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * // Logger categories: 'a' (app), 'm' (module), 't' (test)\n * logger.debug('Debug message', { category: 'a' });\n * ```\n *\n * @remarks\n * Storage fallback hierarchy:\n * 1. **OPFS (Origin Private File System)** - Persistent file storage (preferred)\n * 2. **SessionStorage** - Session-scoped browser storage\n * 3. **Memory** - In-memory array storage (fallback)\n *\n * Logger category abbreviations are used to save terminal space:\n * - `a` = app (application-level logging)\n * - `m` = module (module-level logging)\n * - `t` = test (testing-related logging)\n */",[285,285],[403,403],[1310,3482],"/**\n * Creates a logtape configuration object optimized for Node.js environments.\n *\n * This function provides a complete logging configuration that automatically\n * handles file-based logging with timestamped JSONL files. It creates log files\n * in the './logs' directory with the format `{appName}.{timestamp}.log.jsonl`.\n * Falls back to in-memory storage if file system operations fail.\n * @param appName - Application name used for log file naming (defaults to 'monochromatic')\n * @returns Configuration object compatible with logtape's configure function\n * @example\n * Basic usage with default app name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration());\n * ```\n *\n * @example\n * Custom application name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration, logtapeGetLogger, logtapeId } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration('my-server'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * logger.info('Server started');\n * ```\n *\n * @example\n * Complete setup in main application file:\n * ```ts\n * import {\n *   logtapeConfiguration,\n *   logtapeId,\n *   logtapeGetLogger,\n *   logtapeConfigure,\n * } from '@monochromatic-dev/module-es';\n *\n * // Initialize logging\n * await logtapeConfigure(await logtapeConfiguration('my-server'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * // Logger categories: 'a' (app), 'm' (module), 't' (test)\n * logger.debug('Debug message', { category: 'a' });\n * ```\n *\n * @remarks\n * File storage characteristics:\n * - **Log Directory**: `./logs/` (created automatically)\n * - **File Format**: `{appName}.{ISO-timestamp}.log.jsonl`\n * - **Content Format**: Pretty-printed JSON with newlines for readability\n * - **Fallback**: In-memory array storage if filesystem fails\n *\n * Logger category abbreviations are used to save terminal space:\n * - `a` = app (application-level logging)\n * - `m` = module (module-level logging)\n * - `t` = test (testing-related logging)\n */",[1310,3482],"/**\n * Creates a logtape configuration object optimized for Node.js environments.\n *\n * This function provides a complete logging configuration that automatically\n * handles file-based logging with timestamped JSONL files. It creates log files\n * in the './logs' directory with the format `{appName}.{timestamp}.log.jsonl`.\n * Falls back to in-memory storage if file system operations fail.\n *\n * @param appName - Application name used for log file naming (defaults to 'monochromatic')\n * @returns Configuration object compatible with logtape's configure function\n * @example\n * Basic usage with default app name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration());\n * ```\n *\n * @example\n * Custom application name:\n * ```ts\n * import { logtapeConfigure } from '@logtape/logtape';\n * import { logtapeConfiguration, logtapeGetLogger, logtapeId } from '@monochromatic-dev/module-es';\n *\n * await logtapeConfigure(await logtapeConfiguration('my-server'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * logger.info('Server started');\n * ```\n *\n * @example\n * Complete setup in main application file:\n * ```ts\n * import {\n *   logtapeConfiguration,\n *   logtapeId,\n *   logtapeGetLogger,\n *   logtapeConfigure,\n * } from '@monochromatic-dev/module-es';\n *\n * // Initialize logging\n * await logtapeConfigure(await logtapeConfiguration('my-server'));\n * const logger = logtapeGetLogger(logtapeId);\n *\n * // Logger categories: 'a' (app), 'm' (module), 't' (test)\n * logger.debug('Debug message', { category: 'a' });\n * ```\n *\n * @remarks\n * File storage characteristics:\n * - **Log Directory**: `./logs/` (created automatically)\n * - **File Format**: `{appName}.{ISO-timestamp}.log.jsonl`\n * - **Content Format**: Pretty-printed JSON with newlines for readability\n * - **Fallback**: In-memory array storage if filesystem fails\n *\n * Logger category abbreviations are used to save terminal space:\n * - `a` = app (application-level logging)\n * - `m` = module (module-level logging)\n * - `t` = test (testing-related logging)\n */",{"kind":"10413","justification":"10451"},[133,1796],"/**\n * Creates a base logtape configuration object that works across all environments.\n *\n * This function provides the core logging configuration structure with proper\n * sink routing, console formatting, and logger categories. It handles environment\n * detection for colored vs plain console output and sets up appropriate log levels\n * for different categories (app, module, test, esbuild-plugin).\n * @param fileSink - File or storage sink that implements both Sink and AsyncDisposable interfaces\n * @returns Complete logtape configuration object with sinks, filters, and loggers\n * @example\n * Basic usage with custom file sink:\n * ```ts\n * import { createBaseConfig } from '@monochromatic-dev/module-es';\n *\n * const myFileSink = createCustomFileSink();\n * const config = createBaseConfig(myFileSink);\n * await logtapeConfigure(config);\n * ```\n *\n * @example\n * Environment-aware console formatting:\n * ```ts\n * // In test environment or with NO_COLOR, uses plain formatting\n * // In development, uses colored console output\n * const config = createBaseConfig(fileSink);\n * ```\n *\n * @remarks\n * Logger category configuration:\n * - **'a' (app)**: Debug level, outputs to file + console info+\n * - **'t' (test)**: Debug level, outputs to file + console info+\n * - **'m' (module)**: Debug level, outputs to file + console warn+\n * - **'esbuild-plugin'**: Debug level, outputs to file + console warn+\n * - **'logtape.meta'**: Warning level, outputs to console only\n *\n * Console sink behavior:\n * - **Colored**: Full formatting with timestamps and colors (development)\n * - **Plain**: Text-only formatting for test environments or when NO_COLOR is set\n */",[133,1796],"/**\n * Creates a base logtape configuration object that works across all environments.\n *\n * This function provides the core logging configuration structure with proper\n * sink routing, console formatting, and logger categories. It handles environment\n * detection for colored vs plain console output and sets up appropriate log levels\n * for different categories (app, module, test, esbuild-plugin).\n *\n * @param fileSink - File or storage sink that implements both Sink and AsyncDisposable interfaces\n * @returns Complete logtape configuration object with sinks, filters, and loggers\n * @example\n * Basic usage with custom file sink:\n * ```ts\n * import { createBaseConfig } from '@monochromatic-dev/module-es';\n *\n * const myFileSink = createCustomFileSink();\n * const config = createBaseConfig(myFileSink);\n * await logtapeConfigure(config);\n * ```\n *\n * @example\n * Environment-aware console formatting:\n * ```ts\n * // In test environment or with NO_COLOR, uses plain formatting\n * // In development, uses colored console output\n * const config = createBaseConfig(fileSink);\n * ```\n *\n * @remarks\n * Logger category configuration:\n * - **'a' (app)**: Debug level, outputs to file + console info+\n * - **'t' (test)**: Debug level, outputs to file + console info+\n * - **'m' (module)**: Debug level, outputs to file + console warn+\n * - **'esbuild-plugin'**: Debug level, outputs to file + console warn+\n * - **'logtape.meta'**: Warning level, outputs to console only\n *\n * Console sink behavior:\n * - **Colored**: Full formatting with timestamps and colors (development)\n * - **Plain**: Text-only formatting for test environments or when NO_COLOR is set\n */",[2540,3463],"message = '';\n        const values: unknown[] = [];\n        for (let i = 0; i < record.message.length; i++) {\n          if (i % 2 === 0) {\n            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands -- Good enough for defaultConsoleFormatter in logtape library, good enough for the library.\n            message += record.message[i];\n          } else {\n            message += '%o';\n            values.push(record.message[i]);\n          }\n        }\n        const date = new Date(record.timestamp);\n        const time = `${date.getUTCHours().toString().padStart(2, '0')}:${\n          date\n            .getUTCMinutes()\n            .toString()\n            .padStart(2, '0')\n        }:${date.getUTCSeconds().toString().padStart(2, '0')}.${\n          date.getUTCMilliseconds().toString().padStart(3, '0')\n        }`;\n        return [\n          `${time} ${record.level.slice(0, 3)} ${record.category.join('\\u00B7')} ${message",[2605,2971],"index = 0; index < record.message.length; index++) {\n          if (index % 2 === 0) {\n            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands -- Good enough for defaultConsoleFormatter in logtape library, good enough for the library.\n            msg += record.message[index];\n          } else {\n            msg += '%o';\n            values.push(record.message[index",[4427,6271],"/**\n * Creates an in-memory logging sink that stores log records as JSON strings.\n *\n * This function provides a fallback logging mechanism when file or persistent storage\n * isn't available. The sink accumulates log records in memory as JSON strings and\n * outputs the accumulated content to console when disposed. Useful for testing\n * environments, temporary logging, or when persistent storage fails.\n * @returns Memory-based sink that implements both Sink and AsyncDisposable interfaces\n * @example\n * Basic usage as fallback sink:\n * ```ts\n * import { createMemorySink, createBaseConfig } from '@monochromatic-dev/module-es';\n *\n * const memorySink = createMemorySink();\n * const config = createBaseConfig(memorySink);\n * await logtapeConfigure(config);\n *\n * // Log records are stored in memory\n * logger.info('Application started');\n *\n * // Dispose to output accumulated logs\n * await memorySink[Symbol.asyncDispose]();\n * ```\n *\n * @example\n * Testing scenario with memory sink:\n * ```ts\n * // Memory sink is ideal for testing scenarios\n * const testSink = createMemorySink();\n * const testConfig = createBaseConfig(testSink);\n *\n * // Run tests with memory logging\n * logger.debug('Test case started');\n * logger.error('Expected error for test');\n *\n * // Dispose after tests complete\n * await testSink[Symbol.asyncDispose]();\n * ```\n *\n * @remarks\n * **Memory behavior:**\n * - Stores each log record as a JSON string with 2-space indentation\n * - Accumulates records in an internal array until disposal\n * - Clears the internal array after disposal\n * - Outputs total content length for monitoring purposes\n *\n * **Disposal process:**\n * 1. Joins all accumulated records with newlines\n * 2. Outputs disposal message and content length to console\n * 3. Clears the internal storage array\n * 4. Ready for reuse after disposal\n */",[4427,6271],"/**\n * Creates an in-memory logging sink that stores log records as JSON strings.\n *\n * This function provides a fallback logging mechanism when file or persistent storage\n * isn't available. The sink accumulates log records in memory as JSON strings and\n * outputs the accumulated content to console when disposed. Useful for testing\n * environments, temporary logging, or when persistent storage fails.\n *\n * @returns Memory-based sink that implements both Sink and AsyncDisposable interfaces\n * @example\n * Basic usage as fallback sink:\n * ```ts\n * import { createMemorySink, createBaseConfig } from '@monochromatic-dev/module-es';\n *\n * const memorySink = createMemorySink();\n * const config = createBaseConfig(memorySink);\n * await logtapeConfigure(config);\n *\n * // Log records are stored in memory\n * logger.info('Application started');\n *\n * // Dispose to output accumulated logs\n * await memorySink[Symbol.asyncDispose]();\n * ```\n *\n * @example\n * Testing scenario with memory sink:\n * ```ts\n * // Memory sink is ideal for testing scenarios\n * const testSink = createMemorySink();\n * const testConfig = createBaseConfig(testSink);\n *\n * // Run tests with memory logging\n * logger.debug('Test case started');\n * logger.error('Expected error for test');\n *\n * // Dispose after tests complete\n * await testSink[Symbol.asyncDispose]();\n * ```\n *\n * @remarks\n * **Memory behavior:**\n * - Stores each log record as a JSON string with 2-space indentation\n * - Accumulates records in an internal array until disposal\n * - Clears the internal array after disposal\n * - Outputs total content length for monitoring purposes\n *\n * **Disposal process:**\n * 1. Joins all accumulated records with newlines\n * 2. Outputs disposal message and content length to console\n * 3. Clears the internal storage array\n * 4. Ready for reuse after disposal\n */",[6977,9007],"/**\n * Example logger identifier for application's main entry point.\n *\n * This constant provides a ready-to-use logger category for your application's\n * main execution file. Following the project's logging conventions, it uses\n * the 'a' (app) category with 'index' as the subcategory, making it perfect\n * for main application logic, startup sequences, and primary workflows.\n * @example\n * Basic usage in main application file:\n * ```ts\n * import { logtapeId, logtapeGetLogger } from '@monochromatic-dev/module-es';\n *\n * const logger = logtapeGetLogger(logtapeId);\n * logger.info('Application starting up');\n * logger.debug('Initialization complete');\n * ```\n * @example\n * Custom logger categories following same pattern:\n * ```ts\n * // Follow the same pattern for other app components\n * const apiLoggerId = ['a', 'api'] as const;\n * const configLoggerId = ['a', 'config'] as const;\n * const routerLoggerId = ['a', 'router'] as const;\n *\n * const apiLogger = logtapeGetLogger(apiLoggerId);\n * const configLogger = logtapeGetLogger(configLoggerId);\n * ```\n *\n * @example\n * Integration with configuration setup:\n * ```ts\n * import { logtapeConfiguration, logtapeConfigure, logtapeId, logtapeGetLogger } from '@monochromatic-dev/module-es';\n *\n * // Set up logging first\n * await logtapeConfigure(await logtapeConfiguration());\n *\n * // Then use the logger\n * const logger = logtapeGetLogger(logtapeId);\n * logger.info('Logging configured successfully');\n * ```\n *\n * @remarks\n * **Category structure:**\n * - **'a'**: Application category (debug level, file + console info+)\n * - **'index'**: Subcategory for main entry point\n *\n * **Logging behavior:**\n * - Logs to both file and console (info level and above)\n * - Debug and higher levels captured in file storage\n * - Follows project's standard logging configuration\n *\n * **Type safety:**\n * - Uses `as const` assertion for literal type preservation\n * - Compatible with logtape's logger category system\n * - Provides compile-time type checking for logger usage\n */",[6977,9007],"/**\n * Example logger identifier for application's main entry point.\n *\n * This constant provides a ready-to-use logger category for your application's\n * main execution file. Following the project's logging conventions, it uses\n * the 'a' (app) category with 'index' as the subcategory, making it perfect\n * for main application logic, startup sequences, and primary workflows.\n *\n * @example\n * Basic usage in main application file:\n * ```ts\n * import { logtapeId, logtapeGetLogger } from '@monochromatic-dev/module-es';\n *\n * const logger = logtapeGetLogger(logtapeId);\n * logger.info('Application starting up');\n * logger.debug('Initialization complete');\n * ```\n * @example\n * Custom logger categories following same pattern:\n * ```ts\n * // Follow the same pattern for other app components\n * const apiLoggerId = ['a', 'api'] as const;\n * const configLoggerId = ['a', 'config'] as const;\n * const routerLoggerId = ['a', 'router'] as const;\n *\n * const apiLogger = logtapeGetLogger(apiLoggerId);\n * const configLogger = logtapeGetLogger(configLoggerId);\n * ```\n *\n * @example\n * Integration with configuration setup:\n * ```ts\n * import { logtapeConfiguration, logtapeConfigure, logtapeId, logtapeGetLogger } from '@monochromatic-dev/module-es';\n *\n * // Set up logging first\n * await logtapeConfigure(await logtapeConfiguration());\n *\n * // Then use the logger\n * const logger = logtapeGetLogger(logtapeId);\n * logger.info('Logging configured successfully');\n * ```\n *\n * @remarks\n * **Category structure:**\n * - **'a'**: Application category (debug level, file + console info+)\n * - **'index'**: Subcategory for main entry point\n *\n * **Logging behavior:**\n * - Logs to both file and console (info level and above)\n * - Debug and higher levels captured in file storage\n * - Follows project's standard logging configuration\n *\n * **Type safety:**\n * - Uses `as const` assertion for literal type preservation\n * - Compatible with logtape's logger category system\n * - Provides compile-time type checking for logger usage\n */",{"kind":"10413","justification":"10452"},{"messageId":"10399","fix":"10453","desc":"10401"},{"kind":"10413","justification":"10454"},[206,947],"/**\n * Adds two numbers together using standard JavaScript addition operator.\n *\n * This function serves as a named reference to addition operation, useful for functional programming patterns\n * like reduce operations and function composition. Provides explicit typing for number addition operations.\n * @param previousValue - First number to add\n * @param currentValue - Second number to add\n * @returns Sum of the two numbers\n * @example\n * Basic addition:\n * ```ts\n * const result = addTwoNumbers(5, 3);\n * console.log(result); // 8\n * ```\n *\n * @example\n * Using with reduce for array summation:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = numbers.reduce(addTwoNumbers, 0);\n * console.log(total); // 15\n * ```\n */",[206,947],"/**\n * Adds two numbers together using standard JavaScript addition operator.\n *\n * This function serves as a named reference to addition operation, useful for functional programming patterns\n * like reduce operations and function composition. Provides explicit typing for number addition operations.\n *\n * @param previousValue - First number to add\n * @param currentValue - Second number to add\n * @returns Sum of the two numbers\n * @example\n * Basic addition:\n * ```ts\n * const result = addTwoNumbers(5, 3);\n * console.log(result); // 8\n * ```\n *\n * @example\n * Using with reduce for array summation:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = numbers.reduce(addTwoNumbers, 0);\n * console.log(total); // 15\n * ```\n */",[1075,1990],"/**\n * Sums multiple numbers using variadic parameters, calculating the total of all provided number arguments.\n *\n * Uses functional reduction with addTwoNumbers for consistent addition behavior.\n * Handles any number of arguments including zero arguments (returns 0).\n * Optimized for readability and type safety in mathematical computations.\n * @param numbers - Variable number of numeric values to sum together\n * @returns Total sum of all provided numbers, or 0 if no arguments\n * @example\n * Basic summation:\n * ```ts\n * const total = sumNumbers(1, 2, 3, 4, 5);\n * console.log(total); // 15\n * ```\n *\n * @example\n * Calculating averages:\n * ```ts\n * const values = [10, 20, 30];\n * const sum = sumNumbers(...values);\n * const average = sum / values.length;\n * console.log(average); // 20\n * ```\n *\n * @example\n * Empty arguments handling:\n * ```ts\n * sumNumbers() // 0\n * sumNumbers(42) // 42\n * ```\n */",[1075,1990],"/**\n * Sums multiple numbers using variadic parameters, calculating the total of all provided number arguments.\n *\n * Uses functional reduction with addTwoNumbers for consistent addition behavior.\n * Handles any number of arguments including zero arguments (returns 0).\n * Optimized for readability and type safety in mathematical computations.\n *\n * @param numbers - Variable number of numeric values to sum together\n * @returns Total sum of all provided numbers, or 0 if no arguments\n * @example\n * Basic summation:\n * ```ts\n * const total = sumNumbers(1, 2, 3, 4, 5);\n * console.log(total); // 15\n * ```\n *\n * @example\n * Calculating averages:\n * ```ts\n * const values = [10, 20, 30];\n * const sum = sumNumbers(...values);\n * const average = sum / values.length;\n * console.log(average); // 20\n * ```\n *\n * @example\n * Empty arguments handling:\n * ```ts\n * sumNumbers() // 0\n * sumNumbers(42) // 42\n * ```\n */",{"messageId":"10385","data":"10455","fix":"10456","desc":"10457"},{"messageId":"10385","data":"10458","fix":"10459","desc":"10460"},{"messageId":"10385","data":"10461","fix":"10462","desc":"10463"},[2096,2977],"/**\n * Adds two bigint values together using JavaScript bigint addition operator.\n *\n * Provides named reference for bigint addition in functional programming contexts.\n * Essential for working with large integers that exceed Number.MAX_SAFE_INTEGER limits.\n * Maintains full precision for arbitrary-precision integer arithmetic.\n * @param previousValue - First bigint value to add\n * @param currentValue - Second bigint value to add\n * @returns Sum of the two bigint values\n * @example\n * Basic bigint addition:\n * ```ts\n * const result = addTwoBigints(100n, 200n);\n * console.log(result); // 300n\n * ```\n *\n * @example\n * Large number arithmetic:\n * ```ts\n * const large1 = BigInt(Number.MAX_SAFE_INTEGER) + 1n;\n * const large2 = BigInt(Number.MAX_SAFE_INTEGER) + 2n;\n * const sum = addTwoBigints(large1, large2);\n * console.log(sum); // Very large bigint result\n * ```\n */",[2096,2977],"/**\n * Adds two bigint values together using JavaScript bigint addition operator.\n *\n * Provides named reference for bigint addition in functional programming contexts.\n * Essential for working with large integers that exceed Number.MAX_SAFE_INTEGER limits.\n * Maintains full precision for arbitrary-precision integer arithmetic.\n *\n * @param previousValue - First bigint value to add\n * @param currentValue - Second bigint value to add\n * @returns Sum of the two bigint values\n * @example\n * Basic bigint addition:\n * ```ts\n * const result = addTwoBigints(100n, 200n);\n * console.log(result); // 300n\n * ```\n *\n * @example\n * Large number arithmetic:\n * ```ts\n * const large1 = BigInt(Number.MAX_SAFE_INTEGER) + 1n;\n * const large2 = BigInt(Number.MAX_SAFE_INTEGER) + 2n;\n * const sum = addTwoBigints(large1, large2);\n * console.log(sum); // Very large bigint result\n * ```\n */",[3105,4224],"/**\n * Sums multiple bigint values using variadic parameters, calculating total of all provided bigint arguments.\n *\n * Uses functional reduction with addTwoBigints for consistent arbitrary-precision arithmetic.\n * Handles any number of bigint arguments including zero arguments (returns 0n).\n * Ideal for financial calculations and large integer computations requiring exact precision.\n * @param bigints - Variable number of bigint values to sum together\n * @returns Total sum of all provided bigints, or 0n if no arguments\n * @example\n * Basic bigint summation:\n * ```ts\n * const total = sumBigints(100n, 200n, 300n);\n * console.log(total); // 600n\n * ```\n *\n * @example\n * Financial calculations:\n * ```ts\n * const amounts = [1000n, 2500n, 750n]; // cents\n * const totalCents = sumBigints(...amounts);\n * console.log(totalCents); // 4250n\n * ```\n *\n * @example\n * Large number calculations:\n * ```ts\n * const largeValues = [\n *   BigInt('123456789012345678901234567890'),\n *   BigInt('987654321098765432109876543210')\n * ];\n * const sum = sumBigints(...largeValues);\n * // Exact precision maintained\n * ```\n */",[3105,4224],"/**\n * Sums multiple bigint values using variadic parameters, calculating total of all provided bigint arguments.\n *\n * Uses functional reduction with addTwoBigints for consistent arbitrary-precision arithmetic.\n * Handles any number of bigint arguments including zero arguments (returns 0n).\n * Ideal for financial calculations and large integer computations requiring exact precision.\n *\n * @param bigints - Variable number of bigint values to sum together\n * @returns Total sum of all provided bigints, or 0n if no arguments\n * @example\n * Basic bigint summation:\n * ```ts\n * const total = sumBigints(100n, 200n, 300n);\n * console.log(total); // 600n\n * ```\n *\n * @example\n * Financial calculations:\n * ```ts\n * const amounts = [1000n, 2500n, 750n]; // cents\n * const totalCents = sumBigints(...amounts);\n * console.log(totalCents); // 4250n\n * ```\n *\n * @example\n * Large number calculations:\n * ```ts\n * const largeValues = [\n *   BigInt('123456789012345678901234567890'),\n *   BigInt('987654321098765432109876543210')\n * ];\n * const sum = sumBigints(...largeValues);\n * // Exact precision maintained\n * ```\n */",{"messageId":"10385","data":"10464","fix":"10465","desc":"10466"},{"messageId":"10385","data":"10467","fix":"10468","desc":"10469"},{"messageId":"10385","data":"10470","fix":"10471","desc":"10472"},[4331,5611],"/**\n * Adds two numeric values (number or bigint) with intelligent type-preserving behavior.\n *\n * When both values are numbers, returns number result for optimal performance.\n * When either value is bigint, converts both to bigint and returns bigint for precision.\n * Provides seamless mixed-type arithmetic with automatic type promotion strategy.\n * @template Prev - Type of first numeric value (number or bigint)\n * @template Curr - Type of second numeric value (number or bigint)\n * @template Returns - Conditional return type: number if both inputs are numbers, otherwise bigint\n * @param previousValue - First numeric value to add\n * @param currentValue - Second numeric value to add\n * @returns Sum with appropriate type based on input types\n * @example\n * Number + Number = Number:\n * ```ts\n * const result = addTwoNumerics(5, 3);\n * console.log(result); // 8 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * const result1 = addTwoNumerics(5, 3n);\n * console.log(result1); // 8n (bigint)\n *\n * const result2 = addTwoNumerics(100n, 50);\n * console.log(result2); // 150n (bigint)\n * ```\n *\n * @example\n * BigInt + BigInt = BigInt:\n * ```ts\n * const result = addTwoNumerics(1000n, 2000n);\n * console.log(result); // 3000n (bigint)\n * ```\n */",[4331,5611],"/**\n * Adds two numeric values (number or bigint) with intelligent type-preserving behavior.\n *\n * When both values are numbers, returns number result for optimal performance.\n * When either value is bigint, converts both to bigint and returns bigint for precision.\n * Provides seamless mixed-type arithmetic with automatic type promotion strategy.\n *\n * @template Prev - Type of first numeric value (number or bigint)\n * @template Curr - Type of second numeric value (number or bigint)\n * @template Returns - Conditional return type: number if both inputs are numbers, otherwise bigint\n * @param previousValue - First numeric value to add\n * @param currentValue - Second numeric value to add\n * @returns Sum with appropriate type based on input types\n * @example\n * Number + Number = Number:\n * ```ts\n * const result = addTwoNumerics(5, 3);\n * console.log(result); // 8 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * const result1 = addTwoNumerics(5, 3n);\n * console.log(result1); // 8n (bigint)\n *\n * const result2 = addTwoNumerics(100n, 50);\n * console.log(result2); // 150n (bigint)\n * ```\n *\n * @example\n * BigInt + BigInt = BigInt:\n * ```ts\n * const result = addTwoNumerics(1000n, 2000n);\n * console.log(result); // 3000n (bigint)\n * ```\n */",[5649,5838],"Previous extends number | bigint,\n  const Curr extends number | bigint,\n  const Returns extends Previous extends number ? Curr extends number ? number : bigint\n    : bigint,>(\n  previousValue: Previous",[5687,5860],"Current extends number | bigint,\n  const Returns extends Prev extends number ? Current extends number ? number : bigint\n    : bigint,>(\n  previousValue: Prev,\n  currentValue: Current",[6080,7387],"/**\n * Sums multiple numeric values (numbers and/or bigints) with intelligent type resolution.\n *\n * When all values are numbers, returns number for performance optimization.\n * When any value is bigint, promotes all to bigint and returns bigint for precision.\n * Provides seamless mixed-type arithmetic with variadic parameter support.\n * @template T - Array type containing numbers and/or bigints\n * @template Returns - Conditional return type: number if all inputs are numbers, otherwise bigint\n * @param numerics - Variable number of numeric values to sum together\n * @returns Total sum with appropriate type based on input types\n * @example\n * All numbers return number:\n * ```ts\n * const result = sumNumerics(1, 2, 3, 4, 5);\n * console.log(result); // 15 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * const result = sumNumerics(1, 2n, 3, 4);\n * console.log(result); // 10n (bigint)\n * ```\n *\n * @example\n * All bigints return bigint:\n * ```ts\n * const result = sumNumerics(100n, 200n, 300n);\n * console.log(result); // 600n (bigint)\n * ```\n *\n * @example\n * Financial calculations with mixed precision:\n * ```ts\n * const prices = [19.99, 25n, 12.50]; // Mixed cents/dollars\n * const total = sumNumerics(...prices);\n * // Promotes to bigint for precision\n * ```\n */",[6080,7387],"/**\n * Sums multiple numeric values (numbers and/or bigints) with intelligent type resolution.\n *\n * When all values are numbers, returns number for performance optimization.\n * When any value is bigint, promotes all to bigint and returns bigint for precision.\n * Provides seamless mixed-type arithmetic with variadic parameter support.\n *\n * @template T - Array type containing numbers and/or bigints\n * @template Returns - Conditional return type: number if all inputs are numbers, otherwise bigint\n * @param numerics - Variable number of numeric values to sum together\n * @returns Total sum with appropriate type based on input types\n * @example\n * All numbers return number:\n * ```ts\n * const result = sumNumerics(1, 2, 3, 4, 5);\n * console.log(result); // 15 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * const result = sumNumerics(1, 2n, 3, 4);\n * console.log(result); // 10n (bigint)\n * ```\n *\n * @example\n * All bigints return bigint:\n * ```ts\n * const result = sumNumerics(100n, 200n, 300n);\n * console.log(result); // 600n (bigint)\n * ```\n *\n * @example\n * Financial calculations with mixed precision:\n * ```ts\n * const prices = [19.99, 25n, 12.50]; // Mixed cents/dollars\n * const total = sumNumerics(...prices);\n * // Promotes to bigint for precision\n * ```\n */",{"messageId":"10385","data":"10473","fix":"10474","desc":"10475"},{"messageId":"10385","data":"10476","fix":"10477","desc":"10478"},{"messageId":"10385","data":"10479","fix":"10480","desc":"10481"},[7613,8950],"/**\n * Asynchronously sums numbers from an async iterable source using reduction pattern.\n *\n * Processes streaming numeric data with memory-efficient iteration over async sources.\n * Handles arrays, async generators, and other async iterables uniformly.\n * Uses addTwoNumbers reducer for consistent arithmetic behavior across sync/async contexts.\n * @param numbers - Async iterable containing numbers to sum\n * @returns Total sum of all numbers in the async iterable\n * @example\n * Basic async summation:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = await addNumbersAsync(numbers);\n * console.log(total); // 15\n * ```\n *\n * @example\n * Working with async generators:\n * ```ts\n * async function* generateNumbers() {\n *   for (let i = 1; i <= 10; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield i;\n *   }\n * }\n *\n * const sum = await addNumbersAsync(generateNumbers());\n * console.log(sum); // 55\n * ```\n *\n * @example\n * Processing streaming data:\n * ```ts\n * async function* fetchPrices() {\n *   const urls = ['api/price1', 'api/price2', 'api/price3'];\n *   for (const url of urls) {\n *     const response = await fetch(url);\n *     const data = await response.json();\n *     yield data.price;\n *   }\n * }\n *\n * const totalPrice = await addNumbersAsync(fetchPrices());\n * ```\n */",[7613,8950],"/**\n * Asynchronously sums numbers from an async iterable source using reduction pattern.\n *\n * Processes streaming numeric data with memory-efficient iteration over async sources.\n * Handles arrays, async generators, and other async iterables uniformly.\n * Uses addTwoNumbers reducer for consistent arithmetic behavior across sync/async contexts.\n *\n * @param numbers - Async iterable containing numbers to sum\n * @returns Total sum of all numbers in the async iterable\n * @example\n * Basic async summation:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = await addNumbersAsync(numbers);\n * console.log(total); // 15\n * ```\n *\n * @example\n * Working with async generators:\n * ```ts\n * async function* generateNumbers() {\n *   for (let i = 1; i <= 10; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield i;\n *   }\n * }\n *\n * const sum = await addNumbersAsync(generateNumbers());\n * console.log(sum); // 55\n * ```\n *\n * @example\n * Processing streaming data:\n * ```ts\n * async function* fetchPrices() {\n *   const urls = ['api/price1', 'api/price2', 'api/price3'];\n *   for (const url of urls) {\n *     const response = await fetch(url);\n *     const data = await response.json();\n *     yield data.price;\n *   }\n * }\n *\n * const totalPrice = await addNumbersAsync(fetchPrices());\n * ```\n */",[9116,10208],"/**\n * Sums numbers from a synchronous iterable source using reduction pattern.\n *\n * Processes numeric data from arrays, Sets, generators, and other synchronous iterables.\n * Uses addTwoNumbers reducer for consistent arithmetic behavior and optimal performance.\n * Memory-efficient iteration suitable for large datasets.\n * @param numbers - Synchronous iterable containing numbers to sum\n * @returns Total sum of all numbers in the iterable\n * @example\n * Basic array summation:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = addNumbers(numbers);\n * console.log(total); // 15\n * ```\n *\n * @example\n * Working with Sets for unique values:\n * ```ts\n * const uniqueNumbers = new Set([1, 2, 2, 3, 3, 4]);\n * const sum = addNumbers(uniqueNumbers);\n * console.log(sum); // 10 (1+2+3+4)\n * ```\n *\n * @example\n * Using with generators:\n * ```ts\n * function* generateSquares(max: number) {\n *   for (let i = 1; i <= max; i++) {\n *     yield i * i;\n *   }\n * }\n *\n * const sumOfSquares = addNumbers(generateSquares(5));\n * console.log(sumOfSquares); // 55 (1+4+9+16+25)\n * ```\n */",[9116,10208],"/**\n * Sums numbers from a synchronous iterable source using reduction pattern.\n *\n * Processes numeric data from arrays, Sets, generators, and other synchronous iterables.\n * Uses addTwoNumbers reducer for consistent arithmetic behavior and optimal performance.\n * Memory-efficient iteration suitable for large datasets.\n *\n * @param numbers - Synchronous iterable containing numbers to sum\n * @returns Total sum of all numbers in the iterable\n * @example\n * Basic array summation:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = addNumbers(numbers);\n * console.log(total); // 15\n * ```\n *\n * @example\n * Working with Sets for unique values:\n * ```ts\n * const uniqueNumbers = new Set([1, 2, 2, 3, 3, 4]);\n * const sum = addNumbers(uniqueNumbers);\n * console.log(sum); // 10 (1+2+3+4)\n * ```\n *\n * @example\n * Using with generators:\n * ```ts\n * function* generateSquares(max: number) {\n *   for (let i = 1; i <= max; i++) {\n *     yield i * i;\n *   }\n * }\n *\n * const sumOfSquares = addNumbers(generateSquares(5));\n * console.log(sumOfSquares); // 55 (1+4+9+16+25)\n * ```\n */",[10333,11737],"/**\n * Asynchronously sums bigint values from an async iterable source using reduction pattern.\n *\n * Processes streaming bigint data with memory-efficient iteration over async sources.\n * Maintains arbitrary precision for large integer arithmetic in async contexts.\n * Uses addTwoBigints reducer for consistent bigint behavior across sync/async operations.\n * @param bigints - Async iterable containing bigint values to sum\n * @returns Total sum of all bigints in the async iterable\n * @example\n * Basic async bigint summation:\n * ```ts\n * const bigints = [100n, 200n, 300n];\n * const total = await addBigintsAsync(bigints);\n * console.log(total); // 600n\n * ```\n *\n * @example\n * Working with async generators for large numbers:\n * ```ts\n * async function* generateLargeNumbers() {\n *   for (let i = 1n; i <= 5n; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield BigInt(Number.MAX_SAFE_INTEGER) + i;\n *   }\n * }\n *\n * const sum = await addBigintsAsync(generateLargeNumbers());\n * // Very large bigint sum\n * ```\n *\n * @example\n * Financial calculations with precision:\n * ```ts\n * async function* fetchTransactions() {\n *   const ids = ['tx1', 'tx2', 'tx3'];\n *   for (const id of ids) {\n *     const tx = await fetchTransaction(id);\n *     yield BigInt(tx.amountInCents);\n *   }\n * }\n *\n * const totalCents = await addBigintsAsync(fetchTransactions());\n * ```\n */",[10333,11737],"/**\n * Asynchronously sums bigint values from an async iterable source using reduction pattern.\n *\n * Processes streaming bigint data with memory-efficient iteration over async sources.\n * Maintains arbitrary precision for large integer arithmetic in async contexts.\n * Uses addTwoBigints reducer for consistent bigint behavior across sync/async operations.\n *\n * @param bigints - Async iterable containing bigint values to sum\n * @returns Total sum of all bigints in the async iterable\n * @example\n * Basic async bigint summation:\n * ```ts\n * const bigints = [100n, 200n, 300n];\n * const total = await addBigintsAsync(bigints);\n * console.log(total); // 600n\n * ```\n *\n * @example\n * Working with async generators for large numbers:\n * ```ts\n * async function* generateLargeNumbers() {\n *   for (let i = 1n; i <= 5n; i++) {\n *     await new Promise(resolve => setTimeout(resolve, 10));\n *     yield BigInt(Number.MAX_SAFE_INTEGER) + i;\n *   }\n * }\n *\n * const sum = await addBigintsAsync(generateLargeNumbers());\n * // Very large bigint sum\n * ```\n *\n * @example\n * Financial calculations with precision:\n * ```ts\n * async function* fetchTransactions() {\n *   const ids = ['tx1', 'tx2', 'tx3'];\n *   for (const id of ids) {\n *     const tx = await fetchTransaction(id);\n *     yield BigInt(tx.amountInCents);\n *   }\n * }\n *\n * const totalCents = await addBigintsAsync(fetchTransactions());\n * ```\n */",[11904,13195],"/**\n * Sums bigint values from a synchronous iterable source using reduction pattern.\n *\n * Processes bigint data from arrays, Sets, generators maintaining arbitrary precision.\n * Uses addTwoBigints reducer for consistent large integer arithmetic behavior.\n * Memory-efficient iteration suitable for financial and cryptographic calculations.\n * @param bigints - Synchronous iterable containing bigint values to sum\n * @returns Total sum of all bigints in the iterable\n * @example\n * Basic bigint array summation:\n * ```ts\n * const bigints = [100n, 200n, 300n];\n * const total = addBigints(bigints);\n * console.log(total); // 600n\n * ```\n *\n * @example\n * Working with large financial amounts:\n * ```ts\n * const transactionAmounts = new Set([\n *   1000000n, // $10,000.00 in cents\n *   2500000n, // $25,000.00 in cents\n *   750000n   // $7,500.00 in cents\n * ]);\n * const totalCents = addBigints(transactionAmounts);\n * console.log(totalCents); // 4250000n ($42,500.00)\n * ```\n *\n * @example\n * Cryptographic number calculations:\n * ```ts\n * function* generatePrimes() {\n *   const primes = [2n, 3n, 5n, 7n, 11n, 13n];\n *   for (const prime of primes) {\n *     yield prime ** 10n; // Very large prime powers\n *   }\n * }\n *\n * const sumOfPowers = addBigints(generatePrimes());\n * ```\n */",[11904,13195],"/**\n * Sums bigint values from a synchronous iterable source using reduction pattern.\n *\n * Processes bigint data from arrays, Sets, generators maintaining arbitrary precision.\n * Uses addTwoBigints reducer for consistent large integer arithmetic behavior.\n * Memory-efficient iteration suitable for financial and cryptographic calculations.\n *\n * @param bigints - Synchronous iterable containing bigint values to sum\n * @returns Total sum of all bigints in the iterable\n * @example\n * Basic bigint array summation:\n * ```ts\n * const bigints = [100n, 200n, 300n];\n * const total = addBigints(bigints);\n * console.log(total); // 600n\n * ```\n *\n * @example\n * Working with large financial amounts:\n * ```ts\n * const transactionAmounts = new Set([\n *   1000000n, // $10,000.00 in cents\n *   2500000n, // $25,000.00 in cents\n *   750000n   // $7,500.00 in cents\n * ]);\n * const totalCents = addBigints(transactionAmounts);\n * console.log(totalCents); // 4250000n ($42,500.00)\n * ```\n *\n * @example\n * Cryptographic number calculations:\n * ```ts\n * function* generatePrimes() {\n *   const primes = [2n, 3n, 5n, 7n, 11n, 13n];\n *   for (const prime of primes) {\n *     yield prime ** 10n; // Very large prime powers\n *   }\n * }\n *\n * const sumOfPowers = addBigints(generatePrimes());\n * ```\n */",[13316,14905],"/**\n * Asynchronously sums numeric values (numbers/bigints) from async iterable with intelligent type resolution.\n *\n * Processes streaming mixed numeric data with memory-efficient async iteration.\n * When all values are numbers, returns number for performance optimization.\n * When any value is bigint, promotes result to bigint for precision preservation.\n * @template T - Async iterable type containing numbers and/or bigints\n * @template Returns - Conditional return type: number if all values are numbers, otherwise bigint\n * @param numerics - Async iterable containing numeric values to sum\n * @returns Total sum with appropriate type based on iterable content\n * @example\n * All numbers in async context:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = await addNumericsAsync(numbers);\n * console.log(total); // 15 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * async function* generateMixedNumerics() {\n *   yield 100;   // number\n *   yield 200n;  // bigint\n *   yield 300;   // number\n * }\n *\n * const sum = await addNumericsAsync(generateMixedNumerics());\n * console.log(sum); // 600n (bigint)\n * ```\n *\n * @example\n * Financial data processing:\n * ```ts\n * async function* fetchAccountBalances() {\n *   const accounts = ['acc1', 'acc2', 'acc3'];\n *   for (const account of accounts) {\n *     const balance = await getBalance(account);\n *     yield balance.precision === 'exact' ?\n *       BigInt(balance.cents) : balance.dollars;\n *   }\n * }\n *\n * const totalBalance = await addNumericsAsync(fetchAccountBalances());\n * ```\n */",[13316,14905],"/**\n * Asynchronously sums numeric values (numbers/bigints) from async iterable with intelligent type resolution.\n *\n * Processes streaming mixed numeric data with memory-efficient async iteration.\n * When all values are numbers, returns number for performance optimization.\n * When any value is bigint, promotes result to bigint for precision preservation.\n *\n * @template T - Async iterable type containing numbers and/or bigints\n * @template Returns - Conditional return type: number if all values are numbers, otherwise bigint\n * @param numerics - Async iterable containing numeric values to sum\n * @returns Total sum with appropriate type based on iterable content\n * @example\n * All numbers in async context:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = await addNumericsAsync(numbers);\n * console.log(total); // 15 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * async function* generateMixedNumerics() {\n *   yield 100;   // number\n *   yield 200n;  // bigint\n *   yield 300;   // number\n * }\n *\n * const sum = await addNumericsAsync(generateMixedNumerics());\n * console.log(sum); // 600n (bigint)\n * ```\n *\n * @example\n * Financial data processing:\n * ```ts\n * async function* fetchAccountBalances() {\n *   const accounts = ['acc1', 'acc2', 'acc3'];\n *   for (const account of accounts) {\n *     const balance = await getBalance(account);\n *     yield balance.precision === 'exact' ?\n *       BigInt(balance.cents) : balance.dollars;\n *   }\n * }\n *\n * const totalBalance = await addNumericsAsync(fetchAccountBalances());\n * ```\n */",[15192,16720],"/**\n * Sums numeric values (numbers/bigints) from synchronous iterable with intelligent type resolution.\n *\n * Processes mixed numeric data from arrays, Sets, generators with optimal type handling.\n * When all values are numbers, returns number for performance optimization.\n * When any value is bigint, promotes result to bigint for precision preservation.\n * @template T - Iterable type containing numbers and/or bigints\n * @template Returns - Conditional return type: number if all values are numbers, otherwise bigint\n * @param numerics - Synchronous iterable containing numeric values to sum\n * @returns Total sum with appropriate type based on iterable content\n * @example\n * All numbers remain number type:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = addNumerics(numbers);\n * console.log(total); // 15 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * const mixed = new Set([100, 200n, 300]);\n * const sum = addNumerics(mixed);\n * console.log(sum); // 600n (bigint)\n * ```\n *\n * @example\n * Financial precision calculations:\n * ```ts\n * function* generateInvoiceAmounts() {\n *   const amounts = [\n *     { dollars: 19.99, exact: false },\n *     { cents: 2500n, exact: true },\n *     { dollars: 12.50, exact: false }\n *   ];\n *\n *   for (const amount of amounts) {\n *     yield amount.exact ? amount.cents : amount.dollars;\n *   }\n * }\n *\n * const total = addNumerics(generateInvoiceAmounts());\n * // Returns bigint for precision when any exact amounts present\n * ```\n */",[15192,16720],"/**\n * Sums numeric values (numbers/bigints) from synchronous iterable with intelligent type resolution.\n *\n * Processes mixed numeric data from arrays, Sets, generators with optimal type handling.\n * When all values are numbers, returns number for performance optimization.\n * When any value is bigint, promotes result to bigint for precision preservation.\n *\n * @template T - Iterable type containing numbers and/or bigints\n * @template Returns - Conditional return type: number if all values are numbers, otherwise bigint\n * @param numerics - Synchronous iterable containing numeric values to sum\n * @returns Total sum with appropriate type based on iterable content\n * @example\n * All numbers remain number type:\n * ```ts\n * const numbers = [1, 2, 3, 4, 5];\n * const total = addNumerics(numbers);\n * console.log(total); // 15 (number)\n * ```\n *\n * @example\n * Mixed types promote to bigint:\n * ```ts\n * const mixed = new Set([100, 200n, 300]);\n * const sum = addNumerics(mixed);\n * console.log(sum); // 600n (bigint)\n * ```\n *\n * @example\n * Financial precision calculations:\n * ```ts\n * function* generateInvoiceAmounts() {\n *   const amounts = [\n *     { dollars: 19.99, exact: false },\n *     { cents: 2500n, exact: true },\n *     { dollars: 12.50, exact: false }\n *   ];\n *\n *   for (const amount of amounts) {\n *     yield amount.exact ? amount.cents : amount.dollars;\n *   }\n * }\n *\n * const total = addNumerics(generateInvoiceAmounts());\n * // Returns bigint for precision when any exact amounts present\n * ```\n */",[529,546],"addNumbersAsync",[843,843],[929,929],[929,929],[1012,1024],"addBigints",[1235,1252],"addBigintsAsync",[1559,1559],[1648,1648],[1648,1648],[1732,1745],"addNumerics",[2253,2271],"addNumericsAsync",[2856,2856],[2941,2941],[2941,2941],[279,1525],"/**\n * Type guard that checks if a value is a number type using JavaScript typeof operator.\n *\n * This function provides precise type narrowing for number types, including NaN, Infinity,\n * and all finite numbers. Uses generic types to preserve the exact input type when the\n * value is confirmed to be a number. Essential for type-safe numeric operations.\n * @template T - Type of value to check\n * @param value - Value to test for number type\n * @returns True if value is a number (including NaN and Infinity), false otherwise\n * @example\n * Basic number checking:\n * ```ts\n * console.log(isNumber(42)); // true\n * console.log(isNumber(\"42\")); // false\n * console.log(isNumber(NaN)); // true\n * console.log(isNumber(Infinity)); // true\n * ```\n *\n * @example\n * Type narrowing in conditional logic:\n * ```ts\n * function processValue(value: unknown) {\n *   if (isNumber(value)) {\n *     // value is now typed as number\n *     return value * 2; // TypeScript knows this is safe\n *   }\n *   return 0;\n * }\n * ```\n *\n * @example\n * Working with arrays and filtering:\n * ```ts\n * const mixed = [1, \"2\", 3, null, 4.5, undefined];\n * const numbers = mixed.filter(isNumber);\n * console.log(numbers); // [1, 3, 4.5] - only actual numbers\n * ```\n */",[279,1525],"/**\n * Type guard that checks if a value is a number type using JavaScript typeof operator.\n *\n * This function provides precise type narrowing for number types, including NaN, Infinity,\n * and all finite numbers. Uses generic types to preserve the exact input type when the\n * value is confirmed to be a number. Essential for type-safe numeric operations.\n *\n * @template T - Type of value to check\n * @param value - Value to test for number type\n * @returns True if value is a number (including NaN and Infinity), false otherwise\n * @example\n * Basic number checking:\n * ```ts\n * console.log(isNumber(42)); // true\n * console.log(isNumber(\"42\")); // false\n * console.log(isNumber(NaN)); // true\n * console.log(isNumber(Infinity)); // true\n * ```\n *\n * @example\n * Type narrowing in conditional logic:\n * ```ts\n * function processValue(value: unknown) {\n *   if (isNumber(value)) {\n *     // value is now typed as number\n *     return value * 2; // TypeScript knows this is safe\n *   }\n *   return 0;\n * }\n * ```\n *\n * @example\n * Working with arrays and filtering:\n * ```ts\n * const mixed = [1, \"2\", 3, null, 4.5, undefined];\n * const numbers = mixed.filter(isNumber);\n * console.log(numbers); // [1, 3, 4.5] - only actual numbers\n * ```\n */",[1553,1553],[1677,2926],"/**\n * Type guard that checks if a value is NaN (Not a Number) using JavaScript Number.isNaN.\n *\n * This function specifically detects the NaN value, which is the only JavaScript value\n * that isn't equal to itself. More reliable than global isNaN() which coerces values.\n * Essential for handling mathematical edge cases and validating numeric computations.\n * @param value - Value to test for NaN\n * @returns True if value is exactly NaN, false otherwise\n * @example\n * Basic NaN detection:\n * ```ts\n * console.log(isNan(NaN)); // true\n * console.log(isNan(42)); // false\n * console.log(isNan(\"hello\")); // false (not coerced like global isNaN)\n * ```\n *\n * @example\n * Validating mathematical operations:\n * ```ts\n * function safeDivision(a: number, b: number): number | null {\n *   const result = a / b;\n *   return isNan(result) ? null : result;\n * }\n *\n * console.log(safeDivision(10, 0)); // Infinity (not NaN)\n * console.log(safeDivision(0, 0)); // null (was NaN)\n * ```\n *\n * @example\n * Filtering out invalid calculations:\n * ```ts\n * const calculations = [1/1, 0/0, 5/2, Math.sqrt(-1)];\n * const validResults = calculations.filter(result => !isNan(result));\n * console.log(validResults); // [1, 2.5] - excludes NaN values\n * ```\n */",[1677,2926],"/**\n * Type guard that checks if a value is NaN (Not a Number) using JavaScript Number.isNaN.\n *\n * This function specifically detects the NaN value, which is the only JavaScript value\n * that isn't equal to itself. More reliable than global isNaN() which coerces values.\n * Essential for handling mathematical edge cases and validating numeric computations.\n *\n * @param value - Value to test for NaN\n * @returns True if value is exactly NaN, false otherwise\n * @example\n * Basic NaN detection:\n * ```ts\n * console.log(isNan(NaN)); // true\n * console.log(isNan(42)); // false\n * console.log(isNan(\"hello\")); // false (not coerced like global isNaN)\n * ```\n *\n * @example\n * Validating mathematical operations:\n * ```ts\n * function safeDivision(a: number, b: number): number | null {\n *   const result = a / b;\n *   return isNan(result) ? null : result;\n * }\n *\n * console.log(safeDivision(10, 0)); // Infinity (not NaN)\n * console.log(safeDivision(0, 0)); // null (was NaN)\n * ```\n *\n * @example\n * Filtering out invalid calculations:\n * ```ts\n * const calculations = [1/1, 0/0, 5/2, Math.sqrt(-1)];\n * const validResults = calculations.filter(result => !isNan(result));\n * console.log(validResults); // [1, 2.5] - excludes NaN values\n * ```\n */",[2954,2954],[3042,3280],"/**\n * Type guard that checks if a value is an integer using JavaScript Number.isInteger.\n * @deprecated Use `isInt` instead.\n * @param value - Value to test for integer type\n * @returns True if value is an integer, false otherwise\n */",[3381,4813],"/**\n * Type guard that checks if a value is an integer using JavaScript Number.isInteger.\n *\n * This function determines if a number is an integer (whole number without fractional part).\n * Handles edge cases like finite numbers, excludes NaN and Infinity. More precise than\n * modulo operations for integer detection. Essential for mathematical operations requiring\n * whole numbers.\n * @param value - Value to test for integer type\n * @returns True if value is an integer, false otherwise\n * @example\n * Basic integer checking:\n * ```ts\n * console.log(isInt(42)); // true\n * console.log(isInt(42.0)); // true (42.0 === 42)\n * console.log(isInt(42.5)); // false\n * console.log(isInt(\"42\")); // false\n * ```\n *\n * @example\n * Filtering arrays for integers:\n * ```ts\n * const numbers = [1, 2.5, 3, 4.7, 5];\n * const integers = numbers.filter(isInt);\n * console.log(integers); // [1, 3, 5]\n * ```\n *\n * @example\n * Validating user input:\n * ```ts\n * function processIntegerInput(input: unknown): number | null {\n *   if (isInt(input) && input >= 0) {\n *     return input; // TypeScript knows input is number\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Mathematical operations requiring integers:\n * ```ts\n * function factorial(n: unknown): number {\n *   if (!isInt(n) || n < 0) {\n *     throw new Error(\"Factorial requires non-negative integer\");\n *   }\n *   return n === 0 ? 1 : n * factorial(n - 1);\n * }\n * ```\n */",[3381,4813],"/**\n * Type guard that checks if a value is an integer using JavaScript Number.isInteger.\n *\n * This function determines if a number is an integer (whole number without fractional part).\n * Handles edge cases like finite numbers, excludes NaN and Infinity. More precise than\n * modulo operations for integer detection. Essential for mathematical operations requiring\n * whole numbers.\n *\n * @param value - Value to test for integer type\n * @returns True if value is an integer, false otherwise\n * @example\n * Basic integer checking:\n * ```ts\n * console.log(isInt(42)); // true\n * console.log(isInt(42.0)); // true (42.0 === 42)\n * console.log(isInt(42.5)); // false\n * console.log(isInt(\"42\")); // false\n * ```\n *\n * @example\n * Filtering arrays for integers:\n * ```ts\n * const numbers = [1, 2.5, 3, 4.7, 5];\n * const integers = numbers.filter(isInt);\n * console.log(integers); // [1, 3, 5]\n * ```\n *\n * @example\n * Validating user input:\n * ```ts\n * function processIntegerInput(input: unknown): number | null {\n *   if (isInt(input) && input >= 0) {\n *     return input; // TypeScript knows input is number\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Mathematical operations requiring integers:\n * ```ts\n * function factorial(n: unknown): number {\n *   if (!isInt(n) || n < 0) {\n *     throw new Error(\"Factorial requires non-negative integer\");\n *   }\n *   return n === 0 ? 1 : n * factorial(n - 1);\n * }\n * ```\n */",[4910,6180],"/**\n * Type guard that checks if a value is a positive integer (greater than zero).\n *\n * This function combines integer checking with positivity validation, ensuring the value\n * is both a whole number and greater than zero. Useful for validating counts, indices,\n * and other scenarios requiring positive whole numbers. Excludes zero and negative integers.\n * @param value - Value to test for positive integer type\n * @returns True if value is a positive integer, false otherwise\n * @example\n * Basic positive integer checking:\n * ```ts\n * console.log(isPositiveInt(5)); // true\n * console.log(isPositiveInt(0)); // false\n * console.log(isPositiveInt(-3)); // false\n * console.log(isPositiveInt(2.5)); // false\n * ```\n *\n * @example\n * Validating array indices:\n * ```ts\n * function safeArrayAccess<T>(arr: T[], index: unknown): T | undefined {\n *   if (isPositiveInt(index) && index < arr.length) {\n *     return arr[index];\n *   }\n *   return undefined;\n * }\n * ```\n *\n * @example\n * Counting and quantity validation:\n * ```ts\n * function createItems(count: unknown): string[] {\n *   if (!isPositiveInt(count)) {\n *     throw new Error(\"Count must be a positive integer\");\n *   }\n *   return Array(count).fill(0).map((_, i) => `Item ${i + 1}`);\n * }\n * ```\n */",[4910,6180],"/**\n * Type guard that checks if a value is a positive integer (greater than zero).\n *\n * This function combines integer checking with positivity validation, ensuring the value\n * is both a whole number and greater than zero. Useful for validating counts, indices,\n * and other scenarios requiring positive whole numbers. Excludes zero and negative integers.\n *\n * @param value - Value to test for positive integer type\n * @returns True if value is a positive integer, false otherwise\n * @example\n * Basic positive integer checking:\n * ```ts\n * console.log(isPositiveInt(5)); // true\n * console.log(isPositiveInt(0)); // false\n * console.log(isPositiveInt(-3)); // false\n * console.log(isPositiveInt(2.5)); // false\n * ```\n *\n * @example\n * Validating array indices:\n * ```ts\n * function safeArrayAccess<T>(arr: T[], index: unknown): T | undefined {\n *   if (isPositiveInt(index) && index < arr.length) {\n *     return arr[index];\n *   }\n *   return undefined;\n * }\n * ```\n *\n * @example\n * Counting and quantity validation:\n * ```ts\n * function createItems(count: unknown): string[] {\n *   if (!isPositiveInt(count)) {\n *     throw new Error(\"Count must be a positive integer\");\n *   }\n *   return Array(count).fill(0).map((_, i) => `Item ${i + 1}`);\n * }\n * ```\n */",[6290,7565],"/**\n * Type guard that checks if a value is a negative integer (less than zero).\n *\n * This function combines integer checking with negativity validation, ensuring the value\n * is both a whole number and less than zero. Useful for validating offsets, debts,\n * and other scenarios requiring negative whole numbers. Excludes zero and positive integers.\n * @param value - Value to test for negative integer type\n * @returns True if value is a negative integer, false otherwise\n * @example\n * Basic negative integer checking:\n * ```ts\n * console.log(isNegativeInt(-5)); // true\n * console.log(isNegativeInt(0)); // false\n * console.log(isNegativeInt(3)); // false\n * console.log(isNegativeInt(-2.5)); // false\n * ```\n *\n * @example\n * Handling debt or deficit calculations:\n * ```ts\n * function processDebt(amount: unknown): string {\n *   if (isNegativeInt(amount)) {\n *     return `Debt: $${Math.abs(amount)}`;\n *   }\n *   return \"No debt\";\n * }\n * ```\n *\n * @example\n * Array offset calculations:\n * ```ts\n * function getFromEnd<T>(arr: T[], offset: unknown): T | undefined {\n *   if (isNegativeInt(offset)) {\n *     const index = arr.length + offset; // offset is negative\n *     return index >= 0 ? arr[index] : undefined;\n *   }\n *   return undefined;\n * }\n * ```\n */",[6290,7565],"/**\n * Type guard that checks if a value is a negative integer (less than zero).\n *\n * This function combines integer checking with negativity validation, ensuring the value\n * is both a whole number and less than zero. Useful for validating offsets, debts,\n * and other scenarios requiring negative whole numbers. Excludes zero and positive integers.\n *\n * @param value - Value to test for negative integer type\n * @returns True if value is a negative integer, false otherwise\n * @example\n * Basic negative integer checking:\n * ```ts\n * console.log(isNegativeInt(-5)); // true\n * console.log(isNegativeInt(0)); // false\n * console.log(isNegativeInt(3)); // false\n * console.log(isNegativeInt(-2.5)); // false\n * ```\n *\n * @example\n * Handling debt or deficit calculations:\n * ```ts\n * function processDebt(amount: unknown): string {\n *   if (isNegativeInt(amount)) {\n *     return `Debt: $${Math.abs(amount)}`;\n *   }\n *   return \"No debt\";\n * }\n * ```\n *\n * @example\n * Array offset calculations:\n * ```ts\n * function getFromEnd<T>(arr: T[], offset: unknown): T | undefined {\n *   if (isNegativeInt(offset)) {\n *     const index = arr.length + offset; // offset is negative\n *     return index >= 0 ? arr[index] : undefined;\n *   }\n *   return undefined;\n * }\n * ```\n */",[7675,8951],"/**\n * Type guard that checks if a value is a non-negative integer (zero or positive).\n *\n * This function combines integer checking with non-negativity validation, ensuring the value\n * is both a whole number and greater than or equal to zero. Useful for validating counts,\n * array lengths, and other scenarios requiring non-negative whole numbers. Includes zero.\n * @param value - Value to test for non-negative integer type\n * @returns True if value is a non-negative integer, false otherwise\n * @example\n * Basic non-negative integer checking:\n * ```ts\n * console.log(isNonNegativeInt(0)); // true\n * console.log(isNonNegativeInt(5)); // true\n * console.log(isNonNegativeInt(-3)); // false\n * console.log(isNonNegativeInt(2.5)); // false\n * ```\n *\n * @example\n * Validating array lengths and counts:\n * ```ts\n * function validateCount(count: unknown): boolean {\n *   return isNonNegativeInt(count) && count <= 1000;\n * }\n *\n * console.log(validateCount(0)); // true (empty is valid)\n * console.log(validateCount(10)); // true\n * console.log(validateCount(-1)); // false\n * ```\n *\n * @example\n * Age validation (including babies):\n * ```ts\n * function isValidAge(age: unknown): age is NonNegativeInt {\n *   return isNonNegativeInt(age) && age <= 150;\n * }\n * ```\n */",[7675,8951],"/**\n * Type guard that checks if a value is a non-negative integer (zero or positive).\n *\n * This function combines integer checking with non-negativity validation, ensuring the value\n * is both a whole number and greater than or equal to zero. Useful for validating counts,\n * array lengths, and other scenarios requiring non-negative whole numbers. Includes zero.\n *\n * @param value - Value to test for non-negative integer type\n * @returns True if value is a non-negative integer, false otherwise\n * @example\n * Basic non-negative integer checking:\n * ```ts\n * console.log(isNonNegativeInt(0)); // true\n * console.log(isNonNegativeInt(5)); // true\n * console.log(isNonNegativeInt(-3)); // false\n * console.log(isNonNegativeInt(2.5)); // false\n * ```\n *\n * @example\n * Validating array lengths and counts:\n * ```ts\n * function validateCount(count: unknown): boolean {\n *   return isNonNegativeInt(count) && count <= 1000;\n * }\n *\n * console.log(validateCount(0)); // true (empty is valid)\n * console.log(validateCount(10)); // true\n * console.log(validateCount(-1)); // false\n * ```\n *\n * @example\n * Age validation (including babies):\n * ```ts\n * function isValidAge(age: unknown): age is NonNegativeInt {\n *   return isNonNegativeInt(age) && age <= 150;\n * }\n * ```\n */",[9068,10417],"/**\n * Type guard that checks if a value is a floating-point number (has decimal places).\n *\n * This function determines if a number has a fractional component, excluding integers,\n * NaN, and Infinity. Uses combination of finite checking and integer exclusion to\n * identify true floating-point values. Essential for validating decimal inputs and\n * precise mathematical operations.\n * @param value - Value to test for floating-point type\n * @returns True if value is a float with decimal places, false otherwise\n * @example\n * Basic float checking:\n * ```ts\n * console.log(isFloat(3.14)); // true\n * console.log(isFloat(42)); // false (integer)\n * console.log(isFloat(42.0)); // false (equivalent to integer)\n * console.log(isFloat(NaN)); // false\n * console.log(isFloat(Infinity)); // false\n * ```\n *\n * @example\n * Validating decimal precision:\n * ```ts\n * function requiresPrecision(value: unknown): boolean {\n *   return isFloat(value) && value.toString().split('.')[1].length > 2;\n * }\n *\n * console.log(requiresPrecision(3.14159)); // true\n * console.log(requiresPrecision(3.14)); // false\n * ```\n *\n * @example\n * Financial calculations with decimals:\n * ```ts\n * function formatCurrency(amount: unknown): string {\n *   if (isFloat(amount)) {\n *     return `$${amount.toFixed(2)}`;\n *   }\n *   return \"Invalid amount\";\n * }\n * ```\n */",[9068,10417],"/**\n * Type guard that checks if a value is a floating-point number (has decimal places).\n *\n * This function determines if a number has a fractional component, excluding integers,\n * NaN, and Infinity. Uses combination of finite checking and integer exclusion to\n * identify true floating-point values. Essential for validating decimal inputs and\n * precise mathematical operations.\n *\n * @param value - Value to test for floating-point type\n * @returns True if value is a float with decimal places, false otherwise\n * @example\n * Basic float checking:\n * ```ts\n * console.log(isFloat(3.14)); // true\n * console.log(isFloat(42)); // false (integer)\n * console.log(isFloat(42.0)); // false (equivalent to integer)\n * console.log(isFloat(NaN)); // false\n * console.log(isFloat(Infinity)); // false\n * ```\n *\n * @example\n * Validating decimal precision:\n * ```ts\n * function requiresPrecision(value: unknown): boolean {\n *   return isFloat(value) && value.toString().split('.')[1].length > 2;\n * }\n *\n * console.log(requiresPrecision(3.14159)); // true\n * console.log(requiresPrecision(3.14)); // false\n * ```\n *\n * @example\n * Financial calculations with decimals:\n * ```ts\n * function formatCurrency(amount: unknown): string {\n *   if (isFloat(amount)) {\n *     return `$${amount.toFixed(2)}`;\n *   }\n *   return \"Invalid amount\";\n * }\n * ```\n */",[10570,11731],"/**\n * Type guard that checks if a value is a positive floating-point number.\n *\n * This function combines floating-point checking with positivity validation, ensuring\n * the value has decimal places and is greater than zero. Useful for validating\n * measurements, percentages, and other positive decimal values. Excludes zero and\n * negative floats.\n * @param value - Value to test for positive float type\n * @returns True if value is a positive float, false otherwise\n * @example\n * Basic positive float checking:\n * ```ts\n * console.log(isPositiveFloat(3.14)); // true\n * console.log(isPositiveFloat(-2.5)); // false\n * console.log(isPositiveFloat(0.0)); // false\n * console.log(isPositiveFloat(5)); // false (integer)\n * ```\n *\n * @example\n * Validating percentages and rates:\n * ```ts\n * function applyDiscount(price: number, rate: unknown): number {\n *   if (isPositiveFloat(rate) && rate < 1.0) {\n *     return price * (1 - rate);\n *   }\n *   return price;\n * }\n * ```\n *\n * @example\n * Measurement validation:\n * ```ts\n * function validateMeasurement(value: unknown): boolean {\n *   return isPositiveFloat(value) && value < 1000.0;\n * }\n * ```\n */",[10570,11731],"/**\n * Type guard that checks if a value is a positive floating-point number.\n *\n * This function combines floating-point checking with positivity validation, ensuring\n * the value has decimal places and is greater than zero. Useful for validating\n * measurements, percentages, and other positive decimal values. Excludes zero and\n * negative floats.\n *\n * @param value - Value to test for positive float type\n * @returns True if value is a positive float, false otherwise\n * @example\n * Basic positive float checking:\n * ```ts\n * console.log(isPositiveFloat(3.14)); // true\n * console.log(isPositiveFloat(-2.5)); // false\n * console.log(isPositiveFloat(0.0)); // false\n * console.log(isPositiveFloat(5)); // false (integer)\n * ```\n *\n * @example\n * Validating percentages and rates:\n * ```ts\n * function applyDiscount(price: number, rate: unknown): number {\n *   if (isPositiveFloat(rate) && rate < 1.0) {\n *     return price * (1 - rate);\n *   }\n *   return price;\n * }\n * ```\n *\n * @example\n * Measurement validation:\n * ```ts\n * function validateMeasurement(value: unknown): boolean {\n *   return isPositiveFloat(value) && value < 1000.0;\n * }\n * ```\n */",[11852,13019],"/**\n * Type guard that checks if a value is a negative floating-point number.\n *\n * This function combines floating-point checking with negativity validation, ensuring\n * the value has decimal places and is less than zero. Useful for validating debts,\n * temperature readings below zero, and other negative decimal values. Excludes zero\n * and positive floats.\n * @param value - Value to test for negative float type\n * @returns True if value is a negative float, false otherwise\n * @example\n * Basic negative float checking:\n * ```ts\n * console.log(isNegativeFloat(-3.14)); // true\n * console.log(isNegativeFloat(2.5)); // false\n * console.log(isNegativeFloat(0.0)); // false\n * console.log(isNegativeFloat(-5)); // false (integer)\n * ```\n *\n * @example\n * Temperature readings:\n * ```ts\n * function isBelowFreezing(temp: unknown): boolean {\n *   return isNegativeFloat(temp) || (isInt(temp) && temp < 0);\n * }\n * ```\n *\n * @example\n * Financial loss calculations:\n * ```ts\n * function calculateLoss(value: unknown): string {\n *   if (isNegativeFloat(value)) {\n *     return `Loss: $${Math.abs(value).toFixed(2)}`;\n *   }\n *   return \"No loss\";\n * }\n * ```\n */",[11852,13019],"/**\n * Type guard that checks if a value is a negative floating-point number.\n *\n * This function combines floating-point checking with negativity validation, ensuring\n * the value has decimal places and is less than zero. Useful for validating debts,\n * temperature readings below zero, and other negative decimal values. Excludes zero\n * and positive floats.\n *\n * @param value - Value to test for negative float type\n * @returns True if value is a negative float, false otherwise\n * @example\n * Basic negative float checking:\n * ```ts\n * console.log(isNegativeFloat(-3.14)); // true\n * console.log(isNegativeFloat(2.5)); // false\n * console.log(isNegativeFloat(0.0)); // false\n * console.log(isNegativeFloat(-5)); // false (integer)\n * ```\n *\n * @example\n * Temperature readings:\n * ```ts\n * function isBelowFreezing(temp: unknown): boolean {\n *   return isNegativeFloat(temp) || (isInt(temp) && temp < 0);\n * }\n * ```\n *\n * @example\n * Financial loss calculations:\n * ```ts\n * function calculateLoss(value: unknown): string {\n *   if (isNegativeFloat(value)) {\n *     return `Loss: $${Math.abs(value).toFixed(2)}`;\n *   }\n *   return \"No loss\";\n * }\n * ```\n */",[13140,14445],"/**\n * Type guard that checks if a value is a number but not NaN.\n *\n * This function ensures the value is a number type while excluding the special NaN value.\n * Essential for mathematical operations that require valid numeric inputs. More precise\n * than basic number checking when NaN values need to be filtered out. Uses generic types\n * for precise type narrowing.\n * @template T - Type of value to check\n * @param value - Value to test for non-NaN number type\n * @returns True if value is a number and not NaN, false otherwise\n * @example\n * Basic non-NaN number checking:\n * ```ts\n * console.log(isNonNanNumber(42)); // true\n * console.log(isNonNanNumber(3.14)); // true\n * console.log(isNonNanNumber(NaN)); // false\n * console.log(isNonNanNumber(\"42\")); // false\n * console.log(isNonNanNumber(Infinity)); // true\n * ```\n *\n * @example\n * Validating calculation results:\n * ```ts\n * function safeCalculation(a: number, b: number): number | null {\n *   const result = Math.sqrt(a) + Math.log(b);\n *   return isNonNanNumber(result) ? result : null;\n * }\n * ```\n *\n * @example\n * Filtering arrays for valid numbers:\n * ```ts\n * const values = [1, NaN, 3.14, 0/0, 42, Math.sqrt(-1)];\n * const validNumbers = values.filter(isNonNanNumber);\n * console.log(validNumbers); // [1, 3.14, 42]\n * ```\n */",[13140,14445],"/**\n * Type guard that checks if a value is a number but not NaN.\n *\n * This function ensures the value is a number type while excluding the special NaN value.\n * Essential for mathematical operations that require valid numeric inputs. More precise\n * than basic number checking when NaN values need to be filtered out. Uses generic types\n * for precise type narrowing.\n *\n * @template T - Type of value to check\n * @param value - Value to test for non-NaN number type\n * @returns True if value is a number and not NaN, false otherwise\n * @example\n * Basic non-NaN number checking:\n * ```ts\n * console.log(isNonNanNumber(42)); // true\n * console.log(isNonNanNumber(3.14)); // true\n * console.log(isNonNanNumber(NaN)); // false\n * console.log(isNonNanNumber(\"42\")); // false\n * console.log(isNonNanNumber(Infinity)); // true\n * ```\n *\n * @example\n * Validating calculation results:\n * ```ts\n * function safeCalculation(a: number, b: number): number | null {\n *   const result = Math.sqrt(a) + Math.log(b);\n *   return isNonNanNumber(result) ? result : null;\n * }\n * ```\n *\n * @example\n * Filtering arrays for valid numbers:\n * ```ts\n * const values = [1, NaN, 3.14, 0/0, 42, Math.sqrt(-1)];\n * const validNumbers = values.filter(isNonNanNumber);\n * console.log(validNumbers); // [1, 3.14, 42]\n * ```\n */",[14473,14473],[14638,15900],"/**\n * Type guard that checks if a value is positive infinity.\n *\n * This function specifically detects the Number.POSITIVE_INFINITY value, which represents\n * mathematical positive infinity in JavaScript. Essential for handling mathematical\n * edge cases, division by zero results, and overflow conditions in calculations.\n * @param value - Value to test for positive infinity\n * @returns True if value is exactly positive infinity, false otherwise\n * @example\n * Basic positive infinity checking:\n * ```ts\n * console.log(isPositiveInfinity(Infinity)); // true\n * console.log(isPositiveInfinity(Number.POSITIVE_INFINITY)); // true\n * console.log(isPositiveInfinity(-Infinity)); // false\n * console.log(isPositiveInfinity(1000000)); // false\n * ```\n *\n * @example\n * Handling division results:\n * ```ts\n * function safeDivide(a: number, b: number): number | string {\n *   const result = a / b;\n *   if (isPositiveInfinity(result)) {\n *     return \"Positive overflow\";\n *   }\n *   return result;\n * }\n * ```\n *\n * @example\n * Mathematical limit detection:\n * ```ts\n * function checkLimit(value: number): string {\n *   if (isPositiveInfinity(value)) {\n *     return \"Approaches positive infinity\";\n *   }\n *   return `Finite value: ${value}`;\n * }\n * ```\n */",[14638,15900],"/**\n * Type guard that checks if a value is positive infinity.\n *\n * This function specifically detects the Number.POSITIVE_INFINITY value, which represents\n * mathematical positive infinity in JavaScript. Essential for handling mathematical\n * edge cases, division by zero results, and overflow conditions in calculations.\n *\n * @param value - Value to test for positive infinity\n * @returns True if value is exactly positive infinity, false otherwise\n * @example\n * Basic positive infinity checking:\n * ```ts\n * console.log(isPositiveInfinity(Infinity)); // true\n * console.log(isPositiveInfinity(Number.POSITIVE_INFINITY)); // true\n * console.log(isPositiveInfinity(-Infinity)); // false\n * console.log(isPositiveInfinity(1000000)); // false\n * ```\n *\n * @example\n * Handling division results:\n * ```ts\n * function safeDivide(a: number, b: number): number | string {\n *   const result = a / b;\n *   if (isPositiveInfinity(result)) {\n *     return \"Positive overflow\";\n *   }\n *   return result;\n * }\n * ```\n *\n * @example\n * Mathematical limit detection:\n * ```ts\n * function checkLimit(value: number): string {\n *   if (isPositiveInfinity(value)) {\n *     return \"Approaches positive infinity\";\n *   }\n *   return `Finite value: ${value}`;\n * }\n * ```\n */",[15928,15928],[16057,17299],"/**\n * Type guard that checks if a value is negative infinity.\n *\n * This function specifically detects the Number.NEGATIVE_INFINITY value, which represents\n * mathematical negative infinity in JavaScript. Essential for handling mathematical\n * edge cases, negative division by zero results, and underflow conditions in calculations.\n * @param value - Value to test for negative infinity\n * @returns True if value is exactly negative infinity, false otherwise\n * @example\n * Basic negative infinity checking:\n * ```ts\n * console.log(isNegativeInfinity(-Infinity)); // true\n * console.log(isNegativeInfinity(Number.NEGATIVE_INFINITY)); // true\n * console.log(isNegativeInfinity(Infinity)); // false\n * console.log(isNegativeInfinity(-1000000)); // false\n * ```\n *\n * @example\n * Handling negative division results:\n * ```ts\n * function checkDivision(a: number, b: number): string {\n *   const result = a / b;\n *   if (isNegativeInfinity(result)) {\n *     return \"Negative overflow\";\n *   }\n *   return result.toString();\n * }\n * ```\n *\n * @example\n * Range validation with infinity bounds:\n * ```ts\n * function isInValidRange(value: number): boolean {\n *   return !isNegativeInfinity(value) && !isPositiveInfinity(value);\n * }\n * ```\n */",[16057,17299],"/**\n * Type guard that checks if a value is negative infinity.\n *\n * This function specifically detects the Number.NEGATIVE_INFINITY value, which represents\n * mathematical negative infinity in JavaScript. Essential for handling mathematical\n * edge cases, negative division by zero results, and underflow conditions in calculations.\n *\n * @param value - Value to test for negative infinity\n * @returns True if value is exactly negative infinity, false otherwise\n * @example\n * Basic negative infinity checking:\n * ```ts\n * console.log(isNegativeInfinity(-Infinity)); // true\n * console.log(isNegativeInfinity(Number.NEGATIVE_INFINITY)); // true\n * console.log(isNegativeInfinity(Infinity)); // false\n * console.log(isNegativeInfinity(-1000000)); // false\n * ```\n *\n * @example\n * Handling negative division results:\n * ```ts\n * function checkDivision(a: number, b: number): string {\n *   const result = a / b;\n *   if (isNegativeInfinity(result)) {\n *     return \"Negative overflow\";\n *   }\n *   return result.toString();\n * }\n * ```\n *\n * @example\n * Range validation with infinity bounds:\n * ```ts\n * function isInValidRange(value: number): boolean {\n *   return !isNegativeInfinity(value) && !isPositiveInfinity(value);\n * }\n * ```\n */",[17327,17327],[17456,18914],"/**\n * Type guard that checks if a value is either positive or negative infinity.\n *\n * This function detects both positive and negative infinity values, providing a\n * comprehensive check for infinite mathematical values. Uses conditional types to\n * preserve the specific infinity type when known. Essential for mathematical\n * boundary condition handling and overflow detection.\n * @template T_value - Type of value to check for infinity\n * @param value - Value to test for any infinity type\n * @returns True if value is positive or negative infinity, false otherwise\n * @example\n * Basic infinity checking:\n * ```ts\n * console.log(isInfinity(Infinity)); // true\n * console.log(isInfinity(-Infinity)); // true\n * console.log(isInfinity(1000000)); // false\n * console.log(isInfinity(NaN)); // false\n * ```\n *\n * @example\n * Mathematical boundary validation:\n * ```ts\n * function validateCalculation(result: number): boolean {\n *   return !isInfinity(result) && !isNan(result);\n * }\n *\n * console.log(validateCalculation(1/0)); // false (infinity)\n * console.log(validateCalculation(Math.sqrt(-1))); // false (NaN)\n * console.log(validateCalculation(42)); // true\n * ```\n *\n * @example\n * Filtering finite values from calculations:\n * ```ts\n * const calculations = [1/0, -1/0, 5*2, 0/0, Math.PI];\n * const finiteResults = calculations.filter(val => !isInfinity(val) && !isNan(val));\n * console.log(finiteResults); // [10, 3.141592653589793]\n * ```\n */",[17456,18914],"/**\n * Type guard that checks if a value is either positive or negative infinity.\n *\n * This function detects both positive and negative infinity values, providing a\n * comprehensive check for infinite mathematical values. Uses conditional types to\n * preserve the specific infinity type when known. Essential for mathematical\n * boundary condition handling and overflow detection.\n *\n * @template T_value - Type of value to check for infinity\n * @param value - Value to test for any infinity type\n * @returns True if value is positive or negative infinity, false otherwise\n * @example\n * Basic infinity checking:\n * ```ts\n * console.log(isInfinity(Infinity)); // true\n * console.log(isInfinity(-Infinity)); // true\n * console.log(isInfinity(1000000)); // false\n * console.log(isInfinity(NaN)); // false\n * ```\n *\n * @example\n * Mathematical boundary validation:\n * ```ts\n * function validateCalculation(result: number): boolean {\n *   return !isInfinity(result) && !isNan(result);\n * }\n *\n * console.log(validateCalculation(1/0)); // false (infinity)\n * console.log(validateCalculation(Math.sqrt(-1))); // false (NaN)\n * console.log(validateCalculation(42)); // true\n * ```\n *\n * @example\n * Filtering finite values from calculations:\n * ```ts\n * const calculations = [1/0, -1/0, 5*2, 0/0, Math.PI];\n * const finiteResults = calculations.filter(val => !isInfinity(val) && !isNan(val));\n * console.log(finiteResults); // [10, 3.141592653589793]\n * ```\n */",[18942,18942],[19208,20666],"/**\n * Type guard that checks if a value is a finite number (not infinity or NaN).\n *\n * This function ensures the value is a number that's both finite and not NaN,\n * making it safe for mathematical operations that require real numeric values.\n * Combines infinity and NaN exclusion for comprehensive finite number validation.\n * Essential for mathematical computations requiring bounded values.\n * @template T - Type of value to check\n * @param value - Value to test for finite number type\n * @returns True if value is a finite number, false otherwise\n * @example\n * Basic finite number checking:\n * ```ts\n * console.log(isFiniteNumber(42)); // true\n * console.log(isFiniteNumber(3.14)); // true\n * console.log(isFiniteNumber(Infinity)); // false\n * console.log(isFiniteNumber(-Infinity)); // false\n * console.log(isFiniteNumber(NaN)); // false\n * console.log(isFiniteNumber(\"42\")); // false\n * ```\n *\n * @example\n * Validating user input for calculations:\n * ```ts\n * function calculate(a: unknown, b: unknown): number | null {\n *   if (isFiniteNumber(a) && isFiniteNumber(b)) {\n *     return Math.sqrt(a * a + b * b); // Safe calculation\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Data cleaning for statistical analysis:\n * ```ts\n * const rawData = [1, 2.5, Infinity, NaN, -3.7, null, 0];\n * const cleanData = rawData.filter(isFiniteNumber);\n * const average = cleanData.reduce((sum, val) => sum + val, 0) / cleanData.length;\n * ```\n */",[19208,20666],"/**\n * Type guard that checks if a value is a finite number (not infinity or NaN).\n *\n * This function ensures the value is a number that's both finite and not NaN,\n * making it safe for mathematical operations that require real numeric values.\n * Combines infinity and NaN exclusion for comprehensive finite number validation.\n * Essential for mathematical computations requiring bounded values.\n *\n * @template T - Type of value to check\n * @param value - Value to test for finite number type\n * @returns True if value is a finite number, false otherwise\n * @example\n * Basic finite number checking:\n * ```ts\n * console.log(isFiniteNumber(42)); // true\n * console.log(isFiniteNumber(3.14)); // true\n * console.log(isFiniteNumber(Infinity)); // false\n * console.log(isFiniteNumber(-Infinity)); // false\n * console.log(isFiniteNumber(NaN)); // false\n * console.log(isFiniteNumber(\"42\")); // false\n * ```\n *\n * @example\n * Validating user input for calculations:\n * ```ts\n * function calculate(a: unknown, b: unknown): number | null {\n *   if (isFiniteNumber(a) && isFiniteNumber(b)) {\n *     return Math.sqrt(a * a + b * b); // Safe calculation\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Data cleaning for statistical analysis:\n * ```ts\n * const rawData = [1, 2.5, Infinity, NaN, -3.7, null, 0];\n * const cleanData = rawData.filter(isFiniteNumber);\n * const average = cleanData.reduce((sum, val) => sum + val, 0) / cleanData.length;\n * ```\n */",[20694,20694],[20910,22330],"/**\n * Type guard that checks if a value is a safe number within JavaScript's safe integer range.\n *\n * This function ensures the value is a finite number within the range of\n * Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER, where integer arithmetic\n * operations are guaranteed to be precise. Essential for operations requiring\n * exact integer representation without floating-point precision loss.\n * @template T - Type of value to check\n * @param value - Value to test for safe number range\n * @returns True if value is within safe number range, false otherwise\n * @example\n * Basic safe number checking:\n * ```ts\n * console.log(isSafeNumber(42)); // true\n * console.log(isSafeNumber(Number.MAX_SAFE_INTEGER)); // true\n * console.log(isSafeNumber(Number.MAX_SAFE_INTEGER + 1)); // false\n * console.log(isSafeNumber(Number.MIN_SAFE_INTEGER)); // true\n * console.log(isSafeNumber(Number.MIN_SAFE_INTEGER - 1)); // false\n * ```\n *\n * @example\n * Validating integer operations:\n * ```ts\n * function safeIntegerOperation(a: unknown, b: unknown): number | null {\n *   if (isSafeNumber(a) && isSafeNumber(b)) {\n *     const result = a + b;\n *     return isSafeNumber(result) ? result : null;\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Database ID validation:\n * ```ts\n * function isValidDatabaseId(id: unknown): boolean {\n *   return isSafeNumber(id) && Number.isInteger(id) && id > 0;\n * }\n * ```\n */",[20910,22330],"/**\n * Type guard that checks if a value is a safe number within JavaScript's safe integer range.\n *\n * This function ensures the value is a finite number within the range of\n * Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER, where integer arithmetic\n * operations are guaranteed to be precise. Essential for operations requiring\n * exact integer representation without floating-point precision loss.\n *\n * @template T - Type of value to check\n * @param value - Value to test for safe number range\n * @returns True if value is within safe number range, false otherwise\n * @example\n * Basic safe number checking:\n * ```ts\n * console.log(isSafeNumber(42)); // true\n * console.log(isSafeNumber(Number.MAX_SAFE_INTEGER)); // true\n * console.log(isSafeNumber(Number.MAX_SAFE_INTEGER + 1)); // false\n * console.log(isSafeNumber(Number.MIN_SAFE_INTEGER)); // true\n * console.log(isSafeNumber(Number.MIN_SAFE_INTEGER - 1)); // false\n * ```\n *\n * @example\n * Validating integer operations:\n * ```ts\n * function safeIntegerOperation(a: unknown, b: unknown): number | null {\n *   if (isSafeNumber(a) && isSafeNumber(b)) {\n *     const result = a + b;\n *     return isSafeNumber(result) ? result : null;\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Database ID validation:\n * ```ts\n * function isValidDatabaseId(id: unknown): boolean {\n *   return isSafeNumber(id) && Number.isInteger(id) && id > 0;\n * }\n * ```\n */",[22384,22384],[22655,24229],"/**\n * Type guard that checks if a value is any positive number (integer, float, or infinity).\n *\n * This function provides comprehensive checking for positive numeric values,\n * including positive integers, positive floating-point numbers, and positive infinity.\n * Uses existing type guards for consistent behavior across different number types.\n * Essential for validating amounts, quantities, and measurements.\n * @template T - Type of value to check\n * @param value - Value to test for positive number type\n * @returns True if value is any positive number, false otherwise\n * @example\n * Basic positive number checking:\n * ```ts\n * console.log(isPositiveNumber(5)); // true (positive integer)\n * console.log(isPositiveNumber(3.14)); // true (positive float)\n * console.log(isPositiveNumber(Infinity)); // true (positive infinity)\n * console.log(isPositiveNumber(0)); // false\n * console.log(isPositiveNumber(-5)); // false\n * console.log(isPositiveNumber(NaN)); // false\n * ```\n *\n * @example\n * Validating measurements and quantities:\n * ```ts\n * function validateQuantity(qty: unknown): boolean {\n *   return isPositiveNumber(qty) && qty !== Infinity;\n * }\n *\n * function calculateTotal(quantities: unknown[]): number {\n *   return quantities\n *     .filter(isPositiveNumber)\n *     .filter(qty => qty !== Infinity)\n *     .reduce((sum, qty) => sum + qty, 0);\n * }\n * ```\n *\n * @example\n * Financial amount validation:\n * ```ts\n * function isValidAmount(amount: unknown): boolean {\n *   return isPositiveNumber(amount) && isFiniteNumber(amount);\n * }\n * ```\n */",[22655,24229],"/**\n * Type guard that checks if a value is any positive number (integer, float, or infinity).\n *\n * This function provides comprehensive checking for positive numeric values,\n * including positive integers, positive floating-point numbers, and positive infinity.\n * Uses existing type guards for consistent behavior across different number types.\n * Essential for validating amounts, quantities, and measurements.\n *\n * @template T - Type of value to check\n * @param value - Value to test for positive number type\n * @returns True if value is any positive number, false otherwise\n * @example\n * Basic positive number checking:\n * ```ts\n * console.log(isPositiveNumber(5)); // true (positive integer)\n * console.log(isPositiveNumber(3.14)); // true (positive float)\n * console.log(isPositiveNumber(Infinity)); // true (positive infinity)\n * console.log(isPositiveNumber(0)); // false\n * console.log(isPositiveNumber(-5)); // false\n * console.log(isPositiveNumber(NaN)); // false\n * ```\n *\n * @example\n * Validating measurements and quantities:\n * ```ts\n * function validateQuantity(qty: unknown): boolean {\n *   return isPositiveNumber(qty) && qty !== Infinity;\n * }\n *\n * function calculateTotal(quantities: unknown[]): number {\n *   return quantities\n *     .filter(isPositiveNumber)\n *     .filter(qty => qty !== Infinity)\n *     .reduce((sum, qty) => sum + qty, 0);\n * }\n * ```\n *\n * @example\n * Financial amount validation:\n * ```ts\n * function isValidAmount(amount: unknown): boolean {\n *   return isPositiveNumber(amount) && isFiniteNumber(amount);\n * }\n * ```\n */",[24257,24257],[24439,25809],"/**\n * Type guard that checks if a value is a Date object using Object.prototype.toString.\n *\n * This function uses the most reliable method for detecting Date objects by checking\n * the internal [[Class]] property via Object.prototype.toString. More reliable than\n * instanceof Date for cross-frame scenarios and corrupted Date objects. Essential\n * for validating date inputs and temporal data processing.\n * @param value - Value to test for Date object type\n * @returns True if value is a Date object, false otherwise\n * @example\n * Basic Date object checking:\n * ```ts\n * console.log(isObjectDate(new Date())); // true\n * console.log(isObjectDate(new Date(\"2023-01-01\"))); // true\n * console.log(isObjectDate(\"2023-01-01\")); // false\n * console.log(isObjectDate(1234567890000)); // false (timestamp)\n * console.log(isObjectDate({})); // false\n * ```\n *\n * @example\n * Validating user input for date operations:\n * ```ts\n * function formatDate(input: unknown): string {\n *   if (isObjectDate(input)) {\n *     return input.toISOString().split('T')[0];\n *   }\n *   return \"Invalid date\";\n * }\n * ```\n *\n * @example\n * Filtering arrays for Date objects:\n * ```ts\n * const mixed = [new Date(), \"2023-01-01\", 1234567890, new Date(\"invalid\")];\n * const dates = mixed.filter(isObjectDate);\n * const validDates = dates.filter(date => !isNaN(date.getTime()));\n * ```\n */",[24439,25809],"/**\n * Type guard that checks if a value is a Date object using Object.prototype.toString.\n *\n * This function uses the most reliable method for detecting Date objects by checking\n * the internal [[Class]] property via Object.prototype.toString. More reliable than\n * instanceof Date for cross-frame scenarios and corrupted Date objects. Essential\n * for validating date inputs and temporal data processing.\n *\n * @param value - Value to test for Date object type\n * @returns True if value is a Date object, false otherwise\n * @example\n * Basic Date object checking:\n * ```ts\n * console.log(isObjectDate(new Date())); // true\n * console.log(isObjectDate(new Date(\"2023-01-01\"))); // true\n * console.log(isObjectDate(\"2023-01-01\")); // false\n * console.log(isObjectDate(1234567890000)); // false (timestamp)\n * console.log(isObjectDate({})); // false\n * ```\n *\n * @example\n * Validating user input for date operations:\n * ```ts\n * function formatDate(input: unknown): string {\n *   if (isObjectDate(input)) {\n *     return input.toISOString().split('T')[0];\n *   }\n *   return \"Invalid date\";\n * }\n * ```\n *\n * @example\n * Filtering arrays for Date objects:\n * ```ts\n * const mixed = [new Date(), \"2023-01-01\", 1234567890, new Date(\"invalid\")];\n * const dates = mixed.filter(isObjectDate);\n * const validDates = dates.filter(date => !isNaN(date.getTime()));\n * ```\n */",[25837,25837],[25966,27186],"/**\n * Type guard that checks if a value is a bigint type using JavaScript typeof operator.\n *\n * This function provides precise type narrowing for bigint values, which are used\n * for arbitrary-precision integer arithmetic in JavaScript. Essential for handling\n * large integers that exceed the safe integer range of regular numbers. Enables\n * type-safe operations with bigint values.\n * @param value - Value to test for bigint type\n * @returns True if value is a bigint, false otherwise\n * @example\n * Basic bigint checking:\n * ```ts\n * console.log(isBigint(100n)); // true\n * console.log(isBigint(BigInt(100))); // true\n * console.log(isBigint(100)); // false\n * console.log(isBigint(\"100\")); // false\n * ```\n *\n * @example\n * Working with large numbers:\n * ```ts\n * function processLargeNumber(value: unknown): string {\n *   if (isBigint(value)) {\n *     return `Large number: ${value.toString()}`;\n *   }\n *   return \"Not a bigint\";\n * }\n * ```\n *\n * @example\n * Type-safe arithmetic operations:\n * ```ts\n * function addIfBigint(a: unknown, b: unknown): bigint | null {\n *   if (isBigint(a) && isBigint(b)) {\n *     return a + b; // TypeScript knows these are bigints\n *   }\n *   return null;\n * }\n * ```\n */",[25966,27186],"/**\n * Type guard that checks if a value is a bigint type using JavaScript typeof operator.\n *\n * This function provides precise type narrowing for bigint values, which are used\n * for arbitrary-precision integer arithmetic in JavaScript. Essential for handling\n * large integers that exceed the safe integer range of regular numbers. Enables\n * type-safe operations with bigint values.\n *\n * @param value - Value to test for bigint type\n * @returns True if value is a bigint, false otherwise\n * @example\n * Basic bigint checking:\n * ```ts\n * console.log(isBigint(100n)); // true\n * console.log(isBigint(BigInt(100))); // true\n * console.log(isBigint(100)); // false\n * console.log(isBigint(\"100\")); // false\n * ```\n *\n * @example\n * Working with large numbers:\n * ```ts\n * function processLargeNumber(value: unknown): string {\n *   if (isBigint(value)) {\n *     return `Large number: ${value.toString()}`;\n *   }\n *   return \"Not a bigint\";\n * }\n * ```\n *\n * @example\n * Type-safe arithmetic operations:\n * ```ts\n * function addIfBigint(a: unknown, b: unknown): bigint | null {\n *   if (isBigint(a) && isBigint(b)) {\n *     return a + b; // TypeScript knows these are bigints\n *   }\n *   return null;\n * }\n * ```\n */",[27286,28678],"/**\n * Type guard that checks if a value is numeric (either number or bigint).\n *\n * This function provides comprehensive checking for any numeric type in JavaScript,\n * including both regular numbers and bigint values. Essential for functions that\n * can work with either numeric type and need to validate input before mathematical\n * operations. Enables polymorphic numeric handling.\n * @param value - Value to test for numeric type\n * @returns True if value is number or bigint, false otherwise\n * @example\n * Basic numeric type checking:\n * ```ts\n * console.log(isNumeric(42)); // true (number)\n * console.log(isNumeric(100n)); // true (bigint)\n * console.log(isNumeric(\"42\")); // false\n * console.log(isNumeric(null)); // false\n * console.log(isNumeric(NaN)); // true (NaN is a number)\n * ```\n *\n * @example\n * Polymorphic arithmetic functions:\n * ```ts\n * function addNumeric(a: unknown, b: unknown): number | bigint | null {\n *   if (isNumeric(a) && isNumeric(b)) {\n *     if (typeof a === 'bigint' || typeof b === 'bigint') {\n *       return BigInt(a) + BigInt(b);\n *     }\n *     return Number(a) + Number(b);\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Filtering mixed arrays for numeric values:\n * ```ts\n * const mixed = [1, \"2\", 3n, null, 4.5, undefined, 100n];\n * const numbers = mixed.filter(isNumeric);\n * console.log(numbers); // [1, 3n, 4.5, 100n]\n * ```\n */",[27286,28678],"/**\n * Type guard that checks if a value is numeric (either number or bigint).\n *\n * This function provides comprehensive checking for any numeric type in JavaScript,\n * including both regular numbers and bigint values. Essential for functions that\n * can work with either numeric type and need to validate input before mathematical\n * operations. Enables polymorphic numeric handling.\n *\n * @param value - Value to test for numeric type\n * @returns True if value is number or bigint, false otherwise\n * @example\n * Basic numeric type checking:\n * ```ts\n * console.log(isNumeric(42)); // true (number)\n * console.log(isNumeric(100n)); // true (bigint)\n * console.log(isNumeric(\"42\")); // false\n * console.log(isNumeric(null)); // false\n * console.log(isNumeric(NaN)); // true (NaN is a number)\n * ```\n *\n * @example\n * Polymorphic arithmetic functions:\n * ```ts\n * function addNumeric(a: unknown, b: unknown): number | bigint | null {\n *   if (isNumeric(a) && isNumeric(b)) {\n *     if (typeof a === 'bigint' || typeof b === 'bigint') {\n *       return BigInt(a) + BigInt(b);\n *     }\n *     return Number(a) + Number(b);\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Filtering mixed arrays for numeric values:\n * ```ts\n * const mixed = [1, \"2\", 3n, null, 4.5, undefined, 100n];\n * const numbers = mixed.filter(isNumeric);\n * console.log(numbers); // [1, 3n, 4.5, 100n]\n * ```\n */",[28797,30113],"/**\n * Type guard that checks if a bigint value is within the safe integer range.\n *\n * This function determines if a bigint value falls within the range that can be\n * safely represented as a JavaScript number without precision loss. Useful for\n * validating bigint values before potential conversion to number type or for\n * ensuring compatibility with number-based APIs.\n * @param value - Value to test for safe-range bigint\n * @returns True if value is a bigint within safe integer range, false otherwise\n * @example\n * Basic safe bigint checking:\n * ```ts\n * console.log(isIntBigint(100n)); // true\n * console.log(isIntBigint(BigInt(Number.MAX_SAFE_INTEGER))); // true\n * console.log(isIntBigint(BigInt(Number.MAX_SAFE_INTEGER) + 1n)); // false\n * console.log(isIntBigint(BigInt(Number.MIN_SAFE_INTEGER))); // true\n * console.log(isIntBigint(100)); // false (not a bigint)\n * ```\n *\n * @example\n * Safe conversion to number:\n * ```ts\n * function bigintToNumber(value: unknown): number | null {\n *   if (isIntBigint(value)) {\n *     return Number(value); // Safe conversion\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Database compatibility checks:\n * ```ts\n * function canStoreInDatabase(id: unknown): boolean {\n *   return isIntBigint(id) || (isNumber(id) && isSafeNumber(id));\n * }\n * ```\n */",[28797,30113],"/**\n * Type guard that checks if a bigint value is within the safe integer range.\n *\n * This function determines if a bigint value falls within the range that can be\n * safely represented as a JavaScript number without precision loss. Useful for\n * validating bigint values before potential conversion to number type or for\n * ensuring compatibility with number-based APIs.\n *\n * @param value - Value to test for safe-range bigint\n * @returns True if value is a bigint within safe integer range, false otherwise\n * @example\n * Basic safe bigint checking:\n * ```ts\n * console.log(isIntBigint(100n)); // true\n * console.log(isIntBigint(BigInt(Number.MAX_SAFE_INTEGER))); // true\n * console.log(isIntBigint(BigInt(Number.MAX_SAFE_INTEGER) + 1n)); // false\n * console.log(isIntBigint(BigInt(Number.MIN_SAFE_INTEGER))); // true\n * console.log(isIntBigint(100)); // false (not a bigint)\n * ```\n *\n * @example\n * Safe conversion to number:\n * ```ts\n * function bigintToNumber(value: unknown): number | null {\n *   if (isIntBigint(value)) {\n *     return Number(value); // Safe conversion\n *   }\n *   return null;\n * }\n * ```\n *\n * @example\n * Database compatibility checks:\n * ```ts\n * function canStoreInDatabase(id: unknown): boolean {\n *   return isIntBigint(id) || (isNumber(id) && isSafeNumber(id));\n * }\n * ```\n */",[30305,31158],"/**\n * Constant representing the bigint value of zero.\n *\n * This constant provides a convenient reference to the bigint zero value, useful for\n * mathematical operations, comparisons, and as a default value in bigint computations.\n * Eliminates the need to repeatedly write `0n` and provides a named constant for\n * better code readability and maintenance.\n * @example\n * Using as a default value:\n * ```ts\n * function sumBigints(values: bigint[]): bigint {\n *   return values.reduce((sum, val) => sum + val, bigint0);\n * }\n * ```\n * @example\n * Comparison operations:\n * ```ts\n * function isPositiveBigint(value: bigint): boolean {\n *   return value > bigint0;\n * }\n * ```\n *\n * @example\n * Initialization and reset operations:\n * ```ts\n * let counter: bigint = bigint0;\n * function resetCounter(): void {\n *   counter = bigint0;\n * }\n * ```\n */",[30305,31158],"/**\n * Constant representing the bigint value of zero.\n *\n * This constant provides a convenient reference to the bigint zero value, useful for\n * mathematical operations, comparisons, and as a default value in bigint computations.\n * Eliminates the need to repeatedly write `0n` and provides a named constant for\n * better code readability and maintenance.\n *\n * @example\n * Using as a default value:\n * ```ts\n * function sumBigints(values: bigint[]): bigint {\n *   return values.reduce((sum, val) => sum + val, bigint0);\n * }\n * ```\n * @example\n * Comparison operations:\n * ```ts\n * function isPositiveBigint(value: bigint): boolean {\n *   return value > bigint0;\n * }\n * ```\n *\n * @example\n * Initialization and reset operations:\n * ```ts\n * let counter: bigint = bigint0;\n * function resetCounter(): void {\n *   counter = bigint0;\n * }\n * ```\n */",{"messageId":"10385","data":"10482","fix":"10483","desc":"10484"},{"messageId":"10385","data":"10485","fix":"10486","desc":"10487"},{"messageId":"10385","data":"10488","fix":"10489","desc":"10490"},[13270,13270],[13270,13270],[0,742],"/**\n * Type-level utility that computes the absolute value of a number type.\n * Removes the negative sign from negative numbers and leaves positive numbers unchanged.\n * @template T - Number type to compute absolute value for\n * @example\n * ```ts\n * type PositiveFive = Abs<5>;    // 5\n * type AlsoFive = Abs<-5>;       // 5\n * type Zero = Abs<0>;            // 0\n * type PositiveFloat = Abs<3.14>; // 3.14\n * type AbsFloat = Abs<-2.71>;    // 2.71\n *\n * // Practical usage in type constraints\n * function processDistance<T extends number>(\n *   value: T\n * ): Abs<T> {\n *   return Math.abs(value) as Abs<T>;\n * }\n *\n * const distance1 = processDistance(-10); // Type: 10\n * const distance2 = processDistance(5);   // Type: 5\n * ```\n */",[0,742],"/**\n * Type-level utility that computes the absolute value of a number type.\n * Removes the negative sign from negative numbers and leaves positive numbers unchanged.\n *\n * @template T - Number type to compute absolute value for\n * @example\n * ```ts\n * type PositiveFive = Abs<5>;    // 5\n * type AlsoFive = Abs<-5>;       // 5\n * type Zero = Abs<0>;            // 0\n * type PositiveFloat = Abs<3.14>; // 3.14\n * type AbsFloat = Abs<-2.71>;    // 2.71\n *\n * // Practical usage in type constraints\n * function processDistance<T extends number>(\n *   value: T\n * ): Abs<T> {\n *   return Math.abs(value) as Abs<T>;\n * }\n *\n * const distance1 = processDistance(-10); // Type: 10\n * const distance2 = processDistance(5);   // Type: 5\n * ```\n */",[0,363],"/**\n * Branded type for positive integers (numbers greater than 0).\n * Provides compile-time guarantees that values are positive whole numbers.\n * @example\n * ```ts\n * function processPositiveInt(value: PositiveInt): string {\n *   return `Processing ${value}`;\n * }\n *\n * const validValue = 5 as PositiveInt;\n * processPositiveInt(validValue); // OK\n * ```\n */",[429,835],"/**\n * Branded type for positive floating-point numbers (numbers greater than 0).\n * Provides compile-time guarantees that values are positive decimal numbers.\n * @example\n * ```ts\n * function calculateArea(radius: PositiveFloat): PositiveFloat {\n *   return (Math.PI * radius * radius) as PositiveFloat;\n * }\n *\n * const radius = 3.14 as PositiveFloat;\n * const area = calculateArea(radius);\n * ```\n */",[905,1258],"/**\n * Branded type for negative integers (numbers less than 0).\n * Provides compile-time guarantees that values are negative whole numbers.\n * @example\n * ```ts\n * function processDebt(amount: NegativeInt): string {\n *   return `Debt: ${Math.abs(amount)}`;\n * }\n *\n * const debt = -100 as NegativeInt;\n * processDebt(debt); // \"Debt: 100\"\n * ```\n */",[1324,1695],"/**\n * Branded type for negative floating-point numbers (numbers less than 0).\n * Provides compile-time guarantees that values are negative decimal numbers.\n * @example\n * ```ts\n * function processTemperature(temp: NegativeFloat): string {\n *   return `Below freezing: ${temp}°C`;\n * }\n *\n * const temp = -15.5 as NegativeFloat;\n * processTemperature(temp);\n * ```\n */",[1765,2212],"/**\n * Union type for all positive numbers (integers and floats).\n * Combines PositiveInt and PositiveFloat for flexible positive number handling.\n * @example\n * ```ts\n * function processPositiveValue(value: PositiveNumber): number {\n *   return value * 2;\n * }\n *\n * const intValue = 5 as PositiveInt;\n * const floatValue = 3.14 as PositiveFloat;\n * processPositiveValue(intValue);   // OK\n * processPositiveValue(floatValue); // OK\n * ```\n */",[2272,2687],"/**\n * Union type for all floating-point numbers (positive and negative).\n * Combines PositiveFloat and NegativeFloat for decimal number operations.\n * @example\n * ```ts\n * function roundFloat(value: Float): number {\n *   return Math.round(value);\n * }\n *\n * const positive = 3.7 as PositiveFloat;\n * const negative = -2.3 as NegativeFloat;\n * roundFloat(positive); // 4\n * roundFloat(negative); // -2\n * ```\n */",[2740,3260],"/**\n * Union type for all integers (positive, negative, and zero).\n * Represents whole numbers including zero for complete integer coverage.\n * @example\n * ```ts\n * function processInteger(value: Int): string {\n *   if (value === 0) return \"Zero\";\n *   return value > 0 ? \"Positive\" : \"Negative\";\n * }\n *\n * const positive = 5 as PositiveInt;\n * const negative = -3 as NegativeInt;\n * processInteger(positive); // \"Positive\"\n * processInteger(negative); // \"Negative\"\n * processInteger(0);        // \"Zero\"\n * ```\n */",[3311,3766],"/**\n * Union type for all negative numbers (integers and floats).\n * Combines NegativeInt and NegativeFloat for flexible negative number handling.\n * @example\n * ```ts\n * function processLoss(value: NegativeNumber): PositiveNumber {\n *   return Math.abs(value) as PositiveNumber;\n * }\n *\n * const intLoss = -100 as NegativeInt;\n * const floatLoss = -25.5 as NegativeFloat;\n * processLoss(intLoss);   // 100\n * processLoss(floatLoss); // 25.5\n * ```\n */",[3826,4293],"/**\n * Union type for non-negative integers (positive integers and zero).\n * Useful for array indices, counts, and other scenarios where negative values are invalid.\n * @example\n * ```ts\n * function getArrayElement<T>(arr: T[], index: NonNegativeInt): T | undefined {\n *   return arr[index];\n * }\n *\n * const items = ['a', 'b', 'c'];\n * const index = 1 as NonNegativeInt;\n * getArrayElement(items, index); // 'b'\n * getArrayElement(items, 0);     // 'a'\n * ```\n */",[4341,4797],"/**\n * Union type for non-positive integers (negative integers and zero).\n * Useful for scenarios where only zero or negative values are valid.\n * @example\n * ```ts\n * function processDeficit(value: NonPositiveInt): string {\n *   if (value === 0) return \"Balanced\";\n *   return `Deficit: ${Math.abs(value)}`;\n * }\n *\n * const deficit = -50 as NegativeInt;\n * processDeficit(deficit); // \"Deficit: 50\"\n * processDeficit(0);       // \"Balanced\"\n * ```\n */",[4845,5209],"/**\n * Branded type for bigint values representing integers.\n * Provides compile-time guarantees for large integer operations using bigint.\n * @example\n * ```ts\n * function processLargeNumber(value: IntBigint): string {\n *   return `Large number: ${value}`;\n * }\n *\n * const largeInt = 9007199254740991n as IntBigint;\n * processLargeNumber(largeInt);\n * ```\n */",[5271,5656],"/**\n * Union type for all numeric types (number and bigint).\n * Provides flexibility for functions that can work with both regular numbers and bigints.\n * @example\n * ```ts\n * function convertToString(value: Numeric): string {\n *   return value.toString();\n * }\n *\n * convertToString(42);    // \"42\"\n * convertToString(42n);   // \"42\"\n * convertToString(3.14);  // \"3.14\"\n * ```\n */",[5697,6474],"/**\n * Type-level utility that subtracts 1 from literal number types 1-10.\n * Useful for compile-time arithmetic operations and array index calculations.\n * Returns `never` for numbers outside the 1-10 range.\n * @template T - Literal number type to decrement (must be 1-10)\n * @example\n * ```ts\n * type Zero = MinusOne<1>;    // 0\n * type Two = MinusOne<3>;     // 2\n * type Nine = MinusOne<10>;   // 9\n * type Invalid = MinusOne<11>; // never\n *\n * // Practical usage with array types\n * type ArrayLength = 5;\n * type LastIndex = MinusOne<ArrayLength>; // 4\n *\n * function getLastElement<T, N extends number>(\n *   arr: T[],\n *   length: N\n * ): T | undefined {\n *   const lastIndex: MinusOne<N> = (length - 1) as MinusOne<N>;\n *   return arr[lastIndex];\n * }\n * ```\n */",[5697,6474],"/**\n * Type-level utility that subtracts 1 from literal number types 1-10.\n * Useful for compile-time arithmetic operations and array index calculations.\n * Returns `never` for numbers outside the 1-10 range.\n *\n * @template T - Literal number type to decrement (must be 1-10)\n * @example\n * ```ts\n * type Zero = MinusOne<1>;    // 0\n * type Two = MinusOne<3>;     // 2\n * type Nine = MinusOne<10>;   // 9\n * type Invalid = MinusOne<11>; // never\n *\n * // Practical usage with array types\n * type ArrayLength = 5;\n * type LastIndex = MinusOne<ArrayLength>; // 4\n *\n * function getLastElement<T, N extends number>(\n *   arr: T[],\n *   length: N\n * ): T | undefined {\n *   const lastIndex: MinusOne<N> = (length - 1) as MinusOne<N>;\n *   return arr[lastIndex];\n * }\n * ```\n */",[34,471],"number_: number): string {\n  let result =\n    '/* @__NO_SIDE_EFFECTS__ */ export type Ints<fromInclusive extends number, toInclusive extends number,> =\\n';\n\n  // Originally decided to support -100 to 100. But then dprint said call stack exhausted.\n  for (let fromInclusive = -number_; fromInclusive <= number_; fromInclusive++) {\n    result += `fromInclusive extends ${fromInclusive}\\n?`;\n    for (let toInclusive = fromInclusive; toInclusive <= number_",[950,1371],"number_: number): string {\n  let result =\n    'export type IntsToExclusive<fromInclusive extends number, toExclusive extends number,> =\\n';\n\n  // Originally decided to support -100 to 100. But then dprint said call stack exhausted.\n  for (let fromInclusive = -number_; fromInclusive <= number_; fromInclusive++) {\n    result += `fromInclusive extends ${fromInclusive}\\n?`;\n    for (let toExclusive = fromInclusive; toExclusive <= number_",[0,1312],"/**\n * Type-level utility that generates a union of integer literal types within a specified range (inclusive).\n * Creates a union type containing all integers from `fromInclusive` to `toInclusive`, including both endpoints.\n * Supports ranges from -10 to 10. For ranges outside this scope, returns the generic `number` type.\n * @template fromInclusive - Starting integer (inclusive, must be -10 to 10)\n * @template toInclusive - Ending integer (inclusive, must be -10 to 10)\n * @example\n * ```ts\n * type ZeroToThree = Ints<0, 3>;        // 0 | 1 | 2 | 3\n * type NegativeRange = Ints<-2, 1>;     // -2 | -1 | 0 | 1\n * type SingleValue = Ints<5, 5>;        // 5\n * type EmptyRange = Ints<3, 1>;         // never (invalid range)\n * type LargeRange = Ints<0, 15>;        // number (outside supported range)\n *\n * // Practical usage for array indexing\n * function getElements<T, From extends number, To extends number>(\n *   arr: T[],\n *   from: From,\n *   to: To\n * ): T[] {\n *   const indices: Ints<From, To>[] = [];\n *   // Implementation would populate indices array\n *   return indices.map(i => arr[i]).filter(Boolean);\n * }\n *\n * // Usage with specific ranges\n * type DiceRoll = Ints<1, 6>;          // 1 | 2 | 3 | 4 | 5 | 6\n * type WeekDay = Ints<1, 7>;           // 1 | 2 | 3 | 4 | 5 | 6 | 7\n * ```\n */",[0,1312],"/**\n * Type-level utility that generates a union of integer literal types within a specified range (inclusive).\n * Creates a union type containing all integers from `fromInclusive` to `toInclusive`, including both endpoints.\n * Supports ranges from -10 to 10. For ranges outside this scope, returns the generic `number` type.\n *\n * @template fromInclusive - Starting integer (inclusive, must be -10 to 10)\n * @template toInclusive - Ending integer (inclusive, must be -10 to 10)\n * @example\n * ```ts\n * type ZeroToThree = Ints<0, 3>;        // 0 | 1 | 2 | 3\n * type NegativeRange = Ints<-2, 1>;     // -2 | -1 | 0 | 1\n * type SingleValue = Ints<5, 5>;        // 5\n * type EmptyRange = Ints<3, 1>;         // never (invalid range)\n * type LargeRange = Ints<0, 15>;        // number (outside supported range)\n *\n * // Practical usage for array indexing\n * function getElements<T, From extends number, To extends number>(\n *   arr: T[],\n *   from: From,\n *   to: To\n * ): T[] {\n *   const indices: Ints<From, To>[] = [];\n *   // Implementation would populate indices array\n *   return indices.map(i => arr[i]).filter(Boolean);\n * }\n *\n * // Usage with specific ranges\n * type DiceRoll = Ints<1, 6>;          // 1 | 2 | 3 | 4 | 5 | 6\n * type WeekDay = Ints<1, 7>;           // 1 | 2 | 3 | 4 | 5 | 6 | 7\n * ```\n */",[17,281],"number_: number, minGap: number): void {\n  for (const fromInclusive of [-number_, -1, 0, 1, number_]) {\n    // type any union less than minGap on your own.\n    for (let toInclusive = fromInclusive + minGap; toInclusive <= number_; toInclusive++) {\n      if (!([-number_, -1, 0, 1, number_",[0,449],"/**\n * Union type representing negative integers from -10 to -1 (inclusive).\n * Useful for representing negative offsets, decrements, or countdown values.\n * @example\n * ```ts\n * function moveBackward(steps: IntsNegative10toNegative1): number {\n *   return steps; // Guaranteed to be negative\n * }\n *\n * const offset: IntsNegative10toNegative1 = -5; // Valid\n * // const invalid: IntsNegative10toNegative1 = 0; // Error: not assignable\n * ```\n */",[590,1086],"/**\n * Union type representing integers from -10 to 0 (inclusive).\n * Useful for representing non-positive values, decrements, or deficit scenarios.\n * @example\n * ```ts\n * function adjustBalance(change: IntsNegative10to0): number {\n *   return change; // Guaranteed to be non-positive\n * }\n *\n * const deficit: IntsNegative10to0 = -3; // Valid\n * const neutral: IntsNegative10to0 = 0;  // Valid (no change)\n * // const invalid: IntsNegative10to0 = 1; // Error: positive not allowed\n * ```\n */",[1225,1839],"/**\n * Union type representing integers from -10 to 1 (inclusive).\n * Covers negative values, zero, and the first positive integer.\n * Useful for ranges that need to include minimal positive values.\n * @example\n * ```ts\n * function adjustScore(modifier: IntsNegative10to1): number {\n *   return modifier; // Can be negative, zero, or 1\n * }\n *\n * const penalty: IntsNegative10to1 = -5; // Valid (penalty)\n * const bonus: IntsNegative10to1 = 1;    // Valid (small bonus)\n * const neutral: IntsNegative10to1 = 0;  // Valid (no change)\n * // const invalid: IntsNegative10to1 = 2; // Error: outside range\n * ```\n */",[1984,2553],"/**\n * Union type representing integers from -10 to 10 (inclusive).\n * Comprehensive range for bidirectional values, offsets, or symmetric scales.\n * @example\n * ```ts\n * function adjustTemperature(change: IntsNegative10to10): number {\n *   return change; // Can be negative, zero, or positive\n * }\n *\n * const increase: IntsNegative10to10 = 5;  // Valid (warmer)\n * const decrease: IntsNegative10to10 = -3; // Valid (cooler)\n * const noChange: IntsNegative10to10 = 0;  // Valid (same)\n * // const invalid: IntsNegative10to10 = 15; // Error: outside range\n * ```\n */",[2754,3368],"/**\n * Union type representing integers from -1 to 10 (inclusive).\n * Covers minimal negative value, zero, and positive integers up to 10.\n * Useful for scenarios requiring mostly positive values with minimal negative allowance.\n * @example\n * ```ts\n * function setPlayerLevel(level: IntsNegative1to10): void {\n *   console.log(`Level: ${level}`);\n * }\n *\n * const maxLevel: IntsNegative1to10 = 10;  // Valid\n * const startLevel: IntsNegative1to10 = 1; // Valid\n * const penalty: IntsNegative1to10 = -1;   // Valid (minimal penalty)\n * // const invalid: IntsNegative1to10 = -5; // Error: too negative\n * ```\n */",[3504,3952],"/**\n * Union type representing integers from 0 to 10 (inclusive).\n * Commonly used for ratings, progress indicators, or small counting scenarios.\n * @example\n * ```ts\n * function setRating(rating: Ints0to10): void {\n *   console.log(`Rating: ${rating}/10`);\n * }\n *\n * const userRating: Ints0to10 = 8; // Valid\n * const progress: Ints0to10 = 0;   // Valid (starting point)\n * // const invalid: Ints0to10 = 11; // Error: not assignable\n * ```\n */",[4073,4538],"/**\n * Union type representing positive integers from 1 to 10 (inclusive).\n * Ideal for scenarios requiring positive-only values like quantities, levels, or rankings.\n * @example\n * ```ts\n * function setDifficulty(level: Ints1to10): void {\n *   console.log(`Difficulty level: ${level}`);\n * }\n *\n * const playerLevel: Ints1to10 = 5; // Valid\n * const maxLevel: Ints1to10 = 10;   // Valid\n * // const invalid: Ints1to10 = 0;  // Error: zero not allowed\n * ```\n */",[0,806],"/**\n * Type alias representing the NaN (Not-a-Number) value.\n * Provides a type-safe way to reference the special IEEE 754 floating-point value\n * that represents an undefined or unrepresentable mathematical result.\n * @example\n * ```ts\n * function parseNumber(input: string): number | Nan {\n *   const result = parseFloat(input);\n *   return Number.isNaN(result) ? Number.NaN : result;\n * }\n *\n * const invalidNumber: Nan = Number.NaN; // Valid\n * const validNumber: number = 42;         // Valid\n *\n * // Type guard for NaN checking\n * function isNan(value: number): value is Nan {\n *   return Number.isNaN(value);\n * }\n *\n * // Usage in mathematical operations\n * const result = Math.sqrt(-1); // Returns NaN\n * if (isNan(result)) {\n *   console.log(\"Invalid mathematical operation\");\n * }\n * ```\n */",[0,1803],"/**\n * Type utility that toggles the sign of a numeric literal type.\n * Converts positive numbers to negative and negative numbers to positive,\n * effectively implementing mathematical negation at the type level.\n *\n * The type uses template literal pattern matching to:\n * 1. If the input is already negative (starts with `-`), remove the sign\n * 2. If the input is positive, prepend `-` to make it negative\n * 3. Return `never` for invalid inputs that can't be processed\n * @template T - Numeric literal type to negate\n * @example\n * ```ts\n * // Converting positive to negative\n * type NegativeFive = Negative<5>;        // -5\n * type NegativeZero = Negative<0>;        // -0 (which equals 0)\n * type NegativeFloat = Negative<3.14>;    // -3.14\n *\n * // Converting negative to positive (sign toggle)\n * type PositiveFive = Negative<-5>;       // 5\n * type PositiveFloat = Negative<-2.71>;   // 2.71\n *\n * // Usage in mathematical type operations\n * type Balance = 100;\n * type Debt = Negative<Balance>;          // -100\n * type Repayment = Negative<Debt>;        // 100 (back to positive)\n *\n * // Function signatures with negated types\n * function createDebit<T extends number>(amount: T): Negative<T> {\n *   const result = amount > 0 ? -amount : Math.abs(amount);\n *   return result as Negative<T>;\n * }\n *\n * const debit = createDebit(50);          // Type: -50\n * const credit = createDebit(-30);        // Type: 30\n *\n * // Financial calculations with type safety\n * type Revenue = 1000;\n * type Expenses = Negative<800>;          // -800\n * type NetIncome = Revenue & Expenses;    // Represents the combination\n *\n * // Vector mathematics\n * type VectorX = 5;\n * type VectorY = 3;\n * type OppositeX = Negative<VectorX>;     // -5\n * type OppositeY = Negative<VectorY>;     // -3\n * ```\n */",[0,1803],"/**\n * Type utility that toggles the sign of a numeric literal type.\n * Converts positive numbers to negative and negative numbers to positive,\n * effectively implementing mathematical negation at the type level.\n *\n * The type uses template literal pattern matching to:\n * 1. If the input is already negative (starts with `-`), remove the sign\n * 2. If the input is positive, prepend `-` to make it negative\n * 3. Return `never` for invalid inputs that can't be processed\n *\n * @template T - Numeric literal type to negate\n * @example\n * ```ts\n * // Converting positive to negative\n * type NegativeFive = Negative<5>;        // -5\n * type NegativeZero = Negative<0>;        // -0 (which equals 0)\n * type NegativeFloat = Negative<3.14>;    // -3.14\n *\n * // Converting negative to positive (sign toggle)\n * type PositiveFive = Negative<-5>;       // 5\n * type PositiveFloat = Negative<-2.71>;   // 2.71\n *\n * // Usage in mathematical type operations\n * type Balance = 100;\n * type Debt = Negative<Balance>;          // -100\n * type Repayment = Negative<Debt>;        // 100 (back to positive)\n *\n * // Function signatures with negated types\n * function createDebit<T extends number>(amount: T): Negative<T> {\n *   const result = amount > 0 ? -amount : Math.abs(amount);\n *   return result as Negative<T>;\n * }\n *\n * const debit = createDebit(50);          // Type: -50\n * const credit = createDebit(-30);        // Type: 30\n *\n * // Financial calculations with type safety\n * type Revenue = 1000;\n * type Expenses = Negative<800>;          // -800\n * type NetIncome = Revenue & Expenses;    // Represents the combination\n *\n * // Vector mathematics\n * type VectorX = 5;\n * type VectorY = 3;\n * type OppositeX = Negative<VectorX>;     // -5\n * type OppositeY = Negative<VectorY>;     // -3\n * ```\n */",[0,2518],"/**\n * Recursively awaits any value, unwrapping nested Promises to their final resolved type.\n *\n * This utility function provides explicit Promise unwrapping with TypeScript's built-in `Awaited<T>` type.\n * Handles deeply nested Promise chains and thenable objects uniformly.\n * Essential for generic async programming where the input type might be Promise, thenable, or plain value.\n * The `await` is intentionally redundant to ensure proper Promise resolution in all contexts.\n * @template T_input - Input type that may be Promise, thenable, or plain value\n * @param input - Value to await, which can be any type including nested Promises\n * @returns Recursively unwrapped value from Promise chains\n * @example\n * Basic Promise unwrapping:\n * ```ts\n * const promise = Promise.resolve(42);\n * const result = await awaits(promise);\n * console.log(result); // 42 (number, not Promise<number>)\n * ```\n *\n * @example\n * Deeply nested Promise resolution:\n * ```ts\n * const nested = Promise.resolve(Promise.resolve(Promise.resolve(\"hello\")));\n * const result = await awaits(nested);\n * console.log(result); // \"hello\" (string, fully unwrapped)\n * ```\n *\n * @example\n * Non-Promise values pass through unchanged:\n * ```ts\n * const value = 42;\n * const result = await awaits(value);\n * console.log(result); // 42 (same value, but awaited)\n * ```\n *\n * @example\n * Working with unknown async values:\n * ```ts\n * async function processUnknownAsync<T>(input: T | Promise<T>): Promise<T> {\n *   return await awaits(input); // Handles both sync and async cases\n * }\n *\n * const syncResult = await processUnknownAsync(100);\n * const asyncResult = await processUnknownAsync(Promise.resolve(200));\n * ```\n *\n * @example\n * Generic function composition:\n * ```ts\n * async function pipeline<T, U, V>(\n *   input: T,\n *   step1: (x: T) => U | Promise<U>,\n *   step2: (x: U) => V | Promise<V>\n * ): Promise<V> {\n *   const result1 = await awaits(step1(input));\n *   const result2 = await awaits(step2(result1));\n *   return result2;\n * }\n * ```\n *\n * @example\n * Type-safe API response handling:\n * ```ts\n * async function fetchUserData<T>(\n *   fetcher: () => T | Promise<T>\n * ): Promise<Awaited<T>> {\n *   const response = await awaits(fetcher());\n *   return response; // Type is properly unwrapped\n * }\n *\n * // Works with both sync and async fetchers\n * const syncData = await fetchUserData(() => ({ id: 1, name: \"Alice\" }));\n * const asyncData = await fetchUserData(() => fetch('/api/user').then(r => r.json()));\n * ```\n */",[0,2518],"/**\n * Recursively awaits any value, unwrapping nested Promises to their final resolved type.\n *\n * This utility function provides explicit Promise unwrapping with TypeScript's built-in `Awaited<T>` type.\n * Handles deeply nested Promise chains and thenable objects uniformly.\n * Essential for generic async programming where the input type might be Promise, thenable, or plain value.\n * The `await` is intentionally redundant to ensure proper Promise resolution in all contexts.\n *\n * @template T_input - Input type that may be Promise, thenable, or plain value\n * @param input - Value to await, which can be any type including nested Promises\n * @returns Recursively unwrapped value from Promise chains\n * @example\n * Basic Promise unwrapping:\n * ```ts\n * const promise = Promise.resolve(42);\n * const result = await awaits(promise);\n * console.log(result); // 42 (number, not Promise<number>)\n * ```\n *\n * @example\n * Deeply nested Promise resolution:\n * ```ts\n * const nested = Promise.resolve(Promise.resolve(Promise.resolve(\"hello\")));\n * const result = await awaits(nested);\n * console.log(result); // \"hello\" (string, fully unwrapped)\n * ```\n *\n * @example\n * Non-Promise values pass through unchanged:\n * ```ts\n * const value = 42;\n * const result = await awaits(value);\n * console.log(result); // 42 (same value, but awaited)\n * ```\n *\n * @example\n * Working with unknown async values:\n * ```ts\n * async function processUnknownAsync<T>(input: T | Promise<T>): Promise<T> {\n *   return await awaits(input); // Handles both sync and async cases\n * }\n *\n * const syncResult = await processUnknownAsync(100);\n * const asyncResult = await processUnknownAsync(Promise.resolve(200));\n * ```\n *\n * @example\n * Generic function composition:\n * ```ts\n * async function pipeline<T, U, V>(\n *   input: T,\n *   step1: (x: T) => U | Promise<U>,\n *   step2: (x: U) => V | Promise<V>\n * ): Promise<V> {\n *   const result1 = await awaits(step1(input));\n *   const result2 = await awaits(step2(result1));\n *   return result2;\n * }\n * ```\n *\n * @example\n * Type-safe API response handling:\n * ```ts\n * async function fetchUserData<T>(\n *   fetcher: () => T | Promise<T>\n * ): Promise<Awaited<T>> {\n *   const response = await awaits(fetcher());\n *   return response; // Type is properly unwrapped\n * }\n *\n * // Works with both sync and async fetchers\n * const syncData = await fetchUserData(() => ({ id: 1, name: \"Alice\" }));\n * const asyncData = await fetchUserData(() => fetch('/api/user').then(r => r.json()));\n * ```\n */",[274,274],[274,274],[412,412],[412,412],[658,667],[706,720],[1104,1104],[1104,1104],[1515,1515],[1515,1515],[1865,1865],[1865,1865],[1968,1968],[1968,1968],[0,1012],"/**\n * Type guard that checks if a value is a Promise or thenable object.\n * Uses duck typing to detect promise-like objects by checking for the presence\n * of a `then` method, which is the standard approach for thenable detection.\n * @param value - Value to check for Promise compatibility\n * @returns True if value has a `then` method (is thenable), false otherwise\n * @example\n * ```ts\n * const promiseValue = Promise.resolve(42);\n * const regularValue = 42;\n *\n * if (isPromise(promiseValue)) {\n *   // TypeScript knows this is Promise<any>\n *   promiseValue.then(result => console.log(result));\n * }\n *\n * if (isPromise(regularValue)) {\n *   // This block won't execute\n * } else {\n *   // TypeScript knows this isn't a Promise\n *   console.log(regularValue);\n * }\n *\n * // Useful for handling mixed Promise/non-Promise values\n * function handleValue(value: unknown) {\n *   if (isPromise(value)) {\n *     return value.then(result => process(result));\n *   }\n *   return process(value);\n * }\n * ```\n */",[0,1012],"/**\n * Type guard that checks if a value is a Promise or thenable object.\n * Uses duck typing to detect promise-like objects by checking for the presence\n * of a `then` method, which is the standard approach for thenable detection.\n *\n * @param value - Value to check for Promise compatibility\n * @returns True if value has a `then` method (is thenable), false otherwise\n * @example\n * ```ts\n * const promiseValue = Promise.resolve(42);\n * const regularValue = 42;\n *\n * if (isPromise(promiseValue)) {\n *   // TypeScript knows this is Promise<any>\n *   promiseValue.then(result => console.log(result));\n * }\n *\n * if (isPromise(regularValue)) {\n *   // This block won't execute\n * } else {\n *   // TypeScript knows this isn't a Promise\n *   console.log(regularValue);\n * }\n *\n * // Useful for handling mixed Promise/non-Promise values\n * function handleValue(value: unknown) {\n *   if (isPromise(value)) {\n *     return value.then(result => process(result));\n *   }\n *   return process(value);\n * }\n * ```\n */",[1040,1040],[230,241],"isPromise",[343,343],[343,343],[536,536],[536,536],[1678,1678],[1678,1678],[46,1055],"/**\n * Type utility that excludes Promise types from a given type.\n * This utility type creates a type that contains everything from T except Promise<any>.\n * Useful for ensuring values aren't promises in function signatures or type constraints.\n * @template T - Type to exclude Promise from (defaults to any)\n * @example\n * ```ts\n * // Basic usage\n * type NonPromiseString = NotPromise<string | Promise<string>>; // string\n * type NonPromiseNumber = NotPromise<number | Promise<number>>; // number\n *\n * // With union types\n * type MixedTypes = string | number | Promise<boolean> | null;\n * type OnlyNonPromises = NotPromise<MixedTypes>; // string | number | null\n *\n * // Function parameter constraint\n * function processValue<T>(value: NotPromise<T>): T {\n *   // Ensures value is never a Promise\n *   return value;\n * }\n *\n * // Type guard usage\n * function isNotPromise<T>(value: T | Promise<T>): value is NotPromise<T> {\n *   return typeof value !== 'object' || !('then' in value);\n * }\n * ```\n */",[46,1055],"/**\n * Type utility that excludes Promise types from a given type.\n * This utility type creates a type that contains everything from T except Promise<any>.\n * Useful for ensuring values aren't promises in function signatures or type constraints.\n *\n * @template T - Type to exclude Promise from (defaults to any)\n * @example\n * ```ts\n * // Basic usage\n * type NonPromiseString = NotPromise<string | Promise<string>>; // string\n * type NonPromiseNumber = NotPromise<number | Promise<number>>; // number\n *\n * // With union types\n * type MixedTypes = string | number | Promise<boolean> | null;\n * type OnlyNonPromises = NotPromise<MixedTypes>; // string | number | null\n *\n * // Function parameter constraint\n * function processValue<T>(value: NotPromise<T>): T {\n *   // Ensures value is never a Promise\n *   return value;\n * }\n *\n * // Type guard usage\n * function isNotPromise<T>(value: T | Promise<T>): value is NotPromise<T> {\n *   return typeof value !== 'object' || !('then' in value);\n * }\n * ```\n */",[1118,2281],"/**\n * Function type that takes unknown input and returns boolean synchronously.\n * This type represents a predicate function that evaluates a condition and returns\n * true or false immediately. Commonly used for filtering, validation, and conditional logic.\n * @example\n * ```ts\n * // Basic predicate functions\n * const isString: Predicate = (input): input is string => typeof input === 'string';\n * const isPositive: Predicate = (input) => typeof input === 'number' && input > 0;\n * const isNotNull: Predicate = (input) => input !== null;\n *\n * // Usage with array methods\n * const values = [1, 'hello', null, 42, 'world'];\n * const strings = values.filter(isString); // ['hello', 'world']\n * const positiveNumbers = values.filter(isPositive); // [1, 42]\n *\n * // Custom predicate composition\n * const isEven: Predicate = (input) => typeof input === 'number' && input % 2 === 0;\n * const isOdd: Predicate = (input) => typeof input === 'number' && input % 2 !== 0;\n *\n * // Conditional logic\n * function processIfValid(value: unknown, predicate: Predicate): void {\n *   if (predicate(value)) {\n *     console.log('Valid value:', value);\n *   }\n * }\n * ```\n */",[2336,3918],"/**\n * Function type that takes unknown input and returns Promise<boolean> asynchronously.\n * This type represents an async predicate function that evaluates a condition asynchronously\n * and returns a promise that resolves to true or false. Useful for async validation,\n * database queries, network checks, and other asynchronous conditional operations.\n * @example\n * ```ts\n * // Async validation predicates\n * const userExists: PredicateAsync = async (userId) => {\n *   const response = await fetch(`/api/users/${userId}`);\n *   return response.ok;\n * };\n *\n * const isValidEmail: PredicateAsync = async (email) => {\n *   if (typeof email !== 'string') return false;\n *   const response = await fetch('/api/validate-email', {\n *     method: 'POST',\n *     body: JSON.stringify({ email })\n *   });\n *   return response.ok;\n * };\n *\n * // File system checks\n * const fileExists: PredicateAsync = async (path) => {\n *   try {\n *     await fs.access(path);\n *     return true;\n *   } catch {\n *     return false;\n *   }\n * };\n *\n * // Usage in async contexts\n * async function processValidUsers(userIds: unknown[]) {\n *   const validUsers = [];\n *   for (const id of userIds) {\n *     if (await userExists(id)) {\n *       validUsers.push(id);\n *     }\n *   }\n *   return validUsers;\n * }\n *\n * // Promise.all for parallel validation\n * async function validateAllEmails(emails: unknown[]) {\n *   const validationPromises = emails.map(isValidEmail);\n *   const results = await Promise.all(validationPromises);\n *   return emails.filter((_, index) => results[index]);\n * }\n * ```\n */",[3987,5923],"/**\n * Function type that takes unknown input and returns boolean or Promise<boolean>.\n * This type represents a predicate function that can work in both synchronous and\n * asynchronous contexts, returning either a boolean directly or a Promise<boolean>.\n * Useful for creating flexible APIs that can handle both sync and async predicates.\n * @example\n * ```ts\n * // Functions that work with both sync and async predicates\n * const isString: PredicateMaybeAsync = (input) => typeof input === 'string';\n * const userExists: PredicateMaybeAsync = async (userId) => {\n *   const response = await fetch(`/api/users/${userId}`);\n *   return response.ok;\n * };\n *\n * // Flexible validation function\n * async function validateInput(\n *   value: unknown,\n *   validator: PredicateMaybeAsync\n * ): Promise<boolean> {\n *   const result = validator(value);\n *   return Promise.resolve(result); // Handles both sync and async results\n * }\n *\n * // Usage with both types\n * await validateInput('hello', isString); // Works with sync predicate\n * await validateInput(123, userExists);   // Works with async predicate\n *\n * // Array of mixed predicates\n * const validators: PredicateMaybeAsync[] = [\n *   (input) => typeof input === 'string',           // sync\n *   async (input) => input !== null,                // async\n *   (input) => String(input).length > 0            // sync\n * ];\n *\n * async function validateWithAll(value: unknown) {\n *   for (const validator of validators) {\n *     const isValid = await Promise.resolve(validator(value));\n *     if (!isValid) return false;\n *   }\n *   return true;\n * }\n *\n * // Conditional predicate creation\n * function createValidator(useAsync: boolean): PredicateMaybeAsync {\n *   if (useAsync) {\n *     return async (input) => {\n *       await new Promise(resolve => setTimeout(resolve, 100));\n *       return input !== null;\n *     };\n *   }\n *   return (input) => input !== null;\n * }\n * ```\n */",[6000,8005],"/**\n * Type utility that transforms a function to return Promisable<ReturnType> instead of ReturnType.\n * This utility type takes any function type and creates a version that can return either\n * the original return type directly or wrapped in a Promise. Useful for creating flexible\n * APIs that can work in both synchronous and asynchronous contexts.\n * @template T - Function type to transform\n * @example\n * ```ts\n * // Transform regular functions to promisable versions\n * type Calculator = (a: number, b: number) => number;\n * type PromisableCalculator = PromisableFunction<Calculator>;\n * // (a: number, b: number) => Promisable<number>\n *\n * // Sync implementation\n * const addSync: PromisableCalculator = (a, b) => a + b;\n *\n * // Async implementation\n * const addAsync: PromisableCalculator = async (a, b) => {\n *   await new Promise(resolve => setTimeout(resolve, 100));\n *   return a + b;\n * };\n *\n * // String processor function\n * type StringProcessor = (text: string) => string;\n * type PromisableStringProcessor = PromisableFunction<StringProcessor>;\n *\n * const upperCaseSync: PromisableStringProcessor = (text) => text.toUpperCase();\n * const upperCaseAsync: PromisableStringProcessor = async (text) => {\n *   // Simulate async processing\n *   return new Promise(resolve =>\n *     setTimeout(() => resolve(text.toUpperCase()), 50)\n *   );\n * };\n *\n * // Generic handler for promisable functions\n * async function handleCalculation<T extends (...args: any) => any>(\n *   fn: PromisableFunction<T>,\n *   ...args: Parameters<T>\n * ): Promise<ReturnType<T>> {\n *   const result = fn(...args);\n *   return Promise.resolve(result);\n * }\n *\n * // Usage with both sync and async functions\n * await handleCalculation(addSync, 2, 3);    // 5\n * await handleCalculation(addAsync, 2, 3);   // 5 (after delay)\n *\n * // API design pattern\n * interface DataProcessor<T> {\n *   transform: PromisableFunction<(data: T) => T>;\n *   validate: PromisableFunction<(data: T) => boolean>;\n * }\n * ```\n */",[6000,8005],"/**\n * Type utility that transforms a function to return Promisable<ReturnType> instead of ReturnType.\n * This utility type takes any function type and creates a version that can return either\n * the original return type directly or wrapped in a Promise. Useful for creating flexible\n * APIs that can work in both synchronous and asynchronous contexts.\n *\n * @template T - Function type to transform\n * @example\n * ```ts\n * // Transform regular functions to promisable versions\n * type Calculator = (a: number, b: number) => number;\n * type PromisableCalculator = PromisableFunction<Calculator>;\n * // (a: number, b: number) => Promisable<number>\n *\n * // Sync implementation\n * const addSync: PromisableCalculator = (a, b) => a + b;\n *\n * // Async implementation\n * const addAsync: PromisableCalculator = async (a, b) => {\n *   await new Promise(resolve => setTimeout(resolve, 100));\n *   return a + b;\n * };\n *\n * // String processor function\n * type StringProcessor = (text: string) => string;\n * type PromisableStringProcessor = PromisableFunction<StringProcessor>;\n *\n * const upperCaseSync: PromisableStringProcessor = (text) => text.toUpperCase();\n * const upperCaseAsync: PromisableStringProcessor = async (text) => {\n *   // Simulate async processing\n *   return new Promise(resolve =>\n *     setTimeout(() => resolve(text.toUpperCase()), 50)\n *   );\n * };\n *\n * // Generic handler for promisable functions\n * async function handleCalculation<T extends (...args: any) => any>(\n *   fn: PromisableFunction<T>,\n *   ...args: Parameters<T>\n * ): Promise<ReturnType<T>> {\n *   const result = fn(...args);\n *   return Promise.resolve(result);\n * }\n *\n * // Usage with both sync and async functions\n * await handleCalculation(addSync, 2, 3);    // 5\n * await handleCalculation(addAsync, 2, 3);   // 5 (after delay)\n *\n * // API design pattern\n * interface DataProcessor<T> {\n *   transform: PromisableFunction<(data: T) => T>;\n *   validate: PromisableFunction<(data: T) => boolean>;\n * }\n * ```\n */",[0,923],"/**\n * Creates a promise that resolves after a specified delay in milliseconds.\n * Useful for adding delays in async functions, throttling operations, or creating timeouts.\n *\n * The promise resolves with `undefined` after the specified time has elapsed.\n * Uses `setTimeout` internally to create the delay mechanism.\n * @param timeInMs - Time to wait in milliseconds before resolving\n * @returns Promise that resolves to undefined after the specified delay\n * @example\n * ```ts\n * // Basic usage\n * await wait(1000); // Wait for 1 second\n * console.log('1 second has passed');\n *\n * // In an async function\n * async function delayedOperation() {\n *   console.log('Starting...');\n *   await wait(500); // Wait 500ms\n *   console.log('After delay');\n * }\n *\n * // Throttling operations\n * for (let i = 0; i < 5; i++) {\n *   console.log(`Step ${i + 1}`);\n *   await wait(200); // 200ms between each step\n * }\n * ```\n */",[0,923],"/**\n * Creates a promise that resolves after a specified delay in milliseconds.\n * Useful for adding delays in async functions, throttling operations, or creating timeouts.\n *\n * The promise resolves with `undefined` after the specified time has elapsed.\n * Uses `setTimeout` internally to create the delay mechanism.\n *\n * @param timeInMs - Time to wait in milliseconds before resolving\n * @returns Promise that resolves to undefined after the specified delay\n * @example\n * ```ts\n * // Basic usage\n * await wait(1000); // Wait for 1 second\n * console.log('1 second has passed');\n *\n * // In an async function\n * async function delayedOperation() {\n *   console.log('Starting...');\n *   await wait(500); // Wait 500ms\n *   console.log('After delay');\n * }\n *\n * // Throttling operations\n * for (let i = 0; i < 5; i++) {\n *   console.log(`Step ${i + 1}`);\n *   await wait(200); // 200ms between each step\n * }\n * ```\n */",[225,231],"wait",[448,448],[448,448],[598,598],[598,598],[618,632],[950,950],[950,950],[1183,1183],[1183,1183],[912,1237],"/**\n * Checks if any value in an iterable of promises satisfies the predicate.\n * @param predicate - Function to test each resolved value\n * @param promises - Collection of promises or values to check\n * @param shardSize - Optional size for promise shards\n * @returns true if any value passes the test, false otherwise\n */",[451,451],[451,451],[471,482],"toBe(true",[654,654],[654,654],[885,885],[885,885],[905,916],[1195,1195],[1195,1195],[1358,1358],[1358,1358],[1455,1455],[1640,1640],[1640,1640],[1660,1671],[1920,1920],[1920,1920],[1940,1951],[2187,2187],[2187,2187],[2207,2218],[2460,2460],[2460,2460],[6193,6204],[44,1174],"/**\n * Unwraps a Result type, returning the success value or throwing the error.\n * This function extracts the value from a Result type, handling both success and error cases.\n * For error cases, it enhances the error with additional context and throws it.\n *\n * When the Result contains an error that starts with \"NotFoundError:\", it automatically\n * adds an ENOENT error code to match Node.js filesystem error conventions.\n * @param result - Result instance to unwrap\n * @returns Success value if Result is Ok\n * @throws Enhanced error with potential ENOENT code if Result is Err\n * @example\n * ```ts\n * import { Ok, Err } from 'happy-rusty';\n *\n * // Success case\n * const successResult = Ok('hello world');\n * const value = unwrapResult(successResult); // 'hello world'\n *\n * // Error case\n * const errorResult = Err(new Error('Something went wrong'));\n * unwrapResult(errorResult); // throws Error: Something went wrong\n *\n * // NotFoundError case with ENOENT code\n * const notFoundResult = Err(new Error('NotFoundError: File not found'));\n * unwrapResult(notFoundResult); // throws Error with code: 'ENOENT'\n * ```\n */",[44,1174],"/**\n * Unwraps a Result type, returning the success value or throwing the error.\n * This function extracts the value from a Result type, handling both success and error cases.\n * For error cases, it enhances the error with additional context and throws it.\n *\n * When the Result contains an error that starts with \"NotFoundError:\", it automatically\n * adds an ENOENT error code to match Node.js filesystem error conventions.\n *\n * @param result - Result instance to unwrap\n * @returns Success value if Result is Ok\n * @throws Enhanced error with potential ENOENT code if Result is Err\n * @example\n * ```ts\n * import { Ok, Err } from 'happy-rusty';\n *\n * // Success case\n * const successResult = Ok('hello world');\n * const value = unwrapResult(successResult); // 'hello world'\n *\n * // Error case\n * const errorResult = Err(new Error('Something went wrong'));\n * unwrapResult(errorResult); // throws Error: Something went wrong\n *\n * // NotFoundError case with ENOENT code\n * const notFoundResult = Err(new Error('NotFoundError: File not found'));\n * unwrapResult(notFoundResult); // throws Error with code: 'ENOENT'\n * ```\n */",[1208,1255],"Error_ extends unknown,>(\n  result: Result<Ok, Error_",[100,2919],"/**\n * Capitalizes the first character of a string using Unicode-aware locale-sensitive transformation.\n *\n * Uses Unicode property `\\p{CWU}` (Changes When Uppercased) to identify characters that have uppercase variants,\n * ensuring proper capitalization across different languages and writing systems. This approach handles\n * complex Unicode cases like ligatures, accented characters, and non-Latin scripts correctly.\n * The locale parameter enables culture-specific capitalization rules (for example, Turkish i/İ distinction).\n * @param str - Input string to capitalize\n * @param locale - Optional locale identifier for culture-specific uppercasing rules\n * @returns String with first character capitalized according to locale rules\n * @example\n * Basic English capitalization:\n * ```ts\n * const result = capitalizeString(\"hello world\");\n * console.log(result); // \"Hello world\"\n * ```\n *\n * @example\n * Handling accented characters:\n * ```ts\n * const french = capitalizeString(\"éléphant\");\n * console.log(french); // \"Éléphant\"\n *\n * const german = capitalizeString(\"über\");\n * console.log(german); // \"Über\"\n * ```\n *\n * @example\n * Locale-specific capitalization (Turkish):\n * ```ts\n * const turkish = capitalizeString(\"istanbul\", \"tr-TR\");\n * console.log(turkish); // \"İstanbul\" (with dotted İ)\n *\n * const english = capitalizeString(\"istanbul\", \"en-US\");\n * console.log(english); // \"Istanbul\" (with regular I)\n * ```\n *\n * @example\n * Preserving existing capitalization patterns:\n * ```ts\n * const mixed = capitalizeString(\"iPhone\");\n * console.log(mixed); // \"IPhone\" (first char capitalized)\n *\n * const already = capitalizeString(\"Hello\");\n * console.log(already); // \"Hello\" (unchanged)\n * ```\n *\n * @example\n * Working with Unicode and special characters:\n * ```ts\n * const emoji = capitalizeString(\"🎉 party time\");\n * console.log(emoji); // \"🎉 party time\" (emoji unchanged, first letter not affected)\n *\n * const greek = capitalizeString(\"ωmega\");\n * console.log(greek); // \"Ωmega\"\n * ```\n *\n * @example\n * Handling edge cases:\n * ```ts\n * capitalizeString(\"\") // \"\" (empty string)\n * capitalizeString(\"a\") // \"A\" (single character)\n * capitalizeString(\"123abc\") // \"123abc\" (numbers don't have uppercase)\n * capitalizeString(\"-hello\") // \"-hello\" (punctuation doesn't change)\n * ```\n *\n * @example\n * Text processing pipeline:\n * ```ts\n * const titles = [\"the great gatsby\", \"to kill a mockingbird\", \"1984\"];\n * const capitalized = titles.map(title => capitalizeString(title));\n * console.log(capitalized);\n * // [\"The great gatsby\", \"To kill a mockingbird\", \"1984\"]\n *\n * // For proper title case, combine with word processing:\n * function titleCase(text: string): string {\n *   return text.split(' ')\n *     .map(word => capitalizeString(word.toLowerCase()))\n *     .join(' ');\n * }\n * ```\n */",[100,2919],"/**\n * Capitalizes the first character of a string using Unicode-aware locale-sensitive transformation.\n *\n * Uses Unicode property `\\p{CWU}` (Changes When Uppercased) to identify characters that have uppercase variants,\n * ensuring proper capitalization across different languages and writing systems. This approach handles\n * complex Unicode cases like ligatures, accented characters, and non-Latin scripts correctly.\n * The locale parameter enables culture-specific capitalization rules (for example, Turkish i/İ distinction).\n *\n * @param str - Input string to capitalize\n * @param locale - Optional locale identifier for culture-specific uppercasing rules\n * @returns String with first character capitalized according to locale rules\n * @example\n * Basic English capitalization:\n * ```ts\n * const result = capitalizeString(\"hello world\");\n * console.log(result); // \"Hello world\"\n * ```\n *\n * @example\n * Handling accented characters:\n * ```ts\n * const french = capitalizeString(\"éléphant\");\n * console.log(french); // \"Éléphant\"\n *\n * const german = capitalizeString(\"über\");\n * console.log(german); // \"Über\"\n * ```\n *\n * @example\n * Locale-specific capitalization (Turkish):\n * ```ts\n * const turkish = capitalizeString(\"istanbul\", \"tr-TR\");\n * console.log(turkish); // \"İstanbul\" (with dotted İ)\n *\n * const english = capitalizeString(\"istanbul\", \"en-US\");\n * console.log(english); // \"Istanbul\" (with regular I)\n * ```\n *\n * @example\n * Preserving existing capitalization patterns:\n * ```ts\n * const mixed = capitalizeString(\"iPhone\");\n * console.log(mixed); // \"IPhone\" (first char capitalized)\n *\n * const already = capitalizeString(\"Hello\");\n * console.log(already); // \"Hello\" (unchanged)\n * ```\n *\n * @example\n * Working with Unicode and special characters:\n * ```ts\n * const emoji = capitalizeString(\"🎉 party time\");\n * console.log(emoji); // \"🎉 party time\" (emoji unchanged, first letter not affected)\n *\n * const greek = capitalizeString(\"ωmega\");\n * console.log(greek); // \"Ωmega\"\n * ```\n *\n * @example\n * Handling edge cases:\n * ```ts\n * capitalizeString(\"\") // \"\" (empty string)\n * capitalizeString(\"a\") // \"A\" (single character)\n * capitalizeString(\"123abc\") // \"123abc\" (numbers don't have uppercase)\n * capitalizeString(\"-hello\") // \"-hello\" (punctuation doesn't change)\n * ```\n *\n * @example\n * Text processing pipeline:\n * ```ts\n * const titles = [\"the great gatsby\", \"to kill a mockingbird\", \"1984\"];\n * const capitalized = titles.map(title => capitalizeString(title));\n * console.log(capitalized);\n * // [\"The great gatsby\", \"To kill a mockingbird\", \"1984\"]\n *\n * // For proper title case, combine with word processing:\n * function titleCase(text: string): string {\n *   return text.split(' ')\n *     .map(word => capitalizeString(word.toLowerCase()))\n *     .join(' ');\n * }\n * ```\n */",[2953,3005],"string_: string, locale?: string): string {\n  return string_",[306,921],"/**\n * Type guard that checks if a value is a string type using JavaScript typeof operator.\n * This function provides precise type narrowing for string types and is essential for\n * type-safe string operations in TypeScript applications.\n * @param value - Value to test for string type\n * @returns True if value is a string, false otherwise\n * @example\n * ```ts\n * const input: unknown = \"hello\";\n * if (isString(input)) {\n *   // input is now typed as string\n *   console.log(input.toUpperCase()); // \"HELLO\"\n * }\n *\n * isString(\"text\"); // true\n * isString(123); // false\n * isString(null); // false\n * ```\n */",[949,949],[1044,1649],"/**\n * Type guard that checks if a value is a RegExp object using Object.prototype.toString.\n * This method provides more reliable RegExp detection than instanceof, especially across\n * different execution contexts or when dealing with RegExp objects from different realms.\n * @param value - Value to test for RegExp type\n * @returns True if value is a RegExp object, false otherwise\n * @example\n * ```ts\n * const pattern = /[a-z]+/;\n * const notPattern = \"[a-z]+\";\n *\n * isObjectRegexp(pattern); // true\n * isObjectRegexp(notPattern); // false\n * isObjectRegexp(new RegExp(\"test\")); // true\n * ```\n */",[1677,1677],[1812,2475],"/**\n * Type guard that validates if a string is a short language code (2 lowercase letters).\n * Follows ISO 639-1 language code format for two-letter language identifiers.\n * Useful for internationalization and locale validation.\n * @param value - Value to test for short language string format\n * @returns True if value is a valid short language string, false otherwise\n * @example\n * ```ts\n * isShortLangString(\"en\"); // true\n * isShortLangString(\"fr\"); // true\n * isShortLangString(\"EN\"); // false (must be lowercase)\n * isShortLangString(\"eng\"); // false (must be exactly 2 characters)\n * isShortLangString(\"e1\"); // false (must be letters only)\n * ```\n */",[2503,2503],[2659,3383],"/**\n * Type guard that validates if a string is a long language code (format: xx-XX).\n * Follows BCP 47 language tag format with language-region pattern.\n * Useful for locale-specific internationalization and regional content delivery.\n * @param value - Value to test for long language string format\n * @returns True if value is a valid long language string, false otherwise\n * @example\n * ```ts\n * isLongLangString(\"en-US\"); // true\n * isLongLangString(\"fr-CA\"); // true\n * isLongLangString(\"zh-CN\"); // true\n * isLongLangString(\"en-us\"); // false (region must be uppercase)\n * isLongLangString(\"EN-US\"); // false (language must be lowercase)\n * isLongLangString(\"en_US\"); // false (must use hyphen separator)\n * ```\n */",[3411,3411],[3576,4254],"/**\n * Type guard that validates if a string is either a short or long language code.\n * Accepts both ISO 639-1 (2-letter) and BCP 47 (language-region) formats.\n * Comprehensive validation for internationalization language identifiers.\n * @param value - Value to test for language string format\n * @returns True if value is a valid language string, false otherwise\n * @example\n * ```ts\n * isLangString(\"en\"); // true (short format)\n * isLangString(\"en-US\"); // true (long format)\n * isLangString(\"fr\"); // true (short format)\n * isLangString(\"zh-CN\"); // true (long format)\n * isLangString(\"invalid\"); // false\n * isLangString(\"en-us\"); // false (incorrect casing)\n * ```\n */",[4282,4282],[4411,5052],"/**\n * Type guard that checks if a value is a single digit string (0-9).\n * Validates that the input is exactly one character and represents a numeric digit.\n * Essential for parsing and validating numeric string inputs character by character.\n * @param value - Value to test for single digit string\n * @returns True if value is a single digit string, false otherwise\n * @example\n * ```ts\n * isDigitString(\"5\"); // true\n * isDigitString(\"0\"); // true\n * isDigitString(\"9\"); // true\n * isDigitString(\"10\"); // false (multiple characters)\n * isDigitString(\"a\"); // false (not a digit)\n * isDigitString(5); // false (not a string)\n * ```\n */",[5199,5882],"/**\n * Type guard that checks if a value is a non-zero single digit string (1-9).\n * Validates that the input is exactly one character representing a digit from 1 to 9,\n * excluding zero. Useful for validating leading digits in number strings.\n * @param value - Value to test for non-zero single digit string\n * @returns True if value is a non-zero single digit string, false otherwise\n * @example\n * ```ts\n * isNo0DigitString(\"5\"); // true\n * isNo0DigitString(\"1\"); // true\n * isNo0DigitString(\"9\"); // true\n * isNo0DigitString(\"0\"); // false (zero not allowed)\n * isNo0DigitString(\"10\"); // false (multiple characters)\n * isNo0DigitString(\"a\"); // false (not a digit)\n * ```\n */",[6030,6684],"/**\n * Type guard that checks if a string contains only digit characters.\n * Validates that every character in the string is a numeric digit (0-9).\n * Useful for validating numeric string inputs before parsing to numbers.\n * @param value - Value to test for digits-only string\n * @returns True if value is a string containing only digits, false otherwise\n * @example\n * ```ts\n * isDigitsString(\"123\"); // true\n * isDigitsString(\"0\"); // true\n * isDigitsString(\"999\"); // true\n * isDigitsString(\"12a3\"); // false (contains non-digit)\n * isDigitsString(\"\"); // false (empty string)\n * isDigitsString(\"12.3\"); // false (contains decimal point)\n * ```\n */",{"messageId":"10385","data":"10491","fix":"10492","desc":"10493"},{"messageId":"10385","data":"10494","fix":"10495","desc":"10496"},{"messageId":"10385","data":"10497","fix":"10498","desc":"10499"},[6831,7539],"/**\n * Type guard that validates if a string represents a positive integer.\n * Accepts single digits (0-9) or multi-digit numbers without leading zeros.\n * Essential for validating positive integer inputs in string format.\n * @param value - Value to test for positive integer string format\n * @returns True if value is a valid positive integer string, false otherwise\n * @example\n * ```ts\n * isPositiveIntString(\"123\"); // true\n * isPositiveIntString(\"0\"); // true\n * isPositiveIntString(\"5\"); // true\n * isPositiveIntString(\"007\"); // false (leading zeros not allowed)\n * isPositiveIntString(\"-5\"); // false (negative not allowed)\n * isPositiveIntString(\"12.3\"); // false (decimal not allowed)\n * ```\n */",[7920,8651],"/**\n * Type guard that validates if a string represents a negative integer.\n * Must start with a minus sign followed by a valid positive integer.\n * Ensures proper format for negative integer string representations.\n * @param value - Value to test for negative integer string format\n * @returns True if value is a valid negative integer string, false otherwise\n * @example\n * ```ts\n * isNegativeIntString(\"-123\"); // true\n * isNegativeIntString(\"-5\"); // true\n * isNegativeIntString(\"-007\"); // false (leading zeros not allowed)\n * isNegativeIntString(\"123\"); // false (positive not allowed)\n * isNegativeIntString(\"-\"); // false (no digits after minus)\n * isNegativeIntString(\"-12.3\"); // false (decimal not allowed)\n * ```\n */",[8924,9664],"/**\n * Type guard that validates if a string represents a positive floating-point number.\n * Must contain a decimal point with valid integer and fractional parts.\n * Excludes numbers that are effectively integers (ending in .0, .00, etc.).\n * @param value - Value to test for positive float string format\n * @returns True if value is a valid positive float string, false otherwise\n * @example\n * ```ts\n * isPositiveFloatString(\"12.34\"); // true\n * isPositiveFloatString(\"0.5\"); // true\n * isPositiveFloatString(\"123.456\"); // true\n * isPositiveFloatString(\"12.0\"); // false (effectively an integer)\n * isPositiveFloatString(\"12\"); // false (no decimal point)\n * isPositiveFloatString(\"-12.34\"); // false (negative not allowed)\n * ```\n */",[10250,10983],"/**\n * Type guard that validates if a string represents a negative floating-point number.\n * Must start with a minus sign followed by a valid positive float.\n * Ensures proper format for negative float string representations.\n * @param value - Value to test for negative float string format\n * @returns True if value is a valid negative float string, false otherwise\n * @example\n * ```ts\n * isNegativeFloatString(\"-12.34\"); // true\n * isNegativeFloatString(\"-0.5\"); // true\n * isNegativeFloatString(\"-123.456\"); // true\n * isNegativeFloatString(\"-12.0\"); // false (effectively an integer)\n * isNegativeFloatString(\"12.34\"); // false (positive not allowed)\n * isNegativeFloatString(\"-\"); // false (no digits after minus)\n * ```\n */",[11262,11930],"/**\n * Type guard that validates if a string represents any integer (positive or negative).\n * Combines validation for both positive and negative integer string formats.\n * Comprehensive integer string validation for numeric parsing operations.\n * @param value - Value to test for integer string format\n * @returns True if value is a valid integer string, false otherwise\n * @example\n * ```ts\n * isIntString(\"123\"); // true (positive)\n * isIntString(\"-456\"); // true (negative)\n * isIntString(\"0\"); // true (zero)\n * isIntString(\"12.3\"); // false (has decimal)\n * isIntString(\"abc\"); // false (not numeric)\n * isIntString(\"007\"); // false (leading zeros)\n * ```\n */",[12063,12744],"/**\n * Type guard that validates if a string represents any floating-point number.\n * Combines validation for both positive and negative float string formats.\n * Comprehensive float string validation for decimal number parsing.\n * @param value - Value to test for float string format\n * @returns True if value is a valid float string, false otherwise\n * @example\n * ```ts\n * isFloatString(\"12.34\"); // true (positive)\n * isFloatString(\"-56.78\"); // true (negative)\n * isFloatString(\"0.5\"); // true (fractional)\n * isFloatString(\"12\"); // false (no decimal point)\n * isFloatString(\"12.0\"); // false (effectively integer)\n * isFloatString(\"abc\"); // false (not numeric)\n * ```\n */",[12885,13630],"/**\n * Type guard that validates if a string represents any positive number.\n * Accepts both positive integers and positive floating-point numbers.\n * Comprehensive validation for positive numeric string representations.\n * @param value - Value to test for positive number string format\n * @returns True if value is a valid positive number string, false otherwise\n * @example\n * ```ts\n * isPositiveNumberString(\"123\"); // true (positive integer)\n * isPositiveNumberString(\"12.34\"); // true (positive float)\n * isPositiveNumberString(\"0\"); // true (zero)\n * isPositiveNumberString(\"-123\"); // false (negative)\n * isPositiveNumberString(\"abc\"); // false (not numeric)\n * isPositiveNumberString(\"12.0\"); // false (effectively integer)\n * ```\n */",[13787,14549],"/**\n * Type guard that validates if a string represents any negative number.\n * Accepts both negative integers and negative floating-point numbers.\n * Comprehensive validation for negative numeric string representations.\n * @param value - Value to test for negative number string format\n * @returns True if value is a valid negative number string, false otherwise\n * @example\n * ```ts\n * isNegativeNumberString(\"-123\"); // true (negative integer)\n * isNegativeNumberString(\"-12.34\"); // true (negative float)\n * isNegativeNumberString(\"123\"); // false (positive)\n * isNegativeNumberString(\"0\"); // false (zero, not negative)\n * isNegativeNumberString(\"abc\"); // false (not numeric)\n * isNegativeNumberString(\"-12.0\"); // false (effectively integer)\n * ```\n */",[14706,15416],"/**\n * Type guard that validates if a string represents any number (integer or float).\n * Accepts positive numbers, negative numbers, integers, and floating-point numbers.\n * Most comprehensive numeric string validation covering all number formats.\n * @param value - Value to test for number string format\n * @returns True if value is a valid number string, false otherwise\n * @example\n * ```ts\n * isNumberString(\"123\"); // true (positive integer)\n * isNumberString(\"-456\"); // true (negative integer)\n * isNumberString(\"12.34\"); // true (positive float)\n * isNumberString(\"-56.78\"); // true (negative float)\n * isNumberString(\"0\"); // true (zero)\n * isNumberString(\"abc\"); // false (not numeric)\n * ```\n */",[1499,2160],"/**\n * Tokenizes CSS value string into array of CSS tokens using CSS tokenizer.\n * Removes the EOF token from the end and validates that tokens were produced.\n * Throws MalformedCssValueError if parsing fails.\n * @param cssValue - CSS value string to tokenize\n * @returns Array of CSS tokens representing the parsed value\n * @throws {MalformedCssValueError} When CSS parsing encounters syntax errors\n * @example\n * ```ts\n * const tokens = lGCC_tokenizeCssValue(\"var(--color)\");\n * // Returns array of tokens representing the var function call\n *\n * const simpleTokens = lGCC_tokenizeCssValue(\"'hello world'\");\n * // Returns array with string token\n * ```\n */",[2504,3227],"/**\n * Handles simple CSS tokens by removeing their values.\n * Supports number, dimension, string, and specific identifier tokens.\n * For identifier tokens, only 'none' is recognized as valid.\n * @param token - CSS token to remove value from\n * @returns Extracted value as string or number\n * @throws {UnrecognizedSingleCssValueError} When token type isn't supported or identifier isn't 'none'\n * @example\n * ```ts\n * const numberToken = createNumberToken(42);\n * lGCC_handleSimpleToken(numberToken); // 42\n *\n * const stringToken = createStringToken(\"hello\");\n * lGCC_handleSimpleToken(stringToken); // \"hello\"\n *\n * const noneToken = createIdentToken(\"none\");\n * lGCC_handleSimpleToken(noneToken); // \"none\"\n * ```\n */",[3816,4419],"/**\n * Type guard that checks if a grouped token represents a function token group.\n * Function token groups are tuples with 'function-token-group' as first element\n * and array of nested tokens as second element.\n * @param item - Grouped token to check\n * @returns True if item is a function token group, false otherwise\n * @example\n * ```ts\n * const functionGroup: GroupedToken = ['function-token-group', [varToken, identToken]];\n * lGCC_isFunctionTokenGroup(functionGroup); // true\n *\n * const regularToken: GroupedToken = someToken;\n * lGCC_isFunctionTokenGroup(regularToken); // false\n * ```\n */",[4587,5332],"/**\n * Recursively checks if a specific token is contained within a group of tokens.\n * Performs deep search through function token groups to find nested tokens.\n * Uses reference equality for direct token comparison.\n * @param tokenToFind - Token to search for within group contents\n * @param groupContents - Array of grouped tokens to search through\n * @returns True if token is found anywhere in the group hierarchy, false otherwise\n * @example\n * ```ts\n * const targetToken = someToken;\n * const group = [token1, ['function-token-group', [targetToken, token2]], token3];\n * lGCC_isTokenDeeplyContained(targetToken, group); // true\n *\n * const notInGroup = otherToken;\n * lGCC_isTokenDeeplyContained(notInGroup, group); // false\n * ```\n */",[6321,6937],"/**\n * Groups CSS function tokens with their contents into hierarchical structures.\n * Processes tokens to identify function boundaries and creates nested groupings\n * for proper CSS function parsing. Handles nested functions recursively.\n * @param tokens - Array of grouped tokens to process into function structures\n * @returns Array of grouped tokens with functions properly nested\n * @example\n * ```ts\n * const tokens = [identToken, functionToken, argToken, closeParenToken];\n * const grouped = lGCC_groupFunctionTokens(tokens);\n * // Returns tokens with function calls grouped with their arguments\n * ```\n */",[7090,8529],"accumulator, token: GroupedToken, _, arr: GroupedToken[]) {\n      // Skip tokens that are part of function groups we've already processed\n      if (lGCC_isTokenDeeplyContained(token, accumulator)) {\n        return accumulator;\n      }\n\n      // Check if we're starting a function group\n      if (isTokenFunction(token as CSSToken)) {\n        // Create a new function group\n        const functionGroup: GroupedToken[] = [token];\n        let depth = 1; // Track nesting level\n        let i = arr.indexOf(token) + 1;\n\n        // Collect all tokens until matching closing parenthesis\n        while (depth > 0) {\n          const currentToken = notFalsyOrThrow(arr[i]);\n          functionGroup.push(currentToken);\n\n          // Adjust depth based on parentheses\n          if (isTokenFunction(currentToken as CSSToken)) {\n            depth++;\n          }\n          if (isTokenCloseParen(currentToken as CSSToken)) {\n            depth--;\n          }\n\n          i++;\n        }\n\n        const reducedFunctionGroupInner: GroupedToken[] = functionGroup\n          .slice(1, -1)\n          .reduce<\n            GroupedToken[]\n          >(reducer, []);\n\n        // Add the complete function group to our result\n        return [...accumulator, [\n          'function-token-group',\n          [\n            notFalsyOrThrow(functionGroup.at(0)),\n            ...reducedFunctionGroupInner,\n            notFalsyOrThrow(functionGroup.at(-1)),\n          ],\n        ]];\n      }\n      return [...accumulator",[7119,7724],"array: GroupedToken[]) {\n      // Skip tokens that are part of function groups we've already processed\n      if (lGCC_isTokenDeeplyContained(token, acc)) {\n        return acc;\n      }\n\n      // Check if we're starting a function group\n      if (isTokenFunction(token as CSSToken)) {\n        // Create a new function group\n        const functionGroup: GroupedToken[] = [token];\n        let depth = 1; // Track nesting level\n        let i = array.indexOf(token) + 1;\n\n        // Collect all tokens until matching closing parenthesis\n        while (depth > 0) {\n          const currentToken = notFalsyOrThrow(array",[7552,8020],"index = arr.indexOf(token) + 1;\n\n        // Collect all tokens until matching closing parenthesis\n        while (depth > 0) {\n          const currentToken = notFalsyOrThrow(arr[index]);\n          functionGroup.push(currentToken);\n\n          // Adjust depth based on parentheses\n          if (isTokenFunction(currentToken as CSSToken)) {\n            depth++;\n          }\n          if (isTokenCloseParen(currentToken as CSSToken)) {\n            depth--;\n          }\n\n          index",{"messageId":"10385","data":"10500","fix":"10501","desc":"10428"},{"messageId":"10385","data":"10502","fix":"10503","desc":"10431"},{"messageId":"10385","data":"10504","fix":"10505","desc":"10434"},[8640,9304],"/**\n * Reduces a grouped token to its string representation by processing different token types.\n * Handles function token groups by delegating to specialized handlers and processes\n * simple tokens like whitespace and strings directly.\n * @param acc - Accumulated string result from previous reductions\n * @param token - Grouped token to process and convert to string\n * @returns Updated accumulated string with token's string representation\n * @throws {UnrecognizedSingleCssValueError} When token type isn't supported\n * @example\n * ```ts\n * const result = lGCC_reduceTokenToString(\"\", stringToken);\n * // Returns string representation of the token\n * ```\n */",[9346,9669],"accumulator: string, token: GroupedToken): string {\n  if (token[0] === 'function-token-group') {\n    return lGCC_handleFunctionTokenGroup(accumulator, token);\n  }\n\n  const cssToken = token;\n\n  if (isTokenWhitespace(cssToken)) {\n    return accumulator === '' ? accumulator : `${accumulator} `;\n  }\n\n  if (isTokenString(cssToken)) {\n    return lGCC_appendString(accumulator",[9823,10473],"/**\n * Handles processing of CSS function token groups by delegating to specific function handlers.\n * Currently supports var() functions and validates function names before processing.\n * Throws errors for unsupported function types.\n * @param acc - Accumulated string result from previous processing\n * @param token - Function token group to process\n * @returns Updated accumulated string after processing function\n * @throws {Error} When function token is invalid or function name is unsupported\n * @example\n * ```ts\n * const result = lGCC_handleFunctionTokenGroup(\"\", varFunctionGroup);\n * // Returns processed var() function result\n * ```\n */",[10520,11116],"accumulator: string, token: GroupedToken): string {\n  const functionTokenGroup = token[1] as GroupedToken[];\n  const functionToken = notFalsyOrThrow(functionTokenGroup[0]) as CSSToken;\n\n  if (!isTokenFunction(functionToken)) {\n    throw new Error(`expected function token, got ${JSON.stringify(functionToken)}`);\n  }\n\n  const functionName = notFalsyOrThrow(functionToken[4]).value;\n  if (!['var'].includes(functionName)) {\n    throw new Error(`Unsupported function name: ${functionName}`);\n  }\n\n  if (functionName === 'var') {\n    return lGCC_handleVarFunction(accumulator, functionTokenGroup);\n  }\n\n  return accumulator",[11121,11907],"/**\n * Handles CSS var() function processing by resolving variable references and fallbacks.\n * Processes var() function arguments to resolve CSS custom properties with fallback support.\n * Validates argument structure and delegates to appropriate handlers.\n * @param acc - Accumulated string result from previous processing\n * @param functionTokenGroup - Array of tokens representing var() function contents\n * @returns Updated accumulated string with resolved var() function value\n * @throws {Error} When var() function has no arguments\n * @throws {InCoherentCssValueError} When first argument isn't string or identifier\n * @example\n * ```ts\n * const result = lGCC_handleVarFunction(\"\", [varToken, identToken, closeParenToken]);\n * // Returns resolved CSS variable value\n * ```\n */",[11947,12463],"accumulator: string,\n  functionTokenGroup: GroupedToken[]): string\n{\n  const args = functionTokenGroup.slice(1, -1);\n  if (args.length === 0) {\n    throw new Error('var() function requires at least one argument');\n  }\n\n  const firstArg = notFalsyOrThrow(args[0]);\n\n  if (lGCC_isFunctionTokenGroup(firstArg)) {\n    return lGCC_reduceTokenToString(accumulator, firstArg);\n  }\n\n  if (isTokenString(firstArg)) {\n    return lGCC_appendString(accumulator, firstArg[1]);\n  }\n\n  if (isTokenIdent(firstArg)) {\n    return lGCC_handleVarIdentifier(accumulator",[12016,12479],"arguments_ = functionTokenGroup.slice(1, -1);\n  if (arguments_.length === 0) {\n    throw new Error('var() function requires at least one argument');\n  }\n\n  const firstArg = notFalsyOrThrow(arguments_[0]);\n\n  if (lGCC_isFunctionTokenGroup(firstArg)) {\n    return lGCC_reduceTokenToString(acc, firstArg);\n  }\n\n  if (isTokenString(firstArg)) {\n    return lGCC_appendString(acc, firstArg[1]);\n  }\n\n  if (isTokenIdent(firstArg)) {\n    return lGCC_handleVarIdentifier(acc, firstArg, arguments_",[12166,12563],"firstArgument = notFalsyOrThrow(args[0]);\n\n  if (lGCC_isFunctionTokenGroup(firstArgument)) {\n    return lGCC_reduceTokenToString(acc, firstArgument);\n  }\n\n  if (isTokenString(firstArgument)) {\n    return lGCC_appendString(acc, firstArgument[1]);\n  }\n\n  if (isTokenIdent(firstArgument)) {\n    return lGCC_handleVarIdentifier(acc, firstArgument, args);\n  }\n\n  throw new InCoherentCssValueError(\n    `firstArg ${JSON.stringify(firstArgument",[12601,13261],"/**\n * Checks if token isn't whitespace or comment, filtering out non-meaningful CSS tokens.\n * Used to identify tokens that contribute to actual CSS value content during parsing.\n * Function token groups are always considered meaningful.\n * @param potentiallyGroupedToken - CSS token or grouped token to check\n * @returns True if token is meaningful (not whitespace or comment), false otherwise\n * @example\n * ```ts\n * const isValid = lGCC_isNotWhitespaceOrComment(['function-token-group', tokens]);\n * // Returns true for function groups\n *\n * const isValid2 = lGCC_isNotWhitespaceOrComment(identToken);\n * // Returns true for meaningful tokens\n * ```\n */",[13762,14621],"/**\n * Resolves CSS variable identifier to its computed value using predefined variable mappings.\n * Handles fallback processing when variable is undefined. Validates browser compatibility\n * for numeric values in content property context.\n * @param acc - Accumulated string result from previous processing\n * @param identToken - CSS identifier token representing variable name\n * @param args - Array of tokens representing var() function arguments\n * @returns Updated accumulated string with resolved variable value or fallback\n * @throws {Error} When numeric variables are used in content property context\n * @throws {Error} When fallback structure is malformed\n * @example\n * ```ts\n * const result = lGCC_handleVarIdentifier(\"\", identToken, [identToken, commaToken, fallbackToken]);\n * // Returns resolved variable value or processes fallback\n * ```\n */",[14663,16795],"accumulator: string, identToken: TokenIdent,\n  args: GroupedToken[]): string\n{\n  const identTokenValue = (identToken[4] as { value: string; }).value;\n  const tokenValue = identToValueMap.get(identTokenValue);\n\n  if (typeof tokenValue === 'string') {\n    return lGCC_appendString(accumulator, tokenValue);\n  }\n\n  if (typeof tokenValue === 'number') {\n    throw new Error(\n      `Browsers do not handle numbers in var function if it's in content property, even if a fallback that resolves to string is provided. Browsers, when encountering a var function in which the first argument is an ident that resolves to a number, treat the entire var function as a number, which isn't valid in content property. Ident ${identTokenValue} resolves to number ${tokenValue}.`,\n    );\n  }\n\n  // tokenValue is undefined, fall back to second argument\n  // Skip whitespace and comments before the comma, find the comma, skip whitespace and comments after the comma.\n  // We're not validating if the structure is correct.\n  // args[0] is the first arg.\n  // FIXME: . w:test:    × lGCC_handleVarFunction > handles var(--unknown, var(--b)) 1ms\n  //  . w:test:      → No fallback provided for unknown variable --unknown or function structure malformed. Please note this function only supports parsing var(--a) or var(--b, --c) functions.\n  const [, ...otherArgs] = args;\n  const trimmedOtherArgs = trimIterableWith(lGCC_isNotWhitespaceOrComment, otherArgs);\n  const [needToBeCommaToken, ...afterCommaTokens] = trimmedOtherArgs;\n  if (!(isToken(needToBeCommaToken) && isTokenComma(needToBeCommaToken))) {\n    throw new Error(\n      `needToBeCommaToken: ${JSON.stringify(needToBeCommaToken)} isn't a comma token.`,\n    );\n  }\n  const trimmedAfterCommaTokens = trimIterableWith(lGCC_isNotWhitespaceOrComment,\n    afterCommaTokens);\n  if (trimmedAfterCommaTokens.length !== 1) {\n    throw new Error(\n      `trimmedAfterCommaTokens: ${\n        JSON.stringify(trimmedAfterCommaTokens)\n      } isn't of length one. Trimmed from ${JSON.stringify(afterCommaTokens)}`,\n    );\n  }\n  const secondArg = notFalsyOrThrow(trimmedAfterCommaTokens[0]);\n  return lGCC_handleVarFallback(accumulator",[14702,15994],"arguments_: GroupedToken[]): string\n{\n  const identTokenValue = (identToken[4] as { value: string; }).value;\n  const tokenValue = identToValueMap.get(identTokenValue);\n\n  if (typeof tokenValue === 'string') {\n    return lGCC_appendString(acc, tokenValue);\n  }\n\n  if (typeof tokenValue === 'number') {\n    throw new Error(\n      `Browsers do not handle numbers in var function if it's in content property, even if a fallback that resolves to string is provided. Browsers, when encountering a var function in which the first argument is an ident that resolves to a number, treat the entire var function as a number, which isn't valid in content property. Ident ${identTokenValue} resolves to number ${tokenValue}.`,\n    );\n  }\n\n  // tokenValue is undefined, fall back to second argument\n  // Skip whitespace and comments before the comma, find the comma, skip whitespace and comments after the comma.\n  // We're not validating if the structure is correct.\n  // args[0] is the first arg.\n  // FIXME: . w:test:    × lGCC_handleVarFunction > handles var(--unknown, var(--b)) 1ms\n  //  . w:test:      → No fallback provided for unknown variable --unknown or function structure malformed. Please note this function only supports parsing var(--a) or var(--b, --c) functions.\n  const [, ...otherArgs] = arguments_",[15977,16080],"otherArguments] = args;\n  const trimmedOtherArgs = trimIterableWith(lGCC_isNotWhitespaceOrComment, otherArguments",[16004,16151],"trimmedOtherArguments = trimIterableWith(lGCC_isNotWhitespaceOrComment, otherArgs);\n  const [needToBeCommaToken, ...afterCommaTokens] = trimmedOtherArguments",[16703,16806],"secondArgument = notFalsyOrThrow(trimmedAfterCommaTokens[0]);\n  return lGCC_handleVarFallback(acc, secondArgument",[16812,17711],"/**\n * Processes CSS var() function fallback values when primary variable resolution fails.\n * Recursively processes fallback tokens to resolve nested CSS values and functions.\n * Supports function groups, string tokens, and identifier tokens with predefined mappings.\n * @param acc - Accumulated string result from previous processing\n * @param fallbackArg - Single grouped token representing fallback value\n * @returns Updated accumulated string with processed fallback value\n * @throws {UnrecognizedSingleCssValueError} When fallback identifier is undefined or not string\n * @throws {InCoherentCssValueError} When fallback token type is invalid\n * @example\n * ```ts\n * const result = lGCC_handleVarFallback(\"\", stringToken);\n * // Returns processed fallback string value\n *\n * const result2 = lGCC_handleVarFallback(\"\", functionGroup);\n * // Returns processed nested function result\n * ```\n */",[17751,18183],"accumulator: string, fallbackArg: GroupedToken): string {\n  if (lGCC_isFunctionTokenGroup(fallbackArg)) {\n    return lGCC_handleFunctionTokenGroup(accumulator, fallbackArg);\n  }\n\n  if (isTokenString(fallbackArg)) {\n    return lGCC_appendString(accumulator, fallbackArg[1]);\n  }\n\n  if (isTokenIdent(fallbackArg)) {\n    const tokenValue = identToValueMap.get(fallbackArg[4].value);\n    if (typeof tokenValue === 'string') {\n      return lGCC_appendString(accumulator",[17764,18295],"fallbackArgument: GroupedToken): string {\n  if (lGCC_isFunctionTokenGroup(fallbackArgument)) {\n    return lGCC_handleFunctionTokenGroup(acc, fallbackArgument);\n  }\n\n  if (isTokenString(fallbackArgument)) {\n    return lGCC_appendString(acc, fallbackArgument[1]);\n  }\n\n  if (isTokenIdent(fallbackArgument)) {\n    const tokenValue = identToValueMap.get(fallbackArgument[4].value);\n    if (typeof tokenValue === 'string') {\n      return lGCC_appendString(acc, tokenValue);\n    }\n    throw new UnrecognizedSingleCssValueError(\n      `Fallback ${JSON.stringify(fallbackArgument",[18418,19144],"/**\n * Appends string input to accumulated result with proper quote handling and concatenation.\n * Handles special cases for quote merging when accumulator ends with quoted string.\n * Ensures proper string formatting for CSS content property values.\n * @param acc - Accumulated string result from previous processing\n * @param input - String value to append to accumulator\n * @returns Updated accumulated string with properly formatted concatenation\n * @throws {Error} When accumulator format is malformed for string concatenation\n * @example\n * ```ts\n * const result = lGCC_appendString(\"\", \"hello\");\n * // Returns \"'hello'\"\n *\n * const result2 = lGCC_appendString(\"'start' \", \"end\");\n * // Returns \"'startend'\"\n * ```\n */",[19179,19457],"accumulator: string, input: string): string {\n  if (accumulator.endsWith(\"' \") && accumulator.startsWith(\"'\")) {\n    return `${accumulator.slice(0, -\"' \".length)}${toSingleQuotedString(input).slice(1)}`;\n  }\n  if (accumulator === '') {\n    return toSingleQuotedString(input);\n  }\n  throw new Error(`malformed acc ${accumulator",[19485,21280],"/**\n * Main function that processes CSS values with limited computed style resolution.\n * Tokenizes CSS input, groups function tokens, and resolves CSS variables using predefined mappings.\n * Designed specifically for CSS content property values with browser compatibility considerations.\n * @param cssValue - CSS value string to process and resolve\n * @returns Processed CSS value with resolved variables and proper formatting\n * @throws {Error} When CSS tokenization fails or produces invalid token structure\n * @throws {UnrecognizedSingleCssValueError} When CSS variables or fallbacks are undefined\n * @throws {InCoherentCssValueError} When CSS value structure is malformed\n * @example\n * ```ts\n * const result = limitedGetComputedCss(\"var(--my-var, 'fallback')\");\n * // Returns resolved CSS value based on predefined variable mappings\n *\n * const result2 = limitedGetComputedCss(\"'static string'\");\n * // Returns \"'static string'\" (no processing needed)\n * ```\n * @remarks\n * Assumes we're parsing the most simplified representation of a CSS value, by the browser's getComputedValue algorithm.\n *\n * For example, it won't parse `calc(1px + 2px)`, but it will parse `1px` and `2px`.\n * This is a non-exhaustive list of the cases that aren't handled: ['calc', 'rgb', 'rgba', 'hsl', 'hsla', 'url', 'color', 'linear-gradient', 'radial-gradient', 'conic-gradient', 'repeating-linear-gradient', 'repeating-radial-gradient', 'repeating-conic-gradient'].\n * `var` is handled, however, because the browser's getComputedValue algorithm doesn't handle it in `content` values.\n *\n * Throws or gives incorrect results on malformed CSS values.\n * For examples of how browsers handle var resolution, fallback, erroring, and more in the content property, see: https://codepen.io/aquaticat/pen/dPPzEBX\n */",{"messageId":"10385","data":"10506","fix":"10507","desc":"10508"},{"messageId":"10385","data":"10509","fix":"10510","desc":"10511"},{"messageId":"10385","data":"10512","fix":"10513","desc":"10514"},[3164,3164],[3164,3164],[3389,3389],[3389,3389],[3587,3587],[3587,3587],[3786,3786],[3786,3786],[4430,4430],[4430,4430],{"messageId":"10385","data":"10515","fix":"10516","desc":"10517"},{"messageId":"10385","data":"10518","fix":"10519","desc":"10520"},{"messageId":"10385","data":"10521","fix":"10522","desc":"10523"},[4760,4760],[4760,4760],[4997,4997],[4997,4997],[5181,5181],[5181,5181],[5372,5372],[5372,5372],[5569,5569],[5569,5569],[5819,5819],[5819,5819],[6339,6339],[6339,6339],[6892,6892],[6892,6892],[8019,8019],[8019,8019],[9294,9294],[9294,9294],[10426,10426],[10426,10426],[10677,10677],[10677,10677],[11331,11331],[11331,11331],[11428,11428],[11428,11428],[11562,11562],[11562,11562],[11955,11955],[11955,11955],[12222,12222],[12222,12222],[13194,13194],[13194,13194],[13500,13500],[13500,13500],[14055,14055],[14055,14055],[14247,14247],[14247,14247],[14659,14659],[14659,14659],[14916,14916],[14916,14916],[15937,15937],[15937,15937],[16145,16145],[16145,16145],[17407,17407],[17407,17407],[17819,17819],[17819,17819],[0,540],"/**\n * Checks if a string is enclosed in single quotes.\n * Verifies that the string starts and ends with single quote characters (`'`).\n * @param input - String to check for single quote enclosure\n * @returns True if string starts and ends with single quotes\n * @example\n * ```ts\n * isSingleQuotedString(\"'hello'\"); // true\n * isSingleQuotedString('\"hello\"'); // false\n * isSingleQuotedString(\"hello\"); // false\n * isSingleQuotedString(\"'\"); // false (too short)\n * isSingleQuotedString(\"''\"); // true (empty quoted string)\n * ```\n */",[0,540],"/**\n * Checks if a string is enclosed in single quotes.\n * Verifies that the string starts and ends with single quote characters (`'`).\n *\n * @param input - String to check for single quote enclosure\n * @returns True if string starts and ends with single quotes\n * @example\n * ```ts\n * isSingleQuotedString(\"'hello'\"); // true\n * isSingleQuotedString('\"hello\"'); // false\n * isSingleQuotedString(\"hello\"); // false\n * isSingleQuotedString(\"'\"); // false (too short)\n * isSingleQuotedString(\"''\"); // true (empty quoted string)\n * ```\n */",[667,1207],"/**\n * Checks if a string is enclosed in double quotes.\n * Verifies that the string starts and ends with double quote characters (`\"`).\n * @param input - String to check for double quote enclosure\n * @returns True if string starts and ends with double quotes\n * @example\n * ```ts\n * isDoubleQuotedString('\"hello\"'); // true\n * isDoubleQuotedString(\"'hello'\"); // false\n * isDoubleQuotedString(\"hello\"); // false\n * isDoubleQuotedString('\"'); // false (too short)\n * isDoubleQuotedString('\"\"'); // true (empty quoted string)\n * ```\n */",[667,1207],"/**\n * Checks if a string is enclosed in double quotes.\n * Verifies that the string starts and ends with double quote characters (`\"`).\n *\n * @param input - String to check for double quote enclosure\n * @returns True if string starts and ends with double quotes\n * @example\n * ```ts\n * isDoubleQuotedString('\"hello\"'); // true\n * isDoubleQuotedString(\"'hello'\"); // false\n * isDoubleQuotedString(\"hello\"); // false\n * isDoubleQuotedString('\"'); // false (too short)\n * isDoubleQuotedString('\"\"'); // true (empty quoted string)\n * ```\n */",[1334,2053],"/**\n * Converts a double-quoted string to single-quoted format.\n * If the string is already single-quoted, returns it unchanged.\n * Handles escape sequence conversion from double-quote format to single-quote format.\n * @param input - String to convert to single-quoted format\n * @returns String converted to single quotes\n * @throws {Error} If input isn't properly quoted with single or double quotes\n * @example\n * ```ts\n * toSingleQuotedString('\"hello\"'); // \"'hello'\"\n * toSingleQuotedString(\"'world'\"); // \"'world'\" (unchanged)\n * toSingleQuotedString('\"say \\\\\"hi\\\\\"\"'); // \"'say \\\"hi\\\"'\"\n *\n * // Throws error for unquoted strings\n * toSingleQuotedString('hello'); // Error: Expected quoted string\n * ```\n */",[1334,2053],"/**\n * Converts a double-quoted string to single-quoted format.\n * If the string is already single-quoted, returns it unchanged.\n * Handles escape sequence conversion from double-quote format to single-quote format.\n *\n * @param input - String to convert to single-quoted format\n * @returns String converted to single quotes\n * @throws {Error} If input isn't properly quoted with single or double quotes\n * @example\n * ```ts\n * toSingleQuotedString('\"hello\"'); // \"'hello'\"\n * toSingleQuotedString(\"'world'\"); // \"'world'\" (unchanged)\n * toSingleQuotedString('\"say \\\\\"hi\\\\\"\"'); // \"'say \\\"hi\\\"'\"\n *\n * // Throws error for unquoted strings\n * toSingleQuotedString('hello'); // Error: Expected quoted string\n * ```\n */",[2571,3281],"/**\n * Converts a single-quoted string to double-quoted format.\n * If the string is already double-quoted, returns it unchanged.\n * Handles escape sequence conversion from single-quote format to double-quote format.\n * @param input - String to convert to double-quoted format\n * @returns String converted to double quotes\n * @throws {Error} If input isn't properly quoted with single or double quotes\n * @example\n * ```ts\n * toDoubleQuotedString(\"'hello'\"); // '\"hello\"'\n * toDoubleQuotedString('\"world\"'); // '\"world\"' (unchanged)\n * toDoubleQuotedString(\"'can\\\\'t'\"); // '\"can\\'t\"'\n *\n * // Throws error for unquoted strings\n * toDoubleQuotedString('hello'); // Error: Expected quoted string\n * ```\n */",[2571,3281],"/**\n * Converts a single-quoted string to double-quoted format.\n * If the string is already double-quoted, returns it unchanged.\n * Handles escape sequence conversion from single-quote format to double-quote format.\n *\n * @param input - String to convert to double-quoted format\n * @returns String converted to double quotes\n * @throws {Error} If input isn't properly quoted with single or double quotes\n * @example\n * ```ts\n * toDoubleQuotedString(\"'hello'\"); // '\"hello\"'\n * toDoubleQuotedString('\"world\"'); // '\"world\"' (unchanged)\n * toDoubleQuotedString(\"'can\\\\'t'\"); // '\"can\\'t\"'\n *\n * // Throws error for unquoted strings\n * toDoubleQuotedString('hello'); // Error: Expected quoted string\n * ```\n */",[0,678],"/**\n * Removes all occurrences of trimmer string from the end of the input string.\n *\n * Repeatedly removes the trimmer from the end until no more matches are found.\n * Case-sensitive matching is used for trimmer detection.\n * @param str - to trim from the end\n * @param trimmer - substring to remove from the end\n * @returns String with all trailing occurrences of trimmer removed\n * @throws {Error} If trimmer is an empty string\n * @example\n * ```ts\n * trimEndWith('StringSuffix', 'Suffix'); // 'String'\n * trimEndWith('TextSuffixSuffix', 'Suffix'); // 'Text'\n * trimEndWith('abcaaa', 'a'); // 'abc'\n * trimEndWith('String', 'prefix'); // 'String' (no change)\n * ```\n */",[0,678],"/**\n * Removes all occurrences of trimmer string from the end of the input string.\n *\n * Repeatedly removes the trimmer from the end until no more matches are found.\n * Case-sensitive matching is used for trimmer detection.\n *\n * @param str - to trim from the end\n * @param trimmer - substring to remove from the end\n * @returns String with all trailing occurrences of trimmer removed\n * @throws {Error} If trimmer is an empty string\n * @example\n * ```ts\n * trimEndWith('StringSuffix', 'Suffix'); // 'String'\n * trimEndWith('TextSuffixSuffix', 'Suffix'); // 'Text'\n * trimEndWith('abcaaa', 'a'); // 'abc'\n * trimEndWith('String', 'prefix'); // 'String' (no change)\n * ```\n */",[707,964],"string_: string, trimmer: string): string {\n  if (trimmer === '') {\n    throw new Error('trimmer cannot be empty');\n  }\n  if (!string_.endsWith(trimmer)) {\n    return string_;\n  }\n  const reversedTrimmer = [...trimmer].toReversed().join('');\n  let modifyingString = string_",[1221,1918],"/**\n * Removes all occurrences of trimmer string from the start of the input string.\n *\n * Repeatedly removes the trimmer from the beginning until no more matches are found.\n * Case-sensitive matching is used for trimmer detection.\n * @param str - to trim from the start\n * @param trimmer - substring to remove from the start\n * @returns String with all leading occurrences of trimmer removed\n * @throws {Error} If trimmer is an empty string\n * @example\n * ```ts\n * trimStartWith('prefixString', 'prefix'); // 'String'\n * trimStartWith('prefixprefixText', 'prefix'); // 'Text'\n * trimStartWith('aaaaabc', 'a'); // 'bc'\n * trimStartWith('String', 'suffix'); // 'String' (no change)\n * ```\n */",[1221,1918],"/**\n * Removes all occurrences of trimmer string from the start of the input string.\n *\n * Repeatedly removes the trimmer from the beginning until no more matches are found.\n * Case-sensitive matching is used for trimmer detection.\n *\n * @param str - to trim from the start\n * @param trimmer - substring to remove from the start\n * @returns String with all leading occurrences of trimmer removed\n * @throws {Error} If trimmer is an empty string\n * @example\n * ```ts\n * trimStartWith('prefixString', 'prefix'); // 'String'\n * trimStartWith('prefixprefixText', 'prefix'); // 'Text'\n * trimStartWith('aaaaabc', 'a'); // 'bc'\n * trimStartWith('String', 'suffix'); // 'String' (no change)\n * ```\n */",[1949,2146],"string_: string, trimmer: string): string {\n  if (trimmer === '') {\n    throw new Error('trimmer cannot be empty');\n  }\n  if (!string_.startsWith(trimmer)) {\n    return string_;\n  }\n  let modifyingString = string_",[95,368],"/**\n * Union type representing all lowercase English letters.\n * @example\n * ```ts\n * type FirstLetter = LowercaseLetters; // 'a' | 'b' | 'c' | ... | 'z'\n * const letter: LowercaseLetters = 'a'; // Valid\n * const invalid: LowercaseLetters = 'A'; // Type error\n * ```\n */",[610,883],"/**\n * Union type representing all uppercase English letters.\n * @example\n * ```ts\n * type FirstLetter = UppercaseLetters; // 'A' | 'B' | 'C' | ... | 'Z'\n * const letter: UppercaseLetters = 'A'; // Valid\n * const invalid: UppercaseLetters = 'a'; // Type error\n * ```\n */",[1125,1414],"/**\n * Fixed-length tuple containing all lowercase English letters in alphabetical order.\n * Useful for iteration and indexed access to letters.\n * @example\n * ```ts\n * type FirstLetter = LowercaseLettersTuple[0]; // 'a'\n * type LastLetter = LowercaseLettersTuple[25]; // 'z'\n * ```\n */",[1639,1928],"/**\n * Fixed-length tuple containing all uppercase English letters in alphabetical order.\n * Useful for iteration and indexed access to letters.\n * @example\n * ```ts\n * type FirstLetter = UppercaseLettersTuple[0]; // 'A'\n * type LastLetter = UppercaseLettersTuple[25]; // 'Z'\n * ```\n */",[2246,2472],"/**\n * Union type representing all single digit characters including zero.\n * @example\n * ```ts\n * const digit: DigitString = '5'; // Valid\n * const invalid: DigitString = '10'; // Type error - not a single digit\n * ```\n */",[2559,2858],"/**\n * Union type representing all single digit characters excluding zero.\n * Useful for constructing numbers that can't start with zero.\n * @example\n * ```ts\n * const nonZeroDigit: No0DigitString = '5'; // Valid\n * const invalid: No0DigitString = '0'; // Type error - zero not allowed\n * ```\n */",[3051,3371],"/**\n * Runtime array containing all lowercase English letters in alphabetical order.\n * Corresponds to the LowercaseLettersTuple type.\n * @example\n * ```ts\n * console.log(lowercaseLetters[0]); // 'a'\n * console.log(lowercaseLetters.length); // 26\n * lowercaseLetters.forEach(letter => console.log(letter));\n * ```\n */",[3493,3813],"/**\n * Runtime array containing all uppercase English letters in alphabetical order.\n * Corresponds to the UppercaseLettersTuple type.\n * @example\n * ```ts\n * console.log(uppercaseLetters[0]); // 'A'\n * console.log(uppercaseLetters.length); // 26\n * uppercaseLetters.forEach(letter => console.log(letter));\n * ```\n */",[4051,4427],"/**\n * Template literal type for two-letter language codes (ISO 639-1).\n * Represents short language codes like 'en', 'fr', 'de', etc.\n * @example\n * ```ts\n * const lang: ShortLangString = 'en'; // Valid\n * const invalid: ShortLangString = 'EN'; // Type error - must be lowercase\n * const tooLong: ShortLangString = 'eng'; // Type error - must be exactly 2 chars\n * ```\n */",[4501,4910],"/**\n * Template literal type for long language codes with region (like 'en-US').\n * Represents language-region combinations with exactly 5 characters.\n * Note: Uses intersection with length constraint due to TypeScript complexity limits.\n * @example\n * ```ts\n * const locale: LongLangString = 'en-US'; // Valid\n * const invalid: LongLangString = 'en-us'; // Type error - region must be uppercase\n * ```\n */",[5151,5462],"/**\n * Union type accepting both short and long language code formats.\n * Covers ISO 639-1 codes and language-region combinations.\n * @example\n * ```ts\n * const short: LangString = 'en'; // Valid\n * const long: LangString = 'en-US'; // Valid\n * const invalid: LangString = 'english'; // Type error\n * ```\n */",[5641,5914],"/**\n * Type alias for single digit integer strings.\n * Equivalent to DigitString but semantically represents integers.\n * @example\n * ```ts\n * const singleDigit: SingleDigitIntString = '7'; // Valid\n * const invalid: SingleDigitIntString = '12'; // Type error\n * ```\n */",[5964,6260],"/**\n * Template literal type for two-digit integer strings (10-99).\n * First digit must be non-zero to prevent leading zeros.\n * @example\n * ```ts\n * const twoDigit: DoubleDigitIntString = '42'; // Valid\n * const invalid: DoubleDigitIntString = '07'; // Type error - no leading zero\n * ```\n */",[6332,6636],"/**\n * Template literal type for three-digit integer strings (100-999).\n * First digit must be non-zero to prevent leading zeros.\n * @example\n * ```ts\n * const threeDigit: TripleDigitIntString = '123'; // Valid\n * const invalid: TripleDigitIntString = '012'; // Type error - no leading zero\n * ```\n */",[6722,7034],"/**\n * Template literal type for four-digit integer strings (1000-9999).\n * First digit must be non-zero to prevent leading zeros.\n * @example\n * ```ts\n * const fourDigit: QuadrupleDigitIntString = '2024'; // Valid\n * const invalid: QuadrupleDigitIntString = '0123'; // Type error - no leading zero\n * ```\n */",[7139,7536],"/**\n * Union type for integer strings with 1-4 digits.\n * Covers common integer ranges while maintaining type safety.\n * @example\n * ```ts\n * const small: OneToFourDigitsIntString = '5'; // Valid\n * const medium: OneToFourDigitsIntString = '42'; // Valid\n * const large: OneToFourDigitsIntString = '1234'; // Valid\n * const tooLarge: OneToFourDigitsIntString = '12345'; // Type error\n * ```\n */",[7800,8206],"/**\n * Branded type for positive integer strings including zero.\n * Uses brand to distinguish from regular strings at compile time.\n * @example\n * ```ts\n * const positive: PositiveIntString = '42' as PositiveIntString; // Valid\n * const zero: PositiveIntString = '0' as PositiveIntString; // Valid\n * // Runtime validation would be needed to ensure string is actually a valid positive integer\n * ```\n */",[8478,8966],"/**\n * Branded type for positive floating-point number strings.\n * Supports decimal numbers starting with zero or non-zero digits.\n * Uses brand to distinguish from regular strings at compile time.\n * @example\n * ```ts\n * const decimal: PositiveFloatString = '3.14' as PositiveFloatString; // Valid\n * const zeroDecimal: PositiveFloatString = '0.5' as PositiveFloatString; // Valid\n * // Runtime validation would be needed to ensure string is actually a valid positive float\n * ```\n */",[9144,9564],"/**\n * Branded type for negative integer strings including negative zero.\n * Uses brand to distinguish from regular strings at compile time.\n * @example\n * ```ts\n * const negative: NegativeIntString = '-42' as NegativeIntString; // Valid\n * const negZero: NegativeIntString = '-0' as NegativeIntString; // Valid\n * // Runtime validation would be needed to ensure string is actually a valid negative integer\n * ```\n */",[9684,10172],"/**\n * Branded type for negative floating-point number strings.\n * Supports negative decimal numbers with various formats.\n * Uses brand to distinguish from regular strings at compile time.\n * @example\n * ```ts\n * const negDecimal: NegativeFloatString = '-3.14' as NegativeFloatString; // Valid\n * const negZeroDecimal: NegativeFloatString = '-0.5' as NegativeFloatString; // Valid\n * // Runtime validation would be needed to ensure string is actually a valid negative float\n * ```\n */",[10495,10788],"/**\n * Union type for integer strings (positive and negative).\n * Combines both positive and negative integer string types.\n * @example\n * ```ts\n * const positive: IntString = '42' as PositiveIntString; // Valid\n * const negative: IntString = '-42' as NegativeIntString; // Valid\n * ```\n */",[10853,11170],"/**\n * Union type for floating-point number strings (positive and negative).\n * Combines both positive and negative float string types.\n * @example\n * ```ts\n * const positive: FloatString = '3.14' as PositiveFloatString; // Valid\n * const negative: FloatString = '-3.14' as NegativeFloatString; // Valid\n * ```\n */",[11241,11550],"/**\n * Union type for any numeric string representation.\n * Combines integers and floating-point numbers, both positive and negative.\n * @example\n * ```ts\n * const integer: NumberString = '42' as PositiveIntString; // Valid\n * const float: NumberString = '-3.14' as NegativeFloatString; // Valid\n * ```\n */",[11604,11933],"/**\n * Union type for positive numeric strings (integers and floats).\n * Combines positive integers and positive floating-point numbers.\n * @example\n * ```ts\n * const posInt: PositiveNumberString = '42' as PositiveIntString; // Valid\n * const posFloat: PositiveNumberString = '3.14' as PositiveFloatString; // Valid\n * ```\n */",[12011,12342],"/**\n * Union type for negative numeric strings (integers and floats).\n * Combines negative integers and negative floating-point numbers.\n * @example\n * ```ts\n * const negInt: NegativeNumberString = '-42' as NegativeIntString; // Valid\n * const negFloat: NegativeNumberString = '-3.14' as NegativeFloatString; // Valid\n * ```\n */",[186,247],"/**\n * Base function for synchronous string concatenation\n * @param separator\n * @param {...any} strings\n */",[186,247],"/**\n * Base function for synchronous string concatenation\n * @param separator\n * @param {...any} strings\n * @param separator\n * @param {...any} strings\n */",{"messageId":"10385","data":"10524","fix":"10525","desc":"10526"},{"messageId":"10385","data":"10527","fix":"10528","desc":"10529"},{"messageId":"10385","data":"10530","fix":"10531","desc":"10532"},[991,1053],"/**\n * Base function for asynchronous string concatenation\n * @param separator\n * @param {...any} strings\n */",[991,1053],"/**\n * Base function for asynchronous string concatenation\n * @param separator\n * @param {...any} strings\n * @param separator\n * @param {...any} strings\n */",{"messageId":"10385","data":"10533","fix":"10534","desc":"10526"},{"messageId":"10385","data":"10535","fix":"10536","desc":"10529"},{"messageId":"10385","data":"10537","fix":"10538","desc":"10532"},[2011,2880],"/**\n * Concatenates strings or an iterable of strings into a single string without any separator.\n * Supports both variadic string arguments and a single iterable of strings for flexible usage.\n * @param strings - Either multiple string arguments or a single iterable of strings to concatenate\n * @returns Single concatenated string with no separator between elements\n * @example\n * ```ts\n * // Variadic string arguments\n * const result1 = concatStrings('Hello', 'World', '!'); // \"HelloWorld!\"\n *\n * // Single iterable argument\n * const words = ['Hello', 'World', '!'];\n * const result2 = concatStrings(words); // \"HelloWorld!\"\n *\n * // Works with any iterable\n * const set = new Set(['a', 'b', 'c']);\n * const result3 = concatStrings(set); // \"abc\"\n *\n * // Empty cases\n * const empty1 = concatStrings(); // \"\"\n * const empty2 = concatStrings([]); // \"\"\n * ```\n */",[3134,4105],"/**\n * Concatenates strings or an iterable of strings into a single string with space separator.\n * Provides readable text output by joining elements with spaces, useful for sentence formation\n * and human-readable text generation.\n * @param strings - Either multiple string arguments or a single iterable of strings to concatenate\n * @returns Single concatenated string with space separator between elements\n * @example\n * ```ts\n * // Variadic string arguments\n * const sentence1 = concatStringsWithSpace('Hello', 'beautiful', 'world'); // \"Hello beautiful world\"\n *\n * // Single iterable argument\n * const words = ['The', 'quick', 'brown', 'fox'];\n * const sentence2 = concatStringsWithSpace(words); // \"The quick brown fox\"\n *\n * // Works with any iterable\n * const set = new Set(['one', 'two', 'three']);\n * const result = concatStringsWithSpace(set); // \"one two three\"\n *\n * // Single word\n * const single = concatStringsWithSpace('hello'); // \"hello\"\n * ```\n */",[4373,5490],"/**\n * Concatenates strings or an iterable of strings into a single string with newline separator.\n * Perfect for creating multi-line text, log entries, or formatted output where each element\n * should appear on its own line.\n * @param strings - Either multiple string arguments or a single iterable of strings to concatenate\n * @returns Single concatenated string with newline separator between elements\n * @example\n * ```ts\n * // Variadic string arguments\n * const multiline1 = concatStringsWithNewline('Line 1', 'Line 2', 'Line 3');\n * // \"Line 1\\nLine 2\\nLine 3\"\n *\n * // Single iterable argument\n * const lines = ['First line', 'Second line', 'Third line'];\n * const multiline2 = concatStringsWithNewline(lines);\n * // \"First line\\nSecond line\\nThird line\"\n *\n * // Log entries\n * const logEntries = ['INFO: App started', 'WARN: Low memory', 'ERROR: Connection failed'];\n * const logText = concatStringsWithNewline(logEntries);\n * // \"INFO: App started\\nWARN: Low memory\\nERROR: Connection failed\"\n *\n * // Single line\n * const single = concatStringsWithNewline('Only one line'); // \"Only one line\"\n * ```\n */",[5796,6823],"/**\n * Asynchronously concatenates strings or an iterable/async iterable of strings into a single string\n * without any separator. Handles both synchronous and asynchronous iterables, making it perfect\n * for processing streams of strings or async generators.\n * @param strings - Either multiple string arguments or a single iterable/async iterable of strings\n * @returns Promise resolving to single concatenated string with no separator between elements\n * @example\n * ```ts\n * // Variadic string arguments\n * const result1 = await concatStringsAsync('Hello', 'World', '!'); // \"HelloWorld!\"\n *\n * // Synchronous iterable\n * const words = ['Hello', 'World', '!'];\n * const result2 = await concatStringsAsync(words); // \"HelloWorld!\"\n *\n * // Asynchronous iterable\n * async function* asyncStrings() {\n *   yield 'Hello';\n *   yield 'World';\n *   yield '!';\n * }\n * const result3 = await concatStringsAsync(asyncStrings()); // \"HelloWorld!\"\n *\n * // Empty cases\n * const empty = await concatStringsAsync([]); // \"\"\n * ```\n */",[7147,8288],"/**\n * Asynchronously concatenates strings or an iterable/async iterable of strings into a single string\n * with space separator. Perfect for building sentences from async data sources or processing\n * streaming text data that needs space-separated formatting.\n * @param strings - Either multiple string arguments or a single iterable/async iterable of strings\n * @returns Promise resolving to single concatenated string with space separator between elements\n * @example\n * ```ts\n * // Variadic string arguments\n * const sentence1 = await concatStringsAsyncWithSpace('Hello', 'beautiful', 'world');\n * // \"Hello beautiful world\"\n *\n * // Synchronous iterable\n * const words = ['The', 'quick', 'brown', 'fox'];\n * const sentence2 = await concatStringsAsyncWithSpace(words); // \"The quick brown fox\"\n *\n * // Asynchronous iterable\n * async function* asyncWords() {\n *   yield 'Stream';\n *   yield 'processing';\n *   yield 'example';\n * }\n * const result = await concatStringsAsyncWithSpace(asyncWords()); // \"Stream processing example\"\n *\n * // Single word\n * const single = await concatStringsAsyncWithSpace('hello'); // \"hello\"\n * ```\n */",[8626,9939],"/**\n * Asynchronously concatenates strings or an iterable/async iterable of strings into a single string\n * with newline separator. Ideal for creating multi-line output from async data sources, processing\n * streaming log entries, or formatting async text data with line breaks.\n * @param strings - Either multiple string arguments or a single iterable/async iterable of strings\n * @returns Promise resolving to single concatenated string with newline separator between elements\n * @example\n * ```ts\n * // Variadic string arguments\n * const multiline1 = await concatStringsAsyncWithNewline('Line 1', 'Line 2', 'Line 3');\n * // \"Line 1\\nLine 2\\nLine 3\"\n *\n * // Synchronous iterable\n * const lines = ['First line', 'Second line', 'Third line'];\n * const multiline2 = await concatStringsAsyncWithNewline(lines);\n * // \"First line\\nSecond line\\nThird line\"\n *\n * // Asynchronous iterable - streaming log entries\n * async function* asyncLogs() {\n *   yield 'INFO: App started';\n *   yield 'WARN: Low memory';\n *   yield 'ERROR: Connection failed';\n * }\n * const logText = await concatStringsAsyncWithNewline(asyncLogs());\n * // \"INFO: App started\\nWARN: Low memory\\nERROR: Connection failed\"\n *\n * // Single line\n * const single = await concatStringsAsyncWithNewline('Only one line'); // \"Only one line\"\n * ```\n */",[2896,2896],[3962,3962],[5108,5108],[69,2032],"/**\n * Joins an async iterable of strings using the specified separator string, combining elements into a single string with the separator between each element.\n *\n * This async version handles both synchronous and asynchronous iterables, converting them to arrays before joining.\n * Provides efficient string concatenation for streaming data sources and async generators.\n * Arrays are handled with optimized direct joining without async conversion overhead.\n * @param separator - String to insert between each element during joining\n * @param strings - Async iterable containing strings to join together. Supports arrays, async generators, async iterables, and any MaybeAsyncIterable<string>\n * @returns Single string with all elements joined by separator, or empty string for empty iterables\n * @example\n * Basic async iterable joining:\n * ```ts\n * const words = ['hello', 'world', 'typescript'];\n * const result = await joinStringsAsync(' ', words);\n * console.log(result); // 'hello world typescript'\n * ```\n *\n * @example\n * Joining with custom separator:\n * ```ts\n * const items = ['apple', 'banana', 'cherry'];\n * const csv = await joinStringsAsync(', ', items);\n * console.log(csv); // 'apple, banana, cherry'\n * ```\n *\n * @example\n * Working with async generators:\n * ```ts\n * async function* generateParts() {\n *   yield 'part1';\n *   await new Promise(resolve => setTimeout(resolve, 10));\n *   yield 'part2';\n *   yield 'part3';\n * }\n *\n * const joined = await joinStringsAsync('-', generateParts());\n * console.log(joined); // 'part1-part2-part3'\n * ```\n *\n * @example\n * Building URLs or file paths:\n * ```ts\n * const pathSegments = ['api', 'users', '123', 'profile'];\n * const url = await joinStringsAsync('/', pathSegments);\n * console.log(url); // 'api/users/123/profile'\n * ```\n *\n * @example\n * Empty and single-element cases:\n * ```ts\n * await joinStringsAsync(',', []) // ''\n * await joinStringsAsync(',', ['only']) // 'only'\n * ```\n */",[69,2032],"/**\n * Joins an async iterable of strings using the specified separator string, combining elements into a single string with the separator between each element.\n *\n * This async version handles both synchronous and asynchronous iterables, converting them to arrays before joining.\n * Provides efficient string concatenation for streaming data sources and async generators.\n * Arrays are handled with optimized direct joining without async conversion overhead.\n *\n * @param separator - String to insert between each element during joining\n * @param strings - Async iterable containing strings to join together. Supports arrays, async generators, async iterables, and any MaybeAsyncIterable<string>\n * @returns Single string with all elements joined by separator, or empty string for empty iterables\n * @example\n * Basic async iterable joining:\n * ```ts\n * const words = ['hello', 'world', 'typescript'];\n * const result = await joinStringsAsync(' ', words);\n * console.log(result); // 'hello world typescript'\n * ```\n *\n * @example\n * Joining with custom separator:\n * ```ts\n * const items = ['apple', 'banana', 'cherry'];\n * const csv = await joinStringsAsync(', ', items);\n * console.log(csv); // 'apple, banana, cherry'\n * ```\n *\n * @example\n * Working with async generators:\n * ```ts\n * async function* generateParts() {\n *   yield 'part1';\n *   await new Promise(resolve => setTimeout(resolve, 10));\n *   yield 'part2';\n *   yield 'part3';\n * }\n *\n * const joined = await joinStringsAsync('-', generateParts());\n * console.log(joined); // 'part1-part2-part3'\n * ```\n *\n * @example\n * Building URLs or file paths:\n * ```ts\n * const pathSegments = ['api', 'users', '123', 'profile'];\n * const url = await joinStringsAsync('/', pathSegments);\n * console.log(url); // 'api/users/123/profile'\n * ```\n *\n * @example\n * Empty and single-element cases:\n * ```ts\n * await joinStringsAsync(',', []) // ''\n * await joinStringsAsync(',', ['only']) // 'only'\n * ```\n */",[2235,2309],"stringsArray: string[] = await Array.fromAsync(strings);\n  return stringsArray",[2330,4492],"/**\n * Joins a synchronous iterable of strings using the specified separator string, combining elements into a single string with the separator between each element.\n *\n * This synchronous version efficiently handles arrays, strings, Sets, and other synchronous iterables.\n * Arrays are processed with optimal direct joining for maximum performance.\n * Other iterables are converted to arrays before joining to leverage native Array.join() efficiency.\n * @param separator - String to insert between each element during joining\n * @param strings - Synchronous iterable containing strings to join together. Supports arrays, strings, Sets, generators, and any Iterable<string>\n * @returns Single string with all elements joined by separator, or empty string for empty iterables\n * @example\n * Basic array joining:\n * ```ts\n * const words = ['hello', 'world', 'typescript'];\n * const result = joinStrings(' ', words);\n * console.log(result); // 'hello world typescript'\n * ```\n *\n * @example\n * Joining characters from a string:\n * ```ts\n * const result = joinStrings('-', 'hello');\n * console.log(result); // 'h-e-l-l-o'\n * ```\n *\n * @example\n * Working with Sets for unique joining:\n * ```ts\n * const uniqueItems = new Set(['apple', 'banana', 'apple', 'cherry']);\n * const result = joinStrings(', ', uniqueItems);\n * console.log(result); // 'apple, banana, cherry'\n * ```\n *\n * @example\n * Building CSS class lists:\n * ```ts\n * const classes = ['btn', 'btn-primary', 'btn-large'];\n * const classList = joinStrings(' ', classes);\n * console.log(classList); // 'btn btn-primary btn-large'\n * ```\n *\n * @example\n * Using with generators for lazy evaluation:\n * ```ts\n * function* generateNumbers() {\n *   yield '1';\n *   yield '2';\n *   yield '3';\n * }\n *\n * const result = joinStrings(', ', generateNumbers());\n * console.log(result); // '1, 2, 3'\n * ```\n *\n * @example\n * Different separator styles:\n * ```ts\n * const items = ['red', 'green', 'blue'];\n * joinStrings(', ', items) // 'red, green, blue'\n * joinStrings(' | ', items) // 'red | green | blue'\n * joinStrings('', items) // 'redgreenblue'\n * joinStrings('\\n', items) // 'red\\ngreen\\nblue'\n * ```\n */",[2330,4492],"/**\n * Joins a synchronous iterable of strings using the specified separator string, combining elements into a single string with the separator between each element.\n *\n * This synchronous version efficiently handles arrays, strings, Sets, and other synchronous iterables.\n * Arrays are processed with optimal direct joining for maximum performance.\n * Other iterables are converted to arrays before joining to leverage native Array.join() efficiency.\n *\n * @param separator - String to insert between each element during joining\n * @param strings - Synchronous iterable containing strings to join together. Supports arrays, strings, Sets, generators, and any Iterable<string>\n * @returns Single string with all elements joined by separator, or empty string for empty iterables\n * @example\n * Basic array joining:\n * ```ts\n * const words = ['hello', 'world', 'typescript'];\n * const result = joinStrings(' ', words);\n * console.log(result); // 'hello world typescript'\n * ```\n *\n * @example\n * Joining characters from a string:\n * ```ts\n * const result = joinStrings('-', 'hello');\n * console.log(result); // 'h-e-l-l-o'\n * ```\n *\n * @example\n * Working with Sets for unique joining:\n * ```ts\n * const uniqueItems = new Set(['apple', 'banana', 'apple', 'cherry']);\n * const result = joinStrings(', ', uniqueItems);\n * console.log(result); // 'apple, banana, cherry'\n * ```\n *\n * @example\n * Building CSS class lists:\n * ```ts\n * const classes = ['btn', 'btn-primary', 'btn-large'];\n * const classList = joinStrings(' ', classes);\n * console.log(classList); // 'btn btn-primary btn-large'\n * ```\n *\n * @example\n * Using with generators for lazy evaluation:\n * ```ts\n * function* generateNumbers() {\n *   yield '1';\n *   yield '2';\n *   yield '3';\n * }\n *\n * const result = joinStrings(', ', generateNumbers());\n * console.log(result); // '1, 2, 3'\n * ```\n *\n * @example\n * Different separator styles:\n * ```ts\n * const items = ['red', 'green', 'blue'];\n * joinStrings(', ', items) // 'red, green, blue'\n * joinStrings(' | ', items) // 'red | green | blue'\n * joinStrings('', items) // 'redgreenblue'\n * joinStrings('\\n', items) // 'red\\ngreen\\nblue'\n * ```\n */",[4665,4721],"stringsArray: string[] = [...strings];\n  return stringsArray",[252,265],"joinStrings",[367,367],[367,367],[532,532],[532,532],[934,952],"joinStringsAsync",[1060,1060],[1060,1060],[1375,1375],[1375,1375],[1759,1759],[1759,1759],[2015,2015],[2015,2015],[204,243],[1366,1411],[1450,1452],[104,104],{"messageId":"10399","fix":"10539","desc":"10401"},[209,209],[124,134],"constant",[251,251],[251,251],[475,475],[475,475],[686,686],[686,686],[763,763],[763,763],[789,798],[850,850],[850,850],[881,895],[1033,1033],[1033,1033],[1188,1188],[1188,1188],[1420,1420],[1420,1420],[1605,1605],[1605,1605],[120,126],"echo",[212,212],[212,212],[460,460],[460,460],[594,594],[594,594],[717,717],[717,717],[749,758],[880,880],[880,880],[1026,1026],[1026,1026],[1322,1322],[1322,1322],[1784,1784],[1784,1784],[123,133],"identity",[391,400],[435,449],[1762,1762],[1762,1762],{"messageId":"10385","data":"10540","fix":"10541","desc":"10542"},{"messageId":"10385","data":"10543","fix":"10544","desc":"10545"},{"messageId":"10385","data":"10546","fix":"10547","desc":"10548"},[2469,2469],[2469,2469],{"messageId":"10385","data":"10549","fix":"10550","desc":"10542"},{"messageId":"10385","data":"10551","fix":"10552","desc":"10545"},{"messageId":"10385","data":"10553","fix":"10554","desc":"10548"},[2728,2728],[2728,2728],[2861,2861],[335,345],"toExport",[1318,1318],[1318,1318],[1452,1452],[1452,1452],[2215,2215],[2215,2215],[2350,2350],[2350,2350],[2495,2495],[2495,2495],[3155,3155],[3155,3155],[3294,3294],[3294,3294],[3462,3462],[3462,3462],[3793,3793],[3793,3793],[3944,3944],[3944,3944],[4377,4377],[4377,4377],[4708,4708],[4708,4708],[5042,5042],[5042,5042],[5325,5325],[5325,5325],[5540,5540],[5540,5540],[5980,5980],[5980,5980],[7489,7489],[7489,7489],[8761,8761],[8761,8761],[9039,9039],[9039,9039],[9262,9262],[9262,9262],[9360,9360],[9360,9360],[9622,9622],[9622,9622],[10015,10015],[10015,10015],[10295,10295],[10295,10295],[10885,10885],[10885,10885],[11755,11755],[11755,11755],[12643,12643],[12643,12643],[121,129],"typeOf",[2726,2726],[2726,2726],[2794,2794],[2794,2794],[2997,2997],[2997,2997],[3071,3071],[3071,3071],[3577,3577],[3577,3577],[4959,4959],[4959,4959],[5228,5228],[5228,5228],[103,993],"/**\n * Conditionally applies a transformation function to a value if it meets a predicate.\n * If the predicate returns true for the given value, it calls the `onTrue` function with the value and returns its result.\n * Otherwise, it returns the original value.\n * @template T - Type of input value.\n * @template R - Type of result if the transformation applies.\n * @param predicate - Determines if the `onTrue` function should execute based on input `value`.\n * @param onTrue - Transformation function applied to `value` if `predicate` returns true.\n * @param value - Value to conditionally transform.\n * @returns Result of `onTrue(value)` if `predicate(value)` is true; otherwise, original `value`.\n * @example\n * ```ts\n * const doubleIfEven = (n: number) => when((x: number) => x % 2 === 0, (x: number) => x * 2, n);\n * doubleIfEven(4); // => 8\n * doubleIfEven(3); // => 3\n * ```\n */",[103,993],"/**\n * Conditionally applies a transformation function to a value if it meets a predicate.\n * If the predicate returns true for the given value, it calls the `onTrue` function with the value and returns its result.\n * Otherwise, it returns the original value.\n *\n * @template T - Type of input value.\n * @template R - Type of result if the transformation applies.\n * @param predicate - Determines if the `onTrue` function should execute based on input `value`.\n * @param onTrue - Transformation function applied to `value` if `predicate` returns true.\n * @param value - Value to conditionally transform.\n * @returns Result of `onTrue(value)` if `predicate(value)` is true; otherwise, original `value`.\n * @example\n * ```ts\n * const doubleIfEven = (n: number) => when((x: number) => x % 2 === 0, (x: number) => x * 2, n);\n * doubleIfEven(4); // => 8\n * doubleIfEven(3); // => 3\n * ```\n */",[1277,2373],"/**\n * Asynchronously conditionally applies a transformation function to a value if it meets a predicate.\n * If the predicate (which can be async) returns true for the given value,\n * it calls the `onTrue` function (which can be async) with the value and returns its result.\n * Otherwise, it returns the original value.\n * It awaits all operations.\n * @template T - Type of input value.\n * @template R - Type of result if the transformation applies.\n * @param predicate - Async or sync function determining if `onTrue` should execute based on input `value`.\n * @param onTrue - Async or sync transformation function applied to `value` if `predicate` returns true.\n * @param value - Value to be conditionally transformed.\n * @returns Result of `onTrue(value)` if `predicate(value)` is true; otherwise, original `value`.\n * @example\n * ```ts\n * const doubleIfEvenAsync = async (n: number) =>\n *   whenAsync(\n *     async (x: number) => x % 2 === 0,\n *     async (x: number) => x * 2,\n *     n,\n *   );\n *\n * await doubleIfEvenAsync(4); // => 8\n * await doubleIfEvenAsync(3); // => 3\n * ```\n */",[1277,2373],"/**\n * Asynchronously conditionally applies a transformation function to a value if it meets a predicate.\n * If the predicate (which can be async) returns true for the given value,\n * it calls the `onTrue` function (which can be async) with the value and returns its result.\n * Otherwise, it returns the original value.\n * It awaits all operations.\n *\n * @template T - Type of input value.\n * @template R - Type of result if the transformation applies.\n * @param predicate - Async or sync function determining if `onTrue` should execute based on input `value`.\n * @param onTrue - Async or sync transformation function applied to `value` if `predicate` returns true.\n * @param value - Value to be conditionally transformed.\n * @returns Result of `onTrue(value)` if `predicate(value)` is true; otherwise, original `value`.\n * @example\n * ```ts\n * const doubleIfEvenAsync = async (n: number) =>\n *   whenAsync(\n *     async (x: number) => x % 2 === 0,\n *     async (x: number) => x * 2,\n *     n,\n *   );\n *\n * await doubleIfEvenAsync(4); // => 8\n * await doubleIfEvenAsync(3); // => 3\n * ```\n */",[306,312],"when",[540,540],[540,540],[795,795],[795,795],[3198,3209],"whenAsync",[3510,3510],[3510,3510],[3838,3838],[3838,3838],[0,1365],"/**\n * Automatically redirects to a target URL found in an anchor element with class `redirectingTo`.\n *\n * Searches for an anchor element (`<a>`) with CSS class `redirectingTo` and schedules\n * a redirect to its `href` URL after a specified delay. Uses `location.replace()` to\n * replace the current page in browser history, preventing back navigation to the\n * original page. Useful for implementing delayed redirects, landing pages, or\n * automatic navigation flows.\n * @param delayTime - Time in milliseconds to wait before redirecting. Defaults to 5000ms (5 seconds).\n * @returns Nothing (void). Either schedules a redirect or does nothing if no target element is found.\n * @example\n * ```ts\n * // HTML: <a href=\"https://example.com/dashboard\" class=\"redirectingTo\">Go to Dashboard</a>\n *\n * // Redirect after default 5 seconds\n * onLoadRedirectingTo();\n *\n * // Redirect after 3 seconds\n * onLoadRedirectingTo(3000);\n *\n * // Redirect immediately (not recommended for UX)\n * onLoadRedirectingTo(0);\n *\n * // Common use case: Landing page with delayed redirect\n * // HTML: <a href=\"/welcome\" class=\"redirectingTo\">Redirecting to welcome page...</a>\n * onLoadRedirectingTo(2000); // 2 second delay\n *\n * // No redirect occurs if no element with class \"redirectingTo\" exists\n * onLoadRedirectingTo(1000); // Safe to call even without target element\n * ```\n */",[0,1283],"/**\n * Sets CSS properties on the `:root` element based on URL query parameters.\n *\n * For each URL query parameter, the parameter name becomes the CSS property name,\n * and its value becomes the CSS property value. This enables dynamic styling\n * through URL parameters, useful for theming, debugging, or configuration.\n * @param allowedProperties - Optional iterable of CSS property names to filter which\n *   parameters are processed. If provided, only properties listed in this iterable\n *   will be applied from the URL parameters. If omitted, all URL parameters are\n *   processed as CSS properties.\n * @returns Nothing (void). Modifies the document's root element styles directly.\n * @example\n * ```ts\n * // URL: https://example.com/?background-color=red&font-size=16px&margin=10px\n *\n * // Apply all URL parameters as CSS properties\n * onLoadSetCssFromUrlParams();\n * // Sets: --background-color: red, --font-size: 16px, --margin: 10px\n *\n * // Apply only specific allowed properties\n * onLoadSetCssFromUrlParams(['background-color', 'font-size']);\n * // Sets: --background-color: red, --font-size: 16px (margin ignored)\n *\n * // With no matching parameters\n * onLoadSetCssFromUrlParams(['non-existent-prop']);\n * // Sets: nothing (no matching parameters found)\n * ```\n */",[1380,1782],"parameters = new URLSearchParams(globalThis.location.search);\n\n  if (allowedProperties) {\n    const allowedSet = new Set(allowedProperties);\n    for (const [key, value] of parameters.entries()) {\n      if (allowedSet.has(key)) {\n        document.documentElement.style.setProperty(key, value);\n      }\n    }\n  } else {\n    // No allowedProperties, so process all parameters\n    for (const [key, value] of parameters",[550,561],"emptyPath",[906,906],[906,906],[962,962],[962,962],[1470,1470],[1470,1470],[1516,1516],[1516,1516],[1987,1987],[1987,1987],[2043,2043],[2043,2043],[2102,2112],"emptyDir",[2532,2532],[2532,2532],[2578,2578],[2578,2578],[3058,3058],[3058,3058],[3104,3104],[3104,3104],[3484,3484],[3484,3484],[3534,3534],[3534,3534],[3600,3611],"emptyFile",[3945,3945],[3945,3945],[4001,4001],[4001,4001],[4324,4324],[4324,4324],[4380,4380],[4380,4380],[4842,4842],[4842,4842],[4898,4898],[4898,4898],[5349,5349],[5349,5349],[5405,5405],[5405,5405],[5464,5487],"removeEmptyFilesInDir",[6047,6047],[6047,6047],[6093,6093],[6093,6093],[6609,6609],[6609,6609],[6655,6655],[6655,6655],[6838,6838],[6838,6838],[7328,7328],[7328,7328],[7374,7374],[7374,7374],[7715,7715],[7715,7715],[7761,7761],[7761,7761],[541,555],"readTextFile",[82,1807],"/**\n * Wraps a function to create a new function that accepts more arguments than the original.\n * The wrapper calls the original function with only the number of arguments it formally declares.\n * Any additional arguments provided to the wrapper are ignored.\n *\n * This is useful for adapting functions to contexts where they might receive more arguments\n * than they handle, such as in some event listener patterns or callback scenarios (for example, with `Array.prototype.map`).\n * @template F - Type of the function to wrap. Must be a function type.\n * @param fn - Original function to wrap.\n * @returns New function that takes potentially more arguments than `fn` but calls `fn`\n * with its expected arguments, ignoring any extras. The returned function will require\n * at least as many arguments as `fn` itself.\n * @example\n * ```ts\n * function sum(a: number, b: number): number {\n *   return a + b;\n * }\n *\n * const lenientSum = ignoreExtraArgs(sum);\n *\n * lenientSum(1, 2); // => 3 (calls sum(1, 2))\n * lenientSum(1, 2, 3, 4); // => 3 (calls sum(1, 2), ignores 3 and 4)\n * // lenientSum(1) would be a TypeScript error, as `sum` requires two arguments.\n *\n * // Example with parseInt, which expects 1 or 2 arguments (string, radix).\n * // Number.parseInt.length is 2.\n * const strictParseInt = (s: string) => Number.parseInt(s, 10); // strictParseInt.length is 1\n * const lenientParseInt = ignoreExtraArgs(strictParseInt);\n *\n * const strings = ['10', '20', '30'];\n * // Using lenientParseInt with map, which passes (element, index, array)\n * const numbers = strings.map(lenientParseInt); // => [10, 20, 30]\n * // lenientParseInt('10', 0, strings) calls strictParseInt('10'), ignoring index and array.\n * ```\n */",[82,1807],"/**\n * Wraps a function to create a new function that accepts more arguments than the original.\n * The wrapper calls the original function with only the number of arguments it formally declares.\n * Any additional arguments provided to the wrapper are ignored.\n *\n * This is useful for adapting functions to contexts where they might receive more arguments\n * than they handle, such as in some event listener patterns or callback scenarios (for example, with `Array.prototype.map`).\n *\n * @template F - Type of the function to wrap. Must be a function type.\n * @param fn - Original function to wrap.\n * @returns New function that takes potentially more arguments than `fn` but calls `fn`\n * with its expected arguments, ignoring any extras. The returned function will require\n * at least as many arguments as `fn` itself.\n * @example\n * ```ts\n * function sum(a: number, b: number): number {\n *   return a + b;\n * }\n *\n * const lenientSum = ignoreExtraArgs(sum);\n *\n * lenientSum(1, 2); // => 3 (calls sum(1, 2))\n * lenientSum(1, 2, 3, 4); // => 3 (calls sum(1, 2), ignores 3 and 4)\n * // lenientSum(1) would be a TypeScript error, as `sum` requires two arguments.\n *\n * // Example with parseInt, which expects 1 or 2 arguments (string, radix).\n * // Number.parseInt.length is 2.\n * const strictParseInt = (s: string) => Number.parseInt(s, 10); // strictParseInt.length is 1\n * const lenientParseInt = ignoreExtraArgs(strictParseInt);\n *\n * const strings = ['10', '20', '30'];\n * // Using lenientParseInt with map, which passes (element, index, array)\n * const numbers = strings.map(lenientParseInt); // => [10, 20, 30]\n * // lenientParseInt('10', 0, strings) calls strictParseInt('10'), ignoring index and array.\n * ```\n */",[1860,1864],[1899,1906],"allArguments",[2019,2371],"expectedArgumentCount = fn.length;\n\n  return function(...allArgs: [...Parameters<F>, ...any[]]): ReturnType<F> {\n    // The type `[...Parameters<F>, ...any[]]` ensures `allArgs` is an array-like tuple.\n    // We cast to `any[]` for `slice` compatibility if needed, though tuples have slice.\n    const argsForFn = (allArgs as any[]).slice(0, expectedArgumentCount",[2071,2335],"allArguments: [...Parameters<F>, ...any[]]): ReturnType<F> {\n    // The type `[...Parameters<F>, ...any[]]` ensures `allArgs` is an array-like tuple.\n    // We cast to `any[]` for `slice` compatibility if needed, though tuples have slice.\n    const argsForFn = (allArguments",[2315,2417],"argumentsForFn = (allArgs as any[]).slice(0, expectedArgCount) as Parameters<F>;\n    return fn(...argumentsForFn",[162,181],"everyFailIterable",[363,363],[363,363],[578,578],[578,578],[764,764],[764,764],[973,973],[973,973],[1557,1557],[1557,1557],[1922,1922],[1922,1922],[2129,2129],[2129,2129],[2297,2297],[2297,2297],[2445,2445],[2445,2445],[2800,2810],"x",[2822,2822],[2822,2822],[2919,2943],"everyFailIterableAsync",[3142,3142],[3142,3142],[3374,3374],[3374,3374],[3577,3577],[3577,3577],[3878,3878],[3878,3878],[4088,4088],[4088,4088],[4892,4892],[4892,4892],[5344,5344],[5344,5344],[5438,5438],[5630,5630],[5630,5630],[5767,5767],[5767,5767],[6172,6172],[6172,6172],[6963,6963],[6963,6963],[268,286],"noneFailIterable",[468,468],[468,468],[690,690],[690,690],[877,877],[877,877],[1457,1457],[1457,1457],[1618,1618],[1618,1618],[1912,1912],[1912,1912],[2204,2204],[2204,2204],[2404,2404],[2404,2404],[2557,2557],[2557,2557],[2747,2747],[2747,2747],[2878,2878],[2878,2878],[3154,3154],[3154,3154],[3622,3622],[3622,3622],[3873,3873],[3873,3873],[4029,4029],[4029,4029],[4240,4263],"noneFailIterableAsync",[4493,4493],[4493,4493],[4763,4763],[4763,4763],[4998,4998],[4998,4998],[5482,5482],[5677,5677],[5677,5677],[6069,6069],[6069,6069],[6389,6389],[6389,6389],[6718,6718],[6718,6718],[6973,6973],[6973,6973],[7450,7450],[7764,7764],[7764,7764],[8384,8384],[8384,8384],[8549,8549],[3941,4517],"sourceDir = join(packageRoot, 'src');\nconst scriptPaths = await glob('moon.*.ts', {\n  cwd: sourceDir,\n});\n\nif (scriptPaths.length === 0) {\n  console.log('No moon.*.ts scripts found to compile');\n} else {\n  console.log(`Found ${scriptPaths.length} script(s) to compile:`);\n  scriptPaths.forEach((script) => {\n    console.log(`  - ${basename(script)}`);\n  });\n  console.log('');\n\n  // Create all compilation tasks\n  const compilationTasks: Promise<void>[] = [];\n\n  for (const scriptPath of scriptPaths) {\n    // Construct full path to the script\n    const fullScriptPath = join(sourceDir",{"messageId":"10555","fix":"10556","data":"10557","desc":"10558"},[1393,1633],"context) => {\n    const { allowFailure, shell } = context.values;\n\n    // ctx.rest contains arguments after --\n    if (context.rest.length === 0) {\n      throw new Error('Error: No command specified after --');\n    }\n\n    const [command, ...args] = context",[1622,1799],"arguments_] = ctx.rest;\n\n    if (!command) {\n      throw new Error('command not found!');\n    }\n\n    try {\n      // Execute the command with nano-spawn\n      await spawn(command, arguments_",[-1,0],"#!/usr/bin/env node\n",[720,817],"browserDirectories = ['chromium-', 'firefox-', 'webkit-'];\n      for (const browserPrefix of browserDirectories",[802,812],"package_ => package_",[833,843],[1208,1340],"package_ of packages) {\n    const packagePath = join(valePath, package_);\n    if (!existsSync(packagePath)) {\n      console.log(`Package ${package_",[171,185],"unwrapResult",[356,356],[356,356],[799,799],[799,799],[910,910],[910,910],[1056,1065],[1126,1140],[1611,1611],[1611,1611],[1957,1957],[1957,1957],[2594,2594],[2594,2594],[3262,3262],[3262,3262],[3776,3776],[3776,3776],[3962,3962],[3962,3962],[4369,4369],[4369,4369],[4887,4887],[4887,4887],[5335,5335],[5335,5335],[5686,5686],[5686,5686],[6190,6190],[6190,6190],[6382,6382],[6382,6382],[6541,6541],[6541,6541],[6985,6985],[6985,6985],[7743,7743],[7743,7743],[223,262],[220,259],"consistentDestructuringSuggest",{"expression":"10559","property":"10560"},{"range":"10561","text":"10562"},"Replace `variable.valuesByMode` with destructured property `valuesByMode`.",{"expression":"10559","property":"10560"},{"range":"10563","text":"10564"},{"expression":"10565","property":"10566"},{"range":"10567","text":"10566"},"Replace `variable.name` with destructured property `name`.",{"expression":"10568","property":"10569"},{"range":"10570","text":"10571"},"Replace `this._valuesByModeName` with destructured property `_valuesByModeName`.",{"expression":"10572","property":"10573"},{"range":"10574","text":"10575"},"Replace `this._generatedCss` with destructured property `_generatedCss`.","floatingFixVoid",{"range":"10576","text":"10577"},"Add void operator to ignore.","floatingFixAwait",{"range":"10578","text":"10579"},"Add await operator.","replace-with-name",{"name":"10022","method":"10580","parameters":"10581"},{"range":"10582","text":"10583"},"Replace function `toExport` with `… => toExport(element)`.",{"name":"10022","method":"10580","parameters":"10584"},{"range":"10585","text":"10586"},"Replace function `toExport` with `… => toExport(element, index)`.",{"name":"10022","method":"10580","parameters":"10587"},{"range":"10588","text":"10589"},"Replace function `toExport` with `… => toExport(element, index, array)`.","suggestRemoveOptionalChain",{"range":"10590","text":"10591"},"Remove unnecessary optional chain",{"range":"10592","text":"10591"},"removeAsync",{"range":"10593","text":"10594"},"Remove 'async'.",{"range":"10595","text":"10596"},{"range":"10597","text":"10577"},{"range":"10598","text":"10579"},{"range":"10599","text":"10577"},{"range":"10600","text":"10579"},{"range":"10601","text":"10577"},{"range":"10602","text":"10579"},{"range":"10603","text":"10577"},{"range":"10604","text":"10579"},{"range":"10605","text":"10577"},{"range":"10606","text":"10579"},"directive","Safe enough.","Necessary somehow.","unknown is required.",{"name":"10607","method":"10580","parameters":"10581"},{"range":"10608","text":"10609"},"Replace function `mappingFn` with `… => mappingFn(element)`.",{"name":"10607","method":"10580","parameters":"10584"},{"range":"10610","text":"10611"},"Replace function `mappingFn` with `… => mappingFn(element, index)`.",{"name":"10607","method":"10580","parameters":"10587"},{"range":"10612","text":"10613"},"Replace function `mappingFn` with `… => mappingFn(element, index, array)`.",{"name":"10614","method":"10615","parameters":"10616"},{"range":"10617","text":"10618"},"Replace function `reducer` with `… => reducer(accumulator, element)`.",{"name":"10614","method":"10615","parameters":"10619"},{"range":"10620","text":"10621"},"Replace function `reducer` with `… => reducer(accumulator, element, index)`.",{"name":"10614","method":"10615","parameters":"10622"},{"range":"10623","text":"10624"},"Replace function `reducer` with `… => reducer(accumulator, element, index, array)`.",{"name":"10625","method":"10626","parameters":"10581"},{"range":"10627","text":"10628"},"Replace function `predicateKeeps` with `… => predicateKeeps(element)`.",{"name":"10625","method":"10626","parameters":"10584"},{"range":"10629","text":"10630"},"Replace function `predicateKeeps` with `… => predicateKeeps(element, index)`.",{"name":"10625","method":"10626","parameters":"10587"},{"range":"10631","text":"10632"},"Replace function `predicateKeeps` with `… => predicateKeeps(element, index, array)`.",{"name":"10625","method":"10626","parameters":"10581"},{"range":"10633","text":"10628"},{"name":"10625","method":"10626","parameters":"10584"},{"range":"10634","text":"10630"},{"name":"10625","method":"10626","parameters":"10587"},{"range":"10635","text":"10632"},{"range":"10636","text":"10637"},"Not really a misused promise. An async function assigned to a variable.","Good enough for defaultConsoleFormatter in logtape library, good enough for the library.",{"range":"10638","text":"10639"},"To keep the signature consistent, we've to make it an async function.",{"name":"10640","method":"10615","parameters":"10616"},{"range":"10641","text":"10642"},"Replace function `addTwoNumbers` with `… => addTwoNumbers(accumulator, element)`.",{"name":"10640","method":"10615","parameters":"10619"},{"range":"10643","text":"10644"},"Replace function `addTwoNumbers` with `… => addTwoNumbers(accumulator, element, index)`.",{"name":"10640","method":"10615","parameters":"10622"},{"range":"10645","text":"10646"},"Replace function `addTwoNumbers` with `… => addTwoNumbers(accumulator, element, index, array)`.",{"name":"10647","method":"10615","parameters":"10616"},{"range":"10648","text":"10649"},"Replace function `addTwoBigints` with `… => addTwoBigints(accumulator, element)`.",{"name":"10647","method":"10615","parameters":"10619"},{"range":"10650","text":"10651"},"Replace function `addTwoBigints` with `… => addTwoBigints(accumulator, element, index)`.",{"name":"10647","method":"10615","parameters":"10622"},{"range":"10652","text":"10653"},"Replace function `addTwoBigints` with `… => addTwoBigints(accumulator, element, index, array)`.",{"name":"10654","method":"10615","parameters":"10616"},{"range":"10655","text":"10656"},"Replace function `addTwoNumerics` with `… => addTwoNumerics(accumulator, element)`.",{"name":"10654","method":"10615","parameters":"10619"},{"range":"10657","text":"10658"},"Replace function `addTwoNumerics` with `… => addTwoNumerics(accumulator, element, index)`.",{"name":"10654","method":"10615","parameters":"10622"},{"range":"10659","text":"10660"},"Replace function `addTwoNumerics` with `… => addTwoNumerics(accumulator, element, index, array)`.",{"name":"10661","method":"10662","parameters":"10581"},{"range":"10663","text":"10664"},"Replace function `isNumeric` with `… => isNumeric(element)`.",{"name":"10661","method":"10662","parameters":"10584"},{"range":"10665","text":"10666"},"Replace function `isNumeric` with `… => isNumeric(element, index)`.",{"name":"10661","method":"10662","parameters":"10587"},{"range":"10667","text":"10668"},"Replace function `isNumeric` with `… => isNumeric(element, index, array)`.",{"name":"10669","method":"10670","parameters":"10581"},{"range":"10671","text":"10672"},"Replace function `isDigitString` with `… => isDigitString(element)`.",{"name":"10669","method":"10670","parameters":"10584"},{"range":"10673","text":"10674"},"Replace function `isDigitString` with `… => isDigitString(element, index)`.",{"name":"10669","method":"10670","parameters":"10587"},{"range":"10675","text":"10676"},"Replace function `isDigitString` with `… => isDigitString(element, index, array)`.",{"name":"10614","method":"10615","parameters":"10616"},{"range":"10677","text":"10618"},{"name":"10614","method":"10615","parameters":"10619"},{"range":"10678","text":"10621"},{"name":"10614","method":"10615","parameters":"10622"},{"range":"10679","text":"10624"},{"name":"10680","method":"10615","parameters":"10616"},{"range":"10681","text":"10682"},"Replace function `lGCC_reduceTokenToString` with `… => lGCC_reduceTokenToString(accumulator, element)`.",{"name":"10680","method":"10615","parameters":"10619"},{"range":"10683","text":"10684"},"Replace function `lGCC_reduceTokenToString` with `… => lGCC_reduceTokenToString(accumulator, element, index)`.",{"name":"10680","method":"10615","parameters":"10622"},{"range":"10685","text":"10686"},"Replace function `lGCC_reduceTokenToString` with `… => lGCC_reduceTokenToString(accumulator, element, index, array)`.",{"name":"10687","method":"10688","parameters":"10581"},{"range":"10689","text":"10690"},"Replace function `isTokenEOF` with `… => isTokenEOF(element)`.",{"name":"10687","method":"10688","parameters":"10584"},{"range":"10691","text":"10692"},"Replace function `isTokenEOF` with `… => isTokenEOF(element, index)`.",{"name":"10687","method":"10688","parameters":"10587"},{"range":"10693","text":"10694"},"Replace function `isTokenEOF` with `… => isTokenEOF(element, index, array)`.",{"name":"10695","method":"10670","parameters":"10581"},{"range":"10696","text":"10697"},"Replace function `isString` with `… => isString(element)`.",{"name":"10695","method":"10670","parameters":"10584"},{"range":"10698","text":"10699"},"Replace function `isString` with `… => isString(element, index)`.",{"name":"10695","method":"10670","parameters":"10587"},{"range":"10700","text":"10701"},"Replace function `isString` with `… => isString(element, index, array)`.",{"name":"10695","method":"10670","parameters":"10581"},{"range":"10702","text":"10697"},{"name":"10695","method":"10670","parameters":"10584"},{"range":"10703","text":"10699"},{"name":"10695","method":"10670","parameters":"10587"},{"range":"10704","text":"10701"},{"range":"10705","text":"8093"},{"name":"10005","method":"10580","parameters":"10581"},{"range":"10706","text":"10707"},"Replace function `identity` with `… => identity(element)`.",{"name":"10005","method":"10580","parameters":"10584"},{"range":"10708","text":"10709"},"Replace function `identity` with `… => identity(element, index)`.",{"name":"10005","method":"10580","parameters":"10587"},{"range":"10710","text":"10711"},"Replace function `identity` with `… => identity(element, index, array)`.",{"name":"10005","method":"10662","parameters":"10581"},{"range":"10712","text":"10707"},{"name":"10005","method":"10662","parameters":"10584"},{"range":"10713","text":"10709"},{"name":"10005","method":"10662","parameters":"10587"},{"range":"10714","text":"10711"},"add-await",{"range":"10715","text":"10579"},{"name":"10716"},"Insert `await`.","variable.valuesByMode","valuesByMode",[2628,2924],", valuesByMode }:\n      Variable = variable;\n\n    const collection: VariableCollection = collections.find(function collectionIdMatching(\n      collection: VariableCollection,\n    ): boolean {\n      return collection.id === collectionId;\n    })!;\n\n    const modeIds: string[] = Object.keys(valuesByMode",[2628,3272],", valuesByMode }:\n      Variable = variable;\n\n    const collection: VariableCollection = collections.find(function collectionIdMatching(\n      collection: VariableCollection,\n    ): boolean {\n      return collection.id === collectionId;\n    })!;\n\n    const modeIds: string[] = Object.keys(variable.valuesByMode);\n\n    const modeNames: string[] = modeIds.map(\n      function modeIdToName(modeIdToFind: string): string {\n        return collection.modes.find(function findModeId({ modeId }): boolean {\n          return modeIdToFind === modeId;\n        })!\n          .name;\n      },\n    );\n\n    const values: VariableValue[] = Object.values(valuesByMode","variable.name","name",[3778,3791],"this._valuesByModeName","_valuesByModeName",[4281,4533],", _valuesByModeName } = this;\n    const descriptionMatchesGeneratedCss = /`(?<code>.+)`/\n      .exec(\n        description,\n      );\n    this._generatedCss = descriptionMatchesGeneratedCss\n      ?.groups\n      ?.code\n      ?? Object\n        .entries(_valuesByModeName","this._generatedCss","_generatedCss",[4281,4898],", _generatedCss } = this;\n    const descriptionMatchesGeneratedCss = /`(?<code>.+)`/\n      .exec(\n        description,\n      );\n    this._generatedCss = descriptionMatchesGeneratedCss\n      ?.groups\n      ?.code\n      ?? Object\n        .entries(this._valuesByModeName)\n        .map(function generateCssForMode(\n          [modeName, value]: [string, VariableValue],\n        ): string {\n          return `[data-mode=\"${modeName}\"] { --${name}: ${\n            getCssValueOfFigmaVariableValue(\n              value,\n              resolvedType,\n            )\n          }; }`;\n        })\n        .join('\\n');\n\n    return _generatedCss",[10078,10078],"void ",[10078,10078],"await ","map","element",[2917,2925],"(element) => toExport(element)","element, index",[2917,2925],"(element, index) => toExport(element, index)","element, index, array",[2917,2925],"(element, index, array) => toExport(element, index, array)",[12923,12925],".",[12933,12935],[5124,5172],"function* gen0to999Async(): Generator",[6985,7038],"function* gen0to999errorAsync(): Generator",[1866,1866],[1866,1866],[3678,3678],[3678,3678],[3205,3205],[3205,3205],[3257,3257],[3257,3257],[3702,3702],[3702,3702],"mappingFn",[11086,11095],"(element) => mappingFn(element)",[11086,11095],"(element, index) => mappingFn(element, index)",[11086,11095],"(element, index, array) => mappingFn(element, index, array)","reducer","reduce","accumulator, element",[6682,6689],"(accumulator, element) => reducer(accumulator, element)","accumulator, element, index",[6682,6689],"(accumulator, element, index) => reducer(accumulator, element, index)","accumulator, element, index, array",[6682,6689],"(accumulator, element, index, array) => reducer(accumulator, element, index, array)","predicateKeeps","findIndex",[2938,2952],"(element) => predicateKeeps(element)",[2938,2952],"(element, index) => predicateKeeps(element, index)",[2938,2952],"(element, index, array) => predicateKeeps(element, index, array)",[3064,3078],[3064,3078],[3064,3078],[1875,1928],"function disposeSessionStorage(): void",[6703,6752],"function disposeMemorySink(): void","addTwoNumbers",[2074,2087],"(accumulator, element) => addTwoNumbers(accumulator, element)",[2074,2087],"(accumulator, element, index) => addTwoNumbers(accumulator, element, index)",[2074,2087],"(accumulator, element, index, array) => addTwoNumbers(accumulator, element, index, array)","addTwoBigints",[4308,4321],"(accumulator, element) => addTwoBigints(accumulator, element)",[4308,4321],"(accumulator, element, index) => addTwoBigints(accumulator, element, index)",[4308,4321],"(accumulator, element, index, array) => addTwoBigints(accumulator, element, index, array)","addTwoNumerics",[7571,7585],"(accumulator, element) => addTwoNumerics(accumulator, element)",[7571,7585],"(accumulator, element, index) => addTwoNumerics(accumulator, element, index)",[7571,7585],"(accumulator, element, index, array) => addTwoNumerics(accumulator, element, index, array)","isNumeric","filter",[13259,13268],"(element) => isNumeric(element)",[13259,13268],"(element, index) => isNumeric(element, index)",[13259,13268],"(element, index, array) => isNumeric(element, index, array)","isDigitString","every",[6812,6825],"(element) => isDigitString(element)",[6812,6825],"(element, index) => isDigitString(element, index)",[6812,6825],"(element, index, array) => isDigitString(element, index, array)",[8189,8196],[8189,8196],[8189,8196],"lGCC_reduceTokenToString",[21738,21762],"(accumulator, element) => lGCC_reduceTokenToString(accumulator, element)",[21738,21762],"(accumulator, element, index) => lGCC_reduceTokenToString(accumulator, element, index)",[21738,21762],"(accumulator, element, index, array) => lGCC_reduceTokenToString(accumulator, element, index, array)","isTokenEOF","some",[4454,4464],"(element) => isTokenEOF(element)",[4454,4464],"(element, index) => isTokenEOF(element, index)",[4454,4464],"(element, index, array) => isTokenEOF(element, index, array)","isString",[689,697],"(element) => isString(element)",[689,697],"(element, index) => isString(element, index)",[689,697],"(element, index, array) => isString(element, index, array)",[1541,1549],[1541,1549],[1541,1549],[111,117],[2459,2467],"(element) => identity(element)",[2459,2467],"(element, index) => identity(element, index)",[2459,2467],"(element, index, array) => identity(element, index, array)",[2718,2726],[2718,2726],[2718,2726],[4596,4596],"compileScript"]