$schema: 'https://moonrepo.dev/schemas/project.json'

language: 'typescript'

tasks:
  # Template for lint/format tasks
  # Note: cache is disabled due to Moon's cache overhead with filesystem-intensive
  # operations and tasks with large numbers of inputs/outputs from expanded globs
  _lintFormatBase:
    inputs:
    - '@group(allSources)'
    - '@group(configs)'
    options:
      cache: false
      unixShell: 'bash'
      windowsShell: 'bash'
      shell: true

  build:
    deps:
    - '#package:js'
    - 'types'
    # #package:types executes tsc from inside every package.
    # - '#package:types'
    options:
      outputStyle: buffer-only-failure

  buildAllowFailure:
    deps:
    # Shouldn't fail anyway.
    - '#package:js'
    - 'typesAllowFailure'
    options:
      outputStyle: buffer-only-failure

  buildAndTest:
    deps:
    - build
    - test
    options:
      runDepsInParallel: false

  buildAndTestWatch:
    local: true
    deps:
    - '#package:jsWatch'
    - 'typesWatch'
    - testUnitWatch
    - testBrowserWatch

  buildWatch:
    deps:
    - '#package:jsWatch'
    - 'typesWatch'
    local: true

  bunCompile:
    command: 'bun packages/module/es/src/moon.bunCompile.ts'
    inputs:
    - 'packages/module/es/src/moon.*.ts'
    - 'packages/module/es/src/cli.*.ts'
    outputs:
    - 'packages/module/es/dist/final/moon.*'
    - 'packages/module/es/dist/final/cli.*'
    options:
      # cache doesn't really work for this, only adds extra time at the end.
      cache: false

  checkBuild:
    command: 'bun packages/module/es/src/moon.checkBuild.ts'

  checkDependencies:
    command: 'bun packages/module/es/src/moon.checkDependencies.ts'

  checkGitHooks:
    command: 'bun packages/module/es/src/moon.checkGitHooks.ts'

  checkTools:
    command: 'bun packages/module/es/src/moon.checkTools.ts'

  # Formatting tasks organized for maximum parallelization
  format:
    deps:
    - formatAllFileTypes
    - formatLanguageSpecific
    options:
      runDepsInParallel: false

  # First pass: dprint formats all file types (ts, astro, css, html, yaml)
  formatAllFileTypes:
    deps:
    - formatDprint

  formatDprint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- dprint fmt'

  formatEslint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- eslint --cache --fix'

  # Second pass: Language-specific formatters run in parallel
  formatLanguageSpecific:
    deps:
    - formatTypeScript # TS formatters (sequential)
    - formatStylelint # CSS formatter (parallel with TS)
  # Default is parallel, so formatTypeScript and formatStylelint run simultaneously

  formatOxlint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- oxlint --fix'

  formatStylelint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- stylelint --ignore-path .gitignore --fix "**/*.{css,astro,html}"'

  # TypeScript formatters must run sequentially (both process .ts files)
  formatTypeScript:
    deps:
    - formatOxlint
    - formatEslint
    options:
      runDepsInParallel: false

  # Claude Code conversation indexing tasks
  indexClaude:
    deps:
    - indexClaudeMessages
    - indexClaudeMcpLogs
    options:
      cache: false

  indexClaudeMcpLogs:
    command: 'bun packages/module/es/src/moon.index-claude-mcp-logs.ts'
    options:
      cache: false

  indexClaudeMessages:
    command: 'bun packages/module/es/src/moon.index-claude-user-messages.ts'
    options:
      cache: false

  # Linting tasks
  lint:
    deps:
    - lintEslint
    - lintStylelint
    - lintDprint
    - lintOxlint

  lintDprint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- dprint check --list-different'

  lintEslint:
    extends: '_lintFormatBase'
    command: 'bun run packages/module/es/src/cli.command.ts --allowFailure -- eslint --cache'

  lintOxlint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- oxlint'

  lintStylelint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- stylelint --ignore-path .gitignore "**/*.{css,astro,html}"'

  pnpmVersionCheck:
    command: 'pnpm version'

  prepare:
    deps:
    - preparePlaywright

  prepareAllowFailure:
    deps:
    - preparePlaywrightAllowFailure

  # Complete setup for fresh clones - prepare environment and build all artifacts
  # Note: Moon automatically syncs TypeScript project references during build
  prepareAndBuild:
    deps:
    - prepare
    - build
    options:
      runDepsInParallel: false

  prepareAndBuildAllowFailure:
    deps:
    - prepareAllowFailure
    - buildAllowFailure
    options:
      runDepsInParallel: false

  preparePlaywright:
    command: 'bun packages/module/es/src/moon.preparePlaywright.ts'

  preparePlaywrightAllowFailure:
    extends: _shell
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure --timeout 30000 --shell -- bun packages/module/es/src/moon.preparePlaywright.ts'

  # Manually run the same checks as the pre-push hook
  # Use this when:
  #   - You want to test what the pre-push hook will check before pushing
  #   - You've disabled hooks temporarily and want to manually verify
  #   - You're debugging why a push was blocked
  # Don't use this for:
  #   - Full validation before pushing (use 'validate' instead)
  #   - As part of CI (use individual tasks)
  prepush:
    deps:
    - lint
    - test
    # Lint and test can run in parallel since they don't depend on each other

  start:
    deps:
    - startCaddy
    - '#package:start'
    local: true

  startCaddy:
    command: 'caddy run --config Caddyfile --adapter caddyfile'
    local: true

  test:
    deps:
    - testUnit
    - testBrowser
    inputs:
    - '@group(allTests)'
    - '@group(allDists)'

  # Browser test runner
  # Note: cache disabled for same reasons as testUnit - large input sets
  testBrowser:
    command: 'vitest run --config vitest.browser.config.ts'
    inputs:
    - '@group(allBrowserTests)'
    - '@group(allDists)'
    options:
      cache: false

  testBrowserWatch:
    command: 'vitest watch --config vitest.browser.config.ts'
    preset: watcher
    inputs:
    - '@group(allBrowserTests)'
    - '@group(allDists)'

  # Unit test runner
  # Note: cache disabled to avoid Moon's cache overhead with large input sets
  # The @group(allUnitTests) and @group(allDists) expand to many files,
  # causing significant cache computation time that exceeds test execution time
  testUnit:
    command: 'vitest run --config vitest.unit.config.ts'
    inputs:
    - '@group(allUnitTests)'
    - '@group(allDists)'
    options:
      cache: false

  testUnitWatch:
    command: 'vitest watch --config vitest.unit.config.ts'
    local: true
    inputs:
    - '@group(allUnitTests)'
    - '@group(allDists)'

  testWatch:
    deps:
    - testUnitWatch
    - testBrowserWatch
    local: true
    inputs:
    - '@group(allTests)'
    - '@group(allDists)'

  types:
    # --verbose is too chatty
    command: 'tsc --build'
    inputs:
    - '@group(allSources)'
    options:
      outputStyle: buffer-only-failure
      # tsc uses its own cache
      cache: false

  typesAllowFailure:
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure --shell -- tsc --build'
    options:
      outputStyle: buffer-only-failure
      cache: false

  typesWatch:
    command: 'tsc --watch'
    local: true

  # Comprehensive validation: format, build, then test
  # Use this when:
  #   - Before pushing to ensure your branch is fully ready
  #   - After large refactoring to verify everything still works
  #   - Before opening a PR to avoid CI failures
  # Don't use this for:
  #   - Every single commit (too slow, use pre-push hook instead)
  #   - In CI pipelines (use individual tasks for better parallelization)
  validate:
    deps:
    - format
    - build
    - test
    options:
      runDepsInParallel: false # Must be sequential: format → build → test

  # Validate that the development environment is properly set up
  validateSetup:
    deps:
    - checkTools
    - checkDependencies
    - checkBuild
    - checkGitHooks

tags:
- noTypescript
- 'noJs'
