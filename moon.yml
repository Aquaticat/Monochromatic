$schema: 'https://moonrepo.dev/schemas/project.json'

language: 'typescript'

tasks:
  # CACHING STRATEGY:
  # Moon's cache is disabled for the following task categories:
  # 1. Tools with their own cache: ESLint (.eslintcache), TypeScript (tsconfig.tsbuildinfo), dprint
  # 2. Filesystem-heavy operations: lint, format, test tasks with large input/output sets
  # 3. Non-reproducible builds: Bun compilation doesn't produce deterministic outputs
  # 4. One-off operations: check*, validate*, prepush - tasks run infrequently where cache maintenance overhead isn't worth it
  # For these tasks, Moon's cache computation time often exceeds actual execution time.
  #
  # IMPORTANT: Tasks with cache:false or preset:server don't need inputs/outputs defined
  # as Moon only uses these for cache computation. We remove them for clarity.
  build:
    deps:
    # Moon would auto skip projects that doesn't have the `js` task defined.
    - '#package:js'
    - 'types'
    inputs:
    - '@group(allConfigs)'
    - '@group(allSources)'
    outputs:
    - '@group(allDists)'
    options:
      internal: false

  buildAllowFailure:
    deps:
    # Shouldn't fail anyway.
    - '#package:js'
    - 'typesAllowFailure'
    inputs:
    - '@group(allConfigs)'
    - '@group(allSources)'
    outputs:
    - '@group(allDists)'
    options:
      # Used in CI.
      internal: false

  buildAndTest:
    deps:
    - build
    - test
    options:
      cache: false
      runDepsInParallel: false # Tests depend on build artifacts being complete
      internal: false
    inputs:
    - '@group(allConfigs)'
    - '@group(allSources)'
    outputs:
    - '@group(allDists)'

  buildAndTestWatch:
    extends: _server
    deps:
    - '#package:jsWatch'
    - 'typesWatch'
    - testUnitWatch
    - testBrowserWatch
    options:
      internal: false

  buildWatch:
    deps:
    - '#package:jsWatch'
    - 'typesWatch'
    extends: _server
    options:
      internal: false

  bunCompile:
    command: 'bun packages/module/es/src/moon.bunCompile.ts'
    options:
      # Bun doesn't do reproducible builds - we always want the freshest compilation
      cache: false
      internal: false

  checkBuild:
    command: 'bun packages/module/es/src/moon.checkBuild.ts'
    options:
      # One-off operation - cache overhead not worth it
      cache: false

  checkDependencies:
    command: 'bun packages/module/es/src/moon.checkDependencies.ts'
    options:
      # One-off operation - cache overhead not worth it
      cache: false

  checkGitHooks:
    command: 'bun packages/module/es/src/moon.checkGitHooks.ts'
    options:
      # One-off operation - cache overhead not worth it
      cache: false

  checkTools:
    command: 'bun packages/module/es/src/moon.checkTools.ts'
    options:
      # One-off operation - cache overhead not worth it
      cache: false

  check:
    deps:
    - checkBuild
    - checkDependencies
    - checkGitHooks
    - checkTools
    options:
      cache: false
      internal: false

  # Formatting tasks organized for maximum parallelization
  # IMPORTANT: Two-pass formatting strategy to avoid conflicts:
  # 1. formatAllFileTypes - dprint handles all file types in one pass
  # 2. formatLanguageSpecific - Language-specific formatters run after
  # This prevents race conditions when multiple formatters target the same files
  format:
    extends: _lintFormatBase
    deps:
    - formatAllFileTypes
    - formatLanguageSpecific
    options:
      runDepsInParallel: false

  # First pass: dprint formats all file types (ts, astro, css, html, yaml)
  formatAllFileTypes:
    extends: _lintFormatBase

    deps:
    - formatDprint

  formatDprint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- dprint fmt'

  formatEslint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- eslint --cache --fix'

  # Second pass: Language-specific formatters run in parallel
  formatLanguageSpecific:
    extends: _lintFormatBase

    deps:
    - formatTypeScript # TS formatters (sequential)
    - formatStylelint # CSS formatter (parallel with TS)
  # Default is parallel, so formatTypeScript and formatStylelint run simultaneously

  formatOxlint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- oxlint --fix'

  formatStylelint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- stylelint --ignore-path .gitignore --fix "**/*.{css,astro,html}"'

  # TypeScript formatters must run sequentially (both process .ts files)
  # IMPORTANT: oxlint and eslint both modify TypeScript files
  # Running them in parallel causes file conflicts and race conditions
  # Order matters: oxlint runs first, then eslint applies additional rules
  formatTypeScript:
    deps:
    - formatOxlint
    - formatEslint
    options:
      runDepsInParallel: false

  # Linting tasks
  lint:
    deps:
    - lintEslint
    - lintStylelint
    - lintDprint
    - lintOxlint

  lintDprint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- dprint check --list-different'

  lintEslint:
    extends: '_lintFormatBase'
    command: "pnpx eslint"

  lintOxlint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- oxlint'

  lintStylelint:
    extends: '_lintFormatBase'
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure -- stylelint --ignore-path .gitignore "**/*.{css,astro,html}"'

  pnpmVersionCheck:
    command: 'pnpm version'
    options:
      # One-off check, no outputs
      cache: false
      internal: false

  prepare:
    deps:
    - preparePlaywright
    options:
      # One-off setup operation
      cache: false

  prepareAllowFailure:
    deps:
    - preparePlaywrightAllowFailure
    options:
      # One-off setup operation
      cache: false

  # Complete setup for fresh clones - prepare environment and build all artifacts
  # Note: Moon automatically syncs TypeScript project references during build
  prepareAndBuild:
    deps:
    - prepare
    - build
    options:
      runDepsInParallel: false
      cache: false

  prepareAndBuildAllowFailure:
    deps:
    - prepareAllowFailure
    - buildAllowFailure
    options:
      runDepsInParallel: false
      cache: false

  preparePlaywright:
    command: 'bun packages/module/es/src/moon.preparePlaywright.ts'
    options:
      # One-off setup operation
      cache: false

  preparePlaywrightAllowFailure:
    extends: _shell
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure --timeout 30000 --shell -- bun packages/module/es/src/moon.preparePlaywright.ts'
    options:
      # One-off setup operation
      cache: false

  start:
    deps:
    # FIXME: This never gets triggered.
    #  Research more on how to run multiple watchers at the same time in Moon.
    #  Found out I was doing it correctly. Probably a Caddy bug.
    #  Will file a bug report later.
    - startCaddy
    - '#package:start'
    extends: _server

  startCaddy:
    command: 'caddy run --config Caddyfile --adapter caddyfile'
    extends: _server

  test:
    deps:
    - testUnit
    - testBrowser
    options:
      # Aggregator of cache-disabled test tasks
      cache: false
      internal: false

  # Browser test runner
  testBrowser:
    command: 'vitest run --config vitest.browser.config.ts'
    options:
      # Cache disabled because:
      # 1. Vitest has its own cache and watch mechanisms
      # 2. Filesystem-intensive with large input/output sets
      # 3. Moon's cache overhead exceeds test execution time
      cache: false
      internal: false

  testBrowserWatch:
    command: 'vitest watch --config vitest.browser.config.ts'
    extends: _server

  # Unit test runner
  testUnit:
    command: 'vitest run --config vitest.unit.config.ts'
    options:
      # Cache disabled because:
      # 1. Vitest has its own cache and watch mechanisms
      # 2. Filesystem-intensive with large input/output sets
      # 3. Moon's cache overhead exceeds test execution time
      cache: false
      internal: false

  testUnitWatch:
    command: 'vitest watch --config vitest.unit.config.ts'
    extends: _server

  testWatch:
    deps:
    - testUnitWatch
    - testBrowserWatch
    extends: _server

  types:
    # --verbose is too chatty
    command: 'tsc --build'
    options:
      # tsc uses its own cache
      cache: false
      internal: false

  typesAllowFailure:
    command: 'bun packages/module/es/src/cli.command.ts --allowFailure --shell -- tsc --build'
    options:
      cache: false

  typesWatch:
    command: 'tsc --watch'
    extends: _server

  # Comprehensive validation: format, build, then test
  # Use this when:
  #   - Before pushing to ensure your branch is fully ready
  #   - After large refactoring to verify everything still works
  #   - Before opening a PR to avoid CI failures
  # Don't use this for:
  #   - Every single commit (too slow, use pre-push hook instead)
  #   - In CI pipelines (use individual tasks for better parallelization)
  #
  # This task runs sequentially by design:
  # 1. format - Ensures consistent code style before building
  # 2. build - Compiles all packages (some formatters may need build artifacts)
  # 3. test - Runs tests against the built code
  # The sequential order is critical because:
  # - Formatting may change source files that affect the build
  # - Tests depend on having up-to-date build artifacts
  # - Running in parallel would cause race conditions and unpredictable failures
  validate:
    deps:
    - format
    - build
    - test
    options:
      runDepsInParallel: false # Must be sequential: format → build → test
      # One-off operation run before major commits - cache overhead not worth it
      cache: false
      internal: false

  # Validate that the development environment is properly set up
  validateSetup:
    deps:
    - checkTools
    - checkDependencies
    - checkBuild
    - checkGitHooks
    options:
      # One-off operation for environment validation - cache overhead not worth it
      cache: false
      internal: false

tags:
- noop
